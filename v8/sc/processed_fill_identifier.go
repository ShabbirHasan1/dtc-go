// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const ProcessedFillIdentifierSize = 13

//     Size                   uint16  = ProcessedFillIdentifierSize  (13)
//     Type                   uint16  = PROCESSED_FILL_IDENTIFIER  (10132)
//     BaseSize               uint16  = ProcessedFillIdentifierSize  (13)
//     FillIdentifier         string  = ""
//     IsSnapshot             bool    = false
//     IsFirstMessageInBatch  bool    = false
//     IsLastMessageInBatch   bool    = false
var _ProcessedFillIdentifierDefault = []byte{13, 0, 148, 39, 13, 0, 0, 0, 0, 0, 0, 0, 0}

type ProcessedFillIdentifier struct {
	p message.VLS
}

func NewProcessedFillIdentifierFrom(b []byte) ProcessedFillIdentifier {
	return ProcessedFillIdentifier{p: message.NewVLS(b)}
}

func WrapProcessedFillIdentifier(b []byte) ProcessedFillIdentifier {
	return ProcessedFillIdentifier{p: message.WrapVLS(b)}
}

func NewProcessedFillIdentifier() *ProcessedFillIdentifier {
	return &ProcessedFillIdentifier{p: message.NewVLS(_ProcessedFillIdentifierDefault)}
}

func ParseProcessedFillIdentifier(b []byte) (ProcessedFillIdentifier, error) {
	if len(b) < 6 {
		return ProcessedFillIdentifier{}, message.ErrShortBuffer
	}
	m := WrapProcessedFillIdentifier(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ProcessedFillIdentifier{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return ProcessedFillIdentifier{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 13 {
		newSize := len(b) + (13 - baseSize)
		if newSize > message.MaxSize {
			return ProcessedFillIdentifier{}, message.ErrOverflow
		}
		clone := ProcessedFillIdentifier{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _ProcessedFillIdentifierDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(13 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m ProcessedFillIdentifier) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ProcessedFillIdentifier) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m ProcessedFillIdentifier) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// FillIdentifier
func (m ProcessedFillIdentifier) FillIdentifier() string {
	return m.p.StringVLS(6)
}

// IsSnapshot
func (m ProcessedFillIdentifier) IsSnapshot() bool {
	return m.p.Bool(10)
}

// IsFirstMessageInBatch
func (m ProcessedFillIdentifier) IsFirstMessageInBatch() bool {
	return m.p.Bool(11)
}

// IsLastMessageInBatch
func (m ProcessedFillIdentifier) IsLastMessageInBatch() bool {
	return m.p.Bool(12)
}

// SetFillIdentifier
func (m *ProcessedFillIdentifier) SetFillIdentifier(value string) *ProcessedFillIdentifier {
	m.p.SetStringVLS(6, value)
	return m
}

// SetIsSnapshot
func (m *ProcessedFillIdentifier) SetIsSnapshot(value bool) *ProcessedFillIdentifier {
	m.p.SetBool(10, value)
	return m
}

// SetIsFirstMessageInBatch
func (m *ProcessedFillIdentifier) SetIsFirstMessageInBatch(value bool) *ProcessedFillIdentifier {
	m.p.SetBool(11, value)
	return m
}

// SetIsLastMessageInBatch
func (m *ProcessedFillIdentifier) SetIsLastMessageInBatch(value bool) *ProcessedFillIdentifier {
	m.p.SetBool(12, value)
	return m
}

func (m ProcessedFillIdentifier) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ProcessedFillIdentifier) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m ProcessedFillIdentifier) Copy(to ProcessedFillIdentifier) {
	to.SetFillIdentifier(m.FillIdentifier())
	to.SetIsSnapshot(m.IsSnapshot())
	to.SetIsFirstMessageInBatch(m.IsFirstMessageInBatch())
	to.SetIsLastMessageInBatch(m.IsLastMessageInBatch())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ProcessedFillIdentifier) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10132)
	w.StringField("FillIdentifier", m.FillIdentifier())
	w.BoolField("IsSnapshot", m.IsSnapshot())
	w.BoolField("IsFirstMessageInBatch", m.IsFirstMessageInBatch())
	w.BoolField("IsLastMessageInBatch", m.IsLastMessageInBatch())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ProcessedFillIdentifier) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10132 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "FillIdentifier":
			m.SetFillIdentifier(r.String())
		case "IsSnapshot":
			m.SetIsSnapshot(r.Bool())
		case "IsFirstMessageInBatch":
			m.SetIsFirstMessageInBatch(r.Bool())
		case "IsLastMessageInBatch":
			m.SetIsLastMessageInBatch(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ProcessedFillIdentifier) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
