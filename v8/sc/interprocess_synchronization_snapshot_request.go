// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const InterprocessSynchronizationSnapshotRequestSize = 8

//     Size       uint16  = InterprocessSynchronizationSnapshotRequestSize  (8)
//     Type       uint16  = INTERPROCESS_SYNCHRONIZATION_SNAPSHOT_REQUEST  (10133)
//     RequestID  uint32  = 0
var _InterprocessSynchronizationSnapshotRequestDefault = []byte{8, 0, 149, 39, 0, 0, 0, 0}

type InterprocessSynchronizationSnapshotRequest struct {
	p message.Fixed
}

func NewInterprocessSynchronizationSnapshotRequestFrom(b []byte) InterprocessSynchronizationSnapshotRequest {
	return InterprocessSynchronizationSnapshotRequest{p: message.NewFixed(b)}
}

func WrapInterprocessSynchronizationSnapshotRequest(b []byte) InterprocessSynchronizationSnapshotRequest {
	return InterprocessSynchronizationSnapshotRequest{p: message.WrapFixed(b)}
}

func NewInterprocessSynchronizationSnapshotRequest() *InterprocessSynchronizationSnapshotRequest {
	return &InterprocessSynchronizationSnapshotRequest{p: message.NewFixed(_InterprocessSynchronizationSnapshotRequestDefault)}
}

func ParseInterprocessSynchronizationSnapshotRequest(b []byte) (InterprocessSynchronizationSnapshotRequest, error) {
	if len(b) < 4 {
		return InterprocessSynchronizationSnapshotRequest{}, message.ErrShortBuffer
	}
	m := WrapInterprocessSynchronizationSnapshotRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return InterprocessSynchronizationSnapshotRequest{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return InterprocessSynchronizationSnapshotRequest{}, message.ErrBaseSizeOverflow
	}
	if size < 8 {
		clone := *NewInterprocessSynchronizationSnapshotRequest()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _InterprocessSynchronizationSnapshotRequestDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m InterprocessSynchronizationSnapshotRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m InterprocessSynchronizationSnapshotRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m InterprocessSynchronizationSnapshotRequest) RequestID() uint32 {
	return m.p.Uint32LE(4)
}

// SetRequestID
func (m *InterprocessSynchronizationSnapshotRequest) SetRequestID(value uint32) *InterprocessSynchronizationSnapshotRequest {
	m.p.SetUint32LE(4, value)
	return m
}

func (m InterprocessSynchronizationSnapshotRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m InterprocessSynchronizationSnapshotRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m InterprocessSynchronizationSnapshotRequest) Copy(to InterprocessSynchronizationSnapshotRequest) {
	to.SetRequestID(m.RequestID())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m InterprocessSynchronizationSnapshotRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10133)
	w.Uint32Field("RequestID", m.RequestID())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *InterprocessSynchronizationSnapshotRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10133 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *InterprocessSynchronizationSnapshotRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
