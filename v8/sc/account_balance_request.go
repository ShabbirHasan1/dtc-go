// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const AccountBalanceRequestSize = 16

const AccountBalanceRequestFixedSize = 40

//     Size          uint16  = AccountBalanceRequestSize  (16)
//     Type          uint16  = ACCOUNT_BALANCE_REQUEST  (601)
//     BaseSize      uint16  = AccountBalanceRequestSize  (16)
//     RequestID     int32   = 0
//     TradeAccount  string  = ""
var _AccountBalanceRequestDefault = []byte{16, 0, 89, 2, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size          uint16      = AccountBalanceRequestFixedSize  (40)
//     Type          uint16      = ACCOUNT_BALANCE_REQUEST  (601)
//     RequestID     int32       = 0
//     TradeAccount  string[32]  = ""
var _AccountBalanceRequestFixedDefault = []byte{40, 0, 89, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// AccountBalanceRequest This is a message from the Client to the Server to request Trade Account
// Balance data.
//
// The Server will respond with an AccountBalanceUpdate or reject the request.
// The Server will respond with an AccountBalanceUpdate or reject the request.
//
// The Server will set the RequestID in the AccountBalanceUpdate message
// to match the RequestID in the AccountBalanceRequest.
//
// The Server will periodically send AccountBalanceUpdate messages as the
// Account Balance data changes. The frequency of the updates is determined
// by the Server. Account Balance updates are considered automatically subscribed
// to. When unsolicited AccountBalanceUpdate messages are sent by the Server,
// the RequestID will be 0.
type AccountBalanceRequest struct {
	p message.VLS
}

// AccountBalanceRequestFixed This is a message from the Client to the Server to request Trade Account
// Balance data.
//
// The Server will respond with an AccountBalanceUpdate or reject the request.
// The Server will respond with an AccountBalanceUpdate or reject the request.
//
// The Server will set the RequestID in the AccountBalanceUpdate message
// to match the RequestID in the AccountBalanceRequest.
//
// The Server will periodically send AccountBalanceUpdate messages as the
// Account Balance data changes. The frequency of the updates is determined
// by the Server. Account Balance updates are considered automatically subscribed
// to. When unsolicited AccountBalanceUpdate messages are sent by the Server,
// the RequestID will be 0.
type AccountBalanceRequestFixed struct {
	p message.Fixed
}

func NewAccountBalanceRequestFrom(b []byte) AccountBalanceRequest {
	return AccountBalanceRequest{p: message.NewVLS(b)}
}

func WrapAccountBalanceRequest(b []byte) AccountBalanceRequest {
	return AccountBalanceRequest{p: message.WrapVLS(b)}
}

func NewAccountBalanceRequest() *AccountBalanceRequest {
	return &AccountBalanceRequest{p: message.NewVLS(_AccountBalanceRequestDefault)}
}

func ParseAccountBalanceRequest(b []byte) (AccountBalanceRequest, error) {
	if len(b) < 6 {
		return AccountBalanceRequest{}, message.ErrShortBuffer
	}
	m := WrapAccountBalanceRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AccountBalanceRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return AccountBalanceRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 16 {
		newSize := len(b) + (16 - baseSize)
		if newSize > message.MaxSize {
			return AccountBalanceRequest{}, message.ErrOverflow
		}
		clone := AccountBalanceRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _AccountBalanceRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(16 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewAccountBalanceRequestFixedFrom(b []byte) AccountBalanceRequestFixed {
	return AccountBalanceRequestFixed{p: message.NewFixed(b)}
}

func WrapAccountBalanceRequestFixed(b []byte) AccountBalanceRequestFixed {
	return AccountBalanceRequestFixed{p: message.WrapFixed(b)}
}

func NewAccountBalanceRequestFixed() *AccountBalanceRequestFixed {
	return &AccountBalanceRequestFixed{p: message.NewFixed(_AccountBalanceRequestFixedDefault)}
}

func ParseAccountBalanceRequestFixed(b []byte) (AccountBalanceRequestFixed, error) {
	if len(b) < 4 {
		return AccountBalanceRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapAccountBalanceRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AccountBalanceRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return AccountBalanceRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 40 {
		clone := *NewAccountBalanceRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _AccountBalanceRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m AccountBalanceRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m AccountBalanceRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m AccountBalanceRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID A unique request identifier for this request.
func (m AccountBalanceRequest) RequestID() int32 {
	return m.p.Int32LE(8)
}

// TradeAccount This is an optional field. Leave this empty to request the Server to return
// Account Balance data for all Trade Accounts on the logged in Username.
// Otherwise, specify a particular Trade Account to request Account Balance
// data for.
func (m AccountBalanceRequest) TradeAccount() string {
	return m.p.StringVLS(12)
}

// Size The standard message size field. Automatically set by constructor.
func (m AccountBalanceRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m AccountBalanceRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID A unique request identifier for this request.
func (m AccountBalanceRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// TradeAccount This is an optional field. Leave this empty to request the Server to return
// Account Balance data for all Trade Accounts on the logged in Username.
// Otherwise, specify a particular Trade Account to request Account Balance
// data for.
func (m AccountBalanceRequestFixed) TradeAccount() string {
	return m.p.StringFixed(8, 32)
}

// SetRequestID A unique request identifier for this request.
func (m *AccountBalanceRequest) SetRequestID(value int32) *AccountBalanceRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetTradeAccount This is an optional field. Leave this empty to request the Server to return
// Account Balance data for all Trade Accounts on the logged in Username.
// Otherwise, specify a particular Trade Account to request Account Balance
// data for.
func (m *AccountBalanceRequest) SetTradeAccount(value string) *AccountBalanceRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetRequestID A unique request identifier for this request.
func (m *AccountBalanceRequestFixed) SetRequestID(value int32) *AccountBalanceRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetTradeAccount This is an optional field. Leave this empty to request the Server to return
// Account Balance data for all Trade Accounts on the logged in Username.
// Otherwise, specify a particular Trade Account to request Account Balance
// data for.
func (m *AccountBalanceRequestFixed) SetTradeAccount(value string) *AccountBalanceRequestFixed {
	m.p.SetStringFixed(8, 32, value)
	return m
}

func (m AccountBalanceRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m AccountBalanceRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m AccountBalanceRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m AccountBalanceRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m AccountBalanceRequest) Copy(to AccountBalanceRequest) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m AccountBalanceRequest) CopyTo(to AccountBalanceRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

// Copy
func (m AccountBalanceRequestFixed) Copy(to AccountBalanceRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m AccountBalanceRequestFixed) CopyTo(to AccountBalanceRequest) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m AccountBalanceRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 601)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 601 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m AccountBalanceRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 601)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceRequestFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 601 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceRequestFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
