// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketOrdersModifySize = 60

//     Size           uint16                       = MarketOrdersModifySize  (60)
//     Type           uint16                       = MARKET_ORDERS_MODIFY  (153)
//     SymbolID       uint32                       = 0
//     Side           BuySellEnum                  = BUY_SELL_UNSET  (0)
//     Quantity       uint32                       = 0
//     Price          float64                      = 0.000000
//     OrderID        uint64                       = 0
//     PriorPrice     float64                      = 0.000000
//     PriorQuantity  uint32                       = 0
//     PriorOrderID   uint64                       = 0
//     DateTime       DateTimeWithMicrosecondsInt  = 0
var _MarketOrdersModifyDefault = []byte{60, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type MarketOrdersModify struct {
	p message.Fixed
}

func NewMarketOrdersModifyFrom(b []byte) MarketOrdersModify {
	return MarketOrdersModify{p: message.NewFixed(b)}
}

func WrapMarketOrdersModify(b []byte) MarketOrdersModify {
	return MarketOrdersModify{p: message.WrapFixed(b)}
}

func NewMarketOrdersModify() *MarketOrdersModify {
	return &MarketOrdersModify{p: message.NewFixed(_MarketOrdersModifyDefault)}
}

func ParseMarketOrdersModify(b []byte) (MarketOrdersModify, error) {
	if len(b) < 4 {
		return MarketOrdersModify{}, message.ErrShortBuffer
	}
	m := WrapMarketOrdersModify(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketOrdersModify{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketOrdersModify{}, message.ErrBaseSizeOverflow
	}
	if size < 60 {
		clone := *NewMarketOrdersModify()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketOrdersModifyDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m MarketOrdersModify) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m MarketOrdersModify) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID
func (m MarketOrdersModify) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Side
func (m MarketOrdersModify) Side() BuySellEnum {
	return BuySellEnum(m.p.Int32LE(8))
}

// Quantity
func (m MarketOrdersModify) Quantity() uint32 {
	return m.p.Uint32LE(12)
}

// Price
func (m MarketOrdersModify) Price() float64 {
	return m.p.Float64LE(16)
}

// OrderID
func (m MarketOrdersModify) OrderID() uint64 {
	return m.p.Uint64LE(24)
}

// PriorPrice
func (m MarketOrdersModify) PriorPrice() float64 {
	return m.p.Float64LE(32)
}

// PriorQuantity
func (m MarketOrdersModify) PriorQuantity() uint32 {
	return m.p.Uint32LE(40)
}

// PriorOrderID
func (m MarketOrdersModify) PriorOrderID() uint64 {
	return m.p.Uint64LE(44)
}

// DateTime
func (m MarketOrdersModify) DateTime() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(52))
}

// SetSymbolID
func (m *MarketOrdersModify) SetSymbolID(value uint32) *MarketOrdersModify {
	m.p.SetUint32LE(4, value)
	return m
}

// SetSide
func (m *MarketOrdersModify) SetSide(value BuySellEnum) *MarketOrdersModify {
	m.p.SetInt32LE(8, int32(value))
	return m
}

// SetQuantity
func (m *MarketOrdersModify) SetQuantity(value uint32) *MarketOrdersModify {
	m.p.SetUint32LE(12, value)
	return m
}

// SetPrice
func (m *MarketOrdersModify) SetPrice(value float64) *MarketOrdersModify {
	m.p.SetFloat64LE(16, value)
	return m
}

// SetOrderID
func (m *MarketOrdersModify) SetOrderID(value uint64) *MarketOrdersModify {
	m.p.SetUint64LE(24, value)
	return m
}

// SetPriorPrice
func (m *MarketOrdersModify) SetPriorPrice(value float64) *MarketOrdersModify {
	m.p.SetFloat64LE(32, value)
	return m
}

// SetPriorQuantity
func (m *MarketOrdersModify) SetPriorQuantity(value uint32) *MarketOrdersModify {
	m.p.SetUint32LE(40, value)
	return m
}

// SetPriorOrderID
func (m *MarketOrdersModify) SetPriorOrderID(value uint64) *MarketOrdersModify {
	m.p.SetUint64LE(44, value)
	return m
}

// SetDateTime
func (m *MarketOrdersModify) SetDateTime(value DateTimeWithMicrosecondsInt) *MarketOrdersModify {
	m.p.SetInt64LE(52, int64(value))
	return m
}

func (m MarketOrdersModify) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarketOrdersModify) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarketOrdersModify) Copy(to MarketOrdersModify) {
	to.SetSymbolID(m.SymbolID())
	to.SetSide(m.Side())
	to.SetQuantity(m.Quantity())
	to.SetPrice(m.Price())
	to.SetOrderID(m.OrderID())
	to.SetPriorPrice(m.PriorPrice())
	to.SetPriorQuantity(m.PriorQuantity())
	to.SetPriorOrderID(m.PriorOrderID())
	to.SetDateTime(m.DateTime())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarketOrdersModify) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 153)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Int32Field("Side", int32(m.Side()))
	w.Uint32Field("Quantity", m.Quantity())
	w.Float64Field("Price", m.Price())
	w.Uint64Field("OrderID", m.OrderID())
	w.Float64Field("PriorPrice", m.PriorPrice())
	w.Uint32Field("PriorQuantity", m.PriorQuantity())
	w.Uint64Field("PriorOrderID", m.PriorOrderID())
	w.Int64Field("DateTime", int64(m.DateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketOrdersModify) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 153 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Side":
			m.SetSide(BuySellEnum(r.Int32()))
		case "Quantity":
			m.SetQuantity(r.Uint32())
		case "Price":
			m.SetPrice(r.Float64())
		case "OrderID":
			m.SetOrderID(r.Uint64())
		case "PriorPrice":
			m.SetPriorPrice(r.Float64())
		case "PriorQuantity":
			m.SetPriorQuantity(r.Uint32())
		case "PriorOrderID":
			m.SetPriorOrderID(r.Uint64())
		case "DateTime":
			m.SetDateTime(DateTimeWithMicrosecondsInt(r.Int64()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketOrdersModify) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
