// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradeAccountDataResponseSize = 324

//     Size                                                                uint16   = TradeAccountDataResponseSize  (324)
//     Type                                                                uint16   = TRADE_ACCOUNT_DATA_RESPONSE  (10116)
//     BaseSize                                                            uint16   = TradeAccountDataResponseSize  (324)
//     RequestID                                                           uint32   = 0
//     TradeAccountNotExist                                                uint8    = 0
//     TradeAccount                                                        string   = ""
//     IsSimulated                                                         bool     = false
//     CurrencyCode                                                        string   = ""
//     CurrentCashBalance                                                  float64  = 0.000000
//     AvailableFundsForNewPositions                                       float64  = 0.000000
//     MarginRequirement                                                   float64  = 0.000000
//     AccountValue                                                        float64  = 0.000000
//     OpenPositionsProfitLoss                                             float64  = 0.000000
//     DailyProfitLoss                                                     float64  = 0.000000
//     TransactionIdentifierForCashBalanceAdjustment                       uint64   = 0
//     LastTransactionDateTime                                             int64    = 0
//     TrailingAccountValueAtWhichToNotAllowNewPositions                   float64  = 0.000000
//     CalculatedDailyNetLossLimitInAccountCurrency                        float64  = 0.000000
//     DailyNetLossLimitHasBeenReached                                     uint8    = 0
//     LastResetDailyNetLossManagementVariablesDateTimeUTC                 int64    = 0
//     IsUnderRequiredMargin                                               bool     = false
//     DailyNetLossLimitInAccountCurrency                                  float32  = 0.000000
//     PercentOfCashBalanceForDailyNetLossLimit                            int32    = 0
//     UseTrailingAccountValueToNotAllowIncreaseInPositions                bool     = false
//     DoNotAllowIncreaseInPositionsAtDailyLossLimit                       bool     = false
//     FlattenPositionsAtDailyLossLimit                                    bool     = false
//     ClosePositionsAtEndOfDay                                            bool     = false
//     FlattenPositionsWhenUnderMarginIntraday                             bool     = true
//     FlattenPositionsWhenUnderMarginAtEndOfDay                           bool     = false
//     SenderSubID                                                         string   = ""
//     SenderLocationId                                                    string   = ""
//     SelfMatchPreventionID                                               string   = ""
//     CTICode                                                             int32    = 0
//     TradeAccountIsReadOnly                                              bool     = false
//     MaximumGlobalPositionQuantity                                       int32    = 0
//     TradeFeePerContract                                                 float64  = 0.000000
//     TradeFeePerShare                                                    float64  = 0.000000
//     RequireSufficientMarginForNewPositions                              bool     = true
//     UsePercentOfMargin                                                  int32    = 100
//     UsePercentOfMarginForDayTrading                                     int32    = 100
//     MaximumAllowedAccountBalanceForPositionsAsPercentage                int32    = 100
//     FirmID                                                              string   = ""
//     TradingIsDisabled                                                   bool     = false
//     DescriptiveName                                                     string   = ""
//     IsMasterFirmControlAccount                                          bool     = false
//     MinimumRequiredAccountValue                                         float64  = 0.000000
//     BeginTimeForDayMargin                                               int64    = 0
//     EndTimeForDayMargin                                                 int64    = 0
//     DayMarginTimeZone                                                   string   = ""
//     IsSnapshot                                                          bool     = false
//     IsFirstMessageInBatch                                               bool     = false
//     IsLastMessageInBatch                                                bool     = false
//     IsDeleted                                                           bool     = false
//     UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday               bool     = false
//     UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay             bool     = false
//     UseMasterFirm_SymbolLimitsArray                                     bool     = false
//     UseMasterFirm_TradeFees                                             bool     = false
//     UseMasterFirm_TradeFeePerShare                                      bool     = false
//     UseMasterFirm_RequireSufficientMarginForNewPositions                bool     = false
//     UseMasterFirm_UsePercentOfMargin                                    bool     = false
//     UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage  bool     = false
//     UseMasterFirm_MinimumRequiredAccountValue                           bool     = false
//     UseMasterFirm_MarginTimeSettings                                    bool     = false
//     UseMasterFirm_TradingIsDisabled                                     bool     = false
//     IsTradeStatisticsPublicallyShared                                   bool     = false
//     IsReadOnlyFollowingRequestsAllowed                                  bool     = false
//     IsTradeAccountSharingAllowed                                        bool     = false
//     ReadOnlyShareToAllSCUsernames                                       uint8    = 0
//     UseMasterFirm_SymbolCommissionsArray                                bool     = false
//     UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit         bool     = false
//     UseMasterFirm_UsePercentOfMarginForDayTrading                       bool     = false
//     OpenPositionsProfitLossBasedOnSettlement                            float64  = 0.000000
//     MarginRequirementFull                                               float64  = 0.000000
//     MarginRequirementFullPositionsOnly                                  float64  = 0.000000
//     UseMasterFirm_TradeFeesFullOverride                                 bool     = false
//     UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders          bool     = false
//     UseMasterFirm_UsePercentOfMarginFullOverride                        bool     = false
//     UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride           bool     = false
//     PeakMarginRequirement                                               float64  = 0.000000
//     LiquidationOnlyMode                                                 uint8    = 0
//     FlattenPositionsWhenUnderMarginIntradayTriggered                    uint8    = 0
//     FlattenPositionsWhenUnderMinimumAccountValueTriggered               uint8    = 0
//     AccountValueAtEndOfDayCaptureTime                                   float64  = 0.000000
//     EndOfDayCaptureTime                                                 int64    = 0
//     CustomerOrFirm                                                      uint8    = 0
//     MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet                uint8    = 0
//     MasterFirm_FlattenCancelWhenUnderMinimumAccountValue                uint8    = 0
//     MasterFirm_FlattenCancelWhenUnderMarginIntraday                     uint8    = 0
//     MasterFirm_FlattenCancelWhenUnderMarginEndOfDay                     uint8    = 0
//     MasterFirm_MaximumOrderQuantity                                     uint32   = 0
//     LastTriggerDateTimeUTCForDailyLossLimit                             int64    = 0
//     OpenPositionsProfitLossIsDelayed                                    bool     = false
//     ExchangeTraderId                                                    string   = ""
//     ProfitLossForOpenPositionDateTimeUTC                                int64    = 0
//     UseFixedCashOnHandBalance                                           bool     = false
//     FixedCashOnHandBalance                                              float32  = 0.000000
var _TradeAccountDataResponseDefault = []byte{68, 1, 132, 39, 68, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 0, 0, 0, 100, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradeAccountDataResponse struct {
	p message.VLS
}

func NewTradeAccountDataResponseFrom(b []byte) TradeAccountDataResponse {
	return TradeAccountDataResponse{p: message.NewVLS(b)}
}

func WrapTradeAccountDataResponse(b []byte) TradeAccountDataResponse {
	return TradeAccountDataResponse{p: message.WrapVLS(b)}
}

func NewTradeAccountDataResponse() *TradeAccountDataResponse {
	return &TradeAccountDataResponse{p: message.NewVLS(_TradeAccountDataResponseDefault)}
}

func ParseTradeAccountDataResponse(b []byte) (TradeAccountDataResponse, error) {
	if len(b) < 6 {
		return TradeAccountDataResponse{}, message.ErrShortBuffer
	}
	m := WrapTradeAccountDataResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradeAccountDataResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradeAccountDataResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 324 {
		newSize := len(b) + (324 - baseSize)
		if newSize > message.MaxSize {
			return TradeAccountDataResponse{}, message.ErrOverflow
		}
		clone := TradeAccountDataResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradeAccountDataResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(324 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(11)
			if offset > 0 {
				clone.p.SetUint16LE(11, offset+shift)
			}
			offset = clone.p.Uint16LE(16)
			if offset > 0 {
				clone.p.SetUint16LE(16, offset+shift)
			}
			offset = clone.p.Uint16LE(124)
			if offset > 0 {
				clone.p.SetUint16LE(124, offset+shift)
			}
			offset = clone.p.Uint16LE(128)
			if offset > 0 {
				clone.p.SetUint16LE(128, offset+shift)
			}
			offset = clone.p.Uint16LE(132)
			if offset > 0 {
				clone.p.SetUint16LE(132, offset+shift)
			}
			offset = clone.p.Uint16LE(174)
			if offset > 0 {
				clone.p.SetUint16LE(174, offset+shift)
			}
			offset = clone.p.Uint16LE(179)
			if offset > 0 {
				clone.p.SetUint16LE(179, offset+shift)
			}
			offset = clone.p.Uint16LE(208)
			if offset > 0 {
				clone.p.SetUint16LE(208, offset+shift)
			}
			offset = clone.p.Uint16LE(307)
			if offset > 0 {
				clone.p.SetUint16LE(307, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradeAccountDataResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradeAccountDataResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradeAccountDataResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m TradeAccountDataResponse) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// TradeAccountNotExist
func (m TradeAccountDataResponse) TradeAccountNotExist() uint8 {
	return m.p.Uint8(10)
}

// TradeAccount
func (m TradeAccountDataResponse) TradeAccount() string {
	return m.p.StringVLS(11)
}

// IsSimulated
func (m TradeAccountDataResponse) IsSimulated() bool {
	return m.p.Bool(15)
}

// CurrencyCode
func (m TradeAccountDataResponse) CurrencyCode() string {
	return m.p.StringVLS(16)
}

// CurrentCashBalance
func (m TradeAccountDataResponse) CurrentCashBalance() float64 {
	return m.p.Float64LE(20)
}

// AvailableFundsForNewPositions
func (m TradeAccountDataResponse) AvailableFundsForNewPositions() float64 {
	return m.p.Float64LE(28)
}

// MarginRequirement
func (m TradeAccountDataResponse) MarginRequirement() float64 {
	return m.p.Float64LE(36)
}

// AccountValue
func (m TradeAccountDataResponse) AccountValue() float64 {
	return m.p.Float64LE(44)
}

// OpenPositionsProfitLoss
func (m TradeAccountDataResponse) OpenPositionsProfitLoss() float64 {
	return m.p.Float64LE(52)
}

// DailyProfitLoss
func (m TradeAccountDataResponse) DailyProfitLoss() float64 {
	return m.p.Float64LE(60)
}

// TransactionIdentifierForCashBalanceAdjustment
func (m TradeAccountDataResponse) TransactionIdentifierForCashBalanceAdjustment() uint64 {
	return m.p.Uint64LE(68)
}

// LastTransactionDateTime
func (m TradeAccountDataResponse) LastTransactionDateTime() int64 {
	return m.p.Int64LE(76)
}

// TrailingAccountValueAtWhichToNotAllowNewPositions
func (m TradeAccountDataResponse) TrailingAccountValueAtWhichToNotAllowNewPositions() float64 {
	return m.p.Float64LE(84)
}

// CalculatedDailyNetLossLimitInAccountCurrency
func (m TradeAccountDataResponse) CalculatedDailyNetLossLimitInAccountCurrency() float64 {
	return m.p.Float64LE(92)
}

// DailyNetLossLimitHasBeenReached
func (m TradeAccountDataResponse) DailyNetLossLimitHasBeenReached() uint8 {
	return m.p.Uint8(100)
}

// LastResetDailyNetLossManagementVariablesDateTimeUTC
func (m TradeAccountDataResponse) LastResetDailyNetLossManagementVariablesDateTimeUTC() int64 {
	return m.p.Int64LE(101)
}

// IsUnderRequiredMargin
func (m TradeAccountDataResponse) IsUnderRequiredMargin() bool {
	return m.p.Bool(109)
}

// DailyNetLossLimitInAccountCurrency
func (m TradeAccountDataResponse) DailyNetLossLimitInAccountCurrency() float32 {
	return m.p.Float32LE(110)
}

// PercentOfCashBalanceForDailyNetLossLimit
func (m TradeAccountDataResponse) PercentOfCashBalanceForDailyNetLossLimit() int32 {
	return m.p.Int32LE(114)
}

// UseTrailingAccountValueToNotAllowIncreaseInPositions
func (m TradeAccountDataResponse) UseTrailingAccountValueToNotAllowIncreaseInPositions() bool {
	return m.p.Bool(118)
}

// DoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m TradeAccountDataResponse) DoNotAllowIncreaseInPositionsAtDailyLossLimit() bool {
	return m.p.Bool(119)
}

// FlattenPositionsAtDailyLossLimit
func (m TradeAccountDataResponse) FlattenPositionsAtDailyLossLimit() bool {
	return m.p.Bool(120)
}

// ClosePositionsAtEndOfDay
func (m TradeAccountDataResponse) ClosePositionsAtEndOfDay() bool {
	return m.p.Bool(121)
}

// FlattenPositionsWhenUnderMarginIntraday
func (m TradeAccountDataResponse) FlattenPositionsWhenUnderMarginIntraday() bool {
	return m.p.Bool(122)
}

// FlattenPositionsWhenUnderMarginAtEndOfDay
func (m TradeAccountDataResponse) FlattenPositionsWhenUnderMarginAtEndOfDay() bool {
	return m.p.Bool(123)
}

// SenderSubID
func (m TradeAccountDataResponse) SenderSubID() string {
	return m.p.StringVLS(124)
}

// SenderLocationId
func (m TradeAccountDataResponse) SenderLocationId() string {
	return m.p.StringVLS(128)
}

// SelfMatchPreventionID
func (m TradeAccountDataResponse) SelfMatchPreventionID() string {
	return m.p.StringVLS(132)
}

// CTICode
func (m TradeAccountDataResponse) CTICode() int32 {
	return m.p.Int32LE(136)
}

// TradeAccountIsReadOnly
func (m TradeAccountDataResponse) TradeAccountIsReadOnly() bool {
	return m.p.Bool(140)
}

// MaximumGlobalPositionQuantity
func (m TradeAccountDataResponse) MaximumGlobalPositionQuantity() int32 {
	return m.p.Int32LE(141)
}

// TradeFeePerContract
func (m TradeAccountDataResponse) TradeFeePerContract() float64 {
	return m.p.Float64LE(145)
}

// TradeFeePerShare
func (m TradeAccountDataResponse) TradeFeePerShare() float64 {
	return m.p.Float64LE(153)
}

// RequireSufficientMarginForNewPositions
func (m TradeAccountDataResponse) RequireSufficientMarginForNewPositions() bool {
	return m.p.Bool(161)
}

// UsePercentOfMargin
func (m TradeAccountDataResponse) UsePercentOfMargin() int32 {
	return m.p.Int32LE(162)
}

// UsePercentOfMarginForDayTrading
func (m TradeAccountDataResponse) UsePercentOfMarginForDayTrading() int32 {
	return m.p.Int32LE(166)
}

// MaximumAllowedAccountBalanceForPositionsAsPercentage
func (m TradeAccountDataResponse) MaximumAllowedAccountBalanceForPositionsAsPercentage() int32 {
	return m.p.Int32LE(170)
}

// FirmID
func (m TradeAccountDataResponse) FirmID() string {
	return m.p.StringVLS(174)
}

// TradingIsDisabled
func (m TradeAccountDataResponse) TradingIsDisabled() bool {
	return m.p.Bool(178)
}

// DescriptiveName
func (m TradeAccountDataResponse) DescriptiveName() string {
	return m.p.StringVLS(179)
}

// IsMasterFirmControlAccount
func (m TradeAccountDataResponse) IsMasterFirmControlAccount() bool {
	return m.p.Bool(183)
}

// MinimumRequiredAccountValue
func (m TradeAccountDataResponse) MinimumRequiredAccountValue() float64 {
	return m.p.Float64LE(184)
}

// BeginTimeForDayMargin
func (m TradeAccountDataResponse) BeginTimeForDayMargin() int64 {
	return m.p.Int64LE(192)
}

// EndTimeForDayMargin
func (m TradeAccountDataResponse) EndTimeForDayMargin() int64 {
	return m.p.Int64LE(200)
}

// DayMarginTimeZone
func (m TradeAccountDataResponse) DayMarginTimeZone() string {
	return m.p.StringVLS(208)
}

// IsSnapshot
func (m TradeAccountDataResponse) IsSnapshot() bool {
	return m.p.Bool(212)
}

// IsFirstMessageInBatch
func (m TradeAccountDataResponse) IsFirstMessageInBatch() bool {
	return m.p.Bool(213)
}

// IsLastMessageInBatch
func (m TradeAccountDataResponse) IsLastMessageInBatch() bool {
	return m.p.Bool(214)
}

// IsDeleted
func (m TradeAccountDataResponse) IsDeleted() bool {
	return m.p.Bool(215)
}

// UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday
func (m TradeAccountDataResponse) UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday() bool {
	return m.p.Bool(216)
}

// UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay
func (m TradeAccountDataResponse) UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay() bool {
	return m.p.Bool(217)
}

// UseMasterFirm_SymbolLimitsArray
func (m TradeAccountDataResponse) UseMasterFirm_SymbolLimitsArray() bool {
	return m.p.Bool(218)
}

// UseMasterFirm_TradeFees
func (m TradeAccountDataResponse) UseMasterFirm_TradeFees() bool {
	return m.p.Bool(219)
}

// UseMasterFirm_TradeFeePerShare
func (m TradeAccountDataResponse) UseMasterFirm_TradeFeePerShare() bool {
	return m.p.Bool(220)
}

// UseMasterFirm_RequireSufficientMarginForNewPositions
func (m TradeAccountDataResponse) UseMasterFirm_RequireSufficientMarginForNewPositions() bool {
	return m.p.Bool(221)
}

// UseMasterFirm_UsePercentOfMargin
func (m TradeAccountDataResponse) UseMasterFirm_UsePercentOfMargin() bool {
	return m.p.Bool(222)
}

// UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage
func (m TradeAccountDataResponse) UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage() bool {
	return m.p.Bool(223)
}

// UseMasterFirm_MinimumRequiredAccountValue
func (m TradeAccountDataResponse) UseMasterFirm_MinimumRequiredAccountValue() bool {
	return m.p.Bool(224)
}

// UseMasterFirm_MarginTimeSettings
func (m TradeAccountDataResponse) UseMasterFirm_MarginTimeSettings() bool {
	return m.p.Bool(225)
}

// UseMasterFirm_TradingIsDisabled
func (m TradeAccountDataResponse) UseMasterFirm_TradingIsDisabled() bool {
	return m.p.Bool(226)
}

// IsTradeStatisticsPublicallyShared
func (m TradeAccountDataResponse) IsTradeStatisticsPublicallyShared() bool {
	return m.p.Bool(227)
}

// IsReadOnlyFollowingRequestsAllowed
func (m TradeAccountDataResponse) IsReadOnlyFollowingRequestsAllowed() bool {
	return m.p.Bool(228)
}

// IsTradeAccountSharingAllowed
func (m TradeAccountDataResponse) IsTradeAccountSharingAllowed() bool {
	return m.p.Bool(229)
}

// ReadOnlyShareToAllSCUsernames
func (m TradeAccountDataResponse) ReadOnlyShareToAllSCUsernames() uint8 {
	return m.p.Uint8(230)
}

// UseMasterFirm_SymbolCommissionsArray
func (m TradeAccountDataResponse) UseMasterFirm_SymbolCommissionsArray() bool {
	return m.p.Bool(231)
}

// UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m TradeAccountDataResponse) UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit() bool {
	return m.p.Bool(232)
}

// UseMasterFirm_UsePercentOfMarginForDayTrading
func (m TradeAccountDataResponse) UseMasterFirm_UsePercentOfMarginForDayTrading() bool {
	return m.p.Bool(233)
}

// OpenPositionsProfitLossBasedOnSettlement
func (m TradeAccountDataResponse) OpenPositionsProfitLossBasedOnSettlement() float64 {
	return m.p.Float64LE(234)
}

// MarginRequirementFull
func (m TradeAccountDataResponse) MarginRequirementFull() float64 {
	return m.p.Float64LE(242)
}

// MarginRequirementFullPositionsOnly
func (m TradeAccountDataResponse) MarginRequirementFullPositionsOnly() float64 {
	return m.p.Float64LE(250)
}

// UseMasterFirm_TradeFeesFullOverride
func (m TradeAccountDataResponse) UseMasterFirm_TradeFeesFullOverride() bool {
	return m.p.Bool(258)
}

// UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders
func (m TradeAccountDataResponse) UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders() bool {
	return m.p.Bool(259)
}

// UseMasterFirm_UsePercentOfMarginFullOverride
func (m TradeAccountDataResponse) UseMasterFirm_UsePercentOfMarginFullOverride() bool {
	return m.p.Bool(260)
}

// UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride
func (m TradeAccountDataResponse) UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride() bool {
	return m.p.Bool(261)
}

// PeakMarginRequirement
func (m TradeAccountDataResponse) PeakMarginRequirement() float64 {
	return m.p.Float64LE(262)
}

// LiquidationOnlyMode
func (m TradeAccountDataResponse) LiquidationOnlyMode() uint8 {
	return m.p.Uint8(270)
}

// FlattenPositionsWhenUnderMarginIntradayTriggered
func (m TradeAccountDataResponse) FlattenPositionsWhenUnderMarginIntradayTriggered() uint8 {
	return m.p.Uint8(271)
}

// FlattenPositionsWhenUnderMinimumAccountValueTriggered
func (m TradeAccountDataResponse) FlattenPositionsWhenUnderMinimumAccountValueTriggered() uint8 {
	return m.p.Uint8(272)
}

// AccountValueAtEndOfDayCaptureTime
func (m TradeAccountDataResponse) AccountValueAtEndOfDayCaptureTime() float64 {
	return m.p.Float64LE(273)
}

// EndOfDayCaptureTime
func (m TradeAccountDataResponse) EndOfDayCaptureTime() int64 {
	return m.p.Int64LE(281)
}

// CustomerOrFirm
func (m TradeAccountDataResponse) CustomerOrFirm() uint8 {
	return m.p.Uint8(289)
}

// MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet
func (m TradeAccountDataResponse) MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet() uint8 {
	return m.p.Uint8(290)
}

// MasterFirm_FlattenCancelWhenUnderMinimumAccountValue
func (m TradeAccountDataResponse) MasterFirm_FlattenCancelWhenUnderMinimumAccountValue() uint8 {
	return m.p.Uint8(291)
}

// MasterFirm_FlattenCancelWhenUnderMarginIntraday
func (m TradeAccountDataResponse) MasterFirm_FlattenCancelWhenUnderMarginIntraday() uint8 {
	return m.p.Uint8(292)
}

// MasterFirm_FlattenCancelWhenUnderMarginEndOfDay
func (m TradeAccountDataResponse) MasterFirm_FlattenCancelWhenUnderMarginEndOfDay() uint8 {
	return m.p.Uint8(293)
}

// MasterFirm_MaximumOrderQuantity
func (m TradeAccountDataResponse) MasterFirm_MaximumOrderQuantity() uint32 {
	return m.p.Uint32LE(294)
}

// LastTriggerDateTimeUTCForDailyLossLimit
func (m TradeAccountDataResponse) LastTriggerDateTimeUTCForDailyLossLimit() int64 {
	return m.p.Int64LE(298)
}

// OpenPositionsProfitLossIsDelayed
func (m TradeAccountDataResponse) OpenPositionsProfitLossIsDelayed() bool {
	return m.p.Bool(306)
}

// ExchangeTraderId
func (m TradeAccountDataResponse) ExchangeTraderId() string {
	return m.p.StringVLS(307)
}

// ProfitLossForOpenPositionDateTimeUTC
func (m TradeAccountDataResponse) ProfitLossForOpenPositionDateTimeUTC() int64 {
	return m.p.Int64LE(311)
}

// UseFixedCashOnHandBalance
func (m TradeAccountDataResponse) UseFixedCashOnHandBalance() bool {
	return m.p.Bool(319)
}

// FixedCashOnHandBalance
func (m TradeAccountDataResponse) FixedCashOnHandBalance() float32 {
	return m.p.Float32LE(320)
}

// SetRequestID
func (m *TradeAccountDataResponse) SetRequestID(value uint32) *TradeAccountDataResponse {
	m.p.SetUint32LE(6, value)
	return m
}

// SetTradeAccountNotExist
func (m *TradeAccountDataResponse) SetTradeAccountNotExist(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(10, value)
	return m
}

// SetTradeAccount
func (m *TradeAccountDataResponse) SetTradeAccount(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(11, value)
	return m
}

// SetIsSimulated
func (m *TradeAccountDataResponse) SetIsSimulated(value bool) *TradeAccountDataResponse {
	m.p.SetBool(15, value)
	return m
}

// SetCurrencyCode
func (m *TradeAccountDataResponse) SetCurrencyCode(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(16, value)
	return m
}

// SetCurrentCashBalance
func (m *TradeAccountDataResponse) SetCurrentCashBalance(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(20, value)
	return m
}

// SetAvailableFundsForNewPositions
func (m *TradeAccountDataResponse) SetAvailableFundsForNewPositions(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(28, value)
	return m
}

// SetMarginRequirement
func (m *TradeAccountDataResponse) SetMarginRequirement(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(36, value)
	return m
}

// SetAccountValue
func (m *TradeAccountDataResponse) SetAccountValue(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(44, value)
	return m
}

// SetOpenPositionsProfitLoss
func (m *TradeAccountDataResponse) SetOpenPositionsProfitLoss(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(52, value)
	return m
}

// SetDailyProfitLoss
func (m *TradeAccountDataResponse) SetDailyProfitLoss(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(60, value)
	return m
}

// SetTransactionIdentifierForCashBalanceAdjustment
func (m *TradeAccountDataResponse) SetTransactionIdentifierForCashBalanceAdjustment(value uint64) *TradeAccountDataResponse {
	m.p.SetUint64LE(68, value)
	return m
}

// SetLastTransactionDateTime
func (m *TradeAccountDataResponse) SetLastTransactionDateTime(value int64) *TradeAccountDataResponse {
	m.p.SetInt64LE(76, value)
	return m
}

// SetTrailingAccountValueAtWhichToNotAllowNewPositions
func (m *TradeAccountDataResponse) SetTrailingAccountValueAtWhichToNotAllowNewPositions(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(84, value)
	return m
}

// SetCalculatedDailyNetLossLimitInAccountCurrency
func (m *TradeAccountDataResponse) SetCalculatedDailyNetLossLimitInAccountCurrency(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(92, value)
	return m
}

// SetDailyNetLossLimitHasBeenReached
func (m *TradeAccountDataResponse) SetDailyNetLossLimitHasBeenReached(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(100, value)
	return m
}

// SetLastResetDailyNetLossManagementVariablesDateTimeUTC
func (m *TradeAccountDataResponse) SetLastResetDailyNetLossManagementVariablesDateTimeUTC(value int64) *TradeAccountDataResponse {
	m.p.SetInt64LE(101, value)
	return m
}

// SetIsUnderRequiredMargin
func (m *TradeAccountDataResponse) SetIsUnderRequiredMargin(value bool) *TradeAccountDataResponse {
	m.p.SetBool(109, value)
	return m
}

// SetDailyNetLossLimitInAccountCurrency
func (m *TradeAccountDataResponse) SetDailyNetLossLimitInAccountCurrency(value float32) *TradeAccountDataResponse {
	m.p.SetFloat32LE(110, value)
	return m
}

// SetPercentOfCashBalanceForDailyNetLossLimit
func (m *TradeAccountDataResponse) SetPercentOfCashBalanceForDailyNetLossLimit(value int32) *TradeAccountDataResponse {
	m.p.SetInt32LE(114, value)
	return m
}

// SetUseTrailingAccountValueToNotAllowIncreaseInPositions
func (m *TradeAccountDataResponse) SetUseTrailingAccountValueToNotAllowIncreaseInPositions(value bool) *TradeAccountDataResponse {
	m.p.SetBool(118, value)
	return m
}

// SetDoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m *TradeAccountDataResponse) SetDoNotAllowIncreaseInPositionsAtDailyLossLimit(value bool) *TradeAccountDataResponse {
	m.p.SetBool(119, value)
	return m
}

// SetFlattenPositionsAtDailyLossLimit
func (m *TradeAccountDataResponse) SetFlattenPositionsAtDailyLossLimit(value bool) *TradeAccountDataResponse {
	m.p.SetBool(120, value)
	return m
}

// SetClosePositionsAtEndOfDay
func (m *TradeAccountDataResponse) SetClosePositionsAtEndOfDay(value bool) *TradeAccountDataResponse {
	m.p.SetBool(121, value)
	return m
}

// SetFlattenPositionsWhenUnderMarginIntraday
func (m *TradeAccountDataResponse) SetFlattenPositionsWhenUnderMarginIntraday(value bool) *TradeAccountDataResponse {
	m.p.SetBool(122, value)
	return m
}

// SetFlattenPositionsWhenUnderMarginAtEndOfDay
func (m *TradeAccountDataResponse) SetFlattenPositionsWhenUnderMarginAtEndOfDay(value bool) *TradeAccountDataResponse {
	m.p.SetBool(123, value)
	return m
}

// SetSenderSubID
func (m *TradeAccountDataResponse) SetSenderSubID(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(124, value)
	return m
}

// SetSenderLocationId
func (m *TradeAccountDataResponse) SetSenderLocationId(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(128, value)
	return m
}

// SetSelfMatchPreventionID
func (m *TradeAccountDataResponse) SetSelfMatchPreventionID(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(132, value)
	return m
}

// SetCTICode
func (m *TradeAccountDataResponse) SetCTICode(value int32) *TradeAccountDataResponse {
	m.p.SetInt32LE(136, value)
	return m
}

// SetTradeAccountIsReadOnly
func (m *TradeAccountDataResponse) SetTradeAccountIsReadOnly(value bool) *TradeAccountDataResponse {
	m.p.SetBool(140, value)
	return m
}

// SetMaximumGlobalPositionQuantity
func (m *TradeAccountDataResponse) SetMaximumGlobalPositionQuantity(value int32) *TradeAccountDataResponse {
	m.p.SetInt32LE(141, value)
	return m
}

// SetTradeFeePerContract
func (m *TradeAccountDataResponse) SetTradeFeePerContract(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(145, value)
	return m
}

// SetTradeFeePerShare
func (m *TradeAccountDataResponse) SetTradeFeePerShare(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(153, value)
	return m
}

// SetRequireSufficientMarginForNewPositions
func (m *TradeAccountDataResponse) SetRequireSufficientMarginForNewPositions(value bool) *TradeAccountDataResponse {
	m.p.SetBool(161, value)
	return m
}

// SetUsePercentOfMargin
func (m *TradeAccountDataResponse) SetUsePercentOfMargin(value int32) *TradeAccountDataResponse {
	m.p.SetInt32LE(162, value)
	return m
}

// SetUsePercentOfMarginForDayTrading
func (m *TradeAccountDataResponse) SetUsePercentOfMarginForDayTrading(value int32) *TradeAccountDataResponse {
	m.p.SetInt32LE(166, value)
	return m
}

// SetMaximumAllowedAccountBalanceForPositionsAsPercentage
func (m *TradeAccountDataResponse) SetMaximumAllowedAccountBalanceForPositionsAsPercentage(value int32) *TradeAccountDataResponse {
	m.p.SetInt32LE(170, value)
	return m
}

// SetFirmID
func (m *TradeAccountDataResponse) SetFirmID(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(174, value)
	return m
}

// SetTradingIsDisabled
func (m *TradeAccountDataResponse) SetTradingIsDisabled(value bool) *TradeAccountDataResponse {
	m.p.SetBool(178, value)
	return m
}

// SetDescriptiveName
func (m *TradeAccountDataResponse) SetDescriptiveName(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(179, value)
	return m
}

// SetIsMasterFirmControlAccount
func (m *TradeAccountDataResponse) SetIsMasterFirmControlAccount(value bool) *TradeAccountDataResponse {
	m.p.SetBool(183, value)
	return m
}

// SetMinimumRequiredAccountValue
func (m *TradeAccountDataResponse) SetMinimumRequiredAccountValue(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(184, value)
	return m
}

// SetBeginTimeForDayMargin
func (m *TradeAccountDataResponse) SetBeginTimeForDayMargin(value int64) *TradeAccountDataResponse {
	m.p.SetInt64LE(192, value)
	return m
}

// SetEndTimeForDayMargin
func (m *TradeAccountDataResponse) SetEndTimeForDayMargin(value int64) *TradeAccountDataResponse {
	m.p.SetInt64LE(200, value)
	return m
}

// SetDayMarginTimeZone
func (m *TradeAccountDataResponse) SetDayMarginTimeZone(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(208, value)
	return m
}

// SetIsSnapshot
func (m *TradeAccountDataResponse) SetIsSnapshot(value bool) *TradeAccountDataResponse {
	m.p.SetBool(212, value)
	return m
}

// SetIsFirstMessageInBatch
func (m *TradeAccountDataResponse) SetIsFirstMessageInBatch(value bool) *TradeAccountDataResponse {
	m.p.SetBool(213, value)
	return m
}

// SetIsLastMessageInBatch
func (m *TradeAccountDataResponse) SetIsLastMessageInBatch(value bool) *TradeAccountDataResponse {
	m.p.SetBool(214, value)
	return m
}

// SetIsDeleted
func (m *TradeAccountDataResponse) SetIsDeleted(value bool) *TradeAccountDataResponse {
	m.p.SetBool(215, value)
	return m
}

// SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday
func (m *TradeAccountDataResponse) SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday(value bool) *TradeAccountDataResponse {
	m.p.SetBool(216, value)
	return m
}

// SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay
func (m *TradeAccountDataResponse) SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay(value bool) *TradeAccountDataResponse {
	m.p.SetBool(217, value)
	return m
}

// SetUseMasterFirm_SymbolLimitsArray
func (m *TradeAccountDataResponse) SetUseMasterFirm_SymbolLimitsArray(value bool) *TradeAccountDataResponse {
	m.p.SetBool(218, value)
	return m
}

// SetUseMasterFirm_TradeFees
func (m *TradeAccountDataResponse) SetUseMasterFirm_TradeFees(value bool) *TradeAccountDataResponse {
	m.p.SetBool(219, value)
	return m
}

// SetUseMasterFirm_TradeFeePerShare
func (m *TradeAccountDataResponse) SetUseMasterFirm_TradeFeePerShare(value bool) *TradeAccountDataResponse {
	m.p.SetBool(220, value)
	return m
}

// SetUseMasterFirm_RequireSufficientMarginForNewPositions
func (m *TradeAccountDataResponse) SetUseMasterFirm_RequireSufficientMarginForNewPositions(value bool) *TradeAccountDataResponse {
	m.p.SetBool(221, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMargin
func (m *TradeAccountDataResponse) SetUseMasterFirm_UsePercentOfMargin(value bool) *TradeAccountDataResponse {
	m.p.SetBool(222, value)
	return m
}

// SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage
func (m *TradeAccountDataResponse) SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage(value bool) *TradeAccountDataResponse {
	m.p.SetBool(223, value)
	return m
}

// SetUseMasterFirm_MinimumRequiredAccountValue
func (m *TradeAccountDataResponse) SetUseMasterFirm_MinimumRequiredAccountValue(value bool) *TradeAccountDataResponse {
	m.p.SetBool(224, value)
	return m
}

// SetUseMasterFirm_MarginTimeSettings
func (m *TradeAccountDataResponse) SetUseMasterFirm_MarginTimeSettings(value bool) *TradeAccountDataResponse {
	m.p.SetBool(225, value)
	return m
}

// SetUseMasterFirm_TradingIsDisabled
func (m *TradeAccountDataResponse) SetUseMasterFirm_TradingIsDisabled(value bool) *TradeAccountDataResponse {
	m.p.SetBool(226, value)
	return m
}

// SetIsTradeStatisticsPublicallyShared
func (m *TradeAccountDataResponse) SetIsTradeStatisticsPublicallyShared(value bool) *TradeAccountDataResponse {
	m.p.SetBool(227, value)
	return m
}

// SetIsReadOnlyFollowingRequestsAllowed
func (m *TradeAccountDataResponse) SetIsReadOnlyFollowingRequestsAllowed(value bool) *TradeAccountDataResponse {
	m.p.SetBool(228, value)
	return m
}

// SetIsTradeAccountSharingAllowed
func (m *TradeAccountDataResponse) SetIsTradeAccountSharingAllowed(value bool) *TradeAccountDataResponse {
	m.p.SetBool(229, value)
	return m
}

// SetReadOnlyShareToAllSCUsernames
func (m *TradeAccountDataResponse) SetReadOnlyShareToAllSCUsernames(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(230, value)
	return m
}

// SetUseMasterFirm_SymbolCommissionsArray
func (m *TradeAccountDataResponse) SetUseMasterFirm_SymbolCommissionsArray(value bool) *TradeAccountDataResponse {
	m.p.SetBool(231, value)
	return m
}

// SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m *TradeAccountDataResponse) SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit(value bool) *TradeAccountDataResponse {
	m.p.SetBool(232, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginForDayTrading
func (m *TradeAccountDataResponse) SetUseMasterFirm_UsePercentOfMarginForDayTrading(value bool) *TradeAccountDataResponse {
	m.p.SetBool(233, value)
	return m
}

// SetOpenPositionsProfitLossBasedOnSettlement
func (m *TradeAccountDataResponse) SetOpenPositionsProfitLossBasedOnSettlement(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(234, value)
	return m
}

// SetMarginRequirementFull
func (m *TradeAccountDataResponse) SetMarginRequirementFull(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(242, value)
	return m
}

// SetMarginRequirementFullPositionsOnly
func (m *TradeAccountDataResponse) SetMarginRequirementFullPositionsOnly(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(250, value)
	return m
}

// SetUseMasterFirm_TradeFeesFullOverride
func (m *TradeAccountDataResponse) SetUseMasterFirm_TradeFeesFullOverride(value bool) *TradeAccountDataResponse {
	m.p.SetBool(258, value)
	return m
}

// SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders
func (m *TradeAccountDataResponse) SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders(value bool) *TradeAccountDataResponse {
	m.p.SetBool(259, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginFullOverride
func (m *TradeAccountDataResponse) SetUseMasterFirm_UsePercentOfMarginFullOverride(value bool) *TradeAccountDataResponse {
	m.p.SetBool(260, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride
func (m *TradeAccountDataResponse) SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride(value bool) *TradeAccountDataResponse {
	m.p.SetBool(261, value)
	return m
}

// SetPeakMarginRequirement
func (m *TradeAccountDataResponse) SetPeakMarginRequirement(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(262, value)
	return m
}

// SetLiquidationOnlyMode
func (m *TradeAccountDataResponse) SetLiquidationOnlyMode(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(270, value)
	return m
}

// SetFlattenPositionsWhenUnderMarginIntradayTriggered
func (m *TradeAccountDataResponse) SetFlattenPositionsWhenUnderMarginIntradayTriggered(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(271, value)
	return m
}

// SetFlattenPositionsWhenUnderMinimumAccountValueTriggered
func (m *TradeAccountDataResponse) SetFlattenPositionsWhenUnderMinimumAccountValueTriggered(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(272, value)
	return m
}

// SetAccountValueAtEndOfDayCaptureTime
func (m *TradeAccountDataResponse) SetAccountValueAtEndOfDayCaptureTime(value float64) *TradeAccountDataResponse {
	m.p.SetFloat64LE(273, value)
	return m
}

// SetEndOfDayCaptureTime
func (m *TradeAccountDataResponse) SetEndOfDayCaptureTime(value int64) *TradeAccountDataResponse {
	m.p.SetInt64LE(281, value)
	return m
}

// SetCustomerOrFirm
func (m *TradeAccountDataResponse) SetCustomerOrFirm(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(289, value)
	return m
}

// SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet
func (m *TradeAccountDataResponse) SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(290, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue
func (m *TradeAccountDataResponse) SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(291, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMarginIntraday
func (m *TradeAccountDataResponse) SetMasterFirm_FlattenCancelWhenUnderMarginIntraday(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(292, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay
func (m *TradeAccountDataResponse) SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay(value uint8) *TradeAccountDataResponse {
	m.p.SetUint8(293, value)
	return m
}

// SetMasterFirm_MaximumOrderQuantity
func (m *TradeAccountDataResponse) SetMasterFirm_MaximumOrderQuantity(value uint32) *TradeAccountDataResponse {
	m.p.SetUint32LE(294, value)
	return m
}

// SetLastTriggerDateTimeUTCForDailyLossLimit
func (m *TradeAccountDataResponse) SetLastTriggerDateTimeUTCForDailyLossLimit(value int64) *TradeAccountDataResponse {
	m.p.SetInt64LE(298, value)
	return m
}

// SetOpenPositionsProfitLossIsDelayed
func (m *TradeAccountDataResponse) SetOpenPositionsProfitLossIsDelayed(value bool) *TradeAccountDataResponse {
	m.p.SetBool(306, value)
	return m
}

// SetExchangeTraderId
func (m *TradeAccountDataResponse) SetExchangeTraderId(value string) *TradeAccountDataResponse {
	m.p.SetStringVLS(307, value)
	return m
}

// SetProfitLossForOpenPositionDateTimeUTC
func (m *TradeAccountDataResponse) SetProfitLossForOpenPositionDateTimeUTC(value int64) *TradeAccountDataResponse {
	m.p.SetInt64LE(311, value)
	return m
}

// SetUseFixedCashOnHandBalance
func (m *TradeAccountDataResponse) SetUseFixedCashOnHandBalance(value bool) *TradeAccountDataResponse {
	m.p.SetBool(319, value)
	return m
}

// SetFixedCashOnHandBalance
func (m *TradeAccountDataResponse) SetFixedCashOnHandBalance(value float32) *TradeAccountDataResponse {
	m.p.SetFloat32LE(320, value)
	return m
}

func (m TradeAccountDataResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradeAccountDataResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradeAccountDataResponse) Copy(to TradeAccountDataResponse) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccountNotExist(m.TradeAccountNotExist())
	to.SetTradeAccount(m.TradeAccount())
	to.SetIsSimulated(m.IsSimulated())
	to.SetCurrencyCode(m.CurrencyCode())
	to.SetCurrentCashBalance(m.CurrentCashBalance())
	to.SetAvailableFundsForNewPositions(m.AvailableFundsForNewPositions())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetAccountValue(m.AccountValue())
	to.SetOpenPositionsProfitLoss(m.OpenPositionsProfitLoss())
	to.SetDailyProfitLoss(m.DailyProfitLoss())
	to.SetTransactionIdentifierForCashBalanceAdjustment(m.TransactionIdentifierForCashBalanceAdjustment())
	to.SetLastTransactionDateTime(m.LastTransactionDateTime())
	to.SetTrailingAccountValueAtWhichToNotAllowNewPositions(m.TrailingAccountValueAtWhichToNotAllowNewPositions())
	to.SetCalculatedDailyNetLossLimitInAccountCurrency(m.CalculatedDailyNetLossLimitInAccountCurrency())
	to.SetDailyNetLossLimitHasBeenReached(m.DailyNetLossLimitHasBeenReached())
	to.SetLastResetDailyNetLossManagementVariablesDateTimeUTC(m.LastResetDailyNetLossManagementVariablesDateTimeUTC())
	to.SetIsUnderRequiredMargin(m.IsUnderRequiredMargin())
	to.SetDailyNetLossLimitInAccountCurrency(m.DailyNetLossLimitInAccountCurrency())
	to.SetPercentOfCashBalanceForDailyNetLossLimit(m.PercentOfCashBalanceForDailyNetLossLimit())
	to.SetUseTrailingAccountValueToNotAllowIncreaseInPositions(m.UseTrailingAccountValueToNotAllowIncreaseInPositions())
	to.SetDoNotAllowIncreaseInPositionsAtDailyLossLimit(m.DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	to.SetFlattenPositionsAtDailyLossLimit(m.FlattenPositionsAtDailyLossLimit())
	to.SetClosePositionsAtEndOfDay(m.ClosePositionsAtEndOfDay())
	to.SetFlattenPositionsWhenUnderMarginIntraday(m.FlattenPositionsWhenUnderMarginIntraday())
	to.SetFlattenPositionsWhenUnderMarginAtEndOfDay(m.FlattenPositionsWhenUnderMarginAtEndOfDay())
	to.SetSenderSubID(m.SenderSubID())
	to.SetSenderLocationId(m.SenderLocationId())
	to.SetSelfMatchPreventionID(m.SelfMatchPreventionID())
	to.SetCTICode(m.CTICode())
	to.SetTradeAccountIsReadOnly(m.TradeAccountIsReadOnly())
	to.SetMaximumGlobalPositionQuantity(m.MaximumGlobalPositionQuantity())
	to.SetTradeFeePerContract(m.TradeFeePerContract())
	to.SetTradeFeePerShare(m.TradeFeePerShare())
	to.SetRequireSufficientMarginForNewPositions(m.RequireSufficientMarginForNewPositions())
	to.SetUsePercentOfMargin(m.UsePercentOfMargin())
	to.SetUsePercentOfMarginForDayTrading(m.UsePercentOfMarginForDayTrading())
	to.SetMaximumAllowedAccountBalanceForPositionsAsPercentage(m.MaximumAllowedAccountBalanceForPositionsAsPercentage())
	to.SetFirmID(m.FirmID())
	to.SetTradingIsDisabled(m.TradingIsDisabled())
	to.SetDescriptiveName(m.DescriptiveName())
	to.SetIsMasterFirmControlAccount(m.IsMasterFirmControlAccount())
	to.SetMinimumRequiredAccountValue(m.MinimumRequiredAccountValue())
	to.SetBeginTimeForDayMargin(m.BeginTimeForDayMargin())
	to.SetEndTimeForDayMargin(m.EndTimeForDayMargin())
	to.SetDayMarginTimeZone(m.DayMarginTimeZone())
	to.SetIsSnapshot(m.IsSnapshot())
	to.SetIsFirstMessageInBatch(m.IsFirstMessageInBatch())
	to.SetIsLastMessageInBatch(m.IsLastMessageInBatch())
	to.SetIsDeleted(m.IsDeleted())
	to.SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday(m.UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday())
	to.SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay(m.UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay())
	to.SetUseMasterFirm_SymbolLimitsArray(m.UseMasterFirm_SymbolLimitsArray())
	to.SetUseMasterFirm_TradeFees(m.UseMasterFirm_TradeFees())
	to.SetUseMasterFirm_TradeFeePerShare(m.UseMasterFirm_TradeFeePerShare())
	to.SetUseMasterFirm_RequireSufficientMarginForNewPositions(m.UseMasterFirm_RequireSufficientMarginForNewPositions())
	to.SetUseMasterFirm_UsePercentOfMargin(m.UseMasterFirm_UsePercentOfMargin())
	to.SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage(m.UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage())
	to.SetUseMasterFirm_MinimumRequiredAccountValue(m.UseMasterFirm_MinimumRequiredAccountValue())
	to.SetUseMasterFirm_MarginTimeSettings(m.UseMasterFirm_MarginTimeSettings())
	to.SetUseMasterFirm_TradingIsDisabled(m.UseMasterFirm_TradingIsDisabled())
	to.SetIsTradeStatisticsPublicallyShared(m.IsTradeStatisticsPublicallyShared())
	to.SetIsReadOnlyFollowingRequestsAllowed(m.IsReadOnlyFollowingRequestsAllowed())
	to.SetIsTradeAccountSharingAllowed(m.IsTradeAccountSharingAllowed())
	to.SetReadOnlyShareToAllSCUsernames(m.ReadOnlyShareToAllSCUsernames())
	to.SetUseMasterFirm_SymbolCommissionsArray(m.UseMasterFirm_SymbolCommissionsArray())
	to.SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit(m.UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	to.SetUseMasterFirm_UsePercentOfMarginForDayTrading(m.UseMasterFirm_UsePercentOfMarginForDayTrading())
	to.SetOpenPositionsProfitLossBasedOnSettlement(m.OpenPositionsProfitLossBasedOnSettlement())
	to.SetMarginRequirementFull(m.MarginRequirementFull())
	to.SetMarginRequirementFullPositionsOnly(m.MarginRequirementFullPositionsOnly())
	to.SetUseMasterFirm_TradeFeesFullOverride(m.UseMasterFirm_TradeFeesFullOverride())
	to.SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders(m.UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders())
	to.SetUseMasterFirm_UsePercentOfMarginFullOverride(m.UseMasterFirm_UsePercentOfMarginFullOverride())
	to.SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride(m.UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride())
	to.SetPeakMarginRequirement(m.PeakMarginRequirement())
	to.SetLiquidationOnlyMode(m.LiquidationOnlyMode())
	to.SetFlattenPositionsWhenUnderMarginIntradayTriggered(m.FlattenPositionsWhenUnderMarginIntradayTriggered())
	to.SetFlattenPositionsWhenUnderMinimumAccountValueTriggered(m.FlattenPositionsWhenUnderMinimumAccountValueTriggered())
	to.SetAccountValueAtEndOfDayCaptureTime(m.AccountValueAtEndOfDayCaptureTime())
	to.SetEndOfDayCaptureTime(m.EndOfDayCaptureTime())
	to.SetCustomerOrFirm(m.CustomerOrFirm())
	to.SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet(m.MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet())
	to.SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue(m.MasterFirm_FlattenCancelWhenUnderMinimumAccountValue())
	to.SetMasterFirm_FlattenCancelWhenUnderMarginIntraday(m.MasterFirm_FlattenCancelWhenUnderMarginIntraday())
	to.SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay(m.MasterFirm_FlattenCancelWhenUnderMarginEndOfDay())
	to.SetMasterFirm_MaximumOrderQuantity(m.MasterFirm_MaximumOrderQuantity())
	to.SetLastTriggerDateTimeUTCForDailyLossLimit(m.LastTriggerDateTimeUTCForDailyLossLimit())
	to.SetOpenPositionsProfitLossIsDelayed(m.OpenPositionsProfitLossIsDelayed())
	to.SetExchangeTraderId(m.ExchangeTraderId())
	to.SetProfitLossForOpenPositionDateTimeUTC(m.ProfitLossForOpenPositionDateTimeUTC())
	to.SetUseFixedCashOnHandBalance(m.UseFixedCashOnHandBalance())
	to.SetFixedCashOnHandBalance(m.FixedCashOnHandBalance())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradeAccountDataResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10116)
	w.Uint32Field("m_RequestID", m.RequestID())
	w.Uint8Field("m_TradeAccountNotExist", m.TradeAccountNotExist())
	w.StringField("m_TradeAccount", m.TradeAccount())
	w.BoolField("m_IsSimulated", m.IsSimulated())
	w.StringField("m_CurrencyCode", m.CurrencyCode())
	w.Float64Field("m_CurrentCashBalance", m.CurrentCashBalance())
	w.Float64Field("m_AvailableFundsForNewPositions", m.AvailableFundsForNewPositions())
	w.Float64Field("m_MarginRequirement", m.MarginRequirement())
	w.Float64Field("m_AccountValue", m.AccountValue())
	w.Float64Field("m_OpenPositionsProfitLoss", m.OpenPositionsProfitLoss())
	w.Float64Field("m_DailyProfitLoss", m.DailyProfitLoss())
	w.Uint64Field("m_TransactionIdentifierForCashBalanceAdjustment", m.TransactionIdentifierForCashBalanceAdjustment())
	w.Int64Field("m_LastTransactionDateTime", m.LastTransactionDateTime())
	w.Float64Field("m_TrailingAccountValueAtWhichToNotAllowNewPositions", m.TrailingAccountValueAtWhichToNotAllowNewPositions())
	w.Float64Field("m_CalculatedDailyNetLossLimitInAccountCurrency", m.CalculatedDailyNetLossLimitInAccountCurrency())
	w.Uint8Field("m_DailyNetLossLimitHasBeenReached", m.DailyNetLossLimitHasBeenReached())
	w.Int64Field("m_LastResetDailyNetLossManagementVariablesDateTimeUTC", m.LastResetDailyNetLossManagementVariablesDateTimeUTC())
	w.BoolField("m_IsUnderRequiredMargin", m.IsUnderRequiredMargin())
	w.Float32Field("m_DailyNetLossLimitInAccountCurrency", m.DailyNetLossLimitInAccountCurrency())
	w.Int32Field("m_PercentOfCashBalanceForDailyNetLossLimit", m.PercentOfCashBalanceForDailyNetLossLimit())
	w.BoolField("m_UseTrailingAccountValueToNotAllowIncreaseInPositions", m.UseTrailingAccountValueToNotAllowIncreaseInPositions())
	w.BoolField("m_DoNotAllowIncreaseInPositionsAtDailyLossLimit", m.DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	w.BoolField("m_FlattenPositionsAtDailyLossLimit", m.FlattenPositionsAtDailyLossLimit())
	w.BoolField("m_ClosePositionsAtEndOfDay", m.ClosePositionsAtEndOfDay())
	w.BoolField("m_FlattenPositionsWhenUnderMarginIntraday", m.FlattenPositionsWhenUnderMarginIntraday())
	w.BoolField("m_FlattenPositionsWhenUnderMarginAtEndOfDay", m.FlattenPositionsWhenUnderMarginAtEndOfDay())
	w.StringField("m_SenderSubID", m.SenderSubID())
	w.StringField("m_SenderLocationId", m.SenderLocationId())
	w.StringField("m_SelfMatchPreventionID", m.SelfMatchPreventionID())
	w.Int32Field("m_CTICode", m.CTICode())
	w.BoolField("m_TradeAccountIsReadOnly", m.TradeAccountIsReadOnly())
	w.Int32Field("m_MaximumGlobalPositionQuantity", m.MaximumGlobalPositionQuantity())
	w.Float64Field("m_TradeFeePerContract", m.TradeFeePerContract())
	w.Float64Field("m_TradeFeePerShare", m.TradeFeePerShare())
	w.BoolField("m_RequireSufficientMarginForNewPositions", m.RequireSufficientMarginForNewPositions())
	w.Int32Field("m_UsePercentOfMargin", m.UsePercentOfMargin())
	w.Int32Field("m_UsePercentOfMarginForDayTrading", m.UsePercentOfMarginForDayTrading())
	w.Int32Field("m_MaximumAllowedAccountBalanceForPositionsAsPercentage", m.MaximumAllowedAccountBalanceForPositionsAsPercentage())
	w.StringField("m_FirmID", m.FirmID())
	w.BoolField("m_TradingIsDisabled", m.TradingIsDisabled())
	w.StringField("m_DescriptiveName", m.DescriptiveName())
	w.BoolField("m_IsMasterFirmControlAccount", m.IsMasterFirmControlAccount())
	w.Float64Field("m_MinimumRequiredAccountValue", m.MinimumRequiredAccountValue())
	w.Int64Field("m_BeginTimeForDayMargin", m.BeginTimeForDayMargin())
	w.Int64Field("m_EndTimeForDayMargin", m.EndTimeForDayMargin())
	w.StringField("m_DayMarginTimeZone", m.DayMarginTimeZone())
	w.BoolField("m_IsSnapshot", m.IsSnapshot())
	w.BoolField("m_IsFirstMessageInBatch", m.IsFirstMessageInBatch())
	w.BoolField("m_IsLastMessageInBatch", m.IsLastMessageInBatch())
	w.BoolField("m_IsDeleted", m.IsDeleted())
	w.BoolField("m_UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday", m.UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday())
	w.BoolField("m_UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay", m.UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay())
	w.BoolField("m_UseMasterFirm_SymbolLimitsArray", m.UseMasterFirm_SymbolLimitsArray())
	w.BoolField("m_UseMasterFirm_TradeFees", m.UseMasterFirm_TradeFees())
	w.BoolField("m_UseMasterFirm_TradeFeePerShare", m.UseMasterFirm_TradeFeePerShare())
	w.BoolField("m_UseMasterFirm_RequireSufficientMarginForNewPositions", m.UseMasterFirm_RequireSufficientMarginForNewPositions())
	w.BoolField("m_UseMasterFirm_UsePercentOfMargin", m.UseMasterFirm_UsePercentOfMargin())
	w.BoolField("m_UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage", m.UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage())
	w.BoolField("m_UseMasterFirm_MinimumRequiredAccountValue", m.UseMasterFirm_MinimumRequiredAccountValue())
	w.BoolField("m_UseMasterFirm_MarginTimeSettings", m.UseMasterFirm_MarginTimeSettings())
	w.BoolField("m_UseMasterFirm_TradingIsDisabled", m.UseMasterFirm_TradingIsDisabled())
	w.BoolField("m_IsTradeStatisticsPublicallyShared", m.IsTradeStatisticsPublicallyShared())
	w.BoolField("m_IsReadOnlyFollowingRequestsAllowed", m.IsReadOnlyFollowingRequestsAllowed())
	w.BoolField("m_IsTradeAccountSharingAllowed", m.IsTradeAccountSharingAllowed())
	w.Uint8Field("m_ReadOnlyShareToAllSCUsernames", m.ReadOnlyShareToAllSCUsernames())
	w.BoolField("m_UseMasterFirm_SymbolCommissionsArray", m.UseMasterFirm_SymbolCommissionsArray())
	w.BoolField("m_UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit", m.UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginForDayTrading", m.UseMasterFirm_UsePercentOfMarginForDayTrading())
	w.Float64Field("m_OpenPositionsProfitLossBasedOnSettlement", m.OpenPositionsProfitLossBasedOnSettlement())
	w.Float64Field("m_MarginRequirementFull", m.MarginRequirementFull())
	w.Float64Field("m_MarginRequirementFullPositionsOnly", m.MarginRequirementFullPositionsOnly())
	w.BoolField("m_UseMasterFirm_TradeFeesFullOverride", m.UseMasterFirm_TradeFeesFullOverride())
	w.BoolField("m_UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders", m.UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginFullOverride", m.UseMasterFirm_UsePercentOfMarginFullOverride())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride", m.UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride())
	w.Float64Field("m_PeakMarginRequirement", m.PeakMarginRequirement())
	w.Uint8Field("m_LiquidationOnlyMode", m.LiquidationOnlyMode())
	w.Uint8Field("m_FlattenPositionsWhenUnderMarginIntradayTriggered", m.FlattenPositionsWhenUnderMarginIntradayTriggered())
	w.Uint8Field("m_FlattenPositionsWhenUnderMinimumAccountValueTriggered", m.FlattenPositionsWhenUnderMinimumAccountValueTriggered())
	w.Float64Field("m_AccountValueAtEndOfDayCaptureTime", m.AccountValueAtEndOfDayCaptureTime())
	w.Int64Field("m_EndOfDayCaptureTime", m.EndOfDayCaptureTime())
	w.Uint8Field("m_CustomerOrFirm", m.CustomerOrFirm())
	w.Uint8Field("m_MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet", m.MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet())
	w.Uint8Field("m_MasterFirm_FlattenCancelWhenUnderMinimumAccountValue", m.MasterFirm_FlattenCancelWhenUnderMinimumAccountValue())
	w.Uint8Field("m_MasterFirm_FlattenCancelWhenUnderMarginIntraday", m.MasterFirm_FlattenCancelWhenUnderMarginIntraday())
	w.Uint8Field("m_MasterFirm_FlattenCancelWhenUnderMarginEndOfDay", m.MasterFirm_FlattenCancelWhenUnderMarginEndOfDay())
	w.Uint32Field("m_MasterFirm_MaximumOrderQuantity", m.MasterFirm_MaximumOrderQuantity())
	w.Int64Field("m_LastTriggerDateTimeUTCForDailyLossLimit", m.LastTriggerDateTimeUTCForDailyLossLimit())
	w.BoolField("m_OpenPositionsProfitLossIsDelayed", m.OpenPositionsProfitLossIsDelayed())
	w.StringField("m_ExchangeTraderId", m.ExchangeTraderId())
	w.Int64Field("m_ProfitLossForOpenPositionDateTimeUTC", m.ProfitLossForOpenPositionDateTimeUTC())
	w.BoolField("m_UseFixedCashOnHandBalance", m.UseFixedCashOnHandBalance())
	w.Float32Field("m_FixedCashOnHandBalance", m.FixedCashOnHandBalance())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10116 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "m_RequestID":
			m.SetRequestID(r.Uint32())
		case "m_TradeAccountNotExist":
			m.SetTradeAccountNotExist(r.Uint8())
		case "m_TradeAccount":
			m.SetTradeAccount(r.String())
		case "m_IsSimulated":
			m.SetIsSimulated(r.Bool())
		case "m_CurrencyCode":
			m.SetCurrencyCode(r.String())
		case "m_CurrentCashBalance":
			m.SetCurrentCashBalance(r.Float64())
		case "m_AvailableFundsForNewPositions":
			m.SetAvailableFundsForNewPositions(r.Float64())
		case "m_MarginRequirement":
			m.SetMarginRequirement(r.Float64())
		case "m_AccountValue":
			m.SetAccountValue(r.Float64())
		case "m_OpenPositionsProfitLoss":
			m.SetOpenPositionsProfitLoss(r.Float64())
		case "m_DailyProfitLoss":
			m.SetDailyProfitLoss(r.Float64())
		case "m_TransactionIdentifierForCashBalanceAdjustment":
			m.SetTransactionIdentifierForCashBalanceAdjustment(r.Uint64())
		case "m_LastTransactionDateTime":
			m.SetLastTransactionDateTime(r.Int64())
		case "m_TrailingAccountValueAtWhichToNotAllowNewPositions":
			m.SetTrailingAccountValueAtWhichToNotAllowNewPositions(r.Float64())
		case "m_CalculatedDailyNetLossLimitInAccountCurrency":
			m.SetCalculatedDailyNetLossLimitInAccountCurrency(r.Float64())
		case "m_DailyNetLossLimitHasBeenReached":
			m.SetDailyNetLossLimitHasBeenReached(r.Uint8())
		case "m_LastResetDailyNetLossManagementVariablesDateTimeUTC":
			m.SetLastResetDailyNetLossManagementVariablesDateTimeUTC(r.Int64())
		case "m_IsUnderRequiredMargin":
			m.SetIsUnderRequiredMargin(r.Bool())
		case "m_DailyNetLossLimitInAccountCurrency":
			m.SetDailyNetLossLimitInAccountCurrency(r.Float32())
		case "m_PercentOfCashBalanceForDailyNetLossLimit":
			m.SetPercentOfCashBalanceForDailyNetLossLimit(r.Int32())
		case "m_UseTrailingAccountValueToNotAllowIncreaseInPositions":
			m.SetUseTrailingAccountValueToNotAllowIncreaseInPositions(r.Bool())
		case "m_DoNotAllowIncreaseInPositionsAtDailyLossLimit":
			m.SetDoNotAllowIncreaseInPositionsAtDailyLossLimit(r.Bool())
		case "m_FlattenPositionsAtDailyLossLimit":
			m.SetFlattenPositionsAtDailyLossLimit(r.Bool())
		case "m_ClosePositionsAtEndOfDay":
			m.SetClosePositionsAtEndOfDay(r.Bool())
		case "m_FlattenPositionsWhenUnderMarginIntraday":
			m.SetFlattenPositionsWhenUnderMarginIntraday(r.Bool())
		case "m_FlattenPositionsWhenUnderMarginAtEndOfDay":
			m.SetFlattenPositionsWhenUnderMarginAtEndOfDay(r.Bool())
		case "m_SenderSubID":
			m.SetSenderSubID(r.String())
		case "m_SenderLocationId":
			m.SetSenderLocationId(r.String())
		case "m_SelfMatchPreventionID":
			m.SetSelfMatchPreventionID(r.String())
		case "m_CTICode":
			m.SetCTICode(r.Int32())
		case "m_TradeAccountIsReadOnly":
			m.SetTradeAccountIsReadOnly(r.Bool())
		case "m_MaximumGlobalPositionQuantity":
			m.SetMaximumGlobalPositionQuantity(r.Int32())
		case "m_TradeFeePerContract":
			m.SetTradeFeePerContract(r.Float64())
		case "m_TradeFeePerShare":
			m.SetTradeFeePerShare(r.Float64())
		case "m_RequireSufficientMarginForNewPositions":
			m.SetRequireSufficientMarginForNewPositions(r.Bool())
		case "m_UsePercentOfMargin":
			m.SetUsePercentOfMargin(r.Int32())
		case "m_UsePercentOfMarginForDayTrading":
			m.SetUsePercentOfMarginForDayTrading(r.Int32())
		case "m_MaximumAllowedAccountBalanceForPositionsAsPercentage":
			m.SetMaximumAllowedAccountBalanceForPositionsAsPercentage(r.Int32())
		case "m_FirmID":
			m.SetFirmID(r.String())
		case "m_TradingIsDisabled":
			m.SetTradingIsDisabled(r.Bool())
		case "m_DescriptiveName":
			m.SetDescriptiveName(r.String())
		case "m_IsMasterFirmControlAccount":
			m.SetIsMasterFirmControlAccount(r.Bool())
		case "m_MinimumRequiredAccountValue":
			m.SetMinimumRequiredAccountValue(r.Float64())
		case "m_BeginTimeForDayMargin":
			m.SetBeginTimeForDayMargin(r.Int64())
		case "m_EndTimeForDayMargin":
			m.SetEndTimeForDayMargin(r.Int64())
		case "m_DayMarginTimeZone":
			m.SetDayMarginTimeZone(r.String())
		case "m_IsSnapshot":
			m.SetIsSnapshot(r.Bool())
		case "m_IsFirstMessageInBatch":
			m.SetIsFirstMessageInBatch(r.Bool())
		case "m_IsLastMessageInBatch":
			m.SetIsLastMessageInBatch(r.Bool())
		case "m_IsDeleted":
			m.SetIsDeleted(r.Bool())
		case "m_UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday":
			m.SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday(r.Bool())
		case "m_UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay":
			m.SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay(r.Bool())
		case "m_UseMasterFirm_SymbolLimitsArray":
			m.SetUseMasterFirm_SymbolLimitsArray(r.Bool())
		case "m_UseMasterFirm_TradeFees":
			m.SetUseMasterFirm_TradeFees(r.Bool())
		case "m_UseMasterFirm_TradeFeePerShare":
			m.SetUseMasterFirm_TradeFeePerShare(r.Bool())
		case "m_UseMasterFirm_RequireSufficientMarginForNewPositions":
			m.SetUseMasterFirm_RequireSufficientMarginForNewPositions(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMargin":
			m.SetUseMasterFirm_UsePercentOfMargin(r.Bool())
		case "m_UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage":
			m.SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage(r.Bool())
		case "m_UseMasterFirm_MinimumRequiredAccountValue":
			m.SetUseMasterFirm_MinimumRequiredAccountValue(r.Bool())
		case "m_UseMasterFirm_MarginTimeSettings":
			m.SetUseMasterFirm_MarginTimeSettings(r.Bool())
		case "m_UseMasterFirm_TradingIsDisabled":
			m.SetUseMasterFirm_TradingIsDisabled(r.Bool())
		case "m_IsTradeStatisticsPublicallyShared":
			m.SetIsTradeStatisticsPublicallyShared(r.Bool())
		case "m_IsReadOnlyFollowingRequestsAllowed":
			m.SetIsReadOnlyFollowingRequestsAllowed(r.Bool())
		case "m_IsTradeAccountSharingAllowed":
			m.SetIsTradeAccountSharingAllowed(r.Bool())
		case "m_ReadOnlyShareToAllSCUsernames":
			m.SetReadOnlyShareToAllSCUsernames(r.Uint8())
		case "m_UseMasterFirm_SymbolCommissionsArray":
			m.SetUseMasterFirm_SymbolCommissionsArray(r.Bool())
		case "m_UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit":
			m.SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginForDayTrading":
			m.SetUseMasterFirm_UsePercentOfMarginForDayTrading(r.Bool())
		case "m_OpenPositionsProfitLossBasedOnSettlement":
			m.SetOpenPositionsProfitLossBasedOnSettlement(r.Float64())
		case "m_MarginRequirementFull":
			m.SetMarginRequirementFull(r.Float64())
		case "m_MarginRequirementFullPositionsOnly":
			m.SetMarginRequirementFullPositionsOnly(r.Float64())
		case "m_UseMasterFirm_TradeFeesFullOverride":
			m.SetUseMasterFirm_TradeFeesFullOverride(r.Bool())
		case "m_UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders":
			m.SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginFullOverride":
			m.SetUseMasterFirm_UsePercentOfMarginFullOverride(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride":
			m.SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride(r.Bool())
		case "m_PeakMarginRequirement":
			m.SetPeakMarginRequirement(r.Float64())
		case "m_LiquidationOnlyMode":
			m.SetLiquidationOnlyMode(r.Uint8())
		case "m_FlattenPositionsWhenUnderMarginIntradayTriggered":
			m.SetFlattenPositionsWhenUnderMarginIntradayTriggered(r.Uint8())
		case "m_FlattenPositionsWhenUnderMinimumAccountValueTriggered":
			m.SetFlattenPositionsWhenUnderMinimumAccountValueTriggered(r.Uint8())
		case "m_AccountValueAtEndOfDayCaptureTime":
			m.SetAccountValueAtEndOfDayCaptureTime(r.Float64())
		case "m_EndOfDayCaptureTime":
			m.SetEndOfDayCaptureTime(r.Int64())
		case "m_CustomerOrFirm":
			m.SetCustomerOrFirm(r.Uint8())
		case "m_MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet":
			m.SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet(r.Uint8())
		case "m_MasterFirm_FlattenCancelWhenUnderMinimumAccountValue":
			m.SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue(r.Uint8())
		case "m_MasterFirm_FlattenCancelWhenUnderMarginIntraday":
			m.SetMasterFirm_FlattenCancelWhenUnderMarginIntraday(r.Uint8())
		case "m_MasterFirm_FlattenCancelWhenUnderMarginEndOfDay":
			m.SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay(r.Uint8())
		case "m_MasterFirm_MaximumOrderQuantity":
			m.SetMasterFirm_MaximumOrderQuantity(r.Uint32())
		case "m_LastTriggerDateTimeUTCForDailyLossLimit":
			m.SetLastTriggerDateTimeUTCForDailyLossLimit(r.Int64())
		case "m_OpenPositionsProfitLossIsDelayed":
			m.SetOpenPositionsProfitLossIsDelayed(r.Bool())
		case "m_ExchangeTraderId":
			m.SetExchangeTraderId(r.String())
		case "m_ProfitLossForOpenPositionDateTimeUTC":
			m.SetProfitLossForOpenPositionDateTimeUTC(r.Int64())
		case "m_UseFixedCashOnHandBalance":
			m.SetUseFixedCashOnHandBalance(r.Bool())
		case "m_FixedCashOnHandBalance":
			m.SetFixedCashOnHandBalance(r.Float32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
