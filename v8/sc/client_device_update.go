// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const ClientDeviceUpdateSize = 12

//     Size                    uint16  = ClientDeviceUpdateSize  (12)
//     Type                    uint16  = CLIENT_DEVICE_UPDATE  (10139)
//     ClientDeviceIdentifier  int64   = 0
var _ClientDeviceUpdateDefault = []byte{12, 0, 155, 39, 0, 0, 0, 0, 0, 0, 0, 0}

type ClientDeviceUpdate struct {
	p message.Fixed
}

func NewClientDeviceUpdateFrom(b []byte) ClientDeviceUpdate {
	return ClientDeviceUpdate{p: message.NewFixed(b)}
}

func WrapClientDeviceUpdate(b []byte) ClientDeviceUpdate {
	return ClientDeviceUpdate{p: message.WrapFixed(b)}
}

func NewClientDeviceUpdate() *ClientDeviceUpdate {
	return &ClientDeviceUpdate{p: message.NewFixed(_ClientDeviceUpdateDefault)}
}

func ParseClientDeviceUpdate(b []byte) (ClientDeviceUpdate, error) {
	if len(b) < 4 {
		return ClientDeviceUpdate{}, message.ErrShortBuffer
	}
	m := WrapClientDeviceUpdate(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ClientDeviceUpdate{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return ClientDeviceUpdate{}, message.ErrBaseSizeOverflow
	}
	if size < 12 {
		clone := *NewClientDeviceUpdate()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _ClientDeviceUpdateDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m ClientDeviceUpdate) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ClientDeviceUpdate) Type() uint16 {
	return m.p.Uint16LE(2)
}

// ClientDeviceIdentifier
func (m ClientDeviceUpdate) ClientDeviceIdentifier() int64 {
	return m.p.Int64LE(4)
}

// SetClientDeviceIdentifier
func (m *ClientDeviceUpdate) SetClientDeviceIdentifier(value int64) *ClientDeviceUpdate {
	m.p.SetInt64LE(4, value)
	return m
}

func (m ClientDeviceUpdate) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ClientDeviceUpdate) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m ClientDeviceUpdate) Copy(to ClientDeviceUpdate) {
	to.SetClientDeviceIdentifier(m.ClientDeviceIdentifier())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ClientDeviceUpdate) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10139)
	w.Int64Field("ClientDeviceIdentifier", m.ClientDeviceIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ClientDeviceUpdate) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10139 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ClientDeviceIdentifier":
			m.SetClientDeviceIdentifier(r.Int64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ClientDeviceUpdate) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
