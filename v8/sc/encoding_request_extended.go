// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const EncodingRequestExtendedSize = 20

//     Size             uint16              = EncodingRequestExtendedSize  (20)
//     Type             uint16              = ENCODING_REQUEST  (6)
//     ProtocolVersion  int32               = CURRENT_VERSION  (8)
//     Encoding         EncodingEnum        = BINARY_ENCODING  (0)
//     ProtocolType     string[4]           = ""
//     UseCompression   UseCompressionEnum  = USE_COMPRESSION_DISABLED  (0)
var _EncodingRequestExtendedDefault = []byte{20, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type EncodingRequestExtended struct {
	p message.Fixed
}

func NewEncodingRequestExtendedFrom(b []byte) EncodingRequestExtended {
	return EncodingRequestExtended{p: message.NewFixed(b)}
}

func WrapEncodingRequestExtended(b []byte) EncodingRequestExtended {
	return EncodingRequestExtended{p: message.WrapFixed(b)}
}

func NewEncodingRequestExtended() *EncodingRequestExtended {
	return &EncodingRequestExtended{p: message.NewFixed(_EncodingRequestExtendedDefault)}
}

func ParseEncodingRequestExtended(b []byte) (EncodingRequestExtended, error) {
	if len(b) < 4 {
		return EncodingRequestExtended{}, message.ErrShortBuffer
	}
	m := WrapEncodingRequestExtended(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return EncodingRequestExtended{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return EncodingRequestExtended{}, message.ErrBaseSizeOverflow
	}
	if size < 20 {
		clone := *NewEncodingRequestExtended()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _EncodingRequestExtendedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m EncodingRequestExtended) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m EncodingRequestExtended) Type() uint16 {
	return m.p.Uint16LE(2)
}

// ProtocolVersion
func (m EncodingRequestExtended) ProtocolVersion() int32 {
	return m.p.Int32LE(4)
}

// Encoding
func (m EncodingRequestExtended) Encoding() EncodingEnum {
	return EncodingEnum(m.p.Int32LE(8))
}

// ProtocolType
func (m EncodingRequestExtended) ProtocolType() string {
	return m.p.StringFixed(12, 4)
}

// UseCompression
func (m EncodingRequestExtended) UseCompression() UseCompressionEnum {
	return UseCompressionEnum(m.p.Int32LE(16))
}

// SetProtocolVersion
func (m *EncodingRequestExtended) SetProtocolVersion(value int32) *EncodingRequestExtended {
	m.p.SetInt32LE(4, value)
	return m
}

// SetEncoding
func (m *EncodingRequestExtended) SetEncoding(value EncodingEnum) *EncodingRequestExtended {
	m.p.SetInt32LE(8, int32(value))
	return m
}

// SetProtocolType
func (m *EncodingRequestExtended) SetProtocolType(value string) *EncodingRequestExtended {
	m.p.SetStringFixed(12, 4, value)
	return m
}

// SetUseCompression
func (m *EncodingRequestExtended) SetUseCompression(value UseCompressionEnum) *EncodingRequestExtended {
	m.p.SetInt32LE(16, int32(value))
	return m
}

func (m EncodingRequestExtended) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m EncodingRequestExtended) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m EncodingRequestExtended) Copy(to EncodingRequestExtended) {
	to.SetProtocolVersion(m.ProtocolVersion())
	to.SetEncoding(m.Encoding())
	to.SetProtocolType(m.ProtocolType())
	to.SetUseCompression(m.UseCompression())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m EncodingRequestExtended) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 6)
	w.Int32Field("ProtocolVersion", m.ProtocolVersion())
	w.Int32Field("Encoding", int32(m.Encoding()))
	w.StringField("ProtocolType", m.ProtocolType())
	w.Int32Field("UseCompression", int32(m.UseCompression()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *EncodingRequestExtended) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 6 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ProtocolVersion":
			m.SetProtocolVersion(r.Int32())
		case "Encoding":
			m.SetEncoding(EncodingEnum(r.Int32()))
		case "ProtocolType":
			m.SetProtocolType(r.String())
		case "UseCompression":
			m.SetUseCompression(UseCompressionEnum(r.Int32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *EncodingRequestExtended) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
