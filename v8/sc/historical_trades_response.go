// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalTradesResponseSize = 111

const HistoricalTradesResponseFixedSize = 317

//     Size                       uint16                    = HistoricalTradesResponseSize  (111)
//     Type                       uint16                    = HISTORICAL_TRADES_RESPONSE  (10102)
//     BaseSize                   uint16                    = HistoricalTradesResponseSize  (111)
//     RequestID                  int32                     = 0
//     IsFinalMessage             bool                      = false
//     Symbol                     string                    = ""
//     TradeAccount               string                    = ""
//     EntryDateTime              DateTimeWithMilliseconds  = 0.000000
//     ExitDateTime               DateTimeWithMilliseconds  = 0.000000
//     EntryPrice                 float64                   = 0.000000
//     ExitPrice                  float64                   = 0.000000
//     TradeType                  BuySellEnum               = BUY_SELL_UNSET  (0)
//     EntryQuantity              uint32                    = 0
//     ExitQuantity               uint32                    = 0
//     MaxOpenQuantity            uint32                    = 0
//     ClosedProfitLoss           float64                   = 0.000000
//     MaximumOpenPositionLoss    float64                   = 0.000000
//     MaximumOpenPositionProfit  float64                   = 0.000000
//     Commission                 float64                   = 0.000000
//     OpenFillExecutionID        string                    = ""
//     CloseFillExecutionID       string                    = ""
//     SubAccountIdentifier       uint32                    = 0
var _HistoricalTradesResponseDefault = []byte{111, 0, 118, 39, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                       uint16                    = HistoricalTradesResponseFixedSize  (317)
//     Type                       uint16                    = HISTORICAL_TRADES_RESPONSE  (10102)
//     RequestID                  int32                     = 0
//     IsFinalMessage             bool                      = false
//     Symbol                     string[64]                = ""
//     TradeAccount               string[32]                = ""
//     EntryDateTime              DateTimeWithMilliseconds  = 0.000000
//     ExitDateTime               DateTimeWithMilliseconds  = 0.000000
//     EntryPrice                 float64                   = 0.000000
//     ExitPrice                  float64                   = 0.000000
//     TradeType                  BuySellEnum               = BUY_SELL_UNSET  (0)
//     EntryQuantity              uint32                    = 0
//     ExitQuantity               uint32                    = 0
//     MaxOpenQuantity            uint32                    = 0
//     ClosedProfitLoss           float64                   = 0.000000
//     MaximumOpenPositionLoss    float64                   = 0.000000
//     MaximumOpenPositionProfit  float64                   = 0.000000
//     Commission                 float64                   = 0.000000
//     OpenFillExecutionID        string[64]                = ""
//     CloseFillExecutionID       string[64]                = ""
//     SubAccountIdentifier       uint32                    = 0
var _HistoricalTradesResponseFixedDefault = []byte{61, 1, 118, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type HistoricalTradesResponse struct {
	p message.VLS
}

type HistoricalTradesResponseFixed struct {
	p message.Fixed
}

func NewHistoricalTradesResponseFrom(b []byte) HistoricalTradesResponse {
	return HistoricalTradesResponse{p: message.NewVLS(b)}
}

func WrapHistoricalTradesResponse(b []byte) HistoricalTradesResponse {
	return HistoricalTradesResponse{p: message.WrapVLS(b)}
}

func NewHistoricalTradesResponse() *HistoricalTradesResponse {
	return &HistoricalTradesResponse{p: message.NewVLS(_HistoricalTradesResponseDefault)}
}

func ParseHistoricalTradesResponse(b []byte) (HistoricalTradesResponse, error) {
	if len(b) < 6 {
		return HistoricalTradesResponse{}, message.ErrShortBuffer
	}
	m := WrapHistoricalTradesResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalTradesResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalTradesResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 111 {
		newSize := len(b) + (111 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalTradesResponse{}, message.ErrOverflow
		}
		clone := HistoricalTradesResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalTradesResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(111 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(11)
			if offset > 0 {
				clone.p.SetUint16LE(11, offset+shift)
			}
			offset = clone.p.Uint16LE(15)
			if offset > 0 {
				clone.p.SetUint16LE(15, offset+shift)
			}
			offset = clone.p.Uint16LE(99)
			if offset > 0 {
				clone.p.SetUint16LE(99, offset+shift)
			}
			offset = clone.p.Uint16LE(103)
			if offset > 0 {
				clone.p.SetUint16LE(103, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalTradesResponseFixedFrom(b []byte) HistoricalTradesResponseFixed {
	return HistoricalTradesResponseFixed{p: message.NewFixed(b)}
}

func WrapHistoricalTradesResponseFixed(b []byte) HistoricalTradesResponseFixed {
	return HistoricalTradesResponseFixed{p: message.WrapFixed(b)}
}

func NewHistoricalTradesResponseFixed() *HistoricalTradesResponseFixed {
	return &HistoricalTradesResponseFixed{p: message.NewFixed(_HistoricalTradesResponseFixedDefault)}
}

func ParseHistoricalTradesResponseFixed(b []byte) (HistoricalTradesResponseFixed, error) {
	if len(b) < 4 {
		return HistoricalTradesResponseFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalTradesResponseFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalTradesResponseFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalTradesResponseFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 317 {
		clone := *NewHistoricalTradesResponseFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalTradesResponseFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m HistoricalTradesResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalTradesResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalTradesResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m HistoricalTradesResponse) RequestID() int32 {
	return m.p.Int32LE(6)
}

// IsFinalMessage
func (m HistoricalTradesResponse) IsFinalMessage() bool {
	return m.p.Bool(10)
}

// Symbol
func (m HistoricalTradesResponse) Symbol() string {
	return m.p.StringVLS(11)
}

// TradeAccount
func (m HistoricalTradesResponse) TradeAccount() string {
	return m.p.StringVLS(15)
}

// EntryDateTime
func (m HistoricalTradesResponse) EntryDateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(19))
}

// ExitDateTime
func (m HistoricalTradesResponse) ExitDateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(27))
}

// EntryPrice
func (m HistoricalTradesResponse) EntryPrice() float64 {
	return m.p.Float64LE(35)
}

// ExitPrice
func (m HistoricalTradesResponse) ExitPrice() float64 {
	return m.p.Float64LE(43)
}

// TradeType
func (m HistoricalTradesResponse) TradeType() BuySellEnum {
	return BuySellEnum(m.p.Int32LE(51))
}

// EntryQuantity
func (m HistoricalTradesResponse) EntryQuantity() uint32 {
	return m.p.Uint32LE(55)
}

// ExitQuantity
func (m HistoricalTradesResponse) ExitQuantity() uint32 {
	return m.p.Uint32LE(59)
}

// MaxOpenQuantity
func (m HistoricalTradesResponse) MaxOpenQuantity() uint32 {
	return m.p.Uint32LE(63)
}

// ClosedProfitLoss
func (m HistoricalTradesResponse) ClosedProfitLoss() float64 {
	return m.p.Float64LE(67)
}

// MaximumOpenPositionLoss
func (m HistoricalTradesResponse) MaximumOpenPositionLoss() float64 {
	return m.p.Float64LE(75)
}

// MaximumOpenPositionProfit
func (m HistoricalTradesResponse) MaximumOpenPositionProfit() float64 {
	return m.p.Float64LE(83)
}

// Commission
func (m HistoricalTradesResponse) Commission() float64 {
	return m.p.Float64LE(91)
}

// OpenFillExecutionID
func (m HistoricalTradesResponse) OpenFillExecutionID() string {
	return m.p.StringVLS(99)
}

// CloseFillExecutionID
func (m HistoricalTradesResponse) CloseFillExecutionID() string {
	return m.p.StringVLS(103)
}

// SubAccountIdentifier
func (m HistoricalTradesResponse) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(107)
}

// Size
func (m HistoricalTradesResponseFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalTradesResponseFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m HistoricalTradesResponseFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// IsFinalMessage
func (m HistoricalTradesResponseFixed) IsFinalMessage() bool {
	return m.p.Bool(8)
}

// Symbol
func (m HistoricalTradesResponseFixed) Symbol() string {
	return m.p.StringFixed(9, 64)
}

// TradeAccount
func (m HistoricalTradesResponseFixed) TradeAccount() string {
	return m.p.StringFixed(73, 32)
}

// EntryDateTime
func (m HistoricalTradesResponseFixed) EntryDateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(105))
}

// ExitDateTime
func (m HistoricalTradesResponseFixed) ExitDateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(113))
}

// EntryPrice
func (m HistoricalTradesResponseFixed) EntryPrice() float64 {
	return m.p.Float64LE(121)
}

// ExitPrice
func (m HistoricalTradesResponseFixed) ExitPrice() float64 {
	return m.p.Float64LE(129)
}

// TradeType
func (m HistoricalTradesResponseFixed) TradeType() BuySellEnum {
	return BuySellEnum(m.p.Int32LE(137))
}

// EntryQuantity
func (m HistoricalTradesResponseFixed) EntryQuantity() uint32 {
	return m.p.Uint32LE(141)
}

// ExitQuantity
func (m HistoricalTradesResponseFixed) ExitQuantity() uint32 {
	return m.p.Uint32LE(145)
}

// MaxOpenQuantity
func (m HistoricalTradesResponseFixed) MaxOpenQuantity() uint32 {
	return m.p.Uint32LE(149)
}

// ClosedProfitLoss
func (m HistoricalTradesResponseFixed) ClosedProfitLoss() float64 {
	return m.p.Float64LE(153)
}

// MaximumOpenPositionLoss
func (m HistoricalTradesResponseFixed) MaximumOpenPositionLoss() float64 {
	return m.p.Float64LE(161)
}

// MaximumOpenPositionProfit
func (m HistoricalTradesResponseFixed) MaximumOpenPositionProfit() float64 {
	return m.p.Float64LE(169)
}

// Commission
func (m HistoricalTradesResponseFixed) Commission() float64 {
	return m.p.Float64LE(177)
}

// OpenFillExecutionID
func (m HistoricalTradesResponseFixed) OpenFillExecutionID() string {
	return m.p.StringFixed(185, 64)
}

// CloseFillExecutionID
func (m HistoricalTradesResponseFixed) CloseFillExecutionID() string {
	return m.p.StringFixed(249, 64)
}

// SubAccountIdentifier
func (m HistoricalTradesResponseFixed) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(313)
}

// SetRequestID
func (m *HistoricalTradesResponse) SetRequestID(value int32) *HistoricalTradesResponse {
	m.p.SetInt32LE(6, value)
	return m
}

// SetIsFinalMessage
func (m *HistoricalTradesResponse) SetIsFinalMessage(value bool) *HistoricalTradesResponse {
	m.p.SetBool(10, value)
	return m
}

// SetSymbol
func (m *HistoricalTradesResponse) SetSymbol(value string) *HistoricalTradesResponse {
	m.p.SetStringVLS(11, value)
	return m
}

// SetTradeAccount
func (m *HistoricalTradesResponse) SetTradeAccount(value string) *HistoricalTradesResponse {
	m.p.SetStringVLS(15, value)
	return m
}

// SetEntryDateTime
func (m *HistoricalTradesResponse) SetEntryDateTime(value DateTimeWithMilliseconds) *HistoricalTradesResponse {
	m.p.SetFloat64LE(19, float64(value))
	return m
}

// SetExitDateTime
func (m *HistoricalTradesResponse) SetExitDateTime(value DateTimeWithMilliseconds) *HistoricalTradesResponse {
	m.p.SetFloat64LE(27, float64(value))
	return m
}

// SetEntryPrice
func (m *HistoricalTradesResponse) SetEntryPrice(value float64) *HistoricalTradesResponse {
	m.p.SetFloat64LE(35, value)
	return m
}

// SetExitPrice
func (m *HistoricalTradesResponse) SetExitPrice(value float64) *HistoricalTradesResponse {
	m.p.SetFloat64LE(43, value)
	return m
}

// SetTradeType
func (m *HistoricalTradesResponse) SetTradeType(value BuySellEnum) *HistoricalTradesResponse {
	m.p.SetInt32LE(51, int32(value))
	return m
}

// SetEntryQuantity
func (m *HistoricalTradesResponse) SetEntryQuantity(value uint32) *HistoricalTradesResponse {
	m.p.SetUint32LE(55, value)
	return m
}

// SetExitQuantity
func (m *HistoricalTradesResponse) SetExitQuantity(value uint32) *HistoricalTradesResponse {
	m.p.SetUint32LE(59, value)
	return m
}

// SetMaxOpenQuantity
func (m *HistoricalTradesResponse) SetMaxOpenQuantity(value uint32) *HistoricalTradesResponse {
	m.p.SetUint32LE(63, value)
	return m
}

// SetClosedProfitLoss
func (m *HistoricalTradesResponse) SetClosedProfitLoss(value float64) *HistoricalTradesResponse {
	m.p.SetFloat64LE(67, value)
	return m
}

// SetMaximumOpenPositionLoss
func (m *HistoricalTradesResponse) SetMaximumOpenPositionLoss(value float64) *HistoricalTradesResponse {
	m.p.SetFloat64LE(75, value)
	return m
}

// SetMaximumOpenPositionProfit
func (m *HistoricalTradesResponse) SetMaximumOpenPositionProfit(value float64) *HistoricalTradesResponse {
	m.p.SetFloat64LE(83, value)
	return m
}

// SetCommission
func (m *HistoricalTradesResponse) SetCommission(value float64) *HistoricalTradesResponse {
	m.p.SetFloat64LE(91, value)
	return m
}

// SetOpenFillExecutionID
func (m *HistoricalTradesResponse) SetOpenFillExecutionID(value string) *HistoricalTradesResponse {
	m.p.SetStringVLS(99, value)
	return m
}

// SetCloseFillExecutionID
func (m *HistoricalTradesResponse) SetCloseFillExecutionID(value string) *HistoricalTradesResponse {
	m.p.SetStringVLS(103, value)
	return m
}

// SetSubAccountIdentifier
func (m *HistoricalTradesResponse) SetSubAccountIdentifier(value uint32) *HistoricalTradesResponse {
	m.p.SetUint32LE(107, value)
	return m
}

// SetRequestID
func (m *HistoricalTradesResponseFixed) SetRequestID(value int32) *HistoricalTradesResponseFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetIsFinalMessage
func (m *HistoricalTradesResponseFixed) SetIsFinalMessage(value bool) *HistoricalTradesResponseFixed {
	m.p.SetBool(8, value)
	return m
}

// SetSymbol
func (m *HistoricalTradesResponseFixed) SetSymbol(value string) *HistoricalTradesResponseFixed {
	m.p.SetStringFixed(9, 64, value)
	return m
}

// SetTradeAccount
func (m *HistoricalTradesResponseFixed) SetTradeAccount(value string) *HistoricalTradesResponseFixed {
	m.p.SetStringFixed(73, 32, value)
	return m
}

// SetEntryDateTime
func (m *HistoricalTradesResponseFixed) SetEntryDateTime(value DateTimeWithMilliseconds) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(105, float64(value))
	return m
}

// SetExitDateTime
func (m *HistoricalTradesResponseFixed) SetExitDateTime(value DateTimeWithMilliseconds) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(113, float64(value))
	return m
}

// SetEntryPrice
func (m *HistoricalTradesResponseFixed) SetEntryPrice(value float64) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(121, value)
	return m
}

// SetExitPrice
func (m *HistoricalTradesResponseFixed) SetExitPrice(value float64) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(129, value)
	return m
}

// SetTradeType
func (m *HistoricalTradesResponseFixed) SetTradeType(value BuySellEnum) *HistoricalTradesResponseFixed {
	m.p.SetInt32LE(137, int32(value))
	return m
}

// SetEntryQuantity
func (m *HistoricalTradesResponseFixed) SetEntryQuantity(value uint32) *HistoricalTradesResponseFixed {
	m.p.SetUint32LE(141, value)
	return m
}

// SetExitQuantity
func (m *HistoricalTradesResponseFixed) SetExitQuantity(value uint32) *HistoricalTradesResponseFixed {
	m.p.SetUint32LE(145, value)
	return m
}

// SetMaxOpenQuantity
func (m *HistoricalTradesResponseFixed) SetMaxOpenQuantity(value uint32) *HistoricalTradesResponseFixed {
	m.p.SetUint32LE(149, value)
	return m
}

// SetClosedProfitLoss
func (m *HistoricalTradesResponseFixed) SetClosedProfitLoss(value float64) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(153, value)
	return m
}

// SetMaximumOpenPositionLoss
func (m *HistoricalTradesResponseFixed) SetMaximumOpenPositionLoss(value float64) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(161, value)
	return m
}

// SetMaximumOpenPositionProfit
func (m *HistoricalTradesResponseFixed) SetMaximumOpenPositionProfit(value float64) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(169, value)
	return m
}

// SetCommission
func (m *HistoricalTradesResponseFixed) SetCommission(value float64) *HistoricalTradesResponseFixed {
	m.p.SetFloat64LE(177, value)
	return m
}

// SetOpenFillExecutionID
func (m *HistoricalTradesResponseFixed) SetOpenFillExecutionID(value string) *HistoricalTradesResponseFixed {
	m.p.SetStringFixed(185, 64, value)
	return m
}

// SetCloseFillExecutionID
func (m *HistoricalTradesResponseFixed) SetCloseFillExecutionID(value string) *HistoricalTradesResponseFixed {
	m.p.SetStringFixed(249, 64, value)
	return m
}

// SetSubAccountIdentifier
func (m *HistoricalTradesResponseFixed) SetSubAccountIdentifier(value uint32) *HistoricalTradesResponseFixed {
	m.p.SetUint32LE(313, value)
	return m
}

func (m HistoricalTradesResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalTradesResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m HistoricalTradesResponseFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalTradesResponseFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m HistoricalTradesResponse) Copy(to HistoricalTradesResponse) {
	to.SetRequestID(m.RequestID())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetExitDateTime(m.ExitDateTime())
	to.SetEntryPrice(m.EntryPrice())
	to.SetExitPrice(m.ExitPrice())
	to.SetTradeType(m.TradeType())
	to.SetEntryQuantity(m.EntryQuantity())
	to.SetExitQuantity(m.ExitQuantity())
	to.SetMaxOpenQuantity(m.MaxOpenQuantity())
	to.SetClosedProfitLoss(m.ClosedProfitLoss())
	to.SetMaximumOpenPositionLoss(m.MaximumOpenPositionLoss())
	to.SetMaximumOpenPositionProfit(m.MaximumOpenPositionProfit())
	to.SetCommission(m.Commission())
	to.SetOpenFillExecutionID(m.OpenFillExecutionID())
	to.SetCloseFillExecutionID(m.CloseFillExecutionID())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

// CopyTo
func (m HistoricalTradesResponse) CopyTo(to HistoricalTradesResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetExitDateTime(m.ExitDateTime())
	to.SetEntryPrice(m.EntryPrice())
	to.SetExitPrice(m.ExitPrice())
	to.SetTradeType(m.TradeType())
	to.SetEntryQuantity(m.EntryQuantity())
	to.SetExitQuantity(m.ExitQuantity())
	to.SetMaxOpenQuantity(m.MaxOpenQuantity())
	to.SetClosedProfitLoss(m.ClosedProfitLoss())
	to.SetMaximumOpenPositionLoss(m.MaximumOpenPositionLoss())
	to.SetMaximumOpenPositionProfit(m.MaximumOpenPositionProfit())
	to.SetCommission(m.Commission())
	to.SetOpenFillExecutionID(m.OpenFillExecutionID())
	to.SetCloseFillExecutionID(m.CloseFillExecutionID())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

// Copy
func (m HistoricalTradesResponseFixed) Copy(to HistoricalTradesResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetExitDateTime(m.ExitDateTime())
	to.SetEntryPrice(m.EntryPrice())
	to.SetExitPrice(m.ExitPrice())
	to.SetTradeType(m.TradeType())
	to.SetEntryQuantity(m.EntryQuantity())
	to.SetExitQuantity(m.ExitQuantity())
	to.SetMaxOpenQuantity(m.MaxOpenQuantity())
	to.SetClosedProfitLoss(m.ClosedProfitLoss())
	to.SetMaximumOpenPositionLoss(m.MaximumOpenPositionLoss())
	to.SetMaximumOpenPositionProfit(m.MaximumOpenPositionProfit())
	to.SetCommission(m.Commission())
	to.SetOpenFillExecutionID(m.OpenFillExecutionID())
	to.SetCloseFillExecutionID(m.CloseFillExecutionID())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

// CopyTo
func (m HistoricalTradesResponseFixed) CopyTo(to HistoricalTradesResponse) {
	to.SetRequestID(m.RequestID())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetExitDateTime(m.ExitDateTime())
	to.SetEntryPrice(m.EntryPrice())
	to.SetExitPrice(m.ExitPrice())
	to.SetTradeType(m.TradeType())
	to.SetEntryQuantity(m.EntryQuantity())
	to.SetExitQuantity(m.ExitQuantity())
	to.SetMaxOpenQuantity(m.MaxOpenQuantity())
	to.SetClosedProfitLoss(m.ClosedProfitLoss())
	to.SetMaximumOpenPositionLoss(m.MaximumOpenPositionLoss())
	to.SetMaximumOpenPositionProfit(m.MaximumOpenPositionProfit())
	to.SetCommission(m.Commission())
	to.SetOpenFillExecutionID(m.OpenFillExecutionID())
	to.SetCloseFillExecutionID(m.CloseFillExecutionID())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalTradesResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10102)
	w.Int32Field("RequestID", m.RequestID())
	w.BoolField("IsFinalMessage", m.IsFinalMessage())
	w.StringField("Symbol", m.Symbol())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Float64Field("EntryDateTime", float64(m.EntryDateTime()))
	w.Float64Field("ExitDateTime", float64(m.ExitDateTime()))
	w.Float64Field("EntryPrice", m.EntryPrice())
	w.Float64Field("ExitPrice", m.ExitPrice())
	w.Int32Field("TradeType", int32(m.TradeType()))
	w.Uint32Field("EntryQuantity", m.EntryQuantity())
	w.Uint32Field("ExitQuantity", m.ExitQuantity())
	w.Uint32Field("MaxOpenQuantity", m.MaxOpenQuantity())
	w.Float64Field("ClosedProfitLoss", m.ClosedProfitLoss())
	w.Float64Field("MaximumOpenPositionLoss", m.MaximumOpenPositionLoss())
	w.Float64Field("MaximumOpenPositionProfit", m.MaximumOpenPositionProfit())
	w.Float64Field("Commission", m.Commission())
	w.StringField("OpenFillExecutionID", m.OpenFillExecutionID())
	w.StringField("CloseFillExecutionID", m.CloseFillExecutionID())
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10102 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "IsFinalMessage":
			m.SetIsFinalMessage(r.Bool())
		case "Symbol":
			m.SetSymbol(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "EntryDateTime":
			m.SetEntryDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "ExitDateTime":
			m.SetExitDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "EntryPrice":
			m.SetEntryPrice(r.Float64())
		case "ExitPrice":
			m.SetExitPrice(r.Float64())
		case "TradeType":
			m.SetTradeType(BuySellEnum(r.Int32()))
		case "EntryQuantity":
			m.SetEntryQuantity(r.Uint32())
		case "ExitQuantity":
			m.SetExitQuantity(r.Uint32())
		case "MaxOpenQuantity":
			m.SetMaxOpenQuantity(r.Uint32())
		case "ClosedProfitLoss":
			m.SetClosedProfitLoss(r.Float64())
		case "MaximumOpenPositionLoss":
			m.SetMaximumOpenPositionLoss(r.Float64())
		case "MaximumOpenPositionProfit":
			m.SetMaximumOpenPositionProfit(r.Float64())
		case "Commission":
			m.SetCommission(r.Float64())
		case "OpenFillExecutionID":
			m.SetOpenFillExecutionID(r.String())
		case "CloseFillExecutionID":
			m.SetCloseFillExecutionID(r.String())
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalTradesResponseFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10102)
	w.Int32Field("RequestID", m.RequestID())
	w.BoolField("IsFinalMessage", m.IsFinalMessage())
	w.StringField("Symbol", m.Symbol())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Float64Field("EntryDateTime", float64(m.EntryDateTime()))
	w.Float64Field("ExitDateTime", float64(m.ExitDateTime()))
	w.Float64Field("EntryPrice", m.EntryPrice())
	w.Float64Field("ExitPrice", m.ExitPrice())
	w.Int32Field("TradeType", int32(m.TradeType()))
	w.Uint32Field("EntryQuantity", m.EntryQuantity())
	w.Uint32Field("ExitQuantity", m.ExitQuantity())
	w.Uint32Field("MaxOpenQuantity", m.MaxOpenQuantity())
	w.Float64Field("ClosedProfitLoss", m.ClosedProfitLoss())
	w.Float64Field("MaximumOpenPositionLoss", m.MaximumOpenPositionLoss())
	w.Float64Field("MaximumOpenPositionProfit", m.MaximumOpenPositionProfit())
	w.Float64Field("Commission", m.Commission())
	w.StringField("OpenFillExecutionID", m.OpenFillExecutionID())
	w.StringField("CloseFillExecutionID", m.CloseFillExecutionID())
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesResponseFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10102 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "IsFinalMessage":
			m.SetIsFinalMessage(r.Bool())
		case "Symbol":
			m.SetSymbol(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "EntryDateTime":
			m.SetEntryDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "ExitDateTime":
			m.SetExitDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "EntryPrice":
			m.SetEntryPrice(r.Float64())
		case "ExitPrice":
			m.SetExitPrice(r.Float64())
		case "TradeType":
			m.SetTradeType(BuySellEnum(r.Int32()))
		case "EntryQuantity":
			m.SetEntryQuantity(r.Uint32())
		case "ExitQuantity":
			m.SetExitQuantity(r.Uint32())
		case "MaxOpenQuantity":
			m.SetMaxOpenQuantity(r.Uint32())
		case "ClosedProfitLoss":
			m.SetClosedProfitLoss(r.Float64())
		case "MaximumOpenPositionLoss":
			m.SetMaximumOpenPositionLoss(r.Float64())
		case "MaximumOpenPositionProfit":
			m.SetMaximumOpenPositionProfit(r.Float64())
		case "Commission":
			m.SetCommission(r.Float64())
		case "OpenFillExecutionID":
			m.SetOpenFillExecutionID(r.String())
		case "CloseFillExecutionID":
			m.SetCloseFillExecutionID(r.String())
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesResponseFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
