// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const AccountBalanceUpdateSize = 168

const AccountBalanceUpdateFixedSize = 368

//     Size                                  uint16                       = AccountBalanceUpdateSize  (168)
//     Type                                  uint16                       = ACCOUNT_BALANCE_UPDATE  (600)
//     BaseSize                              uint16                       = AccountBalanceUpdateSize  (168)
//     RequestID                             int32                        = 0
//     CashBalance                           float64                      = 0.000000
//     BalanceAvailableForNewPositions       float64                      = 0.000000
//     AccountCurrency                       string                       = ""
//     TradeAccount                          string                       = ""
//     SecuritiesValue                       float64                      = 0.000000
//     MarginRequirement                     float64                      = 0.000000
//     TotalNumberMessages                   int32                        = 0
//     MessageNumber                         int32                        = 0
//     NoAccountBalances                     uint8                        = 0
//     Unsolicited                           uint8                        = 0
//     OpenPositionsProfitLoss               float64                      = 0.000000
//     DailyProfitLoss                       float64                      = 0.000000
//     InfoText                              string                       = ""
//     TransactionIdentifier                 uint64                       = 0
//     DailyNetLossLimit                     float64                      = 0.000000
//     TrailingAccountValueToLimitPositions  float64                      = 0.000000
//     DailyNetLossLimitReached              uint8                        = 0
//     IsUnderRequiredMargin                 bool                         = false
//     ClosePositionsAtEndOfDay              uint8                        = 0
//     TradingIsDisabled                     bool                         = false
//     Description                           string                       = ""
//     IsUnderRequiredAccountValue           bool                         = false
//     TransactionDateTime                   DateTimeWithMicrosecondsInt  = 0
//     MarginRequirementFull                 float64                      = 0.000000
//     MarginRequirementFullPositionsOnly    float64                      = 0.000000
//     PeakMarginRequirement                 float64                      = 0.000000
var _AccountBalanceUpdateDefault = []byte{168, 0, 88, 2, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                                  uint16                       = AccountBalanceUpdateFixedSize  (368)
//     Type                                  uint16                       = ACCOUNT_BALANCE_UPDATE  (600)
//     RequestID                             int32                        = 0
//     CashBalance                           float64                      = 0.000000
//     BalanceAvailableForNewPositions       float64                      = 0.000000
//     AccountCurrency                       string[8]                    = ""
//     TradeAccount                          string[32]                   = ""
//     SecuritiesValue                       float64                      = 0.000000
//     MarginRequirement                     float64                      = 0.000000
//     TotalNumberMessages                   int32                        = 0
//     MessageNumber                         int32                        = 0
//     NoAccountBalances                     uint8                        = 0
//     Unsolicited                           uint8                        = 0
//     OpenPositionsProfitLoss               float64                      = 0.000000
//     DailyProfitLoss                       float64                      = 0.000000
//     InfoText                              string[96]                   = ""
//     TransactionIdentifier                 uint64                       = 0
//     DailyNetLossLimit                     float64                      = 0.000000
//     TrailingAccountValueToLimitPositions  float64                      = 0.000000
//     DailyNetLossLimitReached              uint8                        = 0
//     IsUnderRequiredMargin                 bool                         = false
//     ClosePositionsAtEndOfDay              uint8                        = 0
//     TradingIsDisabled                     bool                         = false
//     Description                           string[96]                   = ""
//     IsUnderRequiredAccountValue           bool                         = false
//     TransactionDateTime                   DateTimeWithMicrosecondsInt  = 0
//     MarginRequirementFull                 float64                      = 0.000000
//     MarginRequirementFullPositionsOnly    float64                      = 0.000000
//     PeakMarginRequirement                 float64                      = 0.000000
var _AccountBalanceUpdateFixedDefault = []byte{112, 1, 88, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// AccountBalanceUpdate This is an optional message from the Server to Client to provide Account
// Balance information for a particular Trade Account. The server needs to
// provide a separate message for each Trade Account associated with the
// logged in username if it supports Account Balance updates.
//
// The Server will respond with an AccountBalanceUpdate in response to a
// AccountBalanceRequest message. The Server will set the RequestID in the
// AccountBalanceUpdate message to match the RequestID in the AccountBalanceRequest
// message.
//
// The Server will periodically send AccountBalanceUpdate messages as the
// Account Balance data changes. The frequency of the updates is determined
// by the Server. Account Balance updates are considered automatically subscribed
// to. When an unsolicited AccountBalanceUpdate message is sent, the RequestID
// field will be 0.
//
// When the server is responding with one or more AccountBalanceUpdate messages
// in response to a AccountBalanceRequest message, it must not send any unsolicited
// AccountBalanceUpdate messages interleaved with the solicited AccountBalanceUpdate
// messages in response to the AccountBalanceRequest message.
type AccountBalanceUpdate struct {
	p message.VLS
}

// AccountBalanceUpdateFixed This is an optional message from the Server to Client to provide Account
// Balance information for a particular Trade Account. The server needs to
// provide a separate message for each Trade Account associated with the
// logged in username if it supports Account Balance updates.
//
// The Server will respond with an AccountBalanceUpdate in response to a
// AccountBalanceRequest message. The Server will set the RequestID in the
// AccountBalanceUpdate message to match the RequestID in the AccountBalanceRequest
// message.
//
// The Server will periodically send AccountBalanceUpdate messages as the
// Account Balance data changes. The frequency of the updates is determined
// by the Server. Account Balance updates are considered automatically subscribed
// to. When an unsolicited AccountBalanceUpdate message is sent, the RequestID
// field will be 0.
//
// When the server is responding with one or more AccountBalanceUpdate messages
// in response to a AccountBalanceRequest message, it must not send any unsolicited
// AccountBalanceUpdate messages interleaved with the solicited AccountBalanceUpdate
// messages in response to the AccountBalanceRequest message.
type AccountBalanceUpdateFixed struct {
	p message.Fixed
}

func NewAccountBalanceUpdateFrom(b []byte) AccountBalanceUpdate {
	return AccountBalanceUpdate{p: message.NewVLS(b)}
}

func WrapAccountBalanceUpdate(b []byte) AccountBalanceUpdate {
	return AccountBalanceUpdate{p: message.WrapVLS(b)}
}

func NewAccountBalanceUpdate() *AccountBalanceUpdate {
	return &AccountBalanceUpdate{p: message.NewVLS(_AccountBalanceUpdateDefault)}
}

func ParseAccountBalanceUpdate(b []byte) (AccountBalanceUpdate, error) {
	if len(b) < 6 {
		return AccountBalanceUpdate{}, message.ErrShortBuffer
	}
	m := WrapAccountBalanceUpdate(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AccountBalanceUpdate{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return AccountBalanceUpdate{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 168 {
		newSize := len(b) + (168 - baseSize)
		if newSize > message.MaxSize {
			return AccountBalanceUpdate{}, message.ErrOverflow
		}
		clone := AccountBalanceUpdate{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _AccountBalanceUpdateDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(168 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(32)
			if offset > 0 {
				clone.p.SetUint16LE(32, offset+shift)
			}
			offset = clone.p.Uint16LE(36)
			if offset > 0 {
				clone.p.SetUint16LE(36, offset+shift)
			}
			offset = clone.p.Uint16LE(88)
			if offset > 0 {
				clone.p.SetUint16LE(88, offset+shift)
			}
			offset = clone.p.Uint16LE(124)
			if offset > 0 {
				clone.p.SetUint16LE(124, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewAccountBalanceUpdateFixedFrom(b []byte) AccountBalanceUpdateFixed {
	return AccountBalanceUpdateFixed{p: message.NewFixed(b)}
}

func WrapAccountBalanceUpdateFixed(b []byte) AccountBalanceUpdateFixed {
	return AccountBalanceUpdateFixed{p: message.WrapFixed(b)}
}

func NewAccountBalanceUpdateFixed() *AccountBalanceUpdateFixed {
	return &AccountBalanceUpdateFixed{p: message.NewFixed(_AccountBalanceUpdateFixedDefault)}
}

func ParseAccountBalanceUpdateFixed(b []byte) (AccountBalanceUpdateFixed, error) {
	if len(b) < 4 {
		return AccountBalanceUpdateFixed{}, message.ErrShortBuffer
	}
	m := WrapAccountBalanceUpdateFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AccountBalanceUpdateFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return AccountBalanceUpdateFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 368 {
		clone := *NewAccountBalanceUpdateFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _AccountBalanceUpdateFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m AccountBalanceUpdate) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m AccountBalanceUpdate) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m AccountBalanceUpdate) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID This is the RequestID which was set in the AccountBalanceRequest that
// this message is in response to.
//
// In the case when this is a periodic unsolicited Account Balance update,
// RequestID must be set to 0, the default.
func (m AccountBalanceUpdate) RequestID() int32 {
	return m.p.Int32LE(8)
}

// CashBalance The current cash balance for the account in the currency specified by
// the AccountCurrency field.
func (m AccountBalanceUpdate) CashBalance() float64 {
	return m.p.Float64LE(16)
}

// BalanceAvailableForNewPositions The CashBalance minus the cash required to maintain securities on margin
// the Trade Account currently has.
func (m AccountBalanceUpdate) BalanceAvailableForNewPositions() float64 {
	return m.p.Float64LE(24)
}

// AccountCurrency ISO Currency Code for the cash values in this message.
func (m AccountBalanceUpdate) AccountCurrency() string {
	return m.p.StringVLS(32)
}

// TradeAccount The trade account identifier for the Account Balance information.
func (m AccountBalanceUpdate) TradeAccount() string {
	return m.p.StringVLS(36)
}

// SecuritiesValue This is the value of all cash and securities as a cash value.
func (m AccountBalanceUpdate) SecuritiesValue() float64 {
	return m.p.Float64LE(40)
}

// MarginRequirement This is the current cash requirement to maintain securities on margin
// the Trade Account currently has.
func (m AccountBalanceUpdate) MarginRequirement() float64 {
	return m.p.Float64LE(48)
}

// TotalNumberMessages This indicates the total number of Account Balance Update messages when
// a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m AccountBalanceUpdate) TotalNumberMessages() int32 {
	return m.p.Int32LE(56)
}

// MessageNumber This indicates the 1-based index of the Account Balance Update message
// when a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m AccountBalanceUpdate) MessageNumber() int32 {
	return m.p.Int32LE(60)
}

// NoAccountBalances Set to an integer value of 1 to indicate there are no Account Balances
// in response to an AccountBalanceRequest message.
//
// Otherwise, the Server must leave this at the default of 0.
//
// The Server is always expected to respond with a single AccountBalanceUpdate
// message when there is no AccountBalanceUpdate message for any Trade Account
// when the Account Balances have been requested by the Client with an AccountBalanceRequest
// message.
//
// When the Server is sending an AccountBalanceUpdate message to the Client
// and it is indicating that the balance related fields are all zero, then
// the NoAccountBalances field must be left at the default of 0. It is not
// used indicate the balance related fields are all zero.
//
// This is always set to the default of 0 for an unsolicited AccountBalanceUpdate
// .
func (m AccountBalanceUpdate) NoAccountBalances() uint8 {
	return m.p.Uint8(64)
}

// Unsolicited Set to 1 to indicate this is an unsolicited Account Balance Update message.
// In other words, it is a real-time Account Balance Update message which
// is not an initial response to an AccountBalanceRequest message.
func (m AccountBalanceUpdate) Unsolicited() uint8 {
	return m.p.Uint8(65)
}

// OpenPositionsProfitLoss
func (m AccountBalanceUpdate) OpenPositionsProfitLoss() float64 {
	return m.p.Float64LE(72)
}

// DailyProfitLoss
func (m AccountBalanceUpdate) DailyProfitLoss() float64 {
	return m.p.Float64LE(80)
}

// InfoText
func (m AccountBalanceUpdate) InfoText() string {
	return m.p.StringVLS(88)
}

// TransactionIdentifier
func (m AccountBalanceUpdate) TransactionIdentifier() uint64 {
	return m.p.Uint64LE(96)
}

// DailyNetLossLimit
func (m AccountBalanceUpdate) DailyNetLossLimit() float64 {
	return m.p.Float64LE(104)
}

// TrailingAccountValueToLimitPositions
func (m AccountBalanceUpdate) TrailingAccountValueToLimitPositions() float64 {
	return m.p.Float64LE(112)
}

// DailyNetLossLimitReached
func (m AccountBalanceUpdate) DailyNetLossLimitReached() uint8 {
	return m.p.Uint8(120)
}

// IsUnderRequiredMargin
func (m AccountBalanceUpdate) IsUnderRequiredMargin() bool {
	return m.p.Bool(121)
}

// ClosePositionsAtEndOfDay
func (m AccountBalanceUpdate) ClosePositionsAtEndOfDay() uint8 {
	return m.p.Uint8(122)
}

// TradingIsDisabled
func (m AccountBalanceUpdate) TradingIsDisabled() bool {
	return m.p.Bool(123)
}

// Description
func (m AccountBalanceUpdate) Description() string {
	return m.p.StringVLS(124)
}

// IsUnderRequiredAccountValue
func (m AccountBalanceUpdate) IsUnderRequiredAccountValue() bool {
	return m.p.Bool(128)
}

// TransactionDateTime
func (m AccountBalanceUpdate) TransactionDateTime() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(136))
}

// MarginRequirementFull
func (m AccountBalanceUpdate) MarginRequirementFull() float64 {
	return m.p.Float64LE(144)
}

// MarginRequirementFullPositionsOnly
func (m AccountBalanceUpdate) MarginRequirementFullPositionsOnly() float64 {
	return m.p.Float64LE(152)
}

// PeakMarginRequirement
func (m AccountBalanceUpdate) PeakMarginRequirement() float64 {
	return m.p.Float64LE(160)
}

// Size The standard message size field. Automatically set by constructor.
func (m AccountBalanceUpdateFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m AccountBalanceUpdateFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID This is the RequestID which was set in the AccountBalanceRequest that
// this message is in response to.
//
// In the case when this is a periodic unsolicited Account Balance update,
// RequestID must be set to 0, the default.
func (m AccountBalanceUpdateFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// CashBalance The current cash balance for the account in the currency specified by
// the AccountCurrency field.
func (m AccountBalanceUpdateFixed) CashBalance() float64 {
	return m.p.Float64LE(8)
}

// BalanceAvailableForNewPositions The CashBalance minus the cash required to maintain securities on margin
// the Trade Account currently has.
func (m AccountBalanceUpdateFixed) BalanceAvailableForNewPositions() float64 {
	return m.p.Float64LE(16)
}

// AccountCurrency ISO Currency Code for the cash values in this message.
func (m AccountBalanceUpdateFixed) AccountCurrency() string {
	return m.p.StringFixed(24, 8)
}

// TradeAccount The trade account identifier for the Account Balance information.
func (m AccountBalanceUpdateFixed) TradeAccount() string {
	return m.p.StringFixed(32, 32)
}

// SecuritiesValue This is the value of all cash and securities as a cash value.
func (m AccountBalanceUpdateFixed) SecuritiesValue() float64 {
	return m.p.Float64LE(64)
}

// MarginRequirement This is the current cash requirement to maintain securities on margin
// the Trade Account currently has.
func (m AccountBalanceUpdateFixed) MarginRequirement() float64 {
	return m.p.Float64LE(72)
}

// TotalNumberMessages This indicates the total number of Account Balance Update messages when
// a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m AccountBalanceUpdateFixed) TotalNumberMessages() int32 {
	return m.p.Int32LE(80)
}

// MessageNumber This indicates the 1-based index of the Account Balance Update message
// when a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m AccountBalanceUpdateFixed) MessageNumber() int32 {
	return m.p.Int32LE(84)
}

// NoAccountBalances Set to an integer value of 1 to indicate there are no Account Balances
// in response to an AccountBalanceRequest message.
//
// Otherwise, the Server must leave this at the default of 0.
//
// The Server is always expected to respond with a single AccountBalanceUpdate
// message when there is no AccountBalanceUpdate message for any Trade Account
// when the Account Balances have been requested by the Client with an AccountBalanceRequest
// message.
//
// When the Server is sending an AccountBalanceUpdate message to the Client
// and it is indicating that the balance related fields are all zero, then
// the NoAccountBalances field must be left at the default of 0. It is not
// used indicate the balance related fields are all zero.
//
// This is always set to the default of 0 for an unsolicited AccountBalanceUpdate
// .
func (m AccountBalanceUpdateFixed) NoAccountBalances() uint8 {
	return m.p.Uint8(88)
}

// Unsolicited Set to 1 to indicate this is an unsolicited Account Balance Update message.
// In other words, it is a real-time Account Balance Update message which
// is not an initial response to an AccountBalanceRequest message.
func (m AccountBalanceUpdateFixed) Unsolicited() uint8 {
	return m.p.Uint8(89)
}

// OpenPositionsProfitLoss
func (m AccountBalanceUpdateFixed) OpenPositionsProfitLoss() float64 {
	return m.p.Float64LE(96)
}

// DailyProfitLoss
func (m AccountBalanceUpdateFixed) DailyProfitLoss() float64 {
	return m.p.Float64LE(104)
}

// InfoText
func (m AccountBalanceUpdateFixed) InfoText() string {
	return m.p.StringFixed(112, 96)
}

// TransactionIdentifier
func (m AccountBalanceUpdateFixed) TransactionIdentifier() uint64 {
	return m.p.Uint64LE(208)
}

// DailyNetLossLimit
func (m AccountBalanceUpdateFixed) DailyNetLossLimit() float64 {
	return m.p.Float64LE(216)
}

// TrailingAccountValueToLimitPositions
func (m AccountBalanceUpdateFixed) TrailingAccountValueToLimitPositions() float64 {
	return m.p.Float64LE(224)
}

// DailyNetLossLimitReached
func (m AccountBalanceUpdateFixed) DailyNetLossLimitReached() uint8 {
	return m.p.Uint8(232)
}

// IsUnderRequiredMargin
func (m AccountBalanceUpdateFixed) IsUnderRequiredMargin() bool {
	return m.p.Bool(233)
}

// ClosePositionsAtEndOfDay
func (m AccountBalanceUpdateFixed) ClosePositionsAtEndOfDay() uint8 {
	return m.p.Uint8(234)
}

// TradingIsDisabled
func (m AccountBalanceUpdateFixed) TradingIsDisabled() bool {
	return m.p.Bool(235)
}

// Description
func (m AccountBalanceUpdateFixed) Description() string {
	return m.p.StringFixed(236, 96)
}

// IsUnderRequiredAccountValue
func (m AccountBalanceUpdateFixed) IsUnderRequiredAccountValue() bool {
	return m.p.Bool(332)
}

// TransactionDateTime
func (m AccountBalanceUpdateFixed) TransactionDateTime() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(336))
}

// MarginRequirementFull
func (m AccountBalanceUpdateFixed) MarginRequirementFull() float64 {
	return m.p.Float64LE(344)
}

// MarginRequirementFullPositionsOnly
func (m AccountBalanceUpdateFixed) MarginRequirementFullPositionsOnly() float64 {
	return m.p.Float64LE(352)
}

// PeakMarginRequirement
func (m AccountBalanceUpdateFixed) PeakMarginRequirement() float64 {
	return m.p.Float64LE(360)
}

// SetRequestID This is the RequestID which was set in the AccountBalanceRequest that
// this message is in response to.
//
// In the case when this is a periodic unsolicited Account Balance update,
// RequestID must be set to 0, the default.
func (m *AccountBalanceUpdate) SetRequestID(value int32) *AccountBalanceUpdate {
	m.p.SetInt32LE(8, value)
	return m
}

// SetCashBalance The current cash balance for the account in the currency specified by
// the AccountCurrency field.
func (m *AccountBalanceUpdate) SetCashBalance(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(16, value)
	return m
}

// SetBalanceAvailableForNewPositions The CashBalance minus the cash required to maintain securities on margin
// the Trade Account currently has.
func (m *AccountBalanceUpdate) SetBalanceAvailableForNewPositions(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(24, value)
	return m
}

// SetAccountCurrency ISO Currency Code for the cash values in this message.
func (m *AccountBalanceUpdate) SetAccountCurrency(value string) *AccountBalanceUpdate {
	m.p.SetStringVLS(32, value)
	return m
}

// SetTradeAccount The trade account identifier for the Account Balance information.
func (m *AccountBalanceUpdate) SetTradeAccount(value string) *AccountBalanceUpdate {
	m.p.SetStringVLS(36, value)
	return m
}

// SetSecuritiesValue This is the value of all cash and securities as a cash value.
func (m *AccountBalanceUpdate) SetSecuritiesValue(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(40, value)
	return m
}

// SetMarginRequirement This is the current cash requirement to maintain securities on margin
// the Trade Account currently has.
func (m *AccountBalanceUpdate) SetMarginRequirement(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(48, value)
	return m
}

// SetTotalNumberMessages This indicates the total number of Account Balance Update messages when
// a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *AccountBalanceUpdate) SetTotalNumberMessages(value int32) *AccountBalanceUpdate {
	m.p.SetInt32LE(56, value)
	return m
}

// SetMessageNumber This indicates the 1-based index of the Account Balance Update message
// when a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *AccountBalanceUpdate) SetMessageNumber(value int32) *AccountBalanceUpdate {
	m.p.SetInt32LE(60, value)
	return m
}

// SetNoAccountBalances Set to an integer value of 1 to indicate there are no Account Balances
// in response to an AccountBalanceRequest message.
//
// Otherwise, the Server must leave this at the default of 0.
//
// The Server is always expected to respond with a single AccountBalanceUpdate
// message when there is no AccountBalanceUpdate message for any Trade Account
// when the Account Balances have been requested by the Client with an AccountBalanceRequest
// message.
//
// When the Server is sending an AccountBalanceUpdate message to the Client
// and it is indicating that the balance related fields are all zero, then
// the NoAccountBalances field must be left at the default of 0. It is not
// used indicate the balance related fields are all zero.
//
// This is always set to the default of 0 for an unsolicited AccountBalanceUpdate
// .
func (m *AccountBalanceUpdate) SetNoAccountBalances(value uint8) *AccountBalanceUpdate {
	m.p.SetUint8(64, value)
	return m
}

// SetUnsolicited Set to 1 to indicate this is an unsolicited Account Balance Update message.
// In other words, it is a real-time Account Balance Update message which
// is not an initial response to an AccountBalanceRequest message.
func (m *AccountBalanceUpdate) SetUnsolicited(value uint8) *AccountBalanceUpdate {
	m.p.SetUint8(65, value)
	return m
}

// SetOpenPositionsProfitLoss
func (m *AccountBalanceUpdate) SetOpenPositionsProfitLoss(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(72, value)
	return m
}

// SetDailyProfitLoss
func (m *AccountBalanceUpdate) SetDailyProfitLoss(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(80, value)
	return m
}

// SetInfoText
func (m *AccountBalanceUpdate) SetInfoText(value string) *AccountBalanceUpdate {
	m.p.SetStringVLS(88, value)
	return m
}

// SetTransactionIdentifier
func (m *AccountBalanceUpdate) SetTransactionIdentifier(value uint64) *AccountBalanceUpdate {
	m.p.SetUint64LE(96, value)
	return m
}

// SetDailyNetLossLimit
func (m *AccountBalanceUpdate) SetDailyNetLossLimit(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(104, value)
	return m
}

// SetTrailingAccountValueToLimitPositions
func (m *AccountBalanceUpdate) SetTrailingAccountValueToLimitPositions(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(112, value)
	return m
}

// SetDailyNetLossLimitReached
func (m *AccountBalanceUpdate) SetDailyNetLossLimitReached(value uint8) *AccountBalanceUpdate {
	m.p.SetUint8(120, value)
	return m
}

// SetIsUnderRequiredMargin
func (m *AccountBalanceUpdate) SetIsUnderRequiredMargin(value bool) *AccountBalanceUpdate {
	m.p.SetBool(121, value)
	return m
}

// SetClosePositionsAtEndOfDay
func (m *AccountBalanceUpdate) SetClosePositionsAtEndOfDay(value uint8) *AccountBalanceUpdate {
	m.p.SetUint8(122, value)
	return m
}

// SetTradingIsDisabled
func (m *AccountBalanceUpdate) SetTradingIsDisabled(value bool) *AccountBalanceUpdate {
	m.p.SetBool(123, value)
	return m
}

// SetDescription
func (m *AccountBalanceUpdate) SetDescription(value string) *AccountBalanceUpdate {
	m.p.SetStringVLS(124, value)
	return m
}

// SetIsUnderRequiredAccountValue
func (m *AccountBalanceUpdate) SetIsUnderRequiredAccountValue(value bool) *AccountBalanceUpdate {
	m.p.SetBool(128, value)
	return m
}

// SetTransactionDateTime
func (m *AccountBalanceUpdate) SetTransactionDateTime(value DateTimeWithMicrosecondsInt) *AccountBalanceUpdate {
	m.p.SetInt64LE(136, int64(value))
	return m
}

// SetMarginRequirementFull
func (m *AccountBalanceUpdate) SetMarginRequirementFull(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(144, value)
	return m
}

// SetMarginRequirementFullPositionsOnly
func (m *AccountBalanceUpdate) SetMarginRequirementFullPositionsOnly(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(152, value)
	return m
}

// SetPeakMarginRequirement
func (m *AccountBalanceUpdate) SetPeakMarginRequirement(value float64) *AccountBalanceUpdate {
	m.p.SetFloat64LE(160, value)
	return m
}

// SetRequestID This is the RequestID which was set in the AccountBalanceRequest that
// this message is in response to.
//
// In the case when this is a periodic unsolicited Account Balance update,
// RequestID must be set to 0, the default.
func (m *AccountBalanceUpdateFixed) SetRequestID(value int32) *AccountBalanceUpdateFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetCashBalance The current cash balance for the account in the currency specified by
// the AccountCurrency field.
func (m *AccountBalanceUpdateFixed) SetCashBalance(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(8, value)
	return m
}

// SetBalanceAvailableForNewPositions The CashBalance minus the cash required to maintain securities on margin
// the Trade Account currently has.
func (m *AccountBalanceUpdateFixed) SetBalanceAvailableForNewPositions(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(16, value)
	return m
}

// SetAccountCurrency ISO Currency Code for the cash values in this message.
func (m *AccountBalanceUpdateFixed) SetAccountCurrency(value string) *AccountBalanceUpdateFixed {
	m.p.SetStringFixed(24, 8, value)
	return m
}

// SetTradeAccount The trade account identifier for the Account Balance information.
func (m *AccountBalanceUpdateFixed) SetTradeAccount(value string) *AccountBalanceUpdateFixed {
	m.p.SetStringFixed(32, 32, value)
	return m
}

// SetSecuritiesValue This is the value of all cash and securities as a cash value.
func (m *AccountBalanceUpdateFixed) SetSecuritiesValue(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(64, value)
	return m
}

// SetMarginRequirement This is the current cash requirement to maintain securities on margin
// the Trade Account currently has.
func (m *AccountBalanceUpdateFixed) SetMarginRequirement(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(72, value)
	return m
}

// SetTotalNumberMessages This indicates the total number of Account Balance Update messages when
// a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *AccountBalanceUpdateFixed) SetTotalNumberMessages(value int32) *AccountBalanceUpdateFixed {
	m.p.SetInt32LE(80, value)
	return m
}

// SetMessageNumber This indicates the 1-based index of the Account Balance Update message
// when a batch of messages is being sent. If there is only one Account Balance
// Update message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *AccountBalanceUpdateFixed) SetMessageNumber(value int32) *AccountBalanceUpdateFixed {
	m.p.SetInt32LE(84, value)
	return m
}

// SetNoAccountBalances Set to an integer value of 1 to indicate there are no Account Balances
// in response to an AccountBalanceRequest message.
//
// Otherwise, the Server must leave this at the default of 0.
//
// The Server is always expected to respond with a single AccountBalanceUpdate
// message when there is no AccountBalanceUpdate message for any Trade Account
// when the Account Balances have been requested by the Client with an AccountBalanceRequest
// message.
//
// When the Server is sending an AccountBalanceUpdate message to the Client
// and it is indicating that the balance related fields are all zero, then
// the NoAccountBalances field must be left at the default of 0. It is not
// used indicate the balance related fields are all zero.
//
// This is always set to the default of 0 for an unsolicited AccountBalanceUpdate
// .
func (m *AccountBalanceUpdateFixed) SetNoAccountBalances(value uint8) *AccountBalanceUpdateFixed {
	m.p.SetUint8(88, value)
	return m
}

// SetUnsolicited Set to 1 to indicate this is an unsolicited Account Balance Update message.
// In other words, it is a real-time Account Balance Update message which
// is not an initial response to an AccountBalanceRequest message.
func (m *AccountBalanceUpdateFixed) SetUnsolicited(value uint8) *AccountBalanceUpdateFixed {
	m.p.SetUint8(89, value)
	return m
}

// SetOpenPositionsProfitLoss
func (m *AccountBalanceUpdateFixed) SetOpenPositionsProfitLoss(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(96, value)
	return m
}

// SetDailyProfitLoss
func (m *AccountBalanceUpdateFixed) SetDailyProfitLoss(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(104, value)
	return m
}

// SetInfoText
func (m *AccountBalanceUpdateFixed) SetInfoText(value string) *AccountBalanceUpdateFixed {
	m.p.SetStringFixed(112, 96, value)
	return m
}

// SetTransactionIdentifier
func (m *AccountBalanceUpdateFixed) SetTransactionIdentifier(value uint64) *AccountBalanceUpdateFixed {
	m.p.SetUint64LE(208, value)
	return m
}

// SetDailyNetLossLimit
func (m *AccountBalanceUpdateFixed) SetDailyNetLossLimit(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(216, value)
	return m
}

// SetTrailingAccountValueToLimitPositions
func (m *AccountBalanceUpdateFixed) SetTrailingAccountValueToLimitPositions(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(224, value)
	return m
}

// SetDailyNetLossLimitReached
func (m *AccountBalanceUpdateFixed) SetDailyNetLossLimitReached(value uint8) *AccountBalanceUpdateFixed {
	m.p.SetUint8(232, value)
	return m
}

// SetIsUnderRequiredMargin
func (m *AccountBalanceUpdateFixed) SetIsUnderRequiredMargin(value bool) *AccountBalanceUpdateFixed {
	m.p.SetBool(233, value)
	return m
}

// SetClosePositionsAtEndOfDay
func (m *AccountBalanceUpdateFixed) SetClosePositionsAtEndOfDay(value uint8) *AccountBalanceUpdateFixed {
	m.p.SetUint8(234, value)
	return m
}

// SetTradingIsDisabled
func (m *AccountBalanceUpdateFixed) SetTradingIsDisabled(value bool) *AccountBalanceUpdateFixed {
	m.p.SetBool(235, value)
	return m
}

// SetDescription
func (m *AccountBalanceUpdateFixed) SetDescription(value string) *AccountBalanceUpdateFixed {
	m.p.SetStringFixed(236, 96, value)
	return m
}

// SetIsUnderRequiredAccountValue
func (m *AccountBalanceUpdateFixed) SetIsUnderRequiredAccountValue(value bool) *AccountBalanceUpdateFixed {
	m.p.SetBool(332, value)
	return m
}

// SetTransactionDateTime
func (m *AccountBalanceUpdateFixed) SetTransactionDateTime(value DateTimeWithMicrosecondsInt) *AccountBalanceUpdateFixed {
	m.p.SetInt64LE(336, int64(value))
	return m
}

// SetMarginRequirementFull
func (m *AccountBalanceUpdateFixed) SetMarginRequirementFull(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(344, value)
	return m
}

// SetMarginRequirementFullPositionsOnly
func (m *AccountBalanceUpdateFixed) SetMarginRequirementFullPositionsOnly(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(352, value)
	return m
}

// SetPeakMarginRequirement
func (m *AccountBalanceUpdateFixed) SetPeakMarginRequirement(value float64) *AccountBalanceUpdateFixed {
	m.p.SetFloat64LE(360, value)
	return m
}

func (m AccountBalanceUpdate) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m AccountBalanceUpdate) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m AccountBalanceUpdateFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m AccountBalanceUpdateFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m AccountBalanceUpdate) Copy(to AccountBalanceUpdate) {
	to.SetRequestID(m.RequestID())
	to.SetCashBalance(m.CashBalance())
	to.SetBalanceAvailableForNewPositions(m.BalanceAvailableForNewPositions())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetSecuritiesValue(m.SecuritiesValue())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetUnsolicited(m.Unsolicited())
	to.SetOpenPositionsProfitLoss(m.OpenPositionsProfitLoss())
	to.SetDailyProfitLoss(m.DailyProfitLoss())
	to.SetInfoText(m.InfoText())
	to.SetTransactionIdentifier(m.TransactionIdentifier())
	to.SetDailyNetLossLimit(m.DailyNetLossLimit())
	to.SetTrailingAccountValueToLimitPositions(m.TrailingAccountValueToLimitPositions())
	to.SetDailyNetLossLimitReached(m.DailyNetLossLimitReached())
	to.SetIsUnderRequiredMargin(m.IsUnderRequiredMargin())
	to.SetClosePositionsAtEndOfDay(m.ClosePositionsAtEndOfDay())
	to.SetTradingIsDisabled(m.TradingIsDisabled())
	to.SetDescription(m.Description())
	to.SetIsUnderRequiredAccountValue(m.IsUnderRequiredAccountValue())
	to.SetTransactionDateTime(m.TransactionDateTime())
	to.SetMarginRequirementFull(m.MarginRequirementFull())
	to.SetMarginRequirementFullPositionsOnly(m.MarginRequirementFullPositionsOnly())
	to.SetPeakMarginRequirement(m.PeakMarginRequirement())
}

// CopyTo
func (m AccountBalanceUpdate) CopyTo(to AccountBalanceUpdateFixed) {
	to.SetRequestID(m.RequestID())
	to.SetCashBalance(m.CashBalance())
	to.SetBalanceAvailableForNewPositions(m.BalanceAvailableForNewPositions())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetSecuritiesValue(m.SecuritiesValue())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetUnsolicited(m.Unsolicited())
	to.SetOpenPositionsProfitLoss(m.OpenPositionsProfitLoss())
	to.SetDailyProfitLoss(m.DailyProfitLoss())
	to.SetInfoText(m.InfoText())
	to.SetTransactionIdentifier(m.TransactionIdentifier())
	to.SetDailyNetLossLimit(m.DailyNetLossLimit())
	to.SetTrailingAccountValueToLimitPositions(m.TrailingAccountValueToLimitPositions())
	to.SetDailyNetLossLimitReached(m.DailyNetLossLimitReached())
	to.SetIsUnderRequiredMargin(m.IsUnderRequiredMargin())
	to.SetClosePositionsAtEndOfDay(m.ClosePositionsAtEndOfDay())
	to.SetTradingIsDisabled(m.TradingIsDisabled())
	to.SetDescription(m.Description())
	to.SetIsUnderRequiredAccountValue(m.IsUnderRequiredAccountValue())
	to.SetTransactionDateTime(m.TransactionDateTime())
	to.SetMarginRequirementFull(m.MarginRequirementFull())
	to.SetMarginRequirementFullPositionsOnly(m.MarginRequirementFullPositionsOnly())
	to.SetPeakMarginRequirement(m.PeakMarginRequirement())
}

// Copy
func (m AccountBalanceUpdateFixed) Copy(to AccountBalanceUpdateFixed) {
	to.SetRequestID(m.RequestID())
	to.SetCashBalance(m.CashBalance())
	to.SetBalanceAvailableForNewPositions(m.BalanceAvailableForNewPositions())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetSecuritiesValue(m.SecuritiesValue())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetUnsolicited(m.Unsolicited())
	to.SetOpenPositionsProfitLoss(m.OpenPositionsProfitLoss())
	to.SetDailyProfitLoss(m.DailyProfitLoss())
	to.SetInfoText(m.InfoText())
	to.SetTransactionIdentifier(m.TransactionIdentifier())
	to.SetDailyNetLossLimit(m.DailyNetLossLimit())
	to.SetTrailingAccountValueToLimitPositions(m.TrailingAccountValueToLimitPositions())
	to.SetDailyNetLossLimitReached(m.DailyNetLossLimitReached())
	to.SetIsUnderRequiredMargin(m.IsUnderRequiredMargin())
	to.SetClosePositionsAtEndOfDay(m.ClosePositionsAtEndOfDay())
	to.SetTradingIsDisabled(m.TradingIsDisabled())
	to.SetDescription(m.Description())
	to.SetIsUnderRequiredAccountValue(m.IsUnderRequiredAccountValue())
	to.SetTransactionDateTime(m.TransactionDateTime())
	to.SetMarginRequirementFull(m.MarginRequirementFull())
	to.SetMarginRequirementFullPositionsOnly(m.MarginRequirementFullPositionsOnly())
	to.SetPeakMarginRequirement(m.PeakMarginRequirement())
}

// CopyTo
func (m AccountBalanceUpdateFixed) CopyTo(to AccountBalanceUpdate) {
	to.SetRequestID(m.RequestID())
	to.SetCashBalance(m.CashBalance())
	to.SetBalanceAvailableForNewPositions(m.BalanceAvailableForNewPositions())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetSecuritiesValue(m.SecuritiesValue())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetUnsolicited(m.Unsolicited())
	to.SetOpenPositionsProfitLoss(m.OpenPositionsProfitLoss())
	to.SetDailyProfitLoss(m.DailyProfitLoss())
	to.SetInfoText(m.InfoText())
	to.SetTransactionIdentifier(m.TransactionIdentifier())
	to.SetDailyNetLossLimit(m.DailyNetLossLimit())
	to.SetTrailingAccountValueToLimitPositions(m.TrailingAccountValueToLimitPositions())
	to.SetDailyNetLossLimitReached(m.DailyNetLossLimitReached())
	to.SetIsUnderRequiredMargin(m.IsUnderRequiredMargin())
	to.SetClosePositionsAtEndOfDay(m.ClosePositionsAtEndOfDay())
	to.SetTradingIsDisabled(m.TradingIsDisabled())
	to.SetDescription(m.Description())
	to.SetIsUnderRequiredAccountValue(m.IsUnderRequiredAccountValue())
	to.SetTransactionDateTime(m.TransactionDateTime())
	to.SetMarginRequirementFull(m.MarginRequirementFull())
	to.SetMarginRequirementFullPositionsOnly(m.MarginRequirementFullPositionsOnly())
	to.SetPeakMarginRequirement(m.PeakMarginRequirement())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m AccountBalanceUpdate) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 600)
	w.Int32Field("RequestID", m.RequestID())
	w.Float64Field("CashBalance", m.CashBalance())
	w.Float64Field("BalanceAvailableForNewPositions", m.BalanceAvailableForNewPositions())
	w.StringField("AccountCurrency", m.AccountCurrency())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Float64Field("SecuritiesValue", m.SecuritiesValue())
	w.Float64Field("MarginRequirement", m.MarginRequirement())
	w.Int32Field("TotalNumberMessages", m.TotalNumberMessages())
	w.Int32Field("MessageNumber", m.MessageNumber())
	w.Uint8Field("NoAccountBalances", m.NoAccountBalances())
	w.Uint8Field("Unsolicited", m.Unsolicited())
	w.Float64Field("OpenPositionsProfitLoss", m.OpenPositionsProfitLoss())
	w.Float64Field("DailyProfitLoss", m.DailyProfitLoss())
	w.StringField("InfoText", m.InfoText())
	w.Uint64Field("TransactionIdentifier", m.TransactionIdentifier())
	w.Float64Field("DailyNetLossLimit", m.DailyNetLossLimit())
	w.Float64Field("TrailingAccountValueToLimitPositions", m.TrailingAccountValueToLimitPositions())
	w.Uint8Field("DailyNetLossLimitReached", m.DailyNetLossLimitReached())
	w.BoolField("IsUnderRequiredMargin", m.IsUnderRequiredMargin())
	w.Uint8Field("ClosePositionsAtEndOfDay", m.ClosePositionsAtEndOfDay())
	w.BoolField("TradingIsDisabled", m.TradingIsDisabled())
	w.StringField("Description", m.Description())
	w.BoolField("IsUnderRequiredAccountValue", m.IsUnderRequiredAccountValue())
	w.Int64Field("TransactionDateTime", int64(m.TransactionDateTime()))
	w.Float64Field("MarginRequirementFull", m.MarginRequirementFull())
	w.Float64Field("MarginRequirementFullPositionsOnly", m.MarginRequirementFullPositionsOnly())
	w.Float64Field("PeakMarginRequirement", m.PeakMarginRequirement())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceUpdate) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 600 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "CashBalance":
			m.SetCashBalance(r.Float64())
		case "BalanceAvailableForNewPositions":
			m.SetBalanceAvailableForNewPositions(r.Float64())
		case "AccountCurrency":
			m.SetAccountCurrency(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "SecuritiesValue":
			m.SetSecuritiesValue(r.Float64())
		case "MarginRequirement":
			m.SetMarginRequirement(r.Float64())
		case "TotalNumberMessages":
			m.SetTotalNumberMessages(r.Int32())
		case "MessageNumber":
			m.SetMessageNumber(r.Int32())
		case "NoAccountBalances":
			m.SetNoAccountBalances(r.Uint8())
		case "Unsolicited":
			m.SetUnsolicited(r.Uint8())
		case "OpenPositionsProfitLoss":
			m.SetOpenPositionsProfitLoss(r.Float64())
		case "DailyProfitLoss":
			m.SetDailyProfitLoss(r.Float64())
		case "InfoText":
			m.SetInfoText(r.String())
		case "TransactionIdentifier":
			m.SetTransactionIdentifier(r.Uint64())
		case "DailyNetLossLimit":
			m.SetDailyNetLossLimit(r.Float64())
		case "TrailingAccountValueToLimitPositions":
			m.SetTrailingAccountValueToLimitPositions(r.Float64())
		case "DailyNetLossLimitReached":
			m.SetDailyNetLossLimitReached(r.Uint8())
		case "IsUnderRequiredMargin":
			m.SetIsUnderRequiredMargin(r.Bool())
		case "ClosePositionsAtEndOfDay":
			m.SetClosePositionsAtEndOfDay(r.Uint8())
		case "TradingIsDisabled":
			m.SetTradingIsDisabled(r.Bool())
		case "Description":
			m.SetDescription(r.String())
		case "IsUnderRequiredAccountValue":
			m.SetIsUnderRequiredAccountValue(r.Bool())
		case "TransactionDateTime":
			m.SetTransactionDateTime(DateTimeWithMicrosecondsInt(r.Int64()))
		case "MarginRequirementFull":
			m.SetMarginRequirementFull(r.Float64())
		case "MarginRequirementFullPositionsOnly":
			m.SetMarginRequirementFullPositionsOnly(r.Float64())
		case "PeakMarginRequirement":
			m.SetPeakMarginRequirement(r.Float64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceUpdate) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m AccountBalanceUpdateFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 600)
	w.Int32Field("RequestID", m.RequestID())
	w.Float64Field("CashBalance", m.CashBalance())
	w.Float64Field("BalanceAvailableForNewPositions", m.BalanceAvailableForNewPositions())
	w.StringField("AccountCurrency", m.AccountCurrency())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Float64Field("SecuritiesValue", m.SecuritiesValue())
	w.Float64Field("MarginRequirement", m.MarginRequirement())
	w.Int32Field("TotalNumberMessages", m.TotalNumberMessages())
	w.Int32Field("MessageNumber", m.MessageNumber())
	w.Uint8Field("NoAccountBalances", m.NoAccountBalances())
	w.Uint8Field("Unsolicited", m.Unsolicited())
	w.Float64Field("OpenPositionsProfitLoss", m.OpenPositionsProfitLoss())
	w.Float64Field("DailyProfitLoss", m.DailyProfitLoss())
	w.StringField("InfoText", m.InfoText())
	w.Uint64Field("TransactionIdentifier", m.TransactionIdentifier())
	w.Float64Field("DailyNetLossLimit", m.DailyNetLossLimit())
	w.Float64Field("TrailingAccountValueToLimitPositions", m.TrailingAccountValueToLimitPositions())
	w.Uint8Field("DailyNetLossLimitReached", m.DailyNetLossLimitReached())
	w.BoolField("IsUnderRequiredMargin", m.IsUnderRequiredMargin())
	w.Uint8Field("ClosePositionsAtEndOfDay", m.ClosePositionsAtEndOfDay())
	w.BoolField("TradingIsDisabled", m.TradingIsDisabled())
	w.StringField("Description", m.Description())
	w.BoolField("IsUnderRequiredAccountValue", m.IsUnderRequiredAccountValue())
	w.Int64Field("TransactionDateTime", int64(m.TransactionDateTime()))
	w.Float64Field("MarginRequirementFull", m.MarginRequirementFull())
	w.Float64Field("MarginRequirementFullPositionsOnly", m.MarginRequirementFullPositionsOnly())
	w.Float64Field("PeakMarginRequirement", m.PeakMarginRequirement())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceUpdateFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 600 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "CashBalance":
			m.SetCashBalance(r.Float64())
		case "BalanceAvailableForNewPositions":
			m.SetBalanceAvailableForNewPositions(r.Float64())
		case "AccountCurrency":
			m.SetAccountCurrency(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "SecuritiesValue":
			m.SetSecuritiesValue(r.Float64())
		case "MarginRequirement":
			m.SetMarginRequirement(r.Float64())
		case "TotalNumberMessages":
			m.SetTotalNumberMessages(r.Int32())
		case "MessageNumber":
			m.SetMessageNumber(r.Int32())
		case "NoAccountBalances":
			m.SetNoAccountBalances(r.Uint8())
		case "Unsolicited":
			m.SetUnsolicited(r.Uint8())
		case "OpenPositionsProfitLoss":
			m.SetOpenPositionsProfitLoss(r.Float64())
		case "DailyProfitLoss":
			m.SetDailyProfitLoss(r.Float64())
		case "InfoText":
			m.SetInfoText(r.String())
		case "TransactionIdentifier":
			m.SetTransactionIdentifier(r.Uint64())
		case "DailyNetLossLimit":
			m.SetDailyNetLossLimit(r.Float64())
		case "TrailingAccountValueToLimitPositions":
			m.SetTrailingAccountValueToLimitPositions(r.Float64())
		case "DailyNetLossLimitReached":
			m.SetDailyNetLossLimitReached(r.Uint8())
		case "IsUnderRequiredMargin":
			m.SetIsUnderRequiredMargin(r.Bool())
		case "ClosePositionsAtEndOfDay":
			m.SetClosePositionsAtEndOfDay(r.Uint8())
		case "TradingIsDisabled":
			m.SetTradingIsDisabled(r.Bool())
		case "Description":
			m.SetDescription(r.String())
		case "IsUnderRequiredAccountValue":
			m.SetIsUnderRequiredAccountValue(r.Bool())
		case "TransactionDateTime":
			m.SetTransactionDateTime(DateTimeWithMicrosecondsInt(r.Int64()))
		case "MarginRequirementFull":
			m.SetMarginRequirementFull(r.Float64())
		case "MarginRequirementFullPositionsOnly":
			m.SetMarginRequirementFullPositionsOnly(r.Float64())
		case "PeakMarginRequirement":
			m.SetPeakMarginRequirement(r.Float64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceUpdateFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
