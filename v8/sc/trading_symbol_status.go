// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradingSymbolStatusSize = 12

//     Size      uint16             = TradingSymbolStatusSize  (12)
//     Type      uint16             = TRADING_SYMBOL_STATUS  (138)
//     SymbolID  uint32             = 0
//     Status    TradingStatusEnum  = TRADING_STATUS_UNKNOWN  (0)
var _TradingSymbolStatusDefault = []byte{12, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// TradingSymbolStatus Sent by the Server to the Client to indicate the status of the symbol
// in regards to whether trading is open or closed or some other intermediate
// state.
type TradingSymbolStatus struct {
	p message.Fixed
}

func NewTradingSymbolStatusFrom(b []byte) TradingSymbolStatus {
	return TradingSymbolStatus{p: message.NewFixed(b)}
}

func WrapTradingSymbolStatus(b []byte) TradingSymbolStatus {
	return TradingSymbolStatus{p: message.WrapFixed(b)}
}

func NewTradingSymbolStatus() *TradingSymbolStatus {
	return &TradingSymbolStatus{p: message.NewFixed(_TradingSymbolStatusDefault)}
}

func ParseTradingSymbolStatus(b []byte) (TradingSymbolStatus, error) {
	if len(b) < 4 {
		return TradingSymbolStatus{}, message.ErrShortBuffer
	}
	m := WrapTradingSymbolStatus(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradingSymbolStatus{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return TradingSymbolStatus{}, message.ErrBaseSizeOverflow
	}
	if size < 12 {
		clone := *NewTradingSymbolStatus()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _TradingSymbolStatusDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m TradingSymbolStatus) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m TradingSymbolStatus) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the status in this message
// is for.
func (m TradingSymbolStatus) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Status The current trading status for the symbol. Can be one of the following.
// The current trading status for the symbol. Can be one of the following.
//
// TRADING_STATUS_UNKNOWN = 0
// TRADING_STATUS_PRE_OPEN = 1
// TRADING_STATUS_OPEN = 2
// TRADING_STATUS_CLOSE = 3
// TRADING_STATUS_TRADING_HALT = 4
func (m TradingSymbolStatus) Status() TradingStatusEnum {
	return TradingStatusEnum(m.p.Int8(8))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the status in this message
// is for.
func (m *TradingSymbolStatus) SetSymbolID(value uint32) *TradingSymbolStatus {
	m.p.SetUint32LE(4, value)
	return m
}

// SetStatus The current trading status for the symbol. Can be one of the following.
// The current trading status for the symbol. Can be one of the following.
//
// TRADING_STATUS_UNKNOWN = 0
// TRADING_STATUS_PRE_OPEN = 1
// TRADING_STATUS_OPEN = 2
// TRADING_STATUS_CLOSE = 3
// TRADING_STATUS_TRADING_HALT = 4
func (m *TradingSymbolStatus) SetStatus(value TradingStatusEnum) *TradingSymbolStatus {
	m.p.SetInt8(8, int8(value))
	return m
}

func (m TradingSymbolStatus) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradingSymbolStatus) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradingSymbolStatus) Copy(to TradingSymbolStatus) {
	to.SetSymbolID(m.SymbolID())
	to.SetStatus(m.Status())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradingSymbolStatus) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 138)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Int8Field("Status", int8(m.Status()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradingSymbolStatus) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 138 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Status":
			m.SetStatus(TradingStatusEnum(r.Int8()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradingSymbolStatus) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
