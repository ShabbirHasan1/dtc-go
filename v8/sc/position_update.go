// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const PositionUpdateSize = 120

const PositionUpdateFixedSize = 240

//     Size                         uint16         = PositionUpdateSize  (120)
//     Type                         uint16         = POSITION_UPDATE  (306)
//     BaseSize                     uint16         = PositionUpdateSize  (120)
//     RequestID                    int32          = 0
//     TotalNumberMessages          int32          = 0
//     MessageNumber                int32          = 0
//     Symbol                       string         = ""
//     Exchange                     string         = ""
//     Quantity                     float64        = 0.000000
//     AveragePrice                 float64        = 0.000000
//     PositionIdentifier           string         = ""
//     TradeAccount                 string         = ""
//     NoPositions                  uint8          = 0
//     Unsolicited                  uint8          = 0
//     MarginRequirement            float64        = 0.000000
//     EntryDateTime                DateTime4Byte  = 0
//     OpenProfitLoss               float64        = 0.000000
//     HighPriceDuringPosition      float64        = 0.000000
//     LowPriceDuringPosition       float64        = 0.000000
//     QuantityLimit                float64        = 0.000000
//     MaxPotentialPostionQuantity  float64        = 0.000000
var _PositionUpdateDefault = []byte{120, 0, 50, 1, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                         uint16         = PositionUpdateFixedSize  (240)
//     Type                         uint16         = POSITION_UPDATE  (306)
//     RequestID                    int32          = 0
//     TotalNumberMessages          int32          = 0
//     MessageNumber                int32          = 0
//     Symbol                       string[64]     = ""
//     Exchange                     string[16]     = ""
//     Quantity                     float64        = 0.000000
//     AveragePrice                 float64        = 0.000000
//     PositionIdentifier           string[32]     = ""
//     TradeAccount                 string[32]     = ""
//     NoPositions                  uint8          = 0
//     Unsolicited                  uint8          = 0
//     MarginRequirement            float64        = 0.000000
//     EntryDateTime                DateTime4Byte  = 0
//     OpenProfitLoss               float64        = 0.000000
//     HighPriceDuringPosition      float64        = 0.000000
//     LowPriceDuringPosition       float64        = 0.000000
//     QuantityLimit                float64        = 0.000000
//     MaxPotentialPostionQuantity  float64        = 0.000000
var _PositionUpdateFixedDefault = []byte{240, 0, 50, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// PositionUpdate This is a message from the Server to the Client to report a Trade Position
// for a symbol in any Trade Account for the logged in Username.
//
// The Position Update message can either be solicited, in response to CurrentPositionsRequest.
// Or unsolicited as a Trade Position for a symbol changes during the connection
// to the Server. Each Trade Position is contained within a single message.
// to the Server. Each Trade Position is contained within a single message.
//
// When the server is responding with one or more PositionUpdate messages
// in response to a CurrentPositionsRequest message, it must not send any
// unsolicited PositionUpdate messages interleaved with the solicited PositionUpdate
// messages in response to the CurrentPositionsRequest message.
type PositionUpdate struct {
	p message.VLS
}

// PositionUpdateFixed This is a message from the Server to the Client to report a Trade Position
// for a symbol in any Trade Account for the logged in Username.
//
// The Position Update message can either be solicited, in response to CurrentPositionsRequest.
// Or unsolicited as a Trade Position for a symbol changes during the connection
// to the Server. Each Trade Position is contained within a single message.
// to the Server. Each Trade Position is contained within a single message.
//
// When the server is responding with one or more PositionUpdate messages
// in response to a CurrentPositionsRequest message, it must not send any
// unsolicited PositionUpdate messages interleaved with the solicited PositionUpdate
// messages in response to the CurrentPositionsRequest message.
type PositionUpdateFixed struct {
	p message.Fixed
}

func NewPositionUpdateFrom(b []byte) PositionUpdate {
	return PositionUpdate{p: message.NewVLS(b)}
}

func WrapPositionUpdate(b []byte) PositionUpdate {
	return PositionUpdate{p: message.WrapVLS(b)}
}

func NewPositionUpdate() *PositionUpdate {
	return &PositionUpdate{p: message.NewVLS(_PositionUpdateDefault)}
}

func ParsePositionUpdate(b []byte) (PositionUpdate, error) {
	if len(b) < 6 {
		return PositionUpdate{}, message.ErrShortBuffer
	}
	m := WrapPositionUpdate(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return PositionUpdate{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return PositionUpdate{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 120 {
		newSize := len(b) + (120 - baseSize)
		if newSize > message.MaxSize {
			return PositionUpdate{}, message.ErrOverflow
		}
		clone := PositionUpdate{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _PositionUpdateDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(120 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(20)
			if offset > 0 {
				clone.p.SetUint16LE(20, offset+shift)
			}
			offset = clone.p.Uint16LE(24)
			if offset > 0 {
				clone.p.SetUint16LE(24, offset+shift)
			}
			offset = clone.p.Uint16LE(48)
			if offset > 0 {
				clone.p.SetUint16LE(48, offset+shift)
			}
			offset = clone.p.Uint16LE(52)
			if offset > 0 {
				clone.p.SetUint16LE(52, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewPositionUpdateFixedFrom(b []byte) PositionUpdateFixed {
	return PositionUpdateFixed{p: message.NewFixed(b)}
}

func WrapPositionUpdateFixed(b []byte) PositionUpdateFixed {
	return PositionUpdateFixed{p: message.WrapFixed(b)}
}

func NewPositionUpdateFixed() *PositionUpdateFixed {
	return &PositionUpdateFixed{p: message.NewFixed(_PositionUpdateFixedDefault)}
}

func ParsePositionUpdateFixed(b []byte) (PositionUpdateFixed, error) {
	if len(b) < 4 {
		return PositionUpdateFixed{}, message.ErrShortBuffer
	}
	m := WrapPositionUpdateFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return PositionUpdateFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return PositionUpdateFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 240 {
		clone := *NewPositionUpdateFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _PositionUpdateFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m PositionUpdate) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m PositionUpdate) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m PositionUpdate) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The Server sets this to 0, the default, if this is a real-time Trade Position
// update.
//
// Otherwise, when the Server is sending Trade Positions in response to a
// CurrentPositionsRequest message, it must set this to the RequestID given
// in the CurrentPositionsRequest message
func (m PositionUpdate) RequestID() int32 {
	return m.p.Int32LE(8)
}

// TotalNumberMessages This indicates the total number of Position Update messages when a batch
// of messages is being sent. If there is only one Position Update message
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m PositionUpdate) TotalNumberMessages() int32 {
	return m.p.Int32LE(12)
}

// MessageNumber This indicates the 1-based index of the Position Update message when a
// batch of messages is being sent. If there is only one Position Update
// message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m PositionUpdate) MessageNumber() int32 {
	return m.p.Int32LE(16)
}

// Symbol The symbol for the Position.
func (m PositionUpdate) Symbol() string {
	return m.p.StringVLS(20)
}

// Exchange The optional exchange for the symbol.
func (m PositionUpdate) Exchange() string {
	return m.p.StringVLS(24)
}

// Quantity The quantity of the current Position for the symbol. A positive number
// is for a long Position and a negative number is for a short Position.
func (m PositionUpdate) Quantity() float64 {
	return m.p.Float64LE(32)
}

// AveragePrice The average position price.
func (m PositionUpdate) AveragePrice() float64 {
	return m.p.Float64LE(40)
}

// PositionIdentifier When the Server sets LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// to 1, then it must set PositionIdentifier to a unique identifier to identify
// the Trade Position for the particular Symbol and Trade Account for which
// it is for.
//
// Otherwise, this field is optional and it is recommended for a Server not
// to use it if it does not provide multiple positions for a Symbol and Trade
// Account.
//
// This field identifies an individual Trade Position in the case of where
// there are multiple Positions for a particular Symbol and Trade Account.
// there are multiple Positions for a particular Symbol and Trade Account.
//
// A Client must implement support for PositionIdentifier when LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// is set to 1.
func (m PositionUpdate) PositionIdentifier() string {
	return m.p.StringVLS(48)
}

// TradeAccount The trade account the Trade Position is in for the Symbol.
func (m PositionUpdate) TradeAccount() string {
	return m.p.StringVLS(52)
}

// NoPositions Set to an integer value of 1 to indicate there are no Trade Positions
// in response to a CurrentPositionsRequest message.
//
// Otherwise, the Server must leave this at the default of 0. The Server
// is always expected to respond with a single PositionUpdate message when
// there are no Trade Positions for any Symbol when current Trade Positions
// have been requested by the Client with CurrentPositionsRequest.
//
// When the Server is sending a PositionUpdate message to the Client and
// it is indicating that the Quantity field is 0, then the NoPositions field
// must be left at the default of 0. It is not used to indicate a Quantity
// of 0 for a particular Symbol and TradeAccount.
//
// This is always set to the default of 0 for an unsolicited Trade Position
// Update.
func (m PositionUpdate) NoPositions() uint8 {
	return m.p.Uint8(56)
}

// Unsolicited Set to 1 to indicate this is an unsolicited Position Update message. In
// other words, it is a real-time Trade Position Update message which is
// not an initial response to a CurrentPositionsRequest message.
func (m PositionUpdate) Unsolicited() uint8 {
	return m.p.Uint8(57)
}

// MarginRequirement is the required margin as a currency value for the current
// trade Position Quantity and any working orders for the Trade Account.
//
// This is an optional field for the Server to provide.
func (m PositionUpdate) MarginRequirement() float64 {
	return m.p.Float64LE(64)
}

// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
// It is in the UTC time zone.
//
// This is an optional field for the Server to provide.
func (m PositionUpdate) EntryDateTime() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(72))
}

// OpenProfitLoss is the current open Trade Position profit or loss as a
// currency value.
//
// This is an optional field for the Server to provide.
func (m PositionUpdate) OpenProfitLoss() float64 {
	return m.p.Float64LE(80)
}

// HighPriceDuringPosition is the highest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m PositionUpdate) HighPriceDuringPosition() float64 {
	return m.p.Float64LE(88)
}

// LowPriceDuringPosition is the lowest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m PositionUpdate) LowPriceDuringPosition() float64 {
	return m.p.Float64LE(96)
}

// QuantityLimit This is the limit or maximum Trade Position Quantity possible for a Trade
// Position for the Trade Account and Symbol. This applies equally to a long
// or short position.
//
// This is only an informational value provided from the risk management
// system.
//
// This is an optional field for the Server to provide.
func (m PositionUpdate) QuantityLimit() float64 {
	return m.p.Float64LE(104)
}

// MaxPotentialPostionQuantity
func (m PositionUpdate) MaxPotentialPostionQuantity() float64 {
	return m.p.Float64LE(112)
}

// Size The standard message size field. Automatically set by constructor.
func (m PositionUpdateFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m PositionUpdateFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The Server sets this to 0, the default, if this is a real-time Trade Position
// update.
//
// Otherwise, when the Server is sending Trade Positions in response to a
// CurrentPositionsRequest message, it must set this to the RequestID given
// in the CurrentPositionsRequest message
func (m PositionUpdateFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// TotalNumberMessages This indicates the total number of Position Update messages when a batch
// of messages is being sent. If there is only one Position Update message
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m PositionUpdateFixed) TotalNumberMessages() int32 {
	return m.p.Int32LE(8)
}

// MessageNumber This indicates the 1-based index of the Position Update message when a
// batch of messages is being sent. If there is only one Position Update
// message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m PositionUpdateFixed) MessageNumber() int32 {
	return m.p.Int32LE(12)
}

// Symbol The symbol for the Position.
func (m PositionUpdateFixed) Symbol() string {
	return m.p.StringFixed(16, 64)
}

// Exchange The optional exchange for the symbol.
func (m PositionUpdateFixed) Exchange() string {
	return m.p.StringFixed(80, 16)
}

// Quantity The quantity of the current Position for the symbol. A positive number
// is for a long Position and a negative number is for a short Position.
func (m PositionUpdateFixed) Quantity() float64 {
	return m.p.Float64LE(96)
}

// AveragePrice The average position price.
func (m PositionUpdateFixed) AveragePrice() float64 {
	return m.p.Float64LE(104)
}

// PositionIdentifier When the Server sets LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// to 1, then it must set PositionIdentifier to a unique identifier to identify
// the Trade Position for the particular Symbol and Trade Account for which
// it is for.
//
// Otherwise, this field is optional and it is recommended for a Server not
// to use it if it does not provide multiple positions for a Symbol and Trade
// Account.
//
// This field identifies an individual Trade Position in the case of where
// there are multiple Positions for a particular Symbol and Trade Account.
// there are multiple Positions for a particular Symbol and Trade Account.
//
// A Client must implement support for PositionIdentifier when LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// is set to 1.
func (m PositionUpdateFixed) PositionIdentifier() string {
	return m.p.StringFixed(112, 32)
}

// TradeAccount The trade account the Trade Position is in for the Symbol.
func (m PositionUpdateFixed) TradeAccount() string {
	return m.p.StringFixed(144, 32)
}

// NoPositions Set to an integer value of 1 to indicate there are no Trade Positions
// in response to a CurrentPositionsRequest message.
//
// Otherwise, the Server must leave this at the default of 0. The Server
// is always expected to respond with a single PositionUpdate message when
// there are no Trade Positions for any Symbol when current Trade Positions
// have been requested by the Client with CurrentPositionsRequest.
//
// When the Server is sending a PositionUpdate message to the Client and
// it is indicating that the Quantity field is 0, then the NoPositions field
// must be left at the default of 0. It is not used to indicate a Quantity
// of 0 for a particular Symbol and TradeAccount.
//
// This is always set to the default of 0 for an unsolicited Trade Position
// Update.
func (m PositionUpdateFixed) NoPositions() uint8 {
	return m.p.Uint8(176)
}

// Unsolicited Set to 1 to indicate this is an unsolicited Position Update message. In
// other words, it is a real-time Trade Position Update message which is
// not an initial response to a CurrentPositionsRequest message.
func (m PositionUpdateFixed) Unsolicited() uint8 {
	return m.p.Uint8(177)
}

// MarginRequirement is the required margin as a currency value for the current
// trade Position Quantity and any working orders for the Trade Account.
//
// This is an optional field for the Server to provide.
func (m PositionUpdateFixed) MarginRequirement() float64 {
	return m.p.Float64LE(184)
}

// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
// It is in the UTC time zone.
//
// This is an optional field for the Server to provide.
func (m PositionUpdateFixed) EntryDateTime() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(192))
}

// OpenProfitLoss is the current open Trade Position profit or loss as a
// currency value.
//
// This is an optional field for the Server to provide.
func (m PositionUpdateFixed) OpenProfitLoss() float64 {
	return m.p.Float64LE(200)
}

// HighPriceDuringPosition is the highest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m PositionUpdateFixed) HighPriceDuringPosition() float64 {
	return m.p.Float64LE(208)
}

// LowPriceDuringPosition is the lowest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m PositionUpdateFixed) LowPriceDuringPosition() float64 {
	return m.p.Float64LE(216)
}

// QuantityLimit This is the limit or maximum Trade Position Quantity possible for a Trade
// Position for the Trade Account and Symbol. This applies equally to a long
// or short position.
//
// This is only an informational value provided from the risk management
// system.
//
// This is an optional field for the Server to provide.
func (m PositionUpdateFixed) QuantityLimit() float64 {
	return m.p.Float64LE(224)
}

// MaxPotentialPostionQuantity
func (m PositionUpdateFixed) MaxPotentialPostionQuantity() float64 {
	return m.p.Float64LE(232)
}

// SetRequestID The Server sets this to 0, the default, if this is a real-time Trade Position
// update.
//
// Otherwise, when the Server is sending Trade Positions in response to a
// CurrentPositionsRequest message, it must set this to the RequestID given
// in the CurrentPositionsRequest message
func (m *PositionUpdate) SetRequestID(value int32) *PositionUpdate {
	m.p.SetInt32LE(8, value)
	return m
}

// SetTotalNumberMessages This indicates the total number of Position Update messages when a batch
// of messages is being sent. If there is only one Position Update message
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *PositionUpdate) SetTotalNumberMessages(value int32) *PositionUpdate {
	m.p.SetInt32LE(12, value)
	return m
}

// SetMessageNumber This indicates the 1-based index of the Position Update message when a
// batch of messages is being sent. If there is only one Position Update
// message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *PositionUpdate) SetMessageNumber(value int32) *PositionUpdate {
	m.p.SetInt32LE(16, value)
	return m
}

// SetSymbol The symbol for the Position.
func (m *PositionUpdate) SetSymbol(value string) *PositionUpdate {
	m.p.SetStringVLS(20, value)
	return m
}

// SetExchange The optional exchange for the symbol.
func (m *PositionUpdate) SetExchange(value string) *PositionUpdate {
	m.p.SetStringVLS(24, value)
	return m
}

// SetQuantity The quantity of the current Position for the symbol. A positive number
// is for a long Position and a negative number is for a short Position.
func (m *PositionUpdate) SetQuantity(value float64) *PositionUpdate {
	m.p.SetFloat64LE(32, value)
	return m
}

// SetAveragePrice The average position price.
func (m *PositionUpdate) SetAveragePrice(value float64) *PositionUpdate {
	m.p.SetFloat64LE(40, value)
	return m
}

// SetPositionIdentifier When the Server sets LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// to 1, then it must set PositionIdentifier to a unique identifier to identify
// the Trade Position for the particular Symbol and Trade Account for which
// it is for.
//
// Otherwise, this field is optional and it is recommended for a Server not
// to use it if it does not provide multiple positions for a Symbol and Trade
// Account.
//
// This field identifies an individual Trade Position in the case of where
// there are multiple Positions for a particular Symbol and Trade Account.
// there are multiple Positions for a particular Symbol and Trade Account.
//
// A Client must implement support for PositionIdentifier when LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// is set to 1.
func (m *PositionUpdate) SetPositionIdentifier(value string) *PositionUpdate {
	m.p.SetStringVLS(48, value)
	return m
}

// SetTradeAccount The trade account the Trade Position is in for the Symbol.
func (m *PositionUpdate) SetTradeAccount(value string) *PositionUpdate {
	m.p.SetStringVLS(52, value)
	return m
}

// SetNoPositions Set to an integer value of 1 to indicate there are no Trade Positions
// in response to a CurrentPositionsRequest message.
//
// Otherwise, the Server must leave this at the default of 0. The Server
// is always expected to respond with a single PositionUpdate message when
// there are no Trade Positions for any Symbol when current Trade Positions
// have been requested by the Client with CurrentPositionsRequest.
//
// When the Server is sending a PositionUpdate message to the Client and
// it is indicating that the Quantity field is 0, then the NoPositions field
// must be left at the default of 0. It is not used to indicate a Quantity
// of 0 for a particular Symbol and TradeAccount.
//
// This is always set to the default of 0 for an unsolicited Trade Position
// Update.
func (m *PositionUpdate) SetNoPositions(value uint8) *PositionUpdate {
	m.p.SetUint8(56, value)
	return m
}

// SetUnsolicited Set to 1 to indicate this is an unsolicited Position Update message. In
// other words, it is a real-time Trade Position Update message which is
// not an initial response to a CurrentPositionsRequest message.
func (m *PositionUpdate) SetUnsolicited(value uint8) *PositionUpdate {
	m.p.SetUint8(57, value)
	return m
}

// SetMarginRequirement MarginRequirement is the required margin as a currency value for the current
// trade Position Quantity and any working orders for the Trade Account.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdate) SetMarginRequirement(value float64) *PositionUpdate {
	m.p.SetFloat64LE(64, value)
	return m
}

// SetEntryDateTime EntryDateTime is the Date-Time of the initial entry of the Trade Position.
// It is in the UTC time zone.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdate) SetEntryDateTime(value DateTime4Byte) *PositionUpdate {
	m.p.SetUint32LE(72, uint32(value))
	return m
}

// SetOpenProfitLoss OpenProfitLoss is the current open Trade Position profit or loss as a
// currency value.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdate) SetOpenProfitLoss(value float64) *PositionUpdate {
	m.p.SetFloat64LE(80, value)
	return m
}

// SetHighPriceDuringPosition HighPriceDuringPosition is the highest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdate) SetHighPriceDuringPosition(value float64) *PositionUpdate {
	m.p.SetFloat64LE(88, value)
	return m
}

// SetLowPriceDuringPosition LowPriceDuringPosition is the lowest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdate) SetLowPriceDuringPosition(value float64) *PositionUpdate {
	m.p.SetFloat64LE(96, value)
	return m
}

// SetQuantityLimit This is the limit or maximum Trade Position Quantity possible for a Trade
// Position for the Trade Account and Symbol. This applies equally to a long
// or short position.
//
// This is only an informational value provided from the risk management
// system.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdate) SetQuantityLimit(value float64) *PositionUpdate {
	m.p.SetFloat64LE(104, value)
	return m
}

// SetMaxPotentialPostionQuantity
func (m *PositionUpdate) SetMaxPotentialPostionQuantity(value float64) *PositionUpdate {
	m.p.SetFloat64LE(112, value)
	return m
}

// SetRequestID The Server sets this to 0, the default, if this is a real-time Trade Position
// update.
//
// Otherwise, when the Server is sending Trade Positions in response to a
// CurrentPositionsRequest message, it must set this to the RequestID given
// in the CurrentPositionsRequest message
func (m *PositionUpdateFixed) SetRequestID(value int32) *PositionUpdateFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetTotalNumberMessages This indicates the total number of Position Update messages when a batch
// of messages is being sent. If there is only one Position Update message
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
// being sent, this will be 1. Use a value of 1 for an unsolicited message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *PositionUpdateFixed) SetTotalNumberMessages(value int32) *PositionUpdateFixed {
	m.p.SetInt32LE(8, value)
	return m
}

// SetMessageNumber This indicates the 1-based index of the Position Update message when a
// batch of messages is being sent. If there is only one Position Update
// message being sent, this will be 1. Use a value of 1 for an unsolicited
// message.
//
// A Client should not rely on this field for an unsolicited message. This
// is required to be set.
func (m *PositionUpdateFixed) SetMessageNumber(value int32) *PositionUpdateFixed {
	m.p.SetInt32LE(12, value)
	return m
}

// SetSymbol The symbol for the Position.
func (m *PositionUpdateFixed) SetSymbol(value string) *PositionUpdateFixed {
	m.p.SetStringFixed(16, 64, value)
	return m
}

// SetExchange The optional exchange for the symbol.
func (m *PositionUpdateFixed) SetExchange(value string) *PositionUpdateFixed {
	m.p.SetStringFixed(80, 16, value)
	return m
}

// SetQuantity The quantity of the current Position for the symbol. A positive number
// is for a long Position and a negative number is for a short Position.
func (m *PositionUpdateFixed) SetQuantity(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(96, value)
	return m
}

// SetAveragePrice The average position price.
func (m *PositionUpdateFixed) SetAveragePrice(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(104, value)
	return m
}

// SetPositionIdentifier When the Server sets LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// to 1, then it must set PositionIdentifier to a unique identifier to identify
// the Trade Position for the particular Symbol and Trade Account for which
// it is for.
//
// Otherwise, this field is optional and it is recommended for a Server not
// to use it if it does not provide multiple positions for a Symbol and Trade
// Account.
//
// This field identifies an individual Trade Position in the case of where
// there are multiple Positions for a particular Symbol and Trade Account.
// there are multiple Positions for a particular Symbol and Trade Account.
//
// A Client must implement support for PositionIdentifier when LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount
// is set to 1.
func (m *PositionUpdateFixed) SetPositionIdentifier(value string) *PositionUpdateFixed {
	m.p.SetStringFixed(112, 32, value)
	return m
}

// SetTradeAccount The trade account the Trade Position is in for the Symbol.
func (m *PositionUpdateFixed) SetTradeAccount(value string) *PositionUpdateFixed {
	m.p.SetStringFixed(144, 32, value)
	return m
}

// SetNoPositions Set to an integer value of 1 to indicate there are no Trade Positions
// in response to a CurrentPositionsRequest message.
//
// Otherwise, the Server must leave this at the default of 0. The Server
// is always expected to respond with a single PositionUpdate message when
// there are no Trade Positions for any Symbol when current Trade Positions
// have been requested by the Client with CurrentPositionsRequest.
//
// When the Server is sending a PositionUpdate message to the Client and
// it is indicating that the Quantity field is 0, then the NoPositions field
// must be left at the default of 0. It is not used to indicate a Quantity
// of 0 for a particular Symbol and TradeAccount.
//
// This is always set to the default of 0 for an unsolicited Trade Position
// Update.
func (m *PositionUpdateFixed) SetNoPositions(value uint8) *PositionUpdateFixed {
	m.p.SetUint8(176, value)
	return m
}

// SetUnsolicited Set to 1 to indicate this is an unsolicited Position Update message. In
// other words, it is a real-time Trade Position Update message which is
// not an initial response to a CurrentPositionsRequest message.
func (m *PositionUpdateFixed) SetUnsolicited(value uint8) *PositionUpdateFixed {
	m.p.SetUint8(177, value)
	return m
}

// SetMarginRequirement MarginRequirement is the required margin as a currency value for the current
// trade Position Quantity and any working orders for the Trade Account.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdateFixed) SetMarginRequirement(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(184, value)
	return m
}

// SetEntryDateTime EntryDateTime is the Date-Time of the initial entry of the Trade Position.
// It is in the UTC time zone.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdateFixed) SetEntryDateTime(value DateTime4Byte) *PositionUpdateFixed {
	m.p.SetUint32LE(192, uint32(value))
	return m
}

// SetOpenProfitLoss OpenProfitLoss is the current open Trade Position profit or loss as a
// currency value.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdateFixed) SetOpenProfitLoss(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(200, value)
	return m
}

// SetHighPriceDuringPosition HighPriceDuringPosition is the highest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdateFixed) SetHighPriceDuringPosition(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(208, value)
	return m
}

// SetLowPriceDuringPosition LowPriceDuringPosition is the lowest price the symbol traded at during
// the life of the Trade Position. This value can be reset by the Server
// when there is a change in Trade Position Quantity.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdateFixed) SetLowPriceDuringPosition(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(216, value)
	return m
}

// SetQuantityLimit This is the limit or maximum Trade Position Quantity possible for a Trade
// Position for the Trade Account and Symbol. This applies equally to a long
// or short position.
//
// This is only an informational value provided from the risk management
// system.
//
// This is an optional field for the Server to provide.
func (m *PositionUpdateFixed) SetQuantityLimit(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(224, value)
	return m
}

// SetMaxPotentialPostionQuantity
func (m *PositionUpdateFixed) SetMaxPotentialPostionQuantity(value float64) *PositionUpdateFixed {
	m.p.SetFloat64LE(232, value)
	return m
}

func (m PositionUpdate) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m PositionUpdate) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m PositionUpdateFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m PositionUpdateFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m PositionUpdate) Copy(to PositionUpdate) {
	to.SetRequestID(m.RequestID())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetQuantity(m.Quantity())
	to.SetAveragePrice(m.AveragePrice())
	to.SetPositionIdentifier(m.PositionIdentifier())
	to.SetTradeAccount(m.TradeAccount())
	to.SetNoPositions(m.NoPositions())
	to.SetUnsolicited(m.Unsolicited())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetOpenProfitLoss(m.OpenProfitLoss())
	to.SetHighPriceDuringPosition(m.HighPriceDuringPosition())
	to.SetLowPriceDuringPosition(m.LowPriceDuringPosition())
	to.SetQuantityLimit(m.QuantityLimit())
	to.SetMaxPotentialPostionQuantity(m.MaxPotentialPostionQuantity())
}

// CopyTo
func (m PositionUpdate) CopyTo(to PositionUpdateFixed) {
	to.SetRequestID(m.RequestID())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetQuantity(m.Quantity())
	to.SetAveragePrice(m.AveragePrice())
	to.SetPositionIdentifier(m.PositionIdentifier())
	to.SetTradeAccount(m.TradeAccount())
	to.SetNoPositions(m.NoPositions())
	to.SetUnsolicited(m.Unsolicited())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetOpenProfitLoss(m.OpenProfitLoss())
	to.SetHighPriceDuringPosition(m.HighPriceDuringPosition())
	to.SetLowPriceDuringPosition(m.LowPriceDuringPosition())
	to.SetQuantityLimit(m.QuantityLimit())
	to.SetMaxPotentialPostionQuantity(m.MaxPotentialPostionQuantity())
}

// Copy
func (m PositionUpdateFixed) Copy(to PositionUpdateFixed) {
	to.SetRequestID(m.RequestID())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetQuantity(m.Quantity())
	to.SetAveragePrice(m.AveragePrice())
	to.SetPositionIdentifier(m.PositionIdentifier())
	to.SetTradeAccount(m.TradeAccount())
	to.SetNoPositions(m.NoPositions())
	to.SetUnsolicited(m.Unsolicited())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetOpenProfitLoss(m.OpenProfitLoss())
	to.SetHighPriceDuringPosition(m.HighPriceDuringPosition())
	to.SetLowPriceDuringPosition(m.LowPriceDuringPosition())
	to.SetQuantityLimit(m.QuantityLimit())
	to.SetMaxPotentialPostionQuantity(m.MaxPotentialPostionQuantity())
}

// CopyTo
func (m PositionUpdateFixed) CopyTo(to PositionUpdate) {
	to.SetRequestID(m.RequestID())
	to.SetTotalNumberMessages(m.TotalNumberMessages())
	to.SetMessageNumber(m.MessageNumber())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetQuantity(m.Quantity())
	to.SetAveragePrice(m.AveragePrice())
	to.SetPositionIdentifier(m.PositionIdentifier())
	to.SetTradeAccount(m.TradeAccount())
	to.SetNoPositions(m.NoPositions())
	to.SetUnsolicited(m.Unsolicited())
	to.SetMarginRequirement(m.MarginRequirement())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetOpenProfitLoss(m.OpenProfitLoss())
	to.SetHighPriceDuringPosition(m.HighPriceDuringPosition())
	to.SetLowPriceDuringPosition(m.LowPriceDuringPosition())
	to.SetQuantityLimit(m.QuantityLimit())
	to.SetMaxPotentialPostionQuantity(m.MaxPotentialPostionQuantity())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m PositionUpdate) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 306)
	w.Int32Field("RequestID", m.RequestID())
	w.Int32Field("TotalNumberMessages", m.TotalNumberMessages())
	w.Int32Field("MessageNumber", m.MessageNumber())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.Float64Field("Quantity", m.Quantity())
	w.Float64Field("AveragePrice", m.AveragePrice())
	w.StringField("PositionIdentifier", m.PositionIdentifier())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Uint8Field("NoPositions", m.NoPositions())
	w.Uint8Field("Unsolicited", m.Unsolicited())
	w.Float64Field("MarginRequirement", m.MarginRequirement())
	w.Uint32Field("EntryDateTime", uint32(m.EntryDateTime()))
	w.Float64Field("OpenProfitLoss", m.OpenProfitLoss())
	w.Float64Field("HighPriceDuringPosition", m.HighPriceDuringPosition())
	w.Float64Field("LowPriceDuringPosition", m.LowPriceDuringPosition())
	w.Float64Field("QuantityLimit", m.QuantityLimit())
	w.Float64Field("MaxPotentialPostionQuantity", m.MaxPotentialPostionQuantity())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *PositionUpdate) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 306 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TotalNumberMessages":
			m.SetTotalNumberMessages(r.Int32())
		case "MessageNumber":
			m.SetMessageNumber(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "Quantity":
			m.SetQuantity(r.Float64())
		case "AveragePrice":
			m.SetAveragePrice(r.Float64())
		case "PositionIdentifier":
			m.SetPositionIdentifier(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "NoPositions":
			m.SetNoPositions(r.Uint8())
		case "Unsolicited":
			m.SetUnsolicited(r.Uint8())
		case "MarginRequirement":
			m.SetMarginRequirement(r.Float64())
		case "EntryDateTime":
			m.SetEntryDateTime(DateTime4Byte(r.Uint32()))
		case "OpenProfitLoss":
			m.SetOpenProfitLoss(r.Float64())
		case "HighPriceDuringPosition":
			m.SetHighPriceDuringPosition(r.Float64())
		case "LowPriceDuringPosition":
			m.SetLowPriceDuringPosition(r.Float64())
		case "QuantityLimit":
			m.SetQuantityLimit(r.Float64())
		case "MaxPotentialPostionQuantity":
			m.SetMaxPotentialPostionQuantity(r.Float64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *PositionUpdate) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m PositionUpdateFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 306)
	w.Int32Field("RequestID", m.RequestID())
	w.Int32Field("TotalNumberMessages", m.TotalNumberMessages())
	w.Int32Field("MessageNumber", m.MessageNumber())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.Float64Field("Quantity", m.Quantity())
	w.Float64Field("AveragePrice", m.AveragePrice())
	w.StringField("PositionIdentifier", m.PositionIdentifier())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Uint8Field("NoPositions", m.NoPositions())
	w.Uint8Field("Unsolicited", m.Unsolicited())
	w.Float64Field("MarginRequirement", m.MarginRequirement())
	w.Uint32Field("EntryDateTime", uint32(m.EntryDateTime()))
	w.Float64Field("OpenProfitLoss", m.OpenProfitLoss())
	w.Float64Field("HighPriceDuringPosition", m.HighPriceDuringPosition())
	w.Float64Field("LowPriceDuringPosition", m.LowPriceDuringPosition())
	w.Float64Field("QuantityLimit", m.QuantityLimit())
	w.Float64Field("MaxPotentialPostionQuantity", m.MaxPotentialPostionQuantity())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *PositionUpdateFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 306 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TotalNumberMessages":
			m.SetTotalNumberMessages(r.Int32())
		case "MessageNumber":
			m.SetMessageNumber(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "Quantity":
			m.SetQuantity(r.Float64())
		case "AveragePrice":
			m.SetAveragePrice(r.Float64())
		case "PositionIdentifier":
			m.SetPositionIdentifier(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "NoPositions":
			m.SetNoPositions(r.Uint8())
		case "Unsolicited":
			m.SetUnsolicited(r.Uint8())
		case "MarginRequirement":
			m.SetMarginRequirement(r.Float64())
		case "EntryDateTime":
			m.SetEntryDateTime(DateTime4Byte(r.Uint32()))
		case "OpenProfitLoss":
			m.SetOpenProfitLoss(r.Float64())
		case "HighPriceDuringPosition":
			m.SetHighPriceDuringPosition(r.Float64())
		case "LowPriceDuringPosition":
			m.SetLowPriceDuringPosition(r.Float64())
		case "QuantityLimit":
			m.SetQuantityLimit(r.Float64())
		case "MaxPotentialPostionQuantity":
			m.SetMaxPotentialPostionQuantity(r.Float64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *PositionUpdateFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
