// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const InterprocessSynchronizationRemoteStateSize = 7

//     Size                       uint16  = InterprocessSynchronizationRemoteStateSize  (7)
//     Type                       uint16  = INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE  (10134)
//     IsPrimary                  bool    = false
//     IsSecondary                bool    = false
//     IsSecondaryFailoverActive  bool    = false
var _InterprocessSynchronizationRemoteStateDefault = []byte{7, 0, 150, 39, 0, 0, 0}

type InterprocessSynchronizationRemoteState struct {
	p message.Fixed
}

func NewInterprocessSynchronizationRemoteStateFrom(b []byte) InterprocessSynchronizationRemoteState {
	return InterprocessSynchronizationRemoteState{p: message.NewFixed(b)}
}

func WrapInterprocessSynchronizationRemoteState(b []byte) InterprocessSynchronizationRemoteState {
	return InterprocessSynchronizationRemoteState{p: message.WrapFixed(b)}
}

func NewInterprocessSynchronizationRemoteState() *InterprocessSynchronizationRemoteState {
	return &InterprocessSynchronizationRemoteState{p: message.NewFixed(_InterprocessSynchronizationRemoteStateDefault)}
}

func ParseInterprocessSynchronizationRemoteState(b []byte) (InterprocessSynchronizationRemoteState, error) {
	if len(b) < 4 {
		return InterprocessSynchronizationRemoteState{}, message.ErrShortBuffer
	}
	m := WrapInterprocessSynchronizationRemoteState(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return InterprocessSynchronizationRemoteState{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return InterprocessSynchronizationRemoteState{}, message.ErrBaseSizeOverflow
	}
	if size < 7 {
		clone := *NewInterprocessSynchronizationRemoteState()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _InterprocessSynchronizationRemoteStateDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m InterprocessSynchronizationRemoteState) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m InterprocessSynchronizationRemoteState) Type() uint16 {
	return m.p.Uint16LE(2)
}

// IsPrimary
func (m InterprocessSynchronizationRemoteState) IsPrimary() bool {
	return m.p.Bool(4)
}

// IsSecondary
func (m InterprocessSynchronizationRemoteState) IsSecondary() bool {
	return m.p.Bool(5)
}

// IsSecondaryFailoverActive
func (m InterprocessSynchronizationRemoteState) IsSecondaryFailoverActive() bool {
	return m.p.Bool(6)
}

// SetIsPrimary
func (m *InterprocessSynchronizationRemoteState) SetIsPrimary(value bool) *InterprocessSynchronizationRemoteState {
	m.p.SetBool(4, value)
	return m
}

// SetIsSecondary
func (m *InterprocessSynchronizationRemoteState) SetIsSecondary(value bool) *InterprocessSynchronizationRemoteState {
	m.p.SetBool(5, value)
	return m
}

// SetIsSecondaryFailoverActive
func (m *InterprocessSynchronizationRemoteState) SetIsSecondaryFailoverActive(value bool) *InterprocessSynchronizationRemoteState {
	m.p.SetBool(6, value)
	return m
}

func (m InterprocessSynchronizationRemoteState) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m InterprocessSynchronizationRemoteState) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m InterprocessSynchronizationRemoteState) Copy(to InterprocessSynchronizationRemoteState) {
	to.SetIsPrimary(m.IsPrimary())
	to.SetIsSecondary(m.IsSecondary())
	to.SetIsSecondaryFailoverActive(m.IsSecondaryFailoverActive())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m InterprocessSynchronizationRemoteState) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10134)
	w.BoolField("IsPrimary", m.IsPrimary())
	w.BoolField("IsSecondary", m.IsSecondary())
	w.BoolField("IsSecondaryFailoverActive", m.IsSecondaryFailoverActive())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *InterprocessSynchronizationRemoteState) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10134 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "IsPrimary":
			m.SetIsPrimary(r.Bool())
		case "IsSecondary":
			m.SetIsSecondary(r.Bool())
		case "IsSecondaryFailoverActive":
			m.SetIsSecondaryFailoverActive(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *InterprocessSynchronizationRemoteState) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
