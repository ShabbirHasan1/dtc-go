// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const UnderlyingSymbolsForExchangeRequestSize = 20

const UnderlyingSymbolsForExchangeRequestFixedSize = 28

//     Size          uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     BaseSize      uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     RequestID     int32             = 0
//     Exchange      string            = ""
//     SecurityType  SecurityTypeEnum  = SECURITY_TYPE_UNSET  (0)
var _UnderlyingSymbolsForExchangeRequestDefault = []byte{20, 0, 247, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size          uint16            = UnderlyingSymbolsForExchangeRequestFixedSize  (28)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     RequestID     int32             = 0
//     Exchange      string[16]        = ""
//     SecurityType  SecurityTypeEnum  = SECURITY_TYPE_UNSET  (0)
var _UnderlyingSymbolsForExchangeRequestFixedDefault = []byte{28, 0, 247, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// UnderlyingSymbolsForExchangeRequest This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequest struct {
	p message.VLS
}

// UnderlyingSymbolsForExchangeRequestFixed This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestFixed struct {
	p message.Fixed
}

func NewUnderlyingSymbolsForExchangeRequestFrom(b []byte) UnderlyingSymbolsForExchangeRequest {
	return UnderlyingSymbolsForExchangeRequest{p: message.NewVLS(b)}
}

func WrapUnderlyingSymbolsForExchangeRequest(b []byte) UnderlyingSymbolsForExchangeRequest {
	return UnderlyingSymbolsForExchangeRequest{p: message.WrapVLS(b)}
}

func NewUnderlyingSymbolsForExchangeRequest() *UnderlyingSymbolsForExchangeRequest {
	return &UnderlyingSymbolsForExchangeRequest{p: message.NewVLS(_UnderlyingSymbolsForExchangeRequestDefault)}
}

func ParseUnderlyingSymbolsForExchangeRequest(b []byte) (UnderlyingSymbolsForExchangeRequest, error) {
	if len(b) < 6 {
		return UnderlyingSymbolsForExchangeRequest{}, message.ErrShortBuffer
	}
	m := WrapUnderlyingSymbolsForExchangeRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return UnderlyingSymbolsForExchangeRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return UnderlyingSymbolsForExchangeRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 20 {
		newSize := len(b) + (20 - baseSize)
		if newSize > message.MaxSize {
			return UnderlyingSymbolsForExchangeRequest{}, message.ErrOverflow
		}
		clone := UnderlyingSymbolsForExchangeRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _UnderlyingSymbolsForExchangeRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(20 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewUnderlyingSymbolsForExchangeRequestFixedFrom(b []byte) UnderlyingSymbolsForExchangeRequestFixed {
	return UnderlyingSymbolsForExchangeRequestFixed{p: message.NewFixed(b)}
}

func WrapUnderlyingSymbolsForExchangeRequestFixed(b []byte) UnderlyingSymbolsForExchangeRequestFixed {
	return UnderlyingSymbolsForExchangeRequestFixed{p: message.WrapFixed(b)}
}

func NewUnderlyingSymbolsForExchangeRequestFixed() *UnderlyingSymbolsForExchangeRequestFixed {
	return &UnderlyingSymbolsForExchangeRequestFixed{p: message.NewFixed(_UnderlyingSymbolsForExchangeRequestFixedDefault)}
}

func ParseUnderlyingSymbolsForExchangeRequestFixed(b []byte) (UnderlyingSymbolsForExchangeRequestFixed, error) {
	if len(b) < 4 {
		return UnderlyingSymbolsForExchangeRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapUnderlyingSymbolsForExchangeRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return UnderlyingSymbolsForExchangeRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return UnderlyingSymbolsForExchangeRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 28 {
		clone := *NewUnderlyingSymbolsForExchangeRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _UnderlyingSymbolsForExchangeRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m UnderlyingSymbolsForExchangeRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m UnderlyingSymbolsForExchangeRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m UnderlyingSymbolsForExchangeRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequest) RequestID() int32 {
	return m.p.Int32LE(8)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequest) Exchange() string {
	return m.p.StringVLS(12)
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequest) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(m.p.Int32LE(16))
}

// Size The standard message size field. Automatically set by constructor.
func (m UnderlyingSymbolsForExchangeRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m UnderlyingSymbolsForExchangeRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestFixed) Exchange() string {
	return m.p.StringFixed(8, 16)
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestFixed) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(m.p.Int32LE(24))
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m *UnderlyingSymbolsForExchangeRequest) SetRequestID(value int32) *UnderlyingSymbolsForExchangeRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetExchange .
func (m *UnderlyingSymbolsForExchangeRequest) SetExchange(value string) *UnderlyingSymbolsForExchangeRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetSecurityType .
func (m *UnderlyingSymbolsForExchangeRequest) SetSecurityType(value SecurityTypeEnum) *UnderlyingSymbolsForExchangeRequest {
	m.p.SetInt32LE(16, int32(value))
	return m
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m *UnderlyingSymbolsForExchangeRequestFixed) SetRequestID(value int32) *UnderlyingSymbolsForExchangeRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetExchange .
func (m *UnderlyingSymbolsForExchangeRequestFixed) SetExchange(value string) *UnderlyingSymbolsForExchangeRequestFixed {
	m.p.SetStringFixed(8, 16, value)
	return m
}

// SetSecurityType .
func (m *UnderlyingSymbolsForExchangeRequestFixed) SetSecurityType(value SecurityTypeEnum) *UnderlyingSymbolsForExchangeRequestFixed {
	m.p.SetInt32LE(24, int32(value))
	return m
}

func (m UnderlyingSymbolsForExchangeRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m UnderlyingSymbolsForExchangeRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m UnderlyingSymbolsForExchangeRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m UnderlyingSymbolsForExchangeRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m UnderlyingSymbolsForExchangeRequest) Copy(to UnderlyingSymbolsForExchangeRequest) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
}

// CopyTo
func (m UnderlyingSymbolsForExchangeRequest) CopyTo(to UnderlyingSymbolsForExchangeRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
}

// Copy
func (m UnderlyingSymbolsForExchangeRequestFixed) Copy(to UnderlyingSymbolsForExchangeRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
}

// CopyTo
func (m UnderlyingSymbolsForExchangeRequestFixed) CopyTo(to UnderlyingSymbolsForExchangeRequest) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m UnderlyingSymbolsForExchangeRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 503)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Exchange", m.Exchange())
	w.Int32Field("SecurityType", int32(m.SecurityType()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *UnderlyingSymbolsForExchangeRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 503 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Exchange":
			m.SetExchange(r.String())
		case "SecurityType":
			m.SetSecurityType(SecurityTypeEnum(r.Int32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *UnderlyingSymbolsForExchangeRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m UnderlyingSymbolsForExchangeRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 503)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Exchange", m.Exchange())
	w.Int32Field("SecurityType", int32(m.SecurityType()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *UnderlyingSymbolsForExchangeRequestFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 503 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Exchange":
			m.SetExchange(r.String())
		case "SecurityType":
			m.SetSecurityType(SecurityTypeEnum(r.Int32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *UnderlyingSymbolsForExchangeRequestFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
