// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradeActivityDataSize = 280

//     Size                              uint16   = TradeActivityDataSize  (280)
//     Type                              uint16   = TRADE_ACTIVITY_DATA  (10114)
//     BaseSize                          uint16   = TradeActivityDataSize  (280)
//     ActivityType                      uint8    = 0
//     DataDateTimeUTC                   int64    = 0
//     Symbol                            string   = ""
//     OrderActionSource                 string   = ""
//     InternalOrderID                   uint64   = 0
//     ServiceOrderID                    string   = ""
//     ExchangeOrderID                   string   = ""
//     FIXClientOrderID                  string   = ""
//     OrderTypeName                     string   = ""
//     Quantity                          float64  = 0.000000
//     BuySell                           uint8    = 0
//     Price1                            float64  = 0.000000
//     Price2                            float64  = 0.000000
//     NewOrderStatus                    uint8    = 0
//     FillPrice                         float64  = 0.000000
//     OrderFilledQuantity               float64  = 0.000000
//     HighPriceDuringPosition           float64  = 0.000000
//     LowPriceDuringPosition            float64  = 0.000000
//     LastPriceDuringPosition           float64  = 0.000000
//     TradeAccount                      string   = ""
//     ParentInternalOrderID             uint64   = 0
//     OpenClose                         uint8    = 0
//     IsSimulated                       bool     = false
//     IsAutomatedOrder                  bool     = false
//     IsChartReplaying                  bool     = false
//     FillExecutionServiceID            string   = ""
//     PositionQuantity                  float64  = 0.000000
//     SourceChartNumber                 int32    = 0
//     SourceChartbookFileName           string   = ""
//     TimeInForce                       int32    = 0
//     SymbolServiceCode                 string   = ""
//     Note                              string   = ""
//     OriginatingClientUsername         string   = ""
//     TradeAccountBalance               float64  = 0.000000
//     SupportsPositionQuantityField     uint8    = 0
//     IsBillable                        bool     = false
//     QuantityForBilling                int32    = 0
//     OrderRoutingServiceCode           string   = ""
//     SubAccountIdentifier              uint32   = 0
//     AuditTrail_TransactDateTimeUTC    int64    = 0
//     AuditTrail_MessageDirection       int32    = 0
//     AuditTrail_OperatorID             string   = ""
//     AuditTrail_SelfMatchPreventionID  string   = ""
//     AuditTrail_SessionID              string   = ""
//     AuditTrail_ExecutingFirmID        string   = ""
//     AuditTrail_FixMessageType         string   = ""
//     AuditTrail_CustomerTypeIndicator  int16    = 0
//     AuditTrail_CustomerOrFirm         int16    = 0
//     AuditTrail_ExecutionReportID      string   = ""
//     AuditTrail_SpreadLegLinkID        string   = ""
//     AuditTrail_SecurityDesc           string   = ""
//     AuditTrail_MarketSegmentID        string   = ""
//     AuditTrail_IFMFlag                uint8    = 0
//     AuditTrail_DisplayQuantity        float64  = 0.000000
//     AuditTrail_CountryOfOrigin        string   = ""
//     AuditTrail_FillQuantity           float64  = 0.000000
//     AuditTrail_RemainingQuantity      float64  = 0.000000
//     AuditTrail_AggressorFlag          uint8    = 0
//     AuditTrail_SourceOfCancellation   int32    = 0
//     AuditTrail_OrdRejReason           string   = ""
//     IsSnapshot                        bool     = false
//     IsFirstMessageInBatch             bool     = false
//     IsLastMessageInBatch              bool     = false
var _TradeActivityDataDefault = []byte{24, 1, 130, 39, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradeActivityData struct {
	p message.VLS
}

func NewTradeActivityDataFrom(b []byte) TradeActivityData {
	return TradeActivityData{p: message.NewVLS(b)}
}

func WrapTradeActivityData(b []byte) TradeActivityData {
	return TradeActivityData{p: message.WrapVLS(b)}
}

func NewTradeActivityData() *TradeActivityData {
	return &TradeActivityData{p: message.NewVLS(_TradeActivityDataDefault)}
}

func ParseTradeActivityData(b []byte) (TradeActivityData, error) {
	if len(b) < 6 {
		return TradeActivityData{}, message.ErrShortBuffer
	}
	m := WrapTradeActivityData(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradeActivityData{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradeActivityData{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 280 {
		newSize := len(b) + (280 - baseSize)
		if newSize > message.MaxSize {
			return TradeActivityData{}, message.ErrOverflow
		}
		clone := TradeActivityData{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradeActivityDataDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(280 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(15)
			if offset > 0 {
				clone.p.SetUint16LE(15, offset+shift)
			}
			offset = clone.p.Uint16LE(19)
			if offset > 0 {
				clone.p.SetUint16LE(19, offset+shift)
			}
			offset = clone.p.Uint16LE(31)
			if offset > 0 {
				clone.p.SetUint16LE(31, offset+shift)
			}
			offset = clone.p.Uint16LE(35)
			if offset > 0 {
				clone.p.SetUint16LE(35, offset+shift)
			}
			offset = clone.p.Uint16LE(39)
			if offset > 0 {
				clone.p.SetUint16LE(39, offset+shift)
			}
			offset = clone.p.Uint16LE(43)
			if offset > 0 {
				clone.p.SetUint16LE(43, offset+shift)
			}
			offset = clone.p.Uint16LE(113)
			if offset > 0 {
				clone.p.SetUint16LE(113, offset+shift)
			}
			offset = clone.p.Uint16LE(129)
			if offset > 0 {
				clone.p.SetUint16LE(129, offset+shift)
			}
			offset = clone.p.Uint16LE(145)
			if offset > 0 {
				clone.p.SetUint16LE(145, offset+shift)
			}
			offset = clone.p.Uint16LE(153)
			if offset > 0 {
				clone.p.SetUint16LE(153, offset+shift)
			}
			offset = clone.p.Uint16LE(157)
			if offset > 0 {
				clone.p.SetUint16LE(157, offset+shift)
			}
			offset = clone.p.Uint16LE(161)
			if offset > 0 {
				clone.p.SetUint16LE(161, offset+shift)
			}
			offset = clone.p.Uint16LE(179)
			if offset > 0 {
				clone.p.SetUint16LE(179, offset+shift)
			}
			offset = clone.p.Uint16LE(199)
			if offset > 0 {
				clone.p.SetUint16LE(199, offset+shift)
			}
			offset = clone.p.Uint16LE(203)
			if offset > 0 {
				clone.p.SetUint16LE(203, offset+shift)
			}
			offset = clone.p.Uint16LE(207)
			if offset > 0 {
				clone.p.SetUint16LE(207, offset+shift)
			}
			offset = clone.p.Uint16LE(211)
			if offset > 0 {
				clone.p.SetUint16LE(211, offset+shift)
			}
			offset = clone.p.Uint16LE(215)
			if offset > 0 {
				clone.p.SetUint16LE(215, offset+shift)
			}
			offset = clone.p.Uint16LE(223)
			if offset > 0 {
				clone.p.SetUint16LE(223, offset+shift)
			}
			offset = clone.p.Uint16LE(227)
			if offset > 0 {
				clone.p.SetUint16LE(227, offset+shift)
			}
			offset = clone.p.Uint16LE(231)
			if offset > 0 {
				clone.p.SetUint16LE(231, offset+shift)
			}
			offset = clone.p.Uint16LE(235)
			if offset > 0 {
				clone.p.SetUint16LE(235, offset+shift)
			}
			offset = clone.p.Uint16LE(248)
			if offset > 0 {
				clone.p.SetUint16LE(248, offset+shift)
			}
			offset = clone.p.Uint16LE(273)
			if offset > 0 {
				clone.p.SetUint16LE(273, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradeActivityData) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradeActivityData) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradeActivityData) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// ActivityType
func (m TradeActivityData) ActivityType() uint8 {
	return m.p.Uint8(6)
}

// DataDateTimeUTC
func (m TradeActivityData) DataDateTimeUTC() int64 {
	return m.p.Int64LE(7)
}

// Symbol
func (m TradeActivityData) Symbol() string {
	return m.p.StringVLS(15)
}

// OrderActionSource
func (m TradeActivityData) OrderActionSource() string {
	return m.p.StringVLS(19)
}

// InternalOrderID
func (m TradeActivityData) InternalOrderID() uint64 {
	return m.p.Uint64LE(23)
}

// ServiceOrderID
func (m TradeActivityData) ServiceOrderID() string {
	return m.p.StringVLS(31)
}

// ExchangeOrderID
func (m TradeActivityData) ExchangeOrderID() string {
	return m.p.StringVLS(35)
}

// FIXClientOrderID
func (m TradeActivityData) FIXClientOrderID() string {
	return m.p.StringVLS(39)
}

// OrderTypeName
func (m TradeActivityData) OrderTypeName() string {
	return m.p.StringVLS(43)
}

// Quantity
func (m TradeActivityData) Quantity() float64 {
	return m.p.Float64LE(47)
}

// BuySell
func (m TradeActivityData) BuySell() uint8 {
	return m.p.Uint8(55)
}

// Price1
func (m TradeActivityData) Price1() float64 {
	return m.p.Float64LE(56)
}

// Price2
func (m TradeActivityData) Price2() float64 {
	return m.p.Float64LE(64)
}

// NewOrderStatus
func (m TradeActivityData) NewOrderStatus() uint8 {
	return m.p.Uint8(72)
}

// FillPrice
func (m TradeActivityData) FillPrice() float64 {
	return m.p.Float64LE(73)
}

// OrderFilledQuantity
func (m TradeActivityData) OrderFilledQuantity() float64 {
	return m.p.Float64LE(81)
}

// HighPriceDuringPosition
func (m TradeActivityData) HighPriceDuringPosition() float64 {
	return m.p.Float64LE(89)
}

// LowPriceDuringPosition
func (m TradeActivityData) LowPriceDuringPosition() float64 {
	return m.p.Float64LE(97)
}

// LastPriceDuringPosition
func (m TradeActivityData) LastPriceDuringPosition() float64 {
	return m.p.Float64LE(105)
}

// TradeAccount
func (m TradeActivityData) TradeAccount() string {
	return m.p.StringVLS(113)
}

// ParentInternalOrderID
func (m TradeActivityData) ParentInternalOrderID() uint64 {
	return m.p.Uint64LE(117)
}

// OpenClose
func (m TradeActivityData) OpenClose() uint8 {
	return m.p.Uint8(125)
}

// IsSimulated
func (m TradeActivityData) IsSimulated() bool {
	return m.p.Bool(126)
}

// IsAutomatedOrder
func (m TradeActivityData) IsAutomatedOrder() bool {
	return m.p.Bool(127)
}

// IsChartReplaying
func (m TradeActivityData) IsChartReplaying() bool {
	return m.p.Bool(128)
}

// FillExecutionServiceID
func (m TradeActivityData) FillExecutionServiceID() string {
	return m.p.StringVLS(129)
}

// PositionQuantity
func (m TradeActivityData) PositionQuantity() float64 {
	return m.p.Float64LE(133)
}

// SourceChartNumber
func (m TradeActivityData) SourceChartNumber() int32 {
	return m.p.Int32LE(141)
}

// SourceChartbookFileName
func (m TradeActivityData) SourceChartbookFileName() string {
	return m.p.StringVLS(145)
}

// TimeInForce
func (m TradeActivityData) TimeInForce() int32 {
	return m.p.Int32LE(149)
}

// SymbolServiceCode
func (m TradeActivityData) SymbolServiceCode() string {
	return m.p.StringVLS(153)
}

// Note
func (m TradeActivityData) Note() string {
	return m.p.StringVLS(157)
}

// OriginatingClientUsername
func (m TradeActivityData) OriginatingClientUsername() string {
	return m.p.StringVLS(161)
}

// TradeAccountBalance
func (m TradeActivityData) TradeAccountBalance() float64 {
	return m.p.Float64LE(165)
}

// SupportsPositionQuantityField
func (m TradeActivityData) SupportsPositionQuantityField() uint8 {
	return m.p.Uint8(173)
}

// IsBillable
func (m TradeActivityData) IsBillable() bool {
	return m.p.Bool(174)
}

// QuantityForBilling
func (m TradeActivityData) QuantityForBilling() int32 {
	return m.p.Int32LE(175)
}

// OrderRoutingServiceCode
func (m TradeActivityData) OrderRoutingServiceCode() string {
	return m.p.StringVLS(179)
}

// SubAccountIdentifier
func (m TradeActivityData) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(183)
}

// AuditTrail_TransactDateTimeUTC
func (m TradeActivityData) AuditTrail_TransactDateTimeUTC() int64 {
	return m.p.Int64LE(187)
}

// AuditTrail_MessageDirection
func (m TradeActivityData) AuditTrail_MessageDirection() int32 {
	return m.p.Int32LE(195)
}

// AuditTrail_OperatorID
func (m TradeActivityData) AuditTrail_OperatorID() string {
	return m.p.StringVLS(199)
}

// AuditTrail_SelfMatchPreventionID
func (m TradeActivityData) AuditTrail_SelfMatchPreventionID() string {
	return m.p.StringVLS(203)
}

// AuditTrail_SessionID
func (m TradeActivityData) AuditTrail_SessionID() string {
	return m.p.StringVLS(207)
}

// AuditTrail_ExecutingFirmID
func (m TradeActivityData) AuditTrail_ExecutingFirmID() string {
	return m.p.StringVLS(211)
}

// AuditTrail_FixMessageType
func (m TradeActivityData) AuditTrail_FixMessageType() string {
	return m.p.StringVLS(215)
}

// AuditTrail_CustomerTypeIndicator
func (m TradeActivityData) AuditTrail_CustomerTypeIndicator() int16 {
	return m.p.Int16LE(219)
}

// AuditTrail_CustomerOrFirm
func (m TradeActivityData) AuditTrail_CustomerOrFirm() int16 {
	return m.p.Int16LE(221)
}

// AuditTrail_ExecutionReportID
func (m TradeActivityData) AuditTrail_ExecutionReportID() string {
	return m.p.StringVLS(223)
}

// AuditTrail_SpreadLegLinkID
func (m TradeActivityData) AuditTrail_SpreadLegLinkID() string {
	return m.p.StringVLS(227)
}

// AuditTrail_SecurityDesc
func (m TradeActivityData) AuditTrail_SecurityDesc() string {
	return m.p.StringVLS(231)
}

// AuditTrail_MarketSegmentID
func (m TradeActivityData) AuditTrail_MarketSegmentID() string {
	return m.p.StringVLS(235)
}

// AuditTrail_IFMFlag
func (m TradeActivityData) AuditTrail_IFMFlag() uint8 {
	return m.p.Uint8(239)
}

// AuditTrail_DisplayQuantity
func (m TradeActivityData) AuditTrail_DisplayQuantity() float64 {
	return m.p.Float64LE(240)
}

// AuditTrail_CountryOfOrigin
func (m TradeActivityData) AuditTrail_CountryOfOrigin() string {
	return m.p.StringVLS(248)
}

// AuditTrail_FillQuantity
func (m TradeActivityData) AuditTrail_FillQuantity() float64 {
	return m.p.Float64LE(252)
}

// AuditTrail_RemainingQuantity
func (m TradeActivityData) AuditTrail_RemainingQuantity() float64 {
	return m.p.Float64LE(260)
}

// AuditTrail_AggressorFlag
func (m TradeActivityData) AuditTrail_AggressorFlag() uint8 {
	return m.p.Uint8(268)
}

// AuditTrail_SourceOfCancellation
func (m TradeActivityData) AuditTrail_SourceOfCancellation() int32 {
	return m.p.Int32LE(269)
}

// AuditTrail_OrdRejReason
func (m TradeActivityData) AuditTrail_OrdRejReason() string {
	return m.p.StringVLS(273)
}

// IsSnapshot
func (m TradeActivityData) IsSnapshot() bool {
	return m.p.Bool(277)
}

// IsFirstMessageInBatch
func (m TradeActivityData) IsFirstMessageInBatch() bool {
	return m.p.Bool(278)
}

// IsLastMessageInBatch
func (m TradeActivityData) IsLastMessageInBatch() bool {
	return m.p.Bool(279)
}

// SetActivityType
func (m *TradeActivityData) SetActivityType(value uint8) *TradeActivityData {
	m.p.SetUint8(6, value)
	return m
}

// SetDataDateTimeUTC
func (m *TradeActivityData) SetDataDateTimeUTC(value int64) *TradeActivityData {
	m.p.SetInt64LE(7, value)
	return m
}

// SetSymbol
func (m *TradeActivityData) SetSymbol(value string) *TradeActivityData {
	m.p.SetStringVLS(15, value)
	return m
}

// SetOrderActionSource
func (m *TradeActivityData) SetOrderActionSource(value string) *TradeActivityData {
	m.p.SetStringVLS(19, value)
	return m
}

// SetInternalOrderID
func (m *TradeActivityData) SetInternalOrderID(value uint64) *TradeActivityData {
	m.p.SetUint64LE(23, value)
	return m
}

// SetServiceOrderID
func (m *TradeActivityData) SetServiceOrderID(value string) *TradeActivityData {
	m.p.SetStringVLS(31, value)
	return m
}

// SetExchangeOrderID
func (m *TradeActivityData) SetExchangeOrderID(value string) *TradeActivityData {
	m.p.SetStringVLS(35, value)
	return m
}

// SetFIXClientOrderID
func (m *TradeActivityData) SetFIXClientOrderID(value string) *TradeActivityData {
	m.p.SetStringVLS(39, value)
	return m
}

// SetOrderTypeName
func (m *TradeActivityData) SetOrderTypeName(value string) *TradeActivityData {
	m.p.SetStringVLS(43, value)
	return m
}

// SetQuantity
func (m *TradeActivityData) SetQuantity(value float64) *TradeActivityData {
	m.p.SetFloat64LE(47, value)
	return m
}

// SetBuySell
func (m *TradeActivityData) SetBuySell(value uint8) *TradeActivityData {
	m.p.SetUint8(55, value)
	return m
}

// SetPrice1
func (m *TradeActivityData) SetPrice1(value float64) *TradeActivityData {
	m.p.SetFloat64LE(56, value)
	return m
}

// SetPrice2
func (m *TradeActivityData) SetPrice2(value float64) *TradeActivityData {
	m.p.SetFloat64LE(64, value)
	return m
}

// SetNewOrderStatus
func (m *TradeActivityData) SetNewOrderStatus(value uint8) *TradeActivityData {
	m.p.SetUint8(72, value)
	return m
}

// SetFillPrice
func (m *TradeActivityData) SetFillPrice(value float64) *TradeActivityData {
	m.p.SetFloat64LE(73, value)
	return m
}

// SetOrderFilledQuantity
func (m *TradeActivityData) SetOrderFilledQuantity(value float64) *TradeActivityData {
	m.p.SetFloat64LE(81, value)
	return m
}

// SetHighPriceDuringPosition
func (m *TradeActivityData) SetHighPriceDuringPosition(value float64) *TradeActivityData {
	m.p.SetFloat64LE(89, value)
	return m
}

// SetLowPriceDuringPosition
func (m *TradeActivityData) SetLowPriceDuringPosition(value float64) *TradeActivityData {
	m.p.SetFloat64LE(97, value)
	return m
}

// SetLastPriceDuringPosition
func (m *TradeActivityData) SetLastPriceDuringPosition(value float64) *TradeActivityData {
	m.p.SetFloat64LE(105, value)
	return m
}

// SetTradeAccount
func (m *TradeActivityData) SetTradeAccount(value string) *TradeActivityData {
	m.p.SetStringVLS(113, value)
	return m
}

// SetParentInternalOrderID
func (m *TradeActivityData) SetParentInternalOrderID(value uint64) *TradeActivityData {
	m.p.SetUint64LE(117, value)
	return m
}

// SetOpenClose
func (m *TradeActivityData) SetOpenClose(value uint8) *TradeActivityData {
	m.p.SetUint8(125, value)
	return m
}

// SetIsSimulated
func (m *TradeActivityData) SetIsSimulated(value bool) *TradeActivityData {
	m.p.SetBool(126, value)
	return m
}

// SetIsAutomatedOrder
func (m *TradeActivityData) SetIsAutomatedOrder(value bool) *TradeActivityData {
	m.p.SetBool(127, value)
	return m
}

// SetIsChartReplaying
func (m *TradeActivityData) SetIsChartReplaying(value bool) *TradeActivityData {
	m.p.SetBool(128, value)
	return m
}

// SetFillExecutionServiceID
func (m *TradeActivityData) SetFillExecutionServiceID(value string) *TradeActivityData {
	m.p.SetStringVLS(129, value)
	return m
}

// SetPositionQuantity
func (m *TradeActivityData) SetPositionQuantity(value float64) *TradeActivityData {
	m.p.SetFloat64LE(133, value)
	return m
}

// SetSourceChartNumber
func (m *TradeActivityData) SetSourceChartNumber(value int32) *TradeActivityData {
	m.p.SetInt32LE(141, value)
	return m
}

// SetSourceChartbookFileName
func (m *TradeActivityData) SetSourceChartbookFileName(value string) *TradeActivityData {
	m.p.SetStringVLS(145, value)
	return m
}

// SetTimeInForce
func (m *TradeActivityData) SetTimeInForce(value int32) *TradeActivityData {
	m.p.SetInt32LE(149, value)
	return m
}

// SetSymbolServiceCode
func (m *TradeActivityData) SetSymbolServiceCode(value string) *TradeActivityData {
	m.p.SetStringVLS(153, value)
	return m
}

// SetNote
func (m *TradeActivityData) SetNote(value string) *TradeActivityData {
	m.p.SetStringVLS(157, value)
	return m
}

// SetOriginatingClientUsername
func (m *TradeActivityData) SetOriginatingClientUsername(value string) *TradeActivityData {
	m.p.SetStringVLS(161, value)
	return m
}

// SetTradeAccountBalance
func (m *TradeActivityData) SetTradeAccountBalance(value float64) *TradeActivityData {
	m.p.SetFloat64LE(165, value)
	return m
}

// SetSupportsPositionQuantityField
func (m *TradeActivityData) SetSupportsPositionQuantityField(value uint8) *TradeActivityData {
	m.p.SetUint8(173, value)
	return m
}

// SetIsBillable
func (m *TradeActivityData) SetIsBillable(value bool) *TradeActivityData {
	m.p.SetBool(174, value)
	return m
}

// SetQuantityForBilling
func (m *TradeActivityData) SetQuantityForBilling(value int32) *TradeActivityData {
	m.p.SetInt32LE(175, value)
	return m
}

// SetOrderRoutingServiceCode
func (m *TradeActivityData) SetOrderRoutingServiceCode(value string) *TradeActivityData {
	m.p.SetStringVLS(179, value)
	return m
}

// SetSubAccountIdentifier
func (m *TradeActivityData) SetSubAccountIdentifier(value uint32) *TradeActivityData {
	m.p.SetUint32LE(183, value)
	return m
}

// SetAuditTrail_TransactDateTimeUTC
func (m *TradeActivityData) SetAuditTrail_TransactDateTimeUTC(value int64) *TradeActivityData {
	m.p.SetInt64LE(187, value)
	return m
}

// SetAuditTrail_MessageDirection
func (m *TradeActivityData) SetAuditTrail_MessageDirection(value int32) *TradeActivityData {
	m.p.SetInt32LE(195, value)
	return m
}

// SetAuditTrail_OperatorID
func (m *TradeActivityData) SetAuditTrail_OperatorID(value string) *TradeActivityData {
	m.p.SetStringVLS(199, value)
	return m
}

// SetAuditTrail_SelfMatchPreventionID
func (m *TradeActivityData) SetAuditTrail_SelfMatchPreventionID(value string) *TradeActivityData {
	m.p.SetStringVLS(203, value)
	return m
}

// SetAuditTrail_SessionID
func (m *TradeActivityData) SetAuditTrail_SessionID(value string) *TradeActivityData {
	m.p.SetStringVLS(207, value)
	return m
}

// SetAuditTrail_ExecutingFirmID
func (m *TradeActivityData) SetAuditTrail_ExecutingFirmID(value string) *TradeActivityData {
	m.p.SetStringVLS(211, value)
	return m
}

// SetAuditTrail_FixMessageType
func (m *TradeActivityData) SetAuditTrail_FixMessageType(value string) *TradeActivityData {
	m.p.SetStringVLS(215, value)
	return m
}

// SetAuditTrail_CustomerTypeIndicator
func (m *TradeActivityData) SetAuditTrail_CustomerTypeIndicator(value int16) *TradeActivityData {
	m.p.SetInt16LE(219, value)
	return m
}

// SetAuditTrail_CustomerOrFirm
func (m *TradeActivityData) SetAuditTrail_CustomerOrFirm(value int16) *TradeActivityData {
	m.p.SetInt16LE(221, value)
	return m
}

// SetAuditTrail_ExecutionReportID
func (m *TradeActivityData) SetAuditTrail_ExecutionReportID(value string) *TradeActivityData {
	m.p.SetStringVLS(223, value)
	return m
}

// SetAuditTrail_SpreadLegLinkID
func (m *TradeActivityData) SetAuditTrail_SpreadLegLinkID(value string) *TradeActivityData {
	m.p.SetStringVLS(227, value)
	return m
}

// SetAuditTrail_SecurityDesc
func (m *TradeActivityData) SetAuditTrail_SecurityDesc(value string) *TradeActivityData {
	m.p.SetStringVLS(231, value)
	return m
}

// SetAuditTrail_MarketSegmentID
func (m *TradeActivityData) SetAuditTrail_MarketSegmentID(value string) *TradeActivityData {
	m.p.SetStringVLS(235, value)
	return m
}

// SetAuditTrail_IFMFlag
func (m *TradeActivityData) SetAuditTrail_IFMFlag(value uint8) *TradeActivityData {
	m.p.SetUint8(239, value)
	return m
}

// SetAuditTrail_DisplayQuantity
func (m *TradeActivityData) SetAuditTrail_DisplayQuantity(value float64) *TradeActivityData {
	m.p.SetFloat64LE(240, value)
	return m
}

// SetAuditTrail_CountryOfOrigin
func (m *TradeActivityData) SetAuditTrail_CountryOfOrigin(value string) *TradeActivityData {
	m.p.SetStringVLS(248, value)
	return m
}

// SetAuditTrail_FillQuantity
func (m *TradeActivityData) SetAuditTrail_FillQuantity(value float64) *TradeActivityData {
	m.p.SetFloat64LE(252, value)
	return m
}

// SetAuditTrail_RemainingQuantity
func (m *TradeActivityData) SetAuditTrail_RemainingQuantity(value float64) *TradeActivityData {
	m.p.SetFloat64LE(260, value)
	return m
}

// SetAuditTrail_AggressorFlag
func (m *TradeActivityData) SetAuditTrail_AggressorFlag(value uint8) *TradeActivityData {
	m.p.SetUint8(268, value)
	return m
}

// SetAuditTrail_SourceOfCancellation
func (m *TradeActivityData) SetAuditTrail_SourceOfCancellation(value int32) *TradeActivityData {
	m.p.SetInt32LE(269, value)
	return m
}

// SetAuditTrail_OrdRejReason
func (m *TradeActivityData) SetAuditTrail_OrdRejReason(value string) *TradeActivityData {
	m.p.SetStringVLS(273, value)
	return m
}

// SetIsSnapshot
func (m *TradeActivityData) SetIsSnapshot(value bool) *TradeActivityData {
	m.p.SetBool(277, value)
	return m
}

// SetIsFirstMessageInBatch
func (m *TradeActivityData) SetIsFirstMessageInBatch(value bool) *TradeActivityData {
	m.p.SetBool(278, value)
	return m
}

// SetIsLastMessageInBatch
func (m *TradeActivityData) SetIsLastMessageInBatch(value bool) *TradeActivityData {
	m.p.SetBool(279, value)
	return m
}

func (m TradeActivityData) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradeActivityData) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradeActivityData) Copy(to TradeActivityData) {
	to.SetActivityType(m.ActivityType())
	to.SetDataDateTimeUTC(m.DataDateTimeUTC())
	to.SetSymbol(m.Symbol())
	to.SetOrderActionSource(m.OrderActionSource())
	to.SetInternalOrderID(m.InternalOrderID())
	to.SetServiceOrderID(m.ServiceOrderID())
	to.SetExchangeOrderID(m.ExchangeOrderID())
	to.SetFIXClientOrderID(m.FIXClientOrderID())
	to.SetOrderTypeName(m.OrderTypeName())
	to.SetQuantity(m.Quantity())
	to.SetBuySell(m.BuySell())
	to.SetPrice1(m.Price1())
	to.SetPrice2(m.Price2())
	to.SetNewOrderStatus(m.NewOrderStatus())
	to.SetFillPrice(m.FillPrice())
	to.SetOrderFilledQuantity(m.OrderFilledQuantity())
	to.SetHighPriceDuringPosition(m.HighPriceDuringPosition())
	to.SetLowPriceDuringPosition(m.LowPriceDuringPosition())
	to.SetLastPriceDuringPosition(m.LastPriceDuringPosition())
	to.SetTradeAccount(m.TradeAccount())
	to.SetParentInternalOrderID(m.ParentInternalOrderID())
	to.SetOpenClose(m.OpenClose())
	to.SetIsSimulated(m.IsSimulated())
	to.SetIsAutomatedOrder(m.IsAutomatedOrder())
	to.SetIsChartReplaying(m.IsChartReplaying())
	to.SetFillExecutionServiceID(m.FillExecutionServiceID())
	to.SetPositionQuantity(m.PositionQuantity())
	to.SetSourceChartNumber(m.SourceChartNumber())
	to.SetSourceChartbookFileName(m.SourceChartbookFileName())
	to.SetTimeInForce(m.TimeInForce())
	to.SetSymbolServiceCode(m.SymbolServiceCode())
	to.SetNote(m.Note())
	to.SetOriginatingClientUsername(m.OriginatingClientUsername())
	to.SetTradeAccountBalance(m.TradeAccountBalance())
	to.SetSupportsPositionQuantityField(m.SupportsPositionQuantityField())
	to.SetIsBillable(m.IsBillable())
	to.SetQuantityForBilling(m.QuantityForBilling())
	to.SetOrderRoutingServiceCode(m.OrderRoutingServiceCode())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetAuditTrail_TransactDateTimeUTC(m.AuditTrail_TransactDateTimeUTC())
	to.SetAuditTrail_MessageDirection(m.AuditTrail_MessageDirection())
	to.SetAuditTrail_OperatorID(m.AuditTrail_OperatorID())
	to.SetAuditTrail_SelfMatchPreventionID(m.AuditTrail_SelfMatchPreventionID())
	to.SetAuditTrail_SessionID(m.AuditTrail_SessionID())
	to.SetAuditTrail_ExecutingFirmID(m.AuditTrail_ExecutingFirmID())
	to.SetAuditTrail_FixMessageType(m.AuditTrail_FixMessageType())
	to.SetAuditTrail_CustomerTypeIndicator(m.AuditTrail_CustomerTypeIndicator())
	to.SetAuditTrail_CustomerOrFirm(m.AuditTrail_CustomerOrFirm())
	to.SetAuditTrail_ExecutionReportID(m.AuditTrail_ExecutionReportID())
	to.SetAuditTrail_SpreadLegLinkID(m.AuditTrail_SpreadLegLinkID())
	to.SetAuditTrail_SecurityDesc(m.AuditTrail_SecurityDesc())
	to.SetAuditTrail_MarketSegmentID(m.AuditTrail_MarketSegmentID())
	to.SetAuditTrail_IFMFlag(m.AuditTrail_IFMFlag())
	to.SetAuditTrail_DisplayQuantity(m.AuditTrail_DisplayQuantity())
	to.SetAuditTrail_CountryOfOrigin(m.AuditTrail_CountryOfOrigin())
	to.SetAuditTrail_FillQuantity(m.AuditTrail_FillQuantity())
	to.SetAuditTrail_RemainingQuantity(m.AuditTrail_RemainingQuantity())
	to.SetAuditTrail_AggressorFlag(m.AuditTrail_AggressorFlag())
	to.SetAuditTrail_SourceOfCancellation(m.AuditTrail_SourceOfCancellation())
	to.SetAuditTrail_OrdRejReason(m.AuditTrail_OrdRejReason())
	to.SetIsSnapshot(m.IsSnapshot())
	to.SetIsFirstMessageInBatch(m.IsFirstMessageInBatch())
	to.SetIsLastMessageInBatch(m.IsLastMessageInBatch())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradeActivityData) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10114)
	w.Uint8Field("ActivityType", m.ActivityType())
	w.Int64Field("DataDateTimeUTC", m.DataDateTimeUTC())
	w.StringField("Symbol", m.Symbol())
	w.StringField("OrderActionSource", m.OrderActionSource())
	w.Uint64Field("InternalOrderID", m.InternalOrderID())
	w.StringField("ServiceOrderID", m.ServiceOrderID())
	w.StringField("ExchangeOrderID", m.ExchangeOrderID())
	w.StringField("FIXClientOrderID", m.FIXClientOrderID())
	w.StringField("OrderTypeName", m.OrderTypeName())
	w.Float64Field("Quantity", m.Quantity())
	w.Uint8Field("BuySell", m.BuySell())
	w.Float64Field("Price1", m.Price1())
	w.Float64Field("Price2", m.Price2())
	w.Uint8Field("NewOrderStatus", m.NewOrderStatus())
	w.Float64Field("FillPrice", m.FillPrice())
	w.Float64Field("OrderFilledQuantity", m.OrderFilledQuantity())
	w.Float64Field("HighPriceDuringPosition", m.HighPriceDuringPosition())
	w.Float64Field("LowPriceDuringPosition", m.LowPriceDuringPosition())
	w.Float64Field("LastPriceDuringPosition", m.LastPriceDuringPosition())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Uint64Field("ParentInternalOrderID", m.ParentInternalOrderID())
	w.Uint8Field("OpenClose", m.OpenClose())
	w.BoolField("IsSimulated", m.IsSimulated())
	w.BoolField("IsAutomatedOrder", m.IsAutomatedOrder())
	w.BoolField("IsChartReplaying", m.IsChartReplaying())
	w.StringField("FillExecutionServiceID", m.FillExecutionServiceID())
	w.Float64Field("PositionQuantity", m.PositionQuantity())
	w.Int32Field("SourceChartNumber", m.SourceChartNumber())
	w.StringField("SourceChartbookFileName", m.SourceChartbookFileName())
	w.Int32Field("TimeInForce", m.TimeInForce())
	w.StringField("SymbolServiceCode", m.SymbolServiceCode())
	w.StringField("Note", m.Note())
	w.StringField("OriginatingClientUsername", m.OriginatingClientUsername())
	w.Float64Field("TradeAccountBalance", m.TradeAccountBalance())
	w.Uint8Field("SupportsPositionQuantityField", m.SupportsPositionQuantityField())
	w.BoolField("IsBillable", m.IsBillable())
	w.Int32Field("QuantityForBilling", m.QuantityForBilling())
	w.StringField("OrderRoutingServiceCode", m.OrderRoutingServiceCode())
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	w.Int64Field("AuditTrail_TransactDateTimeUTC", m.AuditTrail_TransactDateTimeUTC())
	w.Int32Field("AuditTrail_MessageDirection", m.AuditTrail_MessageDirection())
	w.StringField("AuditTrail_OperatorID", m.AuditTrail_OperatorID())
	w.StringField("AuditTrail_SelfMatchPreventionID", m.AuditTrail_SelfMatchPreventionID())
	w.StringField("AuditTrail_SessionID", m.AuditTrail_SessionID())
	w.StringField("AuditTrail_ExecutingFirmID", m.AuditTrail_ExecutingFirmID())
	w.StringField("AuditTrail_FixMessageType", m.AuditTrail_FixMessageType())
	w.Int16Field("AuditTrail_CustomerTypeIndicator", m.AuditTrail_CustomerTypeIndicator())
	w.Int16Field("AuditTrail_CustomerOrFirm", m.AuditTrail_CustomerOrFirm())
	w.StringField("AuditTrail_ExecutionReportID", m.AuditTrail_ExecutionReportID())
	w.StringField("AuditTrail_SpreadLegLinkID", m.AuditTrail_SpreadLegLinkID())
	w.StringField("AuditTrail_SecurityDesc", m.AuditTrail_SecurityDesc())
	w.StringField("AuditTrail_MarketSegmentID", m.AuditTrail_MarketSegmentID())
	w.Uint8Field("AuditTrail_IFMFlag", m.AuditTrail_IFMFlag())
	w.Float64Field("AuditTrail_DisplayQuantity", m.AuditTrail_DisplayQuantity())
	w.StringField("AuditTrail_CountryOfOrigin", m.AuditTrail_CountryOfOrigin())
	w.Float64Field("AuditTrail_FillQuantity", m.AuditTrail_FillQuantity())
	w.Float64Field("AuditTrail_RemainingQuantity", m.AuditTrail_RemainingQuantity())
	w.Uint8Field("AuditTrail_AggressorFlag", m.AuditTrail_AggressorFlag())
	w.Int32Field("AuditTrail_SourceOfCancellation", m.AuditTrail_SourceOfCancellation())
	w.StringField("AuditTrail_OrdRejReason", m.AuditTrail_OrdRejReason())
	w.BoolField("IsSnapshot", m.IsSnapshot())
	w.BoolField("IsFirstMessageInBatch", m.IsFirstMessageInBatch())
	w.BoolField("IsLastMessageInBatch", m.IsLastMessageInBatch())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeActivityData) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10114 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ActivityType":
			m.SetActivityType(r.Uint8())
		case "DataDateTimeUTC":
			m.SetDataDateTimeUTC(r.Int64())
		case "Symbol":
			m.SetSymbol(r.String())
		case "OrderActionSource":
			m.SetOrderActionSource(r.String())
		case "InternalOrderID":
			m.SetInternalOrderID(r.Uint64())
		case "ServiceOrderID":
			m.SetServiceOrderID(r.String())
		case "ExchangeOrderID":
			m.SetExchangeOrderID(r.String())
		case "FIXClientOrderID":
			m.SetFIXClientOrderID(r.String())
		case "OrderTypeName":
			m.SetOrderTypeName(r.String())
		case "Quantity":
			m.SetQuantity(r.Float64())
		case "BuySell":
			m.SetBuySell(r.Uint8())
		case "Price1":
			m.SetPrice1(r.Float64())
		case "Price2":
			m.SetPrice2(r.Float64())
		case "NewOrderStatus":
			m.SetNewOrderStatus(r.Uint8())
		case "FillPrice":
			m.SetFillPrice(r.Float64())
		case "OrderFilledQuantity":
			m.SetOrderFilledQuantity(r.Float64())
		case "HighPriceDuringPosition":
			m.SetHighPriceDuringPosition(r.Float64())
		case "LowPriceDuringPosition":
			m.SetLowPriceDuringPosition(r.Float64())
		case "LastPriceDuringPosition":
			m.SetLastPriceDuringPosition(r.Float64())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "ParentInternalOrderID":
			m.SetParentInternalOrderID(r.Uint64())
		case "OpenClose":
			m.SetOpenClose(r.Uint8())
		case "IsSimulated":
			m.SetIsSimulated(r.Bool())
		case "IsAutomatedOrder":
			m.SetIsAutomatedOrder(r.Bool())
		case "IsChartReplaying":
			m.SetIsChartReplaying(r.Bool())
		case "FillExecutionServiceID":
			m.SetFillExecutionServiceID(r.String())
		case "PositionQuantity":
			m.SetPositionQuantity(r.Float64())
		case "SourceChartNumber":
			m.SetSourceChartNumber(r.Int32())
		case "SourceChartbookFileName":
			m.SetSourceChartbookFileName(r.String())
		case "TimeInForce":
			m.SetTimeInForce(r.Int32())
		case "SymbolServiceCode":
			m.SetSymbolServiceCode(r.String())
		case "Note":
			m.SetNote(r.String())
		case "OriginatingClientUsername":
			m.SetOriginatingClientUsername(r.String())
		case "TradeAccountBalance":
			m.SetTradeAccountBalance(r.Float64())
		case "SupportsPositionQuantityField":
			m.SetSupportsPositionQuantityField(r.Uint8())
		case "IsBillable":
			m.SetIsBillable(r.Bool())
		case "QuantityForBilling":
			m.SetQuantityForBilling(r.Int32())
		case "OrderRoutingServiceCode":
			m.SetOrderRoutingServiceCode(r.String())
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "AuditTrail_TransactDateTimeUTC":
			m.SetAuditTrail_TransactDateTimeUTC(r.Int64())
		case "AuditTrail_MessageDirection":
			m.SetAuditTrail_MessageDirection(r.Int32())
		case "AuditTrail_OperatorID":
			m.SetAuditTrail_OperatorID(r.String())
		case "AuditTrail_SelfMatchPreventionID":
			m.SetAuditTrail_SelfMatchPreventionID(r.String())
		case "AuditTrail_SessionID":
			m.SetAuditTrail_SessionID(r.String())
		case "AuditTrail_ExecutingFirmID":
			m.SetAuditTrail_ExecutingFirmID(r.String())
		case "AuditTrail_FixMessageType":
			m.SetAuditTrail_FixMessageType(r.String())
		case "AuditTrail_CustomerTypeIndicator":
			m.SetAuditTrail_CustomerTypeIndicator(r.Int16())
		case "AuditTrail_CustomerOrFirm":
			m.SetAuditTrail_CustomerOrFirm(r.Int16())
		case "AuditTrail_ExecutionReportID":
			m.SetAuditTrail_ExecutionReportID(r.String())
		case "AuditTrail_SpreadLegLinkID":
			m.SetAuditTrail_SpreadLegLinkID(r.String())
		case "AuditTrail_SecurityDesc":
			m.SetAuditTrail_SecurityDesc(r.String())
		case "AuditTrail_MarketSegmentID":
			m.SetAuditTrail_MarketSegmentID(r.String())
		case "AuditTrail_IFMFlag":
			m.SetAuditTrail_IFMFlag(r.Uint8())
		case "AuditTrail_DisplayQuantity":
			m.SetAuditTrail_DisplayQuantity(r.Float64())
		case "AuditTrail_CountryOfOrigin":
			m.SetAuditTrail_CountryOfOrigin(r.String())
		case "AuditTrail_FillQuantity":
			m.SetAuditTrail_FillQuantity(r.Float64())
		case "AuditTrail_RemainingQuantity":
			m.SetAuditTrail_RemainingQuantity(r.Float64())
		case "AuditTrail_AggressorFlag":
			m.SetAuditTrail_AggressorFlag(r.Uint8())
		case "AuditTrail_SourceOfCancellation":
			m.SetAuditTrail_SourceOfCancellation(r.Int32())
		case "AuditTrail_OrdRejReason":
			m.SetAuditTrail_OrdRejReason(r.String())
		case "IsSnapshot":
			m.SetIsSnapshot(r.Bool())
		case "IsFirstMessageInBatch":
			m.SetIsFirstMessageInBatch(r.Bool())
		case "IsLastMessageInBatch":
			m.SetIsLastMessageInBatch(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeActivityData) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
