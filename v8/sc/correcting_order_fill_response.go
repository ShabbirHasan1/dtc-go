// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const CorrectingOrderFillResponseSize = 16

const CorrectingOrderFillResponseFixedSize = 294

//     Size           uint16  = CorrectingOrderFillResponseSize  (16)
//     Type           uint16  = CORRECTING_ORDER_FILL_RESPONSE  (310)
//     BaseSize       uint16  = CorrectingOrderFillResponseSize  (16)
//     ClientOrderID  string  = ""
//     ResultText     string  = ""
//     IsError        bool    = false
var _CorrectingOrderFillResponseDefault = []byte{16, 0, 54, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size           uint16       = CorrectingOrderFillResponseFixedSize  (294)
//     Type           uint16       = CORRECTING_ORDER_FILL_RESPONSE  (310)
//     ClientOrderID  string[32]   = ""
//     ResultText     string[256]  = ""
//     IsError        bool         = false
var _CorrectingOrderFillResponseFixedDefault = []byte{38, 1, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type CorrectingOrderFillResponse struct {
	p message.VLS
}

type CorrectingOrderFillResponseFixed struct {
	p message.Fixed
}

func NewCorrectingOrderFillResponseFrom(b []byte) CorrectingOrderFillResponse {
	return CorrectingOrderFillResponse{p: message.NewVLS(b)}
}

func WrapCorrectingOrderFillResponse(b []byte) CorrectingOrderFillResponse {
	return CorrectingOrderFillResponse{p: message.WrapVLS(b)}
}

func NewCorrectingOrderFillResponse() *CorrectingOrderFillResponse {
	return &CorrectingOrderFillResponse{p: message.NewVLS(_CorrectingOrderFillResponseDefault)}
}

func ParseCorrectingOrderFillResponse(b []byte) (CorrectingOrderFillResponse, error) {
	if len(b) < 6 {
		return CorrectingOrderFillResponse{}, message.ErrShortBuffer
	}
	m := WrapCorrectingOrderFillResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return CorrectingOrderFillResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return CorrectingOrderFillResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 16 {
		newSize := len(b) + (16 - baseSize)
		if newSize > message.MaxSize {
			return CorrectingOrderFillResponse{}, message.ErrOverflow
		}
		clone := CorrectingOrderFillResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _CorrectingOrderFillResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(16 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewCorrectingOrderFillResponseFixedFrom(b []byte) CorrectingOrderFillResponseFixed {
	return CorrectingOrderFillResponseFixed{p: message.NewFixed(b)}
}

func WrapCorrectingOrderFillResponseFixed(b []byte) CorrectingOrderFillResponseFixed {
	return CorrectingOrderFillResponseFixed{p: message.WrapFixed(b)}
}

func NewCorrectingOrderFillResponseFixed() *CorrectingOrderFillResponseFixed {
	return &CorrectingOrderFillResponseFixed{p: message.NewFixed(_CorrectingOrderFillResponseFixedDefault)}
}

func ParseCorrectingOrderFillResponseFixed(b []byte) (CorrectingOrderFillResponseFixed, error) {
	if len(b) < 4 {
		return CorrectingOrderFillResponseFixed{}, message.ErrShortBuffer
	}
	m := WrapCorrectingOrderFillResponseFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return CorrectingOrderFillResponseFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return CorrectingOrderFillResponseFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 294 {
		clone := *NewCorrectingOrderFillResponseFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _CorrectingOrderFillResponseFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m CorrectingOrderFillResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m CorrectingOrderFillResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m CorrectingOrderFillResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// ClientOrderID
func (m CorrectingOrderFillResponse) ClientOrderID() string {
	return m.p.StringVLS(6)
}

// ResultText
func (m CorrectingOrderFillResponse) ResultText() string {
	return m.p.StringVLS(10)
}

// IsError
func (m CorrectingOrderFillResponse) IsError() bool {
	return m.p.Bool(14)
}

// Size
func (m CorrectingOrderFillResponseFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m CorrectingOrderFillResponseFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// ClientOrderID
func (m CorrectingOrderFillResponseFixed) ClientOrderID() string {
	return m.p.StringFixed(4, 32)
}

// ResultText
func (m CorrectingOrderFillResponseFixed) ResultText() string {
	return m.p.StringFixed(36, 256)
}

// IsError
func (m CorrectingOrderFillResponseFixed) IsError() bool {
	return m.p.Bool(292)
}

// SetClientOrderID
func (m *CorrectingOrderFillResponse) SetClientOrderID(value string) *CorrectingOrderFillResponse {
	m.p.SetStringVLS(6, value)
	return m
}

// SetResultText
func (m *CorrectingOrderFillResponse) SetResultText(value string) *CorrectingOrderFillResponse {
	m.p.SetStringVLS(10, value)
	return m
}

// SetIsError
func (m *CorrectingOrderFillResponse) SetIsError(value bool) *CorrectingOrderFillResponse {
	m.p.SetBool(14, value)
	return m
}

// SetClientOrderID
func (m *CorrectingOrderFillResponseFixed) SetClientOrderID(value string) *CorrectingOrderFillResponseFixed {
	m.p.SetStringFixed(4, 32, value)
	return m
}

// SetResultText
func (m *CorrectingOrderFillResponseFixed) SetResultText(value string) *CorrectingOrderFillResponseFixed {
	m.p.SetStringFixed(36, 256, value)
	return m
}

// SetIsError
func (m *CorrectingOrderFillResponseFixed) SetIsError(value bool) *CorrectingOrderFillResponseFixed {
	m.p.SetBool(292, value)
	return m
}

func (m CorrectingOrderFillResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m CorrectingOrderFillResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m CorrectingOrderFillResponseFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m CorrectingOrderFillResponseFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m CorrectingOrderFillResponse) Copy(to CorrectingOrderFillResponse) {
	to.SetClientOrderID(m.ClientOrderID())
	to.SetResultText(m.ResultText())
	to.SetIsError(m.IsError())
}

// CopyTo
func (m CorrectingOrderFillResponse) CopyTo(to CorrectingOrderFillResponseFixed) {
	to.SetClientOrderID(m.ClientOrderID())
	to.SetResultText(m.ResultText())
	to.SetIsError(m.IsError())
}

// Copy
func (m CorrectingOrderFillResponseFixed) Copy(to CorrectingOrderFillResponseFixed) {
	to.SetClientOrderID(m.ClientOrderID())
	to.SetResultText(m.ResultText())
	to.SetIsError(m.IsError())
}

// CopyTo
func (m CorrectingOrderFillResponseFixed) CopyTo(to CorrectingOrderFillResponse) {
	to.SetClientOrderID(m.ClientOrderID())
	to.SetResultText(m.ResultText())
	to.SetIsError(m.IsError())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m CorrectingOrderFillResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 310)
	w.StringField("ClientOrderID", m.ClientOrderID())
	w.StringField("ResultText", m.ResultText())
	w.BoolField("IsError", m.IsError())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CorrectingOrderFillResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 310 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ClientOrderID":
			m.SetClientOrderID(r.String())
		case "ResultText":
			m.SetResultText(r.String())
		case "IsError":
			m.SetIsError(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CorrectingOrderFillResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m CorrectingOrderFillResponseFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 310)
	w.StringField("ClientOrderID", m.ClientOrderID())
	w.StringField("ResultText", m.ResultText())
	w.BoolField("IsError", m.IsError())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CorrectingOrderFillResponseFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 310 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ClientOrderID":
			m.SetClientOrderID(r.String())
		case "ResultText":
			m.SetResultText(r.String())
		case "IsError":
			m.SetIsError(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CorrectingOrderFillResponseFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
