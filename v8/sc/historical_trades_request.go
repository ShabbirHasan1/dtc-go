// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalTradesRequestSize = 31

const HistoricalTradesRequestFixedSize = 117

//     Size                    uint16    = HistoricalTradesRequestSize  (31)
//     Type                    uint16    = HISTORICAL_TRADES_REQUEST  (10100)
//     BaseSize                uint16    = HistoricalTradesRequestSize  (31)
//     RequestID               int32     = 0
//     Symbol                  string    = ""
//     TradeAccount            string    = ""
//     StartDateTime           DateTime  = 0
//     SubAccountIdentifier    uint32    = 0
//     CreateFlatToFlatTrades  uint8     = 0
var _HistoricalTradesRequestDefault = []byte{31, 0, 116, 39, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                    uint16      = HistoricalTradesRequestFixedSize  (117)
//     Type                    uint16      = HISTORICAL_TRADES_REQUEST  (10100)
//     RequestID               int32       = 0
//     Symbol                  string[64]  = ""
//     TradeAccount            string[32]  = ""
//     StartDateTime           DateTime    = 0
//     SubAccountIdentifier    uint32      = 0
//     CreateFlatToFlatTrades  uint8       = 0
var _HistoricalTradesRequestFixedDefault = []byte{117, 0, 116, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type HistoricalTradesRequest struct {
	p message.VLS
}

type HistoricalTradesRequestFixed struct {
	p message.Fixed
}

func NewHistoricalTradesRequestFrom(b []byte) HistoricalTradesRequest {
	return HistoricalTradesRequest{p: message.NewVLS(b)}
}

func WrapHistoricalTradesRequest(b []byte) HistoricalTradesRequest {
	return HistoricalTradesRequest{p: message.WrapVLS(b)}
}

func NewHistoricalTradesRequest() *HistoricalTradesRequest {
	return &HistoricalTradesRequest{p: message.NewVLS(_HistoricalTradesRequestDefault)}
}

func ParseHistoricalTradesRequest(b []byte) (HistoricalTradesRequest, error) {
	if len(b) < 6 {
		return HistoricalTradesRequest{}, message.ErrShortBuffer
	}
	m := WrapHistoricalTradesRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalTradesRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalTradesRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 31 {
		newSize := len(b) + (31 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalTradesRequest{}, message.ErrOverflow
		}
		clone := HistoricalTradesRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalTradesRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(31 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalTradesRequestFixedFrom(b []byte) HistoricalTradesRequestFixed {
	return HistoricalTradesRequestFixed{p: message.NewFixed(b)}
}

func WrapHistoricalTradesRequestFixed(b []byte) HistoricalTradesRequestFixed {
	return HistoricalTradesRequestFixed{p: message.WrapFixed(b)}
}

func NewHistoricalTradesRequestFixed() *HistoricalTradesRequestFixed {
	return &HistoricalTradesRequestFixed{p: message.NewFixed(_HistoricalTradesRequestFixedDefault)}
}

func ParseHistoricalTradesRequestFixed(b []byte) (HistoricalTradesRequestFixed, error) {
	if len(b) < 4 {
		return HistoricalTradesRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalTradesRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalTradesRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalTradesRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 117 {
		clone := *NewHistoricalTradesRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalTradesRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m HistoricalTradesRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalTradesRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalTradesRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m HistoricalTradesRequest) RequestID() int32 {
	return m.p.Int32LE(6)
}

// Symbol
func (m HistoricalTradesRequest) Symbol() string {
	return m.p.StringVLS(10)
}

// TradeAccount
func (m HistoricalTradesRequest) TradeAccount() string {
	return m.p.StringVLS(14)
}

// StartDateTime
func (m HistoricalTradesRequest) StartDateTime() DateTime {
	return DateTime(m.p.Int64LE(18))
}

// SubAccountIdentifier
func (m HistoricalTradesRequest) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(26)
}

// CreateFlatToFlatTrades
func (m HistoricalTradesRequest) CreateFlatToFlatTrades() uint8 {
	return m.p.Uint8(30)
}

// Size
func (m HistoricalTradesRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalTradesRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m HistoricalTradesRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// Symbol
func (m HistoricalTradesRequestFixed) Symbol() string {
	return m.p.StringFixed(8, 64)
}

// TradeAccount
func (m HistoricalTradesRequestFixed) TradeAccount() string {
	return m.p.StringFixed(72, 32)
}

// StartDateTime
func (m HistoricalTradesRequestFixed) StartDateTime() DateTime {
	return DateTime(m.p.Int64LE(104))
}

// SubAccountIdentifier
func (m HistoricalTradesRequestFixed) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(112)
}

// CreateFlatToFlatTrades
func (m HistoricalTradesRequestFixed) CreateFlatToFlatTrades() uint8 {
	return m.p.Uint8(116)
}

// SetRequestID
func (m *HistoricalTradesRequest) SetRequestID(value int32) *HistoricalTradesRequest {
	m.p.SetInt32LE(6, value)
	return m
}

// SetSymbol
func (m *HistoricalTradesRequest) SetSymbol(value string) *HistoricalTradesRequest {
	m.p.SetStringVLS(10, value)
	return m
}

// SetTradeAccount
func (m *HistoricalTradesRequest) SetTradeAccount(value string) *HistoricalTradesRequest {
	m.p.SetStringVLS(14, value)
	return m
}

// SetStartDateTime
func (m *HistoricalTradesRequest) SetStartDateTime(value DateTime) *HistoricalTradesRequest {
	m.p.SetInt64LE(18, int64(value))
	return m
}

// SetSubAccountIdentifier
func (m *HistoricalTradesRequest) SetSubAccountIdentifier(value uint32) *HistoricalTradesRequest {
	m.p.SetUint32LE(26, value)
	return m
}

// SetCreateFlatToFlatTrades
func (m *HistoricalTradesRequest) SetCreateFlatToFlatTrades(value uint8) *HistoricalTradesRequest {
	m.p.SetUint8(30, value)
	return m
}

// SetRequestID
func (m *HistoricalTradesRequestFixed) SetRequestID(value int32) *HistoricalTradesRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetSymbol
func (m *HistoricalTradesRequestFixed) SetSymbol(value string) *HistoricalTradesRequestFixed {
	m.p.SetStringFixed(8, 64, value)
	return m
}

// SetTradeAccount
func (m *HistoricalTradesRequestFixed) SetTradeAccount(value string) *HistoricalTradesRequestFixed {
	m.p.SetStringFixed(72, 32, value)
	return m
}

// SetStartDateTime
func (m *HistoricalTradesRequestFixed) SetStartDateTime(value DateTime) *HistoricalTradesRequestFixed {
	m.p.SetInt64LE(104, int64(value))
	return m
}

// SetSubAccountIdentifier
func (m *HistoricalTradesRequestFixed) SetSubAccountIdentifier(value uint32) *HistoricalTradesRequestFixed {
	m.p.SetUint32LE(112, value)
	return m
}

// SetCreateFlatToFlatTrades
func (m *HistoricalTradesRequestFixed) SetCreateFlatToFlatTrades(value uint8) *HistoricalTradesRequestFixed {
	m.p.SetUint8(116, value)
	return m
}

func (m HistoricalTradesRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalTradesRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m HistoricalTradesRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalTradesRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m HistoricalTradesRequest) Copy(to HistoricalTradesRequest) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetCreateFlatToFlatTrades(m.CreateFlatToFlatTrades())
}

// CopyTo
func (m HistoricalTradesRequest) CopyTo(to HistoricalTradesRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetCreateFlatToFlatTrades(m.CreateFlatToFlatTrades())
}

// Copy
func (m HistoricalTradesRequestFixed) Copy(to HistoricalTradesRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetCreateFlatToFlatTrades(m.CreateFlatToFlatTrades())
}

// CopyTo
func (m HistoricalTradesRequestFixed) CopyTo(to HistoricalTradesRequest) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetCreateFlatToFlatTrades(m.CreateFlatToFlatTrades())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalTradesRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10100)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	w.Uint8Field("CreateFlatToFlatTrades", m.CreateFlatToFlatTrades())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10100 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "StartDateTime":
			m.SetStartDateTime(DateTime(r.Int64()))
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "CreateFlatToFlatTrades":
			m.SetCreateFlatToFlatTrades(r.Uint8())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalTradesRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10100)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	w.Uint8Field("CreateFlatToFlatTrades", m.CreateFlatToFlatTrades())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesRequestFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10100 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "StartDateTime":
			m.SetStartDateTime(DateTime(r.Int64()))
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "CreateFlatToFlatTrades":
			m.SetCreateFlatToFlatTrades(r.Uint8())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalTradesRequestFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
