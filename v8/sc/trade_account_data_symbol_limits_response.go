// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradeAccountDataSymbolLimitsResponseSize = 51

//     Size                                               uint16   = TradeAccountDataSymbolLimitsResponseSize  (51)
//     Type                                               uint16   = TRADE_ACCOUNT_DATA_SYMBOL_LIMITS_RESPONSE  (10121)
//     BaseSize                                           uint16   = TradeAccountDataSymbolLimitsResponseSize  (51)
//     RequestID                                          uint32   = 0
//     TradeAccount                                       string   = ""
//     Symbol                                             string   = ""
//     TradePositionLimit                                 float64  = 0.000000
//     OrderQuantityLimit                                 float64  = 0.000000
//     UsePercentOfMargin                                 int32    = 0
//     OverrideMarginOtherAccounts                        uint8    = 0
//     UsePercentOfMarginForDayTrading                    int32    = 0
//     NumberOfDaysBeforeLastTradingDateToDisallowOrders  int32    = 0
//     FixedMarginCashValue                               float32  = 0.000000
var _TradeAccountDataSymbolLimitsResponseDefault = []byte{51, 0, 137, 39, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradeAccountDataSymbolLimitsResponse struct {
	p message.VLS
}

func NewTradeAccountDataSymbolLimitsResponseFrom(b []byte) TradeAccountDataSymbolLimitsResponse {
	return TradeAccountDataSymbolLimitsResponse{p: message.NewVLS(b)}
}

func WrapTradeAccountDataSymbolLimitsResponse(b []byte) TradeAccountDataSymbolLimitsResponse {
	return TradeAccountDataSymbolLimitsResponse{p: message.WrapVLS(b)}
}

func NewTradeAccountDataSymbolLimitsResponse() *TradeAccountDataSymbolLimitsResponse {
	return &TradeAccountDataSymbolLimitsResponse{p: message.NewVLS(_TradeAccountDataSymbolLimitsResponseDefault)}
}

func ParseTradeAccountDataSymbolLimitsResponse(b []byte) (TradeAccountDataSymbolLimitsResponse, error) {
	if len(b) < 6 {
		return TradeAccountDataSymbolLimitsResponse{}, message.ErrShortBuffer
	}
	m := WrapTradeAccountDataSymbolLimitsResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradeAccountDataSymbolLimitsResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradeAccountDataSymbolLimitsResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 51 {
		newSize := len(b) + (51 - baseSize)
		if newSize > message.MaxSize {
			return TradeAccountDataSymbolLimitsResponse{}, message.ErrOverflow
		}
		clone := TradeAccountDataSymbolLimitsResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradeAccountDataSymbolLimitsResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(51 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradeAccountDataSymbolLimitsResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradeAccountDataSymbolLimitsResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradeAccountDataSymbolLimitsResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m TradeAccountDataSymbolLimitsResponse) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// TradeAccount
func (m TradeAccountDataSymbolLimitsResponse) TradeAccount() string {
	return m.p.StringVLS(10)
}

// Symbol
func (m TradeAccountDataSymbolLimitsResponse) Symbol() string {
	return m.p.StringVLS(14)
}

// TradePositionLimit
func (m TradeAccountDataSymbolLimitsResponse) TradePositionLimit() float64 {
	return m.p.Float64LE(18)
}

// OrderQuantityLimit
func (m TradeAccountDataSymbolLimitsResponse) OrderQuantityLimit() float64 {
	return m.p.Float64LE(26)
}

// UsePercentOfMargin
func (m TradeAccountDataSymbolLimitsResponse) UsePercentOfMargin() int32 {
	return m.p.Int32LE(34)
}

// OverrideMarginOtherAccounts
func (m TradeAccountDataSymbolLimitsResponse) OverrideMarginOtherAccounts() uint8 {
	return m.p.Uint8(38)
}

// UsePercentOfMarginForDayTrading
func (m TradeAccountDataSymbolLimitsResponse) UsePercentOfMarginForDayTrading() int32 {
	return m.p.Int32LE(39)
}

// NumberOfDaysBeforeLastTradingDateToDisallowOrders
func (m TradeAccountDataSymbolLimitsResponse) NumberOfDaysBeforeLastTradingDateToDisallowOrders() int32 {
	return m.p.Int32LE(43)
}

// FixedMarginCashValue
func (m TradeAccountDataSymbolLimitsResponse) FixedMarginCashValue() float32 {
	return m.p.Float32LE(47)
}

// SetRequestID
func (m *TradeAccountDataSymbolLimitsResponse) SetRequestID(value uint32) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetUint32LE(6, value)
	return m
}

// SetTradeAccount
func (m *TradeAccountDataSymbolLimitsResponse) SetTradeAccount(value string) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetStringVLS(10, value)
	return m
}

// SetSymbol
func (m *TradeAccountDataSymbolLimitsResponse) SetSymbol(value string) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetStringVLS(14, value)
	return m
}

// SetTradePositionLimit
func (m *TradeAccountDataSymbolLimitsResponse) SetTradePositionLimit(value float64) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetFloat64LE(18, value)
	return m
}

// SetOrderQuantityLimit
func (m *TradeAccountDataSymbolLimitsResponse) SetOrderQuantityLimit(value float64) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetFloat64LE(26, value)
	return m
}

// SetUsePercentOfMargin
func (m *TradeAccountDataSymbolLimitsResponse) SetUsePercentOfMargin(value int32) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetInt32LE(34, value)
	return m
}

// SetOverrideMarginOtherAccounts
func (m *TradeAccountDataSymbolLimitsResponse) SetOverrideMarginOtherAccounts(value uint8) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetUint8(38, value)
	return m
}

// SetUsePercentOfMarginForDayTrading
func (m *TradeAccountDataSymbolLimitsResponse) SetUsePercentOfMarginForDayTrading(value int32) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetInt32LE(39, value)
	return m
}

// SetNumberOfDaysBeforeLastTradingDateToDisallowOrders
func (m *TradeAccountDataSymbolLimitsResponse) SetNumberOfDaysBeforeLastTradingDateToDisallowOrders(value int32) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetInt32LE(43, value)
	return m
}

// SetFixedMarginCashValue
func (m *TradeAccountDataSymbolLimitsResponse) SetFixedMarginCashValue(value float32) *TradeAccountDataSymbolLimitsResponse {
	m.p.SetFloat32LE(47, value)
	return m
}

func (m TradeAccountDataSymbolLimitsResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradeAccountDataSymbolLimitsResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradeAccountDataSymbolLimitsResponse) Copy(to TradeAccountDataSymbolLimitsResponse) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
	to.SetSymbol(m.Symbol())
	to.SetTradePositionLimit(m.TradePositionLimit())
	to.SetOrderQuantityLimit(m.OrderQuantityLimit())
	to.SetUsePercentOfMargin(m.UsePercentOfMargin())
	to.SetOverrideMarginOtherAccounts(m.OverrideMarginOtherAccounts())
	to.SetUsePercentOfMarginForDayTrading(m.UsePercentOfMarginForDayTrading())
	to.SetNumberOfDaysBeforeLastTradingDateToDisallowOrders(m.NumberOfDaysBeforeLastTradingDateToDisallowOrders())
	to.SetFixedMarginCashValue(m.FixedMarginCashValue())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradeAccountDataSymbolLimitsResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10121)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("Symbol", m.Symbol())
	w.Float64Field("TradePositionLimit", m.TradePositionLimit())
	w.Float64Field("OrderQuantityLimit", m.OrderQuantityLimit())
	w.Int32Field("UsePercentOfMargin", m.UsePercentOfMargin())
	w.Uint8Field("OverrideMarginOtherAccounts", m.OverrideMarginOtherAccounts())
	w.Int32Field("UsePercentOfMarginForDayTrading", m.UsePercentOfMarginForDayTrading())
	w.Int32Field("NumberOfDaysBeforeLastTradingDateToDisallowOrders", m.NumberOfDaysBeforeLastTradingDateToDisallowOrders())
	w.Float32Field("FixedMarginCashValue", m.FixedMarginCashValue())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataSymbolLimitsResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10121 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "Symbol":
			m.SetSymbol(r.String())
		case "TradePositionLimit":
			m.SetTradePositionLimit(r.Float64())
		case "OrderQuantityLimit":
			m.SetOrderQuantityLimit(r.Float64())
		case "UsePercentOfMargin":
			m.SetUsePercentOfMargin(r.Int32())
		case "OverrideMarginOtherAccounts":
			m.SetOverrideMarginOtherAccounts(r.Uint8())
		case "UsePercentOfMarginForDayTrading":
			m.SetUsePercentOfMarginForDayTrading(r.Int32())
		case "NumberOfDaysBeforeLastTradingDateToDisallowOrders":
			m.SetNumberOfDaysBeforeLastTradingDateToDisallowOrders(r.Int32())
		case "FixedMarginCashValue":
			m.SetFixedMarginCashValue(r.Float32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataSymbolLimitsResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
