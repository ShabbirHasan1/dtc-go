// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarginDataResponseSize = 34

//     Size            uint16   = MarginDataResponseSize  (34)
//     Type            uint16   = MARGIN_DATA_RESPONSE  (10142)
//     BaseSize        uint16   = MarginDataResponseSize  (34)
//     RequestID       int32    = 0
//     TradeAccount    string   = ""
//     ErrorText       string   = ""
//     ExchangeMargin  float64  = 0.000000
//     AccountMargin   float64  = 0.000000
var _MarginDataResponseDefault = []byte{34, 0, 158, 39, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type MarginDataResponse struct {
	p message.VLS
}

func NewMarginDataResponseFrom(b []byte) MarginDataResponse {
	return MarginDataResponse{p: message.NewVLS(b)}
}

func WrapMarginDataResponse(b []byte) MarginDataResponse {
	return MarginDataResponse{p: message.WrapVLS(b)}
}

func NewMarginDataResponse() *MarginDataResponse {
	return &MarginDataResponse{p: message.NewVLS(_MarginDataResponseDefault)}
}

func ParseMarginDataResponse(b []byte) (MarginDataResponse, error) {
	if len(b) < 6 {
		return MarginDataResponse{}, message.ErrShortBuffer
	}
	m := WrapMarginDataResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarginDataResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return MarginDataResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 34 {
		newSize := len(b) + (34 - baseSize)
		if newSize > message.MaxSize {
			return MarginDataResponse{}, message.ErrOverflow
		}
		clone := MarginDataResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _MarginDataResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(34 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m MarginDataResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m MarginDataResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m MarginDataResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m MarginDataResponse) RequestID() int32 {
	return m.p.Int32LE(6)
}

// TradeAccount
func (m MarginDataResponse) TradeAccount() string {
	return m.p.StringVLS(10)
}

// ErrorText
func (m MarginDataResponse) ErrorText() string {
	return m.p.StringVLS(14)
}

// ExchangeMargin
func (m MarginDataResponse) ExchangeMargin() float64 {
	return m.p.Float64LE(18)
}

// AccountMargin
func (m MarginDataResponse) AccountMargin() float64 {
	return m.p.Float64LE(26)
}

// SetRequestID
func (m *MarginDataResponse) SetRequestID(value int32) *MarginDataResponse {
	m.p.SetInt32LE(6, value)
	return m
}

// SetTradeAccount
func (m *MarginDataResponse) SetTradeAccount(value string) *MarginDataResponse {
	m.p.SetStringVLS(10, value)
	return m
}

// SetErrorText
func (m *MarginDataResponse) SetErrorText(value string) *MarginDataResponse {
	m.p.SetStringVLS(14, value)
	return m
}

// SetExchangeMargin
func (m *MarginDataResponse) SetExchangeMargin(value float64) *MarginDataResponse {
	m.p.SetFloat64LE(18, value)
	return m
}

// SetAccountMargin
func (m *MarginDataResponse) SetAccountMargin(value float64) *MarginDataResponse {
	m.p.SetFloat64LE(26, value)
	return m
}

func (m MarginDataResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarginDataResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarginDataResponse) Copy(to MarginDataResponse) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
	to.SetErrorText(m.ErrorText())
	to.SetExchangeMargin(m.ExchangeMargin())
	to.SetAccountMargin(m.AccountMargin())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarginDataResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10142)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("ErrorText", m.ErrorText())
	w.Float64Field("ExchangeMargin", m.ExchangeMargin())
	w.Float64Field("AccountMargin", m.AccountMargin())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarginDataResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10142 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "ErrorText":
			m.SetErrorText(r.String())
		case "ExchangeMargin":
			m.SetExchangeMargin(r.Float64())
		case "AccountMargin":
			m.SetAccountMargin(r.Float64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarginDataResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
