// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateTradeCompactSize = 24

//     Size        uint16          = MarketDataUpdateTradeCompactSize  (24)
//     Type        uint16          = MARKET_DATA_UPDATE_TRADE_COMPACT  (112)
//     Price       float32         = 0.000000
//     Volume      float32         = 0.000000
//     DateTime    DateTime4Byte   = 0
//     SymbolID    uint32          = 0
//     AtBidOrAsk  AtBidOrAskEnum  = BID_ASK_UNSET  (0)
var _MarketDataUpdateTradeCompactDefault = []byte{24, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateTradeCompact Sent by the Server to the Client when a trade occurs. This message is
// a more compact MarketDataUpdateTrade. For the price it uses a 4 byte float.
// a more compact MarketDataUpdateTrade. For the price it uses a 4 byte float.
type MarketDataUpdateTradeCompact struct {
	p message.Fixed
}

func NewMarketDataUpdateTradeCompactFrom(b []byte) MarketDataUpdateTradeCompact {
	return MarketDataUpdateTradeCompact{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateTradeCompact(b []byte) MarketDataUpdateTradeCompact {
	return MarketDataUpdateTradeCompact{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateTradeCompact() *MarketDataUpdateTradeCompact {
	return &MarketDataUpdateTradeCompact{p: message.NewFixed(_MarketDataUpdateTradeCompactDefault)}
}

func ParseMarketDataUpdateTradeCompact(b []byte) (MarketDataUpdateTradeCompact, error) {
	if len(b) < 4 {
		return MarketDataUpdateTradeCompact{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateTradeCompact(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateTradeCompact{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateTradeCompact{}, message.ErrBaseSizeOverflow
	}
	if size < 24 {
		clone := *NewMarketDataUpdateTradeCompact()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateTradeCompactDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateTradeCompact) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateTradeCompact) Type() uint16 {
	return m.p.Uint16LE(2)
}

// Price The price of the trade.
func (m MarketDataUpdateTradeCompact) Price() float32 {
	return m.p.Float32LE(4)
}

// Volume The volume of the trade.
func (m MarketDataUpdateTradeCompact) Volume() float32 {
	return m.p.Float32LE(8)
}

// DateTime The timestamp of the trade in UNIX time format. This does not contain
// the milliseconds for compactness.
func (m MarketDataUpdateTradeCompact) DateTime() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(12))
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateTradeCompact) SymbolID() uint32 {
	return m.p.Uint32LE(16)
}

// AtBidOrAsk Indicator whether the trade occurred at the Bid or Ask price.
func (m MarketDataUpdateTradeCompact) AtBidOrAsk() AtBidOrAskEnum {
	return AtBidOrAskEnum(m.p.Uint16LE(20))
}

// SetPrice The price of the trade.
func (m *MarketDataUpdateTradeCompact) SetPrice(value float32) *MarketDataUpdateTradeCompact {
	m.p.SetFloat32LE(4, value)
	return m
}

// SetVolume The volume of the trade.
func (m *MarketDataUpdateTradeCompact) SetVolume(value float32) *MarketDataUpdateTradeCompact {
	m.p.SetFloat32LE(8, value)
	return m
}

// SetDateTime The timestamp of the trade in UNIX time format. This does not contain
// the milliseconds for compactness.
func (m *MarketDataUpdateTradeCompact) SetDateTime(value DateTime4Byte) *MarketDataUpdateTradeCompact {
	m.p.SetUint32LE(12, uint32(value))
	return m
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateTradeCompact) SetSymbolID(value uint32) *MarketDataUpdateTradeCompact {
	m.p.SetUint32LE(16, value)
	return m
}

// SetAtBidOrAsk Indicator whether the trade occurred at the Bid or Ask price.
func (m *MarketDataUpdateTradeCompact) SetAtBidOrAsk(value AtBidOrAskEnum) *MarketDataUpdateTradeCompact {
	m.p.SetUint16LE(20, uint16(value))
	return m
}

func (m MarketDataUpdateTradeCompact) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarketDataUpdateTradeCompact) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarketDataUpdateTradeCompact) Copy(to MarketDataUpdateTradeCompact) {
	to.SetPrice(m.Price())
	to.SetVolume(m.Volume())
	to.SetDateTime(m.DateTime())
	to.SetSymbolID(m.SymbolID())
	to.SetAtBidOrAsk(m.AtBidOrAsk())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarketDataUpdateTradeCompact) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 112)
	w.Float32Field("Price", m.Price())
	w.Float32Field("Volume", m.Volume())
	w.Uint32Field("DateTime", uint32(m.DateTime()))
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Uint16Field("AtBidOrAsk", uint16(m.AtBidOrAsk()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateTradeCompact) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 112 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "Price":
			m.SetPrice(r.Float32())
		case "Volume":
			m.SetVolume(r.Float32())
		case "DateTime":
			m.SetDateTime(DateTime4Byte(r.Uint32()))
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "AtBidOrAsk":
			m.SetAtBidOrAsk(AtBidOrAskEnum(r.Uint16()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateTradeCompact) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
