// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradeAccountDataUsernameToShareWithAddSize = 19

//     Size          uint16  = TradeAccountDataUsernameToShareWithAddSize  (19)
//     Type          uint16  = TRADE_ACCOUNT_DATA_USERNAME_TO_SHARE_WITH_ADD  (10128)
//     BaseSize      uint16  = TradeAccountDataUsernameToShareWithAddSize  (19)
//     RequestID     uint32  = 0
//     TradeAccount  string  = ""
//     Username      string  = ""
//     IsReadOnly    bool    = false
var _TradeAccountDataUsernameToShareWithAddDefault = []byte{19, 0, 144, 39, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradeAccountDataUsernameToShareWithAdd struct {
	p message.VLS
}

func NewTradeAccountDataUsernameToShareWithAddFrom(b []byte) TradeAccountDataUsernameToShareWithAdd {
	return TradeAccountDataUsernameToShareWithAdd{p: message.NewVLS(b)}
}

func WrapTradeAccountDataUsernameToShareWithAdd(b []byte) TradeAccountDataUsernameToShareWithAdd {
	return TradeAccountDataUsernameToShareWithAdd{p: message.WrapVLS(b)}
}

func NewTradeAccountDataUsernameToShareWithAdd() *TradeAccountDataUsernameToShareWithAdd {
	return &TradeAccountDataUsernameToShareWithAdd{p: message.NewVLS(_TradeAccountDataUsernameToShareWithAddDefault)}
}

func ParseTradeAccountDataUsernameToShareWithAdd(b []byte) (TradeAccountDataUsernameToShareWithAdd, error) {
	if len(b) < 6 {
		return TradeAccountDataUsernameToShareWithAdd{}, message.ErrShortBuffer
	}
	m := WrapTradeAccountDataUsernameToShareWithAdd(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradeAccountDataUsernameToShareWithAdd{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradeAccountDataUsernameToShareWithAdd{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 19 {
		newSize := len(b) + (19 - baseSize)
		if newSize > message.MaxSize {
			return TradeAccountDataUsernameToShareWithAdd{}, message.ErrOverflow
		}
		clone := TradeAccountDataUsernameToShareWithAdd{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradeAccountDataUsernameToShareWithAddDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(19 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradeAccountDataUsernameToShareWithAdd) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradeAccountDataUsernameToShareWithAdd) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradeAccountDataUsernameToShareWithAdd) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m TradeAccountDataUsernameToShareWithAdd) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// TradeAccount
func (m TradeAccountDataUsernameToShareWithAdd) TradeAccount() string {
	return m.p.StringVLS(10)
}

// Username
func (m TradeAccountDataUsernameToShareWithAdd) Username() string {
	return m.p.StringVLS(14)
}

// IsReadOnly
func (m TradeAccountDataUsernameToShareWithAdd) IsReadOnly() bool {
	return m.p.Bool(18)
}

// SetRequestID
func (m *TradeAccountDataUsernameToShareWithAdd) SetRequestID(value uint32) *TradeAccountDataUsernameToShareWithAdd {
	m.p.SetUint32LE(6, value)
	return m
}

// SetTradeAccount
func (m *TradeAccountDataUsernameToShareWithAdd) SetTradeAccount(value string) *TradeAccountDataUsernameToShareWithAdd {
	m.p.SetStringVLS(10, value)
	return m
}

// SetUsername
func (m *TradeAccountDataUsernameToShareWithAdd) SetUsername(value string) *TradeAccountDataUsernameToShareWithAdd {
	m.p.SetStringVLS(14, value)
	return m
}

// SetIsReadOnly
func (m *TradeAccountDataUsernameToShareWithAdd) SetIsReadOnly(value bool) *TradeAccountDataUsernameToShareWithAdd {
	m.p.SetBool(18, value)
	return m
}

func (m TradeAccountDataUsernameToShareWithAdd) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradeAccountDataUsernameToShareWithAdd) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradeAccountDataUsernameToShareWithAdd) Copy(to TradeAccountDataUsernameToShareWithAdd) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
	to.SetUsername(m.Username())
	to.SetIsReadOnly(m.IsReadOnly())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradeAccountDataUsernameToShareWithAdd) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10128)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("Username", m.Username())
	w.BoolField("IsReadOnly", m.IsReadOnly())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataUsernameToShareWithAdd) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10128 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "Username":
			m.SetUsername(r.String())
		case "IsReadOnly":
			m.SetIsReadOnly(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataUsernameToShareWithAdd) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
