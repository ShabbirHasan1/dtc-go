// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradeAccountDataAuthorizedUsernameResponseSize = 25

//     Size                        uint16  = TradeAccountDataAuthorizedUsernameResponseSize  (25)
//     Type                        uint16  = TRADE_ACCOUNT_DATA_AUTHORIZED_USERNAME_RESPONSE  (10124)
//     BaseSize                    uint16  = TradeAccountDataAuthorizedUsernameResponseSize  (25)
//     RequestID                   uint32  = 0
//     TradeAccount                string  = ""
//     Username                    string  = ""
//     UpdateOperationComplete     uint8   = 0
//     UpdateOperationMessageType  uint16  = 0
//     UpdateOperationErrorText    string  = ""
var _TradeAccountDataAuthorizedUsernameResponseDefault = []byte{25, 0, 140, 39, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradeAccountDataAuthorizedUsernameResponse struct {
	p message.VLS
}

func NewTradeAccountDataAuthorizedUsernameResponseFrom(b []byte) TradeAccountDataAuthorizedUsernameResponse {
	return TradeAccountDataAuthorizedUsernameResponse{p: message.NewVLS(b)}
}

func WrapTradeAccountDataAuthorizedUsernameResponse(b []byte) TradeAccountDataAuthorizedUsernameResponse {
	return TradeAccountDataAuthorizedUsernameResponse{p: message.WrapVLS(b)}
}

func NewTradeAccountDataAuthorizedUsernameResponse() *TradeAccountDataAuthorizedUsernameResponse {
	return &TradeAccountDataAuthorizedUsernameResponse{p: message.NewVLS(_TradeAccountDataAuthorizedUsernameResponseDefault)}
}

func ParseTradeAccountDataAuthorizedUsernameResponse(b []byte) (TradeAccountDataAuthorizedUsernameResponse, error) {
	if len(b) < 6 {
		return TradeAccountDataAuthorizedUsernameResponse{}, message.ErrShortBuffer
	}
	m := WrapTradeAccountDataAuthorizedUsernameResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradeAccountDataAuthorizedUsernameResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradeAccountDataAuthorizedUsernameResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 25 {
		newSize := len(b) + (25 - baseSize)
		if newSize > message.MaxSize {
			return TradeAccountDataAuthorizedUsernameResponse{}, message.ErrOverflow
		}
		clone := TradeAccountDataAuthorizedUsernameResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradeAccountDataAuthorizedUsernameResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(25 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
			offset = clone.p.Uint16LE(21)
			if offset > 0 {
				clone.p.SetUint16LE(21, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradeAccountDataAuthorizedUsernameResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradeAccountDataAuthorizedUsernameResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradeAccountDataAuthorizedUsernameResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m TradeAccountDataAuthorizedUsernameResponse) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// TradeAccount
func (m TradeAccountDataAuthorizedUsernameResponse) TradeAccount() string {
	return m.p.StringVLS(10)
}

// Username
func (m TradeAccountDataAuthorizedUsernameResponse) Username() string {
	return m.p.StringVLS(14)
}

// UpdateOperationComplete
func (m TradeAccountDataAuthorizedUsernameResponse) UpdateOperationComplete() uint8 {
	return m.p.Uint8(18)
}

// UpdateOperationMessageType
func (m TradeAccountDataAuthorizedUsernameResponse) UpdateOperationMessageType() uint16 {
	return m.p.Uint16LE(19)
}

// UpdateOperationErrorText
func (m TradeAccountDataAuthorizedUsernameResponse) UpdateOperationErrorText() string {
	return m.p.StringVLS(21)
}

// SetRequestID
func (m *TradeAccountDataAuthorizedUsernameResponse) SetRequestID(value uint32) *TradeAccountDataAuthorizedUsernameResponse {
	m.p.SetUint32LE(6, value)
	return m
}

// SetTradeAccount
func (m *TradeAccountDataAuthorizedUsernameResponse) SetTradeAccount(value string) *TradeAccountDataAuthorizedUsernameResponse {
	m.p.SetStringVLS(10, value)
	return m
}

// SetUsername
func (m *TradeAccountDataAuthorizedUsernameResponse) SetUsername(value string) *TradeAccountDataAuthorizedUsernameResponse {
	m.p.SetStringVLS(14, value)
	return m
}

// SetUpdateOperationComplete
func (m *TradeAccountDataAuthorizedUsernameResponse) SetUpdateOperationComplete(value uint8) *TradeAccountDataAuthorizedUsernameResponse {
	m.p.SetUint8(18, value)
	return m
}

// SetUpdateOperationMessageType
func (m *TradeAccountDataAuthorizedUsernameResponse) SetUpdateOperationMessageType(value uint16) *TradeAccountDataAuthorizedUsernameResponse {
	m.p.SetUint16LE(19, value)
	return m
}

// SetUpdateOperationErrorText
func (m *TradeAccountDataAuthorizedUsernameResponse) SetUpdateOperationErrorText(value string) *TradeAccountDataAuthorizedUsernameResponse {
	m.p.SetStringVLS(21, value)
	return m
}

func (m TradeAccountDataAuthorizedUsernameResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradeAccountDataAuthorizedUsernameResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradeAccountDataAuthorizedUsernameResponse) Copy(to TradeAccountDataAuthorizedUsernameResponse) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
	to.SetUsername(m.Username())
	to.SetUpdateOperationComplete(m.UpdateOperationComplete())
	to.SetUpdateOperationMessageType(m.UpdateOperationMessageType())
	to.SetUpdateOperationErrorText(m.UpdateOperationErrorText())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradeAccountDataAuthorizedUsernameResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10124)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("Username", m.Username())
	w.Uint8Field("UpdateOperationComplete", m.UpdateOperationComplete())
	w.Uint16Field("UpdateOperationMessageType", m.UpdateOperationMessageType())
	w.StringField("UpdateOperationErrorText", m.UpdateOperationErrorText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataAuthorizedUsernameResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10124 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "Username":
			m.SetUsername(r.String())
		case "UpdateOperationComplete":
			m.SetUpdateOperationComplete(r.Uint8())
		case "UpdateOperationMessageType":
			m.SetUpdateOperationMessageType(r.Uint16())
		case "UpdateOperationErrorText":
			m.SetUpdateOperationErrorText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataAuthorizedUsernameResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
