// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const InterprocessSynchronizationTradeActivityRequestSize = 17

//     Size                   uint16  = InterprocessSynchronizationTradeActivityRequestSize  (17)
//     Type                   uint16  = INTERPROCESS_SYNCHRONIZATION_TRADE_ACTIVITY_REQUEST  (10137)
//     RequestID              uint32  = 0
//     StartDateTimeUTC       int64   = 0
//     SendOrderActivityOnly  uint8   = 0
var _InterprocessSynchronizationTradeActivityRequestDefault = []byte{17, 0, 153, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type InterprocessSynchronizationTradeActivityRequest struct {
	p message.Fixed
}

func NewInterprocessSynchronizationTradeActivityRequestFrom(b []byte) InterprocessSynchronizationTradeActivityRequest {
	return InterprocessSynchronizationTradeActivityRequest{p: message.NewFixed(b)}
}

func WrapInterprocessSynchronizationTradeActivityRequest(b []byte) InterprocessSynchronizationTradeActivityRequest {
	return InterprocessSynchronizationTradeActivityRequest{p: message.WrapFixed(b)}
}

func NewInterprocessSynchronizationTradeActivityRequest() *InterprocessSynchronizationTradeActivityRequest {
	return &InterprocessSynchronizationTradeActivityRequest{p: message.NewFixed(_InterprocessSynchronizationTradeActivityRequestDefault)}
}

func ParseInterprocessSynchronizationTradeActivityRequest(b []byte) (InterprocessSynchronizationTradeActivityRequest, error) {
	if len(b) < 4 {
		return InterprocessSynchronizationTradeActivityRequest{}, message.ErrShortBuffer
	}
	m := WrapInterprocessSynchronizationTradeActivityRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return InterprocessSynchronizationTradeActivityRequest{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return InterprocessSynchronizationTradeActivityRequest{}, message.ErrBaseSizeOverflow
	}
	if size < 17 {
		clone := *NewInterprocessSynchronizationTradeActivityRequest()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _InterprocessSynchronizationTradeActivityRequestDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m InterprocessSynchronizationTradeActivityRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m InterprocessSynchronizationTradeActivityRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m InterprocessSynchronizationTradeActivityRequest) RequestID() uint32 {
	return m.p.Uint32LE(4)
}

// StartDateTimeUTC
func (m InterprocessSynchronizationTradeActivityRequest) StartDateTimeUTC() int64 {
	return m.p.Int64LE(8)
}

// SendOrderActivityOnly
func (m InterprocessSynchronizationTradeActivityRequest) SendOrderActivityOnly() uint8 {
	return m.p.Uint8(16)
}

// SetRequestID
func (m *InterprocessSynchronizationTradeActivityRequest) SetRequestID(value uint32) *InterprocessSynchronizationTradeActivityRequest {
	m.p.SetUint32LE(4, value)
	return m
}

// SetStartDateTimeUTC
func (m *InterprocessSynchronizationTradeActivityRequest) SetStartDateTimeUTC(value int64) *InterprocessSynchronizationTradeActivityRequest {
	m.p.SetInt64LE(8, value)
	return m
}

// SetSendOrderActivityOnly
func (m *InterprocessSynchronizationTradeActivityRequest) SetSendOrderActivityOnly(value uint8) *InterprocessSynchronizationTradeActivityRequest {
	m.p.SetUint8(16, value)
	return m
}

func (m InterprocessSynchronizationTradeActivityRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m InterprocessSynchronizationTradeActivityRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m InterprocessSynchronizationTradeActivityRequest) Copy(to InterprocessSynchronizationTradeActivityRequest) {
	to.SetRequestID(m.RequestID())
	to.SetStartDateTimeUTC(m.StartDateTimeUTC())
	to.SetSendOrderActivityOnly(m.SendOrderActivityOnly())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m InterprocessSynchronizationTradeActivityRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10137)
	w.Uint32Field("RequestID", m.RequestID())
	w.Int64Field("StartDateTimeUTC", m.StartDateTimeUTC())
	w.Uint8Field("SendOrderActivityOnly", m.SendOrderActivityOnly())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *InterprocessSynchronizationTradeActivityRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10137 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "StartDateTimeUTC":
			m.SetStartDateTimeUTC(r.Int64())
		case "SendOrderActivityOnly":
			m.SetSendOrderActivityOnly(r.Uint8())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *InterprocessSynchronizationTradeActivityRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
