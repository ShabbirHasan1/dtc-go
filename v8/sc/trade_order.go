// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradeOrderSize = 535

//     Size                                                      uint16   = TradeOrderSize  (535)
//     Type                                                      uint16   = SC_TRADE_ORDER  (10110)
//     BaseSize                                                  uint16   = TradeOrderSize  (535)
//     IsOrderDeleted                                            bool     = false
//     InternalOrderID                                           uint64   = 0
//     OrderStatusCode                                           uint16   = 0
//     OrderStatusBeforePendingModify                            uint16   = 0
//     OrderStatusBeforePendingCancel                            uint16   = 0
//     ServiceOrderID                                            string   = ""
//     ActualSymbol                                              string   = ""
//     OrderType                                                 int32    = 0
//     BuySell                                                   uint16   = 0
//     Price1                                                    float64  = 0.000000
//     Price2                                                    float64  = 0.000000
//     OrderQuantity                                             float64  = 0.000000
//     FilledQuantity                                            float64  = 0.000000
//     AverageFillPrice                                          float64  = 0.000000
//     RealtimeFillStatus                                        int32    = 0
//     IsRestingOrderDuringFill                                  bool     = false
//     OrderRejectType                                           int32    = 0
//     TradeAccount                                              string   = ""
//     SubAccountIdentifier                                      uint32   = 0
//     InternalOrderIDModifierForService                         int32    = 0
//     FIXClientOrderID                                          string   = ""
//     SequenceNumberBasedClientOrderID                          uint32   = 0
//     ClientOrderIDForDTCServer                                 string   = ""
//     PreviousClientOrderIDForDTCServer                         string   = ""
//     ExchangeOrderID                                           string   = ""
//     OriginatingClientUsername                                 string   = ""
//     EntryDateTime                                             int64    = 0
//     LastActionDateTime                                        int64    = 0
//     ServiceUpdateDateTimeUTC                                  int64    = 0
//     OrderEntryTimeForService                                  uint32   = 0
//     LastModifyTimeForService                                  uint32   = 0
//     GoodTillDateTime                                          int64    = 0
//     TimeInForce                                               int32    = 0
//     OpenClose                                                 uint16   = 0
//     TrailStopOffset1                                          float64  = 0.000000
//     TrailStopStep                                             float64  = 0.000000
//     TrailTriggerPrice                                         float64  = 0.000000
//     TrailingStopTriggerOffset                                 float64  = 0.000000
//     TrailTriggerHit                                           uint8    = 0
//     TrailToBreakEvenStopOffset                                float64  = 0.000000
//     MaximumChaseAmountAsPrice                                 float64  = 0.000000
//     InitialChaseOrderPrice1                                   float64  = 0.000000
//     InitialLastTradePriceForChaseOrders                       float64  = 0.000000
//     TrailingStopTriggerOCOGroupNumber                         int32    = 0
//     LastModifyPrice1                                          float64  = 0.000000
//     LastModifyQuantity                                        float64  = 0.000000
//     CumulativeOrderQuantityFromParentFills                    float64  = 0.000000
//     PriorFilledQuantity                                       float64  = 0.000000
//     TickSize                                                  float32  = 0.000000
//     ValueFormat                                               int32    = 0
//     PriceMultiplier                                           float32  = 0.000000
//     ParentInternalOrderID                                     uint64   = 0
//     TargetChildInternalOrderID                                uint64   = 0
//     StopChildInternalOrderID                                  uint64   = 0
//     AttachedOrderPriceOffset1                                 float64  = 0.000000
//     LinkInternalOrderID                                       uint64   = 0
//     OCOGroupInternalOrderID                                   uint64   = 0
//     OCOSiblingInternalOrderID                                 uint64   = 0
//     DisableChildAndSiblingRelatedActions                      uint8    = 0
//     OCOManagedByService                                       uint8    = 0
//     BracketOrderServerManaged                                 uint8    = 0
//     LastOrderActionSource                                     string   = ""
//     StopLimitOrderStopPriceTriggered                          uint8    = 0
//     OCOFullSiblingCancelOnPartialFill                         uint8    = 0
//     ReverseOnCompleteFill                                     uint8    = 0
//     SupportScaleIn                                            uint8    = 0
//     SupportScaleOut                                           uint8    = 0
//     SourceChartNumber                                         int32    = 0
//     SourceChartbookFileName                                   string   = ""
//     IsAutomatedOrder                                          bool     = false
//     SimulatedOrder                                            uint8    = 0
//     IsChartReplaying                                          bool     = false
//     AttachedOrderOCOGroupNumber                               int32    = 0
//     LastFillExecutionServiceID                                string   = ""
//     FillCount                                                 int32    = 0
//     LastFillQuantity                                          float64  = 0.000000
//     LastFillPrice                                             float64  = 0.000000
//     LastFillDateTimeUTC                                       int64    = 0
//     RejectedStopOCOSiblingInternalOrderID                     uint64   = 0
//     RejectedStopReplacementMarketOrderQuantity                float64  = 0.000000
//     EvaluatingForFill                                         uint8    = 0
//     LastProcessedTimeSalesRecordSequenceForPrices             uint32   = 0
//     IsMarketDataManagementOfOrderEnabled                      bool     = false
//     TextTag                                                   string   = ""
//     TimedOutOrderRequestedStatusDateTime                      int64    = 0
//     RequestedStatusForTimedOutOrder                           uint8    = 0
//     SendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled  uint8    = 0
//     QuantityToIncreaseFromParentFill                          float64  = 0.000000
//     MoveToBreakevenStopReferencePrice                         float64  = 0.000000
//     QuantityTriggeredStop_QuantityForTrigger                  float64  = 0.000000
//     AccumulatedTradeVolumeForTriggeredStop                    float64  = 0.000000
//     BidAskQuantityStopInitialTriggerMet                       uint8    = 0
//     NeedToOverrideLock                                        uint8    = 0
//     CurrentMarketPrice                                        float64  = 0.000000
//     CurrentMarketDateTime                                     int64    = 0
//     SupportOrderFillBilling                                   uint8    = 0
//     IsBillable                                                bool     = false
//     QuantityForBilling                                        int32    = 0
//     NumberOfFailedOrderModifications                          uint32   = 0
//     DTCServerIndex                                            int32    = 0
//     ClearingFirmID                                            string   = ""
//     SenderSubID                                               string   = ""
//     SenderLocationId                                          string   = ""
//     SelfMatchPreventionID                                     string   = ""
//     CTICode                                                   int32    = 0
//     ObtainOrderActionDateTimeFromLastTradeTimeInChart         uint8    = 0
//     MaximumShowQuantity                                       float64  = 0.000000
//     OrderSubmitted                                            uint8    = 0
//     IsSnapshot                                                bool     = false
//     IsFirstMessageInBatch                                     bool     = false
//     IsLastMessageInBatch                                      bool     = false
//     ExternalLastActionDateTimeUTC                             int64    = 0
var _TradeOrderDefault = []byte{23, 2, 126, 39, 23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradeOrder struct {
	p message.VLS
}

func NewTradeOrderFrom(b []byte) TradeOrder {
	return TradeOrder{p: message.NewVLS(b)}
}

func WrapTradeOrder(b []byte) TradeOrder {
	return TradeOrder{p: message.WrapVLS(b)}
}

func NewTradeOrder() *TradeOrder {
	return &TradeOrder{p: message.NewVLS(_TradeOrderDefault)}
}

func ParseTradeOrder(b []byte) (TradeOrder, error) {
	if len(b) < 6 {
		return TradeOrder{}, message.ErrShortBuffer
	}
	m := WrapTradeOrder(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradeOrder{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradeOrder{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 535 {
		newSize := len(b) + (535 - baseSize)
		if newSize > message.MaxSize {
			return TradeOrder{}, message.ErrOverflow
		}
		clone := TradeOrder{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradeOrderDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(535 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(21)
			if offset > 0 {
				clone.p.SetUint16LE(21, offset+shift)
			}
			offset = clone.p.Uint16LE(25)
			if offset > 0 {
				clone.p.SetUint16LE(25, offset+shift)
			}
			offset = clone.p.Uint16LE(84)
			if offset > 0 {
				clone.p.SetUint16LE(84, offset+shift)
			}
			offset = clone.p.Uint16LE(96)
			if offset > 0 {
				clone.p.SetUint16LE(96, offset+shift)
			}
			offset = clone.p.Uint16LE(104)
			if offset > 0 {
				clone.p.SetUint16LE(104, offset+shift)
			}
			offset = clone.p.Uint16LE(108)
			if offset > 0 {
				clone.p.SetUint16LE(108, offset+shift)
			}
			offset = clone.p.Uint16LE(112)
			if offset > 0 {
				clone.p.SetUint16LE(112, offset+shift)
			}
			offset = clone.p.Uint16LE(116)
			if offset > 0 {
				clone.p.SetUint16LE(116, offset+shift)
			}
			offset = clone.p.Uint16LE(338)
			if offset > 0 {
				clone.p.SetUint16LE(338, offset+shift)
			}
			offset = clone.p.Uint16LE(351)
			if offset > 0 {
				clone.p.SetUint16LE(351, offset+shift)
			}
			offset = clone.p.Uint16LE(362)
			if offset > 0 {
				clone.p.SetUint16LE(362, offset+shift)
			}
			offset = clone.p.Uint16LE(416)
			if offset > 0 {
				clone.p.SetUint16LE(416, offset+shift)
			}
			offset = clone.p.Uint16LE(494)
			if offset > 0 {
				clone.p.SetUint16LE(494, offset+shift)
			}
			offset = clone.p.Uint16LE(498)
			if offset > 0 {
				clone.p.SetUint16LE(498, offset+shift)
			}
			offset = clone.p.Uint16LE(502)
			if offset > 0 {
				clone.p.SetUint16LE(502, offset+shift)
			}
			offset = clone.p.Uint16LE(506)
			if offset > 0 {
				clone.p.SetUint16LE(506, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradeOrder) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradeOrder) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradeOrder) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// IsOrderDeleted
func (m TradeOrder) IsOrderDeleted() bool {
	return m.p.Bool(6)
}

// InternalOrderID
func (m TradeOrder) InternalOrderID() uint64 {
	return m.p.Uint64LE(7)
}

// OrderStatusCode
func (m TradeOrder) OrderStatusCode() uint16 {
	return m.p.Uint16LE(15)
}

// OrderStatusBeforePendingModify
func (m TradeOrder) OrderStatusBeforePendingModify() uint16 {
	return m.p.Uint16LE(17)
}

// OrderStatusBeforePendingCancel
func (m TradeOrder) OrderStatusBeforePendingCancel() uint16 {
	return m.p.Uint16LE(19)
}

// ServiceOrderID
func (m TradeOrder) ServiceOrderID() string {
	return m.p.StringVLS(21)
}

// ActualSymbol
func (m TradeOrder) ActualSymbol() string {
	return m.p.StringVLS(25)
}

// OrderType
func (m TradeOrder) OrderType() int32 {
	return m.p.Int32LE(29)
}

// BuySell
func (m TradeOrder) BuySell() uint16 {
	return m.p.Uint16LE(33)
}

// Price1
func (m TradeOrder) Price1() float64 {
	return m.p.Float64LE(35)
}

// Price2
func (m TradeOrder) Price2() float64 {
	return m.p.Float64LE(43)
}

// OrderQuantity
func (m TradeOrder) OrderQuantity() float64 {
	return m.p.Float64LE(51)
}

// FilledQuantity
func (m TradeOrder) FilledQuantity() float64 {
	return m.p.Float64LE(59)
}

// AverageFillPrice
func (m TradeOrder) AverageFillPrice() float64 {
	return m.p.Float64LE(67)
}

// RealtimeFillStatus
func (m TradeOrder) RealtimeFillStatus() int32 {
	return m.p.Int32LE(75)
}

// IsRestingOrderDuringFill
func (m TradeOrder) IsRestingOrderDuringFill() bool {
	return m.p.Bool(79)
}

// OrderRejectType
func (m TradeOrder) OrderRejectType() int32 {
	return m.p.Int32LE(80)
}

// TradeAccount
func (m TradeOrder) TradeAccount() string {
	return m.p.StringVLS(84)
}

// SubAccountIdentifier
func (m TradeOrder) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(88)
}

// InternalOrderIDModifierForService
func (m TradeOrder) InternalOrderIDModifierForService() int32 {
	return m.p.Int32LE(92)
}

// FIXClientOrderID
func (m TradeOrder) FIXClientOrderID() string {
	return m.p.StringVLS(96)
}

// SequenceNumberBasedClientOrderID
func (m TradeOrder) SequenceNumberBasedClientOrderID() uint32 {
	return m.p.Uint32LE(100)
}

// ClientOrderIDForDTCServer
func (m TradeOrder) ClientOrderIDForDTCServer() string {
	return m.p.StringVLS(104)
}

// PreviousClientOrderIDForDTCServer
func (m TradeOrder) PreviousClientOrderIDForDTCServer() string {
	return m.p.StringVLS(108)
}

// ExchangeOrderID
func (m TradeOrder) ExchangeOrderID() string {
	return m.p.StringVLS(112)
}

// OriginatingClientUsername
func (m TradeOrder) OriginatingClientUsername() string {
	return m.p.StringVLS(116)
}

// EntryDateTime
func (m TradeOrder) EntryDateTime() int64 {
	return m.p.Int64LE(120)
}

// LastActionDateTime
func (m TradeOrder) LastActionDateTime() int64 {
	return m.p.Int64LE(128)
}

// ServiceUpdateDateTimeUTC
func (m TradeOrder) ServiceUpdateDateTimeUTC() int64 {
	return m.p.Int64LE(136)
}

// OrderEntryTimeForService
func (m TradeOrder) OrderEntryTimeForService() uint32 {
	return m.p.Uint32LE(144)
}

// LastModifyTimeForService
func (m TradeOrder) LastModifyTimeForService() uint32 {
	return m.p.Uint32LE(148)
}

// GoodTillDateTime
func (m TradeOrder) GoodTillDateTime() int64 {
	return m.p.Int64LE(152)
}

// TimeInForce
func (m TradeOrder) TimeInForce() int32 {
	return m.p.Int32LE(160)
}

// OpenClose
func (m TradeOrder) OpenClose() uint16 {
	return m.p.Uint16LE(164)
}

// TrailStopOffset1
func (m TradeOrder) TrailStopOffset1() float64 {
	return m.p.Float64LE(166)
}

// TrailStopStep
func (m TradeOrder) TrailStopStep() float64 {
	return m.p.Float64LE(174)
}

// TrailTriggerPrice
func (m TradeOrder) TrailTriggerPrice() float64 {
	return m.p.Float64LE(182)
}

// TrailingStopTriggerOffset
func (m TradeOrder) TrailingStopTriggerOffset() float64 {
	return m.p.Float64LE(190)
}

// TrailTriggerHit
func (m TradeOrder) TrailTriggerHit() uint8 {
	return m.p.Uint8(198)
}

// TrailToBreakEvenStopOffset
func (m TradeOrder) TrailToBreakEvenStopOffset() float64 {
	return m.p.Float64LE(199)
}

// MaximumChaseAmountAsPrice
func (m TradeOrder) MaximumChaseAmountAsPrice() float64 {
	return m.p.Float64LE(207)
}

// InitialChaseOrderPrice1
func (m TradeOrder) InitialChaseOrderPrice1() float64 {
	return m.p.Float64LE(215)
}

// InitialLastTradePriceForChaseOrders
func (m TradeOrder) InitialLastTradePriceForChaseOrders() float64 {
	return m.p.Float64LE(223)
}

// TrailingStopTriggerOCOGroupNumber
func (m TradeOrder) TrailingStopTriggerOCOGroupNumber() int32 {
	return m.p.Int32LE(231)
}

// LastModifyPrice1
func (m TradeOrder) LastModifyPrice1() float64 {
	return m.p.Float64LE(235)
}

// LastModifyQuantity
func (m TradeOrder) LastModifyQuantity() float64 {
	return m.p.Float64LE(243)
}

// CumulativeOrderQuantityFromParentFills
func (m TradeOrder) CumulativeOrderQuantityFromParentFills() float64 {
	return m.p.Float64LE(251)
}

// PriorFilledQuantity
func (m TradeOrder) PriorFilledQuantity() float64 {
	return m.p.Float64LE(259)
}

// TickSize
func (m TradeOrder) TickSize() float32 {
	return m.p.Float32LE(267)
}

// ValueFormat
func (m TradeOrder) ValueFormat() int32 {
	return m.p.Int32LE(271)
}

// PriceMultiplier
func (m TradeOrder) PriceMultiplier() float32 {
	return m.p.Float32LE(275)
}

// ParentInternalOrderID
func (m TradeOrder) ParentInternalOrderID() uint64 {
	return m.p.Uint64LE(279)
}

// TargetChildInternalOrderID
func (m TradeOrder) TargetChildInternalOrderID() uint64 {
	return m.p.Uint64LE(287)
}

// StopChildInternalOrderID
func (m TradeOrder) StopChildInternalOrderID() uint64 {
	return m.p.Uint64LE(295)
}

// AttachedOrderPriceOffset1
func (m TradeOrder) AttachedOrderPriceOffset1() float64 {
	return m.p.Float64LE(303)
}

// LinkInternalOrderID
func (m TradeOrder) LinkInternalOrderID() uint64 {
	return m.p.Uint64LE(311)
}

// OCOGroupInternalOrderID
func (m TradeOrder) OCOGroupInternalOrderID() uint64 {
	return m.p.Uint64LE(319)
}

// OCOSiblingInternalOrderID
func (m TradeOrder) OCOSiblingInternalOrderID() uint64 {
	return m.p.Uint64LE(327)
}

// DisableChildAndSiblingRelatedActions
func (m TradeOrder) DisableChildAndSiblingRelatedActions() uint8 {
	return m.p.Uint8(335)
}

// OCOManagedByService
func (m TradeOrder) OCOManagedByService() uint8 {
	return m.p.Uint8(336)
}

// BracketOrderServerManaged
func (m TradeOrder) BracketOrderServerManaged() uint8 {
	return m.p.Uint8(337)
}

// LastOrderActionSource
func (m TradeOrder) LastOrderActionSource() string {
	return m.p.StringVLS(338)
}

// StopLimitOrderStopPriceTriggered
func (m TradeOrder) StopLimitOrderStopPriceTriggered() uint8 {
	return m.p.Uint8(342)
}

// OCOFullSiblingCancelOnPartialFill
func (m TradeOrder) OCOFullSiblingCancelOnPartialFill() uint8 {
	return m.p.Uint8(343)
}

// ReverseOnCompleteFill
func (m TradeOrder) ReverseOnCompleteFill() uint8 {
	return m.p.Uint8(344)
}

// SupportScaleIn
func (m TradeOrder) SupportScaleIn() uint8 {
	return m.p.Uint8(345)
}

// SupportScaleOut
func (m TradeOrder) SupportScaleOut() uint8 {
	return m.p.Uint8(346)
}

// SourceChartNumber
func (m TradeOrder) SourceChartNumber() int32 {
	return m.p.Int32LE(347)
}

// SourceChartbookFileName
func (m TradeOrder) SourceChartbookFileName() string {
	return m.p.StringVLS(351)
}

// IsAutomatedOrder
func (m TradeOrder) IsAutomatedOrder() bool {
	return m.p.Bool(355)
}

// SimulatedOrder
func (m TradeOrder) SimulatedOrder() uint8 {
	return m.p.Uint8(356)
}

// IsChartReplaying
func (m TradeOrder) IsChartReplaying() bool {
	return m.p.Bool(357)
}

// AttachedOrderOCOGroupNumber
func (m TradeOrder) AttachedOrderOCOGroupNumber() int32 {
	return m.p.Int32LE(358)
}

// LastFillExecutionServiceID
func (m TradeOrder) LastFillExecutionServiceID() string {
	return m.p.StringVLS(362)
}

// FillCount
func (m TradeOrder) FillCount() int32 {
	return m.p.Int32LE(366)
}

// LastFillQuantity
func (m TradeOrder) LastFillQuantity() float64 {
	return m.p.Float64LE(370)
}

// LastFillPrice
func (m TradeOrder) LastFillPrice() float64 {
	return m.p.Float64LE(378)
}

// LastFillDateTimeUTC
func (m TradeOrder) LastFillDateTimeUTC() int64 {
	return m.p.Int64LE(386)
}

// RejectedStopOCOSiblingInternalOrderID
func (m TradeOrder) RejectedStopOCOSiblingInternalOrderID() uint64 {
	return m.p.Uint64LE(394)
}

// RejectedStopReplacementMarketOrderQuantity
func (m TradeOrder) RejectedStopReplacementMarketOrderQuantity() float64 {
	return m.p.Float64LE(402)
}

// EvaluatingForFill
func (m TradeOrder) EvaluatingForFill() uint8 {
	return m.p.Uint8(410)
}

// LastProcessedTimeSalesRecordSequenceForPrices
func (m TradeOrder) LastProcessedTimeSalesRecordSequenceForPrices() uint32 {
	return m.p.Uint32LE(411)
}

// IsMarketDataManagementOfOrderEnabled
func (m TradeOrder) IsMarketDataManagementOfOrderEnabled() bool {
	return m.p.Bool(415)
}

// TextTag
func (m TradeOrder) TextTag() string {
	return m.p.StringVLS(416)
}

// TimedOutOrderRequestedStatusDateTime
func (m TradeOrder) TimedOutOrderRequestedStatusDateTime() int64 {
	return m.p.Int64LE(420)
}

// RequestedStatusForTimedOutOrder
func (m TradeOrder) RequestedStatusForTimedOutOrder() uint8 {
	return m.p.Uint8(428)
}

// SendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled
func (m TradeOrder) SendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled() uint8 {
	return m.p.Uint8(429)
}

// QuantityToIncreaseFromParentFill
func (m TradeOrder) QuantityToIncreaseFromParentFill() float64 {
	return m.p.Float64LE(430)
}

// MoveToBreakevenStopReferencePrice
func (m TradeOrder) MoveToBreakevenStopReferencePrice() float64 {
	return m.p.Float64LE(438)
}

// QuantityTriggeredStop_QuantityForTrigger
func (m TradeOrder) QuantityTriggeredStop_QuantityForTrigger() float64 {
	return m.p.Float64LE(446)
}

// AccumulatedTradeVolumeForTriggeredStop
func (m TradeOrder) AccumulatedTradeVolumeForTriggeredStop() float64 {
	return m.p.Float64LE(454)
}

// BidAskQuantityStopInitialTriggerMet
func (m TradeOrder) BidAskQuantityStopInitialTriggerMet() uint8 {
	return m.p.Uint8(462)
}

// NeedToOverrideLock
func (m TradeOrder) NeedToOverrideLock() uint8 {
	return m.p.Uint8(463)
}

// CurrentMarketPrice
func (m TradeOrder) CurrentMarketPrice() float64 {
	return m.p.Float64LE(464)
}

// CurrentMarketDateTime
func (m TradeOrder) CurrentMarketDateTime() int64 {
	return m.p.Int64LE(472)
}

// SupportOrderFillBilling
func (m TradeOrder) SupportOrderFillBilling() uint8 {
	return m.p.Uint8(480)
}

// IsBillable
func (m TradeOrder) IsBillable() bool {
	return m.p.Bool(481)
}

// QuantityForBilling
func (m TradeOrder) QuantityForBilling() int32 {
	return m.p.Int32LE(482)
}

// NumberOfFailedOrderModifications
func (m TradeOrder) NumberOfFailedOrderModifications() uint32 {
	return m.p.Uint32LE(486)
}

// DTCServerIndex
func (m TradeOrder) DTCServerIndex() int32 {
	return m.p.Int32LE(490)
}

// ClearingFirmID
func (m TradeOrder) ClearingFirmID() string {
	return m.p.StringVLS(494)
}

// SenderSubID
func (m TradeOrder) SenderSubID() string {
	return m.p.StringVLS(498)
}

// SenderLocationId
func (m TradeOrder) SenderLocationId() string {
	return m.p.StringVLS(502)
}

// SelfMatchPreventionID
func (m TradeOrder) SelfMatchPreventionID() string {
	return m.p.StringVLS(506)
}

// CTICode
func (m TradeOrder) CTICode() int32 {
	return m.p.Int32LE(510)
}

// ObtainOrderActionDateTimeFromLastTradeTimeInChart
func (m TradeOrder) ObtainOrderActionDateTimeFromLastTradeTimeInChart() uint8 {
	return m.p.Uint8(514)
}

// MaximumShowQuantity
func (m TradeOrder) MaximumShowQuantity() float64 {
	return m.p.Float64LE(515)
}

// OrderSubmitted
func (m TradeOrder) OrderSubmitted() uint8 {
	return m.p.Uint8(523)
}

// IsSnapshot
func (m TradeOrder) IsSnapshot() bool {
	return m.p.Bool(524)
}

// IsFirstMessageInBatch
func (m TradeOrder) IsFirstMessageInBatch() bool {
	return m.p.Bool(525)
}

// IsLastMessageInBatch
func (m TradeOrder) IsLastMessageInBatch() bool {
	return m.p.Bool(526)
}

// ExternalLastActionDateTimeUTC
func (m TradeOrder) ExternalLastActionDateTimeUTC() int64 {
	return m.p.Int64LE(527)
}

// SetIsOrderDeleted
func (m *TradeOrder) SetIsOrderDeleted(value bool) *TradeOrder {
	m.p.SetBool(6, value)
	return m
}

// SetInternalOrderID
func (m *TradeOrder) SetInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(7, value)
	return m
}

// SetOrderStatusCode
func (m *TradeOrder) SetOrderStatusCode(value uint16) *TradeOrder {
	m.p.SetUint16LE(15, value)
	return m
}

// SetOrderStatusBeforePendingModify
func (m *TradeOrder) SetOrderStatusBeforePendingModify(value uint16) *TradeOrder {
	m.p.SetUint16LE(17, value)
	return m
}

// SetOrderStatusBeforePendingCancel
func (m *TradeOrder) SetOrderStatusBeforePendingCancel(value uint16) *TradeOrder {
	m.p.SetUint16LE(19, value)
	return m
}

// SetServiceOrderID
func (m *TradeOrder) SetServiceOrderID(value string) *TradeOrder {
	m.p.SetStringVLS(21, value)
	return m
}

// SetActualSymbol
func (m *TradeOrder) SetActualSymbol(value string) *TradeOrder {
	m.p.SetStringVLS(25, value)
	return m
}

// SetOrderType
func (m *TradeOrder) SetOrderType(value int32) *TradeOrder {
	m.p.SetInt32LE(29, value)
	return m
}

// SetBuySell
func (m *TradeOrder) SetBuySell(value uint16) *TradeOrder {
	m.p.SetUint16LE(33, value)
	return m
}

// SetPrice1
func (m *TradeOrder) SetPrice1(value float64) *TradeOrder {
	m.p.SetFloat64LE(35, value)
	return m
}

// SetPrice2
func (m *TradeOrder) SetPrice2(value float64) *TradeOrder {
	m.p.SetFloat64LE(43, value)
	return m
}

// SetOrderQuantity
func (m *TradeOrder) SetOrderQuantity(value float64) *TradeOrder {
	m.p.SetFloat64LE(51, value)
	return m
}

// SetFilledQuantity
func (m *TradeOrder) SetFilledQuantity(value float64) *TradeOrder {
	m.p.SetFloat64LE(59, value)
	return m
}

// SetAverageFillPrice
func (m *TradeOrder) SetAverageFillPrice(value float64) *TradeOrder {
	m.p.SetFloat64LE(67, value)
	return m
}

// SetRealtimeFillStatus
func (m *TradeOrder) SetRealtimeFillStatus(value int32) *TradeOrder {
	m.p.SetInt32LE(75, value)
	return m
}

// SetIsRestingOrderDuringFill
func (m *TradeOrder) SetIsRestingOrderDuringFill(value bool) *TradeOrder {
	m.p.SetBool(79, value)
	return m
}

// SetOrderRejectType
func (m *TradeOrder) SetOrderRejectType(value int32) *TradeOrder {
	m.p.SetInt32LE(80, value)
	return m
}

// SetTradeAccount
func (m *TradeOrder) SetTradeAccount(value string) *TradeOrder {
	m.p.SetStringVLS(84, value)
	return m
}

// SetSubAccountIdentifier
func (m *TradeOrder) SetSubAccountIdentifier(value uint32) *TradeOrder {
	m.p.SetUint32LE(88, value)
	return m
}

// SetInternalOrderIDModifierForService
func (m *TradeOrder) SetInternalOrderIDModifierForService(value int32) *TradeOrder {
	m.p.SetInt32LE(92, value)
	return m
}

// SetFIXClientOrderID
func (m *TradeOrder) SetFIXClientOrderID(value string) *TradeOrder {
	m.p.SetStringVLS(96, value)
	return m
}

// SetSequenceNumberBasedClientOrderID
func (m *TradeOrder) SetSequenceNumberBasedClientOrderID(value uint32) *TradeOrder {
	m.p.SetUint32LE(100, value)
	return m
}

// SetClientOrderIDForDTCServer
func (m *TradeOrder) SetClientOrderIDForDTCServer(value string) *TradeOrder {
	m.p.SetStringVLS(104, value)
	return m
}

// SetPreviousClientOrderIDForDTCServer
func (m *TradeOrder) SetPreviousClientOrderIDForDTCServer(value string) *TradeOrder {
	m.p.SetStringVLS(108, value)
	return m
}

// SetExchangeOrderID
func (m *TradeOrder) SetExchangeOrderID(value string) *TradeOrder {
	m.p.SetStringVLS(112, value)
	return m
}

// SetOriginatingClientUsername
func (m *TradeOrder) SetOriginatingClientUsername(value string) *TradeOrder {
	m.p.SetStringVLS(116, value)
	return m
}

// SetEntryDateTime
func (m *TradeOrder) SetEntryDateTime(value int64) *TradeOrder {
	m.p.SetInt64LE(120, value)
	return m
}

// SetLastActionDateTime
func (m *TradeOrder) SetLastActionDateTime(value int64) *TradeOrder {
	m.p.SetInt64LE(128, value)
	return m
}

// SetServiceUpdateDateTimeUTC
func (m *TradeOrder) SetServiceUpdateDateTimeUTC(value int64) *TradeOrder {
	m.p.SetInt64LE(136, value)
	return m
}

// SetOrderEntryTimeForService
func (m *TradeOrder) SetOrderEntryTimeForService(value uint32) *TradeOrder {
	m.p.SetUint32LE(144, value)
	return m
}

// SetLastModifyTimeForService
func (m *TradeOrder) SetLastModifyTimeForService(value uint32) *TradeOrder {
	m.p.SetUint32LE(148, value)
	return m
}

// SetGoodTillDateTime
func (m *TradeOrder) SetGoodTillDateTime(value int64) *TradeOrder {
	m.p.SetInt64LE(152, value)
	return m
}

// SetTimeInForce
func (m *TradeOrder) SetTimeInForce(value int32) *TradeOrder {
	m.p.SetInt32LE(160, value)
	return m
}

// SetOpenClose
func (m *TradeOrder) SetOpenClose(value uint16) *TradeOrder {
	m.p.SetUint16LE(164, value)
	return m
}

// SetTrailStopOffset1
func (m *TradeOrder) SetTrailStopOffset1(value float64) *TradeOrder {
	m.p.SetFloat64LE(166, value)
	return m
}

// SetTrailStopStep
func (m *TradeOrder) SetTrailStopStep(value float64) *TradeOrder {
	m.p.SetFloat64LE(174, value)
	return m
}

// SetTrailTriggerPrice
func (m *TradeOrder) SetTrailTriggerPrice(value float64) *TradeOrder {
	m.p.SetFloat64LE(182, value)
	return m
}

// SetTrailingStopTriggerOffset
func (m *TradeOrder) SetTrailingStopTriggerOffset(value float64) *TradeOrder {
	m.p.SetFloat64LE(190, value)
	return m
}

// SetTrailTriggerHit
func (m *TradeOrder) SetTrailTriggerHit(value uint8) *TradeOrder {
	m.p.SetUint8(198, value)
	return m
}

// SetTrailToBreakEvenStopOffset
func (m *TradeOrder) SetTrailToBreakEvenStopOffset(value float64) *TradeOrder {
	m.p.SetFloat64LE(199, value)
	return m
}

// SetMaximumChaseAmountAsPrice
func (m *TradeOrder) SetMaximumChaseAmountAsPrice(value float64) *TradeOrder {
	m.p.SetFloat64LE(207, value)
	return m
}

// SetInitialChaseOrderPrice1
func (m *TradeOrder) SetInitialChaseOrderPrice1(value float64) *TradeOrder {
	m.p.SetFloat64LE(215, value)
	return m
}

// SetInitialLastTradePriceForChaseOrders
func (m *TradeOrder) SetInitialLastTradePriceForChaseOrders(value float64) *TradeOrder {
	m.p.SetFloat64LE(223, value)
	return m
}

// SetTrailingStopTriggerOCOGroupNumber
func (m *TradeOrder) SetTrailingStopTriggerOCOGroupNumber(value int32) *TradeOrder {
	m.p.SetInt32LE(231, value)
	return m
}

// SetLastModifyPrice1
func (m *TradeOrder) SetLastModifyPrice1(value float64) *TradeOrder {
	m.p.SetFloat64LE(235, value)
	return m
}

// SetLastModifyQuantity
func (m *TradeOrder) SetLastModifyQuantity(value float64) *TradeOrder {
	m.p.SetFloat64LE(243, value)
	return m
}

// SetCumulativeOrderQuantityFromParentFills
func (m *TradeOrder) SetCumulativeOrderQuantityFromParentFills(value float64) *TradeOrder {
	m.p.SetFloat64LE(251, value)
	return m
}

// SetPriorFilledQuantity
func (m *TradeOrder) SetPriorFilledQuantity(value float64) *TradeOrder {
	m.p.SetFloat64LE(259, value)
	return m
}

// SetTickSize
func (m *TradeOrder) SetTickSize(value float32) *TradeOrder {
	m.p.SetFloat32LE(267, value)
	return m
}

// SetValueFormat
func (m *TradeOrder) SetValueFormat(value int32) *TradeOrder {
	m.p.SetInt32LE(271, value)
	return m
}

// SetPriceMultiplier
func (m *TradeOrder) SetPriceMultiplier(value float32) *TradeOrder {
	m.p.SetFloat32LE(275, value)
	return m
}

// SetParentInternalOrderID
func (m *TradeOrder) SetParentInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(279, value)
	return m
}

// SetTargetChildInternalOrderID
func (m *TradeOrder) SetTargetChildInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(287, value)
	return m
}

// SetStopChildInternalOrderID
func (m *TradeOrder) SetStopChildInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(295, value)
	return m
}

// SetAttachedOrderPriceOffset1
func (m *TradeOrder) SetAttachedOrderPriceOffset1(value float64) *TradeOrder {
	m.p.SetFloat64LE(303, value)
	return m
}

// SetLinkInternalOrderID
func (m *TradeOrder) SetLinkInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(311, value)
	return m
}

// SetOCOGroupInternalOrderID
func (m *TradeOrder) SetOCOGroupInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(319, value)
	return m
}

// SetOCOSiblingInternalOrderID
func (m *TradeOrder) SetOCOSiblingInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(327, value)
	return m
}

// SetDisableChildAndSiblingRelatedActions
func (m *TradeOrder) SetDisableChildAndSiblingRelatedActions(value uint8) *TradeOrder {
	m.p.SetUint8(335, value)
	return m
}

// SetOCOManagedByService
func (m *TradeOrder) SetOCOManagedByService(value uint8) *TradeOrder {
	m.p.SetUint8(336, value)
	return m
}

// SetBracketOrderServerManaged
func (m *TradeOrder) SetBracketOrderServerManaged(value uint8) *TradeOrder {
	m.p.SetUint8(337, value)
	return m
}

// SetLastOrderActionSource
func (m *TradeOrder) SetLastOrderActionSource(value string) *TradeOrder {
	m.p.SetStringVLS(338, value)
	return m
}

// SetStopLimitOrderStopPriceTriggered
func (m *TradeOrder) SetStopLimitOrderStopPriceTriggered(value uint8) *TradeOrder {
	m.p.SetUint8(342, value)
	return m
}

// SetOCOFullSiblingCancelOnPartialFill
func (m *TradeOrder) SetOCOFullSiblingCancelOnPartialFill(value uint8) *TradeOrder {
	m.p.SetUint8(343, value)
	return m
}

// SetReverseOnCompleteFill
func (m *TradeOrder) SetReverseOnCompleteFill(value uint8) *TradeOrder {
	m.p.SetUint8(344, value)
	return m
}

// SetSupportScaleIn
func (m *TradeOrder) SetSupportScaleIn(value uint8) *TradeOrder {
	m.p.SetUint8(345, value)
	return m
}

// SetSupportScaleOut
func (m *TradeOrder) SetSupportScaleOut(value uint8) *TradeOrder {
	m.p.SetUint8(346, value)
	return m
}

// SetSourceChartNumber
func (m *TradeOrder) SetSourceChartNumber(value int32) *TradeOrder {
	m.p.SetInt32LE(347, value)
	return m
}

// SetSourceChartbookFileName
func (m *TradeOrder) SetSourceChartbookFileName(value string) *TradeOrder {
	m.p.SetStringVLS(351, value)
	return m
}

// SetIsAutomatedOrder
func (m *TradeOrder) SetIsAutomatedOrder(value bool) *TradeOrder {
	m.p.SetBool(355, value)
	return m
}

// SetSimulatedOrder
func (m *TradeOrder) SetSimulatedOrder(value uint8) *TradeOrder {
	m.p.SetUint8(356, value)
	return m
}

// SetIsChartReplaying
func (m *TradeOrder) SetIsChartReplaying(value bool) *TradeOrder {
	m.p.SetBool(357, value)
	return m
}

// SetAttachedOrderOCOGroupNumber
func (m *TradeOrder) SetAttachedOrderOCOGroupNumber(value int32) *TradeOrder {
	m.p.SetInt32LE(358, value)
	return m
}

// SetLastFillExecutionServiceID
func (m *TradeOrder) SetLastFillExecutionServiceID(value string) *TradeOrder {
	m.p.SetStringVLS(362, value)
	return m
}

// SetFillCount
func (m *TradeOrder) SetFillCount(value int32) *TradeOrder {
	m.p.SetInt32LE(366, value)
	return m
}

// SetLastFillQuantity
func (m *TradeOrder) SetLastFillQuantity(value float64) *TradeOrder {
	m.p.SetFloat64LE(370, value)
	return m
}

// SetLastFillPrice
func (m *TradeOrder) SetLastFillPrice(value float64) *TradeOrder {
	m.p.SetFloat64LE(378, value)
	return m
}

// SetLastFillDateTimeUTC
func (m *TradeOrder) SetLastFillDateTimeUTC(value int64) *TradeOrder {
	m.p.SetInt64LE(386, value)
	return m
}

// SetRejectedStopOCOSiblingInternalOrderID
func (m *TradeOrder) SetRejectedStopOCOSiblingInternalOrderID(value uint64) *TradeOrder {
	m.p.SetUint64LE(394, value)
	return m
}

// SetRejectedStopReplacementMarketOrderQuantity
func (m *TradeOrder) SetRejectedStopReplacementMarketOrderQuantity(value float64) *TradeOrder {
	m.p.SetFloat64LE(402, value)
	return m
}

// SetEvaluatingForFill
func (m *TradeOrder) SetEvaluatingForFill(value uint8) *TradeOrder {
	m.p.SetUint8(410, value)
	return m
}

// SetLastProcessedTimeSalesRecordSequenceForPrices
func (m *TradeOrder) SetLastProcessedTimeSalesRecordSequenceForPrices(value uint32) *TradeOrder {
	m.p.SetUint32LE(411, value)
	return m
}

// SetIsMarketDataManagementOfOrderEnabled
func (m *TradeOrder) SetIsMarketDataManagementOfOrderEnabled(value bool) *TradeOrder {
	m.p.SetBool(415, value)
	return m
}

// SetTextTag
func (m *TradeOrder) SetTextTag(value string) *TradeOrder {
	m.p.SetStringVLS(416, value)
	return m
}

// SetTimedOutOrderRequestedStatusDateTime
func (m *TradeOrder) SetTimedOutOrderRequestedStatusDateTime(value int64) *TradeOrder {
	m.p.SetInt64LE(420, value)
	return m
}

// SetRequestedStatusForTimedOutOrder
func (m *TradeOrder) SetRequestedStatusForTimedOutOrder(value uint8) *TradeOrder {
	m.p.SetUint8(428, value)
	return m
}

// SetSendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled
func (m *TradeOrder) SetSendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled(value uint8) *TradeOrder {
	m.p.SetUint8(429, value)
	return m
}

// SetQuantityToIncreaseFromParentFill
func (m *TradeOrder) SetQuantityToIncreaseFromParentFill(value float64) *TradeOrder {
	m.p.SetFloat64LE(430, value)
	return m
}

// SetMoveToBreakevenStopReferencePrice
func (m *TradeOrder) SetMoveToBreakevenStopReferencePrice(value float64) *TradeOrder {
	m.p.SetFloat64LE(438, value)
	return m
}

// SetQuantityTriggeredStop_QuantityForTrigger
func (m *TradeOrder) SetQuantityTriggeredStop_QuantityForTrigger(value float64) *TradeOrder {
	m.p.SetFloat64LE(446, value)
	return m
}

// SetAccumulatedTradeVolumeForTriggeredStop
func (m *TradeOrder) SetAccumulatedTradeVolumeForTriggeredStop(value float64) *TradeOrder {
	m.p.SetFloat64LE(454, value)
	return m
}

// SetBidAskQuantityStopInitialTriggerMet
func (m *TradeOrder) SetBidAskQuantityStopInitialTriggerMet(value uint8) *TradeOrder {
	m.p.SetUint8(462, value)
	return m
}

// SetNeedToOverrideLock
func (m *TradeOrder) SetNeedToOverrideLock(value uint8) *TradeOrder {
	m.p.SetUint8(463, value)
	return m
}

// SetCurrentMarketPrice
func (m *TradeOrder) SetCurrentMarketPrice(value float64) *TradeOrder {
	m.p.SetFloat64LE(464, value)
	return m
}

// SetCurrentMarketDateTime
func (m *TradeOrder) SetCurrentMarketDateTime(value int64) *TradeOrder {
	m.p.SetInt64LE(472, value)
	return m
}

// SetSupportOrderFillBilling
func (m *TradeOrder) SetSupportOrderFillBilling(value uint8) *TradeOrder {
	m.p.SetUint8(480, value)
	return m
}

// SetIsBillable
func (m *TradeOrder) SetIsBillable(value bool) *TradeOrder {
	m.p.SetBool(481, value)
	return m
}

// SetQuantityForBilling
func (m *TradeOrder) SetQuantityForBilling(value int32) *TradeOrder {
	m.p.SetInt32LE(482, value)
	return m
}

// SetNumberOfFailedOrderModifications
func (m *TradeOrder) SetNumberOfFailedOrderModifications(value uint32) *TradeOrder {
	m.p.SetUint32LE(486, value)
	return m
}

// SetDTCServerIndex
func (m *TradeOrder) SetDTCServerIndex(value int32) *TradeOrder {
	m.p.SetInt32LE(490, value)
	return m
}

// SetClearingFirmID
func (m *TradeOrder) SetClearingFirmID(value string) *TradeOrder {
	m.p.SetStringVLS(494, value)
	return m
}

// SetSenderSubID
func (m *TradeOrder) SetSenderSubID(value string) *TradeOrder {
	m.p.SetStringVLS(498, value)
	return m
}

// SetSenderLocationId
func (m *TradeOrder) SetSenderLocationId(value string) *TradeOrder {
	m.p.SetStringVLS(502, value)
	return m
}

// SetSelfMatchPreventionID
func (m *TradeOrder) SetSelfMatchPreventionID(value string) *TradeOrder {
	m.p.SetStringVLS(506, value)
	return m
}

// SetCTICode
func (m *TradeOrder) SetCTICode(value int32) *TradeOrder {
	m.p.SetInt32LE(510, value)
	return m
}

// SetObtainOrderActionDateTimeFromLastTradeTimeInChart
func (m *TradeOrder) SetObtainOrderActionDateTimeFromLastTradeTimeInChart(value uint8) *TradeOrder {
	m.p.SetUint8(514, value)
	return m
}

// SetMaximumShowQuantity
func (m *TradeOrder) SetMaximumShowQuantity(value float64) *TradeOrder {
	m.p.SetFloat64LE(515, value)
	return m
}

// SetOrderSubmitted
func (m *TradeOrder) SetOrderSubmitted(value uint8) *TradeOrder {
	m.p.SetUint8(523, value)
	return m
}

// SetIsSnapshot
func (m *TradeOrder) SetIsSnapshot(value bool) *TradeOrder {
	m.p.SetBool(524, value)
	return m
}

// SetIsFirstMessageInBatch
func (m *TradeOrder) SetIsFirstMessageInBatch(value bool) *TradeOrder {
	m.p.SetBool(525, value)
	return m
}

// SetIsLastMessageInBatch
func (m *TradeOrder) SetIsLastMessageInBatch(value bool) *TradeOrder {
	m.p.SetBool(526, value)
	return m
}

// SetExternalLastActionDateTimeUTC
func (m *TradeOrder) SetExternalLastActionDateTimeUTC(value int64) *TradeOrder {
	m.p.SetInt64LE(527, value)
	return m
}

func (m TradeOrder) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradeOrder) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradeOrder) Copy(to TradeOrder) {
	to.SetIsOrderDeleted(m.IsOrderDeleted())
	to.SetInternalOrderID(m.InternalOrderID())
	to.SetOrderStatusCode(m.OrderStatusCode())
	to.SetOrderStatusBeforePendingModify(m.OrderStatusBeforePendingModify())
	to.SetOrderStatusBeforePendingCancel(m.OrderStatusBeforePendingCancel())
	to.SetServiceOrderID(m.ServiceOrderID())
	to.SetActualSymbol(m.ActualSymbol())
	to.SetOrderType(m.OrderType())
	to.SetBuySell(m.BuySell())
	to.SetPrice1(m.Price1())
	to.SetPrice2(m.Price2())
	to.SetOrderQuantity(m.OrderQuantity())
	to.SetFilledQuantity(m.FilledQuantity())
	to.SetAverageFillPrice(m.AverageFillPrice())
	to.SetRealtimeFillStatus(m.RealtimeFillStatus())
	to.SetIsRestingOrderDuringFill(m.IsRestingOrderDuringFill())
	to.SetOrderRejectType(m.OrderRejectType())
	to.SetTradeAccount(m.TradeAccount())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetInternalOrderIDModifierForService(m.InternalOrderIDModifierForService())
	to.SetFIXClientOrderID(m.FIXClientOrderID())
	to.SetSequenceNumberBasedClientOrderID(m.SequenceNumberBasedClientOrderID())
	to.SetClientOrderIDForDTCServer(m.ClientOrderIDForDTCServer())
	to.SetPreviousClientOrderIDForDTCServer(m.PreviousClientOrderIDForDTCServer())
	to.SetExchangeOrderID(m.ExchangeOrderID())
	to.SetOriginatingClientUsername(m.OriginatingClientUsername())
	to.SetEntryDateTime(m.EntryDateTime())
	to.SetLastActionDateTime(m.LastActionDateTime())
	to.SetServiceUpdateDateTimeUTC(m.ServiceUpdateDateTimeUTC())
	to.SetOrderEntryTimeForService(m.OrderEntryTimeForService())
	to.SetLastModifyTimeForService(m.LastModifyTimeForService())
	to.SetGoodTillDateTime(m.GoodTillDateTime())
	to.SetTimeInForce(m.TimeInForce())
	to.SetOpenClose(m.OpenClose())
	to.SetTrailStopOffset1(m.TrailStopOffset1())
	to.SetTrailStopStep(m.TrailStopStep())
	to.SetTrailTriggerPrice(m.TrailTriggerPrice())
	to.SetTrailingStopTriggerOffset(m.TrailingStopTriggerOffset())
	to.SetTrailTriggerHit(m.TrailTriggerHit())
	to.SetTrailToBreakEvenStopOffset(m.TrailToBreakEvenStopOffset())
	to.SetMaximumChaseAmountAsPrice(m.MaximumChaseAmountAsPrice())
	to.SetInitialChaseOrderPrice1(m.InitialChaseOrderPrice1())
	to.SetInitialLastTradePriceForChaseOrders(m.InitialLastTradePriceForChaseOrders())
	to.SetTrailingStopTriggerOCOGroupNumber(m.TrailingStopTriggerOCOGroupNumber())
	to.SetLastModifyPrice1(m.LastModifyPrice1())
	to.SetLastModifyQuantity(m.LastModifyQuantity())
	to.SetCumulativeOrderQuantityFromParentFills(m.CumulativeOrderQuantityFromParentFills())
	to.SetPriorFilledQuantity(m.PriorFilledQuantity())
	to.SetTickSize(m.TickSize())
	to.SetValueFormat(m.ValueFormat())
	to.SetPriceMultiplier(m.PriceMultiplier())
	to.SetParentInternalOrderID(m.ParentInternalOrderID())
	to.SetTargetChildInternalOrderID(m.TargetChildInternalOrderID())
	to.SetStopChildInternalOrderID(m.StopChildInternalOrderID())
	to.SetAttachedOrderPriceOffset1(m.AttachedOrderPriceOffset1())
	to.SetLinkInternalOrderID(m.LinkInternalOrderID())
	to.SetOCOGroupInternalOrderID(m.OCOGroupInternalOrderID())
	to.SetOCOSiblingInternalOrderID(m.OCOSiblingInternalOrderID())
	to.SetDisableChildAndSiblingRelatedActions(m.DisableChildAndSiblingRelatedActions())
	to.SetOCOManagedByService(m.OCOManagedByService())
	to.SetBracketOrderServerManaged(m.BracketOrderServerManaged())
	to.SetLastOrderActionSource(m.LastOrderActionSource())
	to.SetStopLimitOrderStopPriceTriggered(m.StopLimitOrderStopPriceTriggered())
	to.SetOCOFullSiblingCancelOnPartialFill(m.OCOFullSiblingCancelOnPartialFill())
	to.SetReverseOnCompleteFill(m.ReverseOnCompleteFill())
	to.SetSupportScaleIn(m.SupportScaleIn())
	to.SetSupportScaleOut(m.SupportScaleOut())
	to.SetSourceChartNumber(m.SourceChartNumber())
	to.SetSourceChartbookFileName(m.SourceChartbookFileName())
	to.SetIsAutomatedOrder(m.IsAutomatedOrder())
	to.SetSimulatedOrder(m.SimulatedOrder())
	to.SetIsChartReplaying(m.IsChartReplaying())
	to.SetAttachedOrderOCOGroupNumber(m.AttachedOrderOCOGroupNumber())
	to.SetLastFillExecutionServiceID(m.LastFillExecutionServiceID())
	to.SetFillCount(m.FillCount())
	to.SetLastFillQuantity(m.LastFillQuantity())
	to.SetLastFillPrice(m.LastFillPrice())
	to.SetLastFillDateTimeUTC(m.LastFillDateTimeUTC())
	to.SetRejectedStopOCOSiblingInternalOrderID(m.RejectedStopOCOSiblingInternalOrderID())
	to.SetRejectedStopReplacementMarketOrderQuantity(m.RejectedStopReplacementMarketOrderQuantity())
	to.SetEvaluatingForFill(m.EvaluatingForFill())
	to.SetLastProcessedTimeSalesRecordSequenceForPrices(m.LastProcessedTimeSalesRecordSequenceForPrices())
	to.SetIsMarketDataManagementOfOrderEnabled(m.IsMarketDataManagementOfOrderEnabled())
	to.SetTextTag(m.TextTag())
	to.SetTimedOutOrderRequestedStatusDateTime(m.TimedOutOrderRequestedStatusDateTime())
	to.SetRequestedStatusForTimedOutOrder(m.RequestedStatusForTimedOutOrder())
	to.SetSendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled(m.SendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled())
	to.SetQuantityToIncreaseFromParentFill(m.QuantityToIncreaseFromParentFill())
	to.SetMoveToBreakevenStopReferencePrice(m.MoveToBreakevenStopReferencePrice())
	to.SetQuantityTriggeredStop_QuantityForTrigger(m.QuantityTriggeredStop_QuantityForTrigger())
	to.SetAccumulatedTradeVolumeForTriggeredStop(m.AccumulatedTradeVolumeForTriggeredStop())
	to.SetBidAskQuantityStopInitialTriggerMet(m.BidAskQuantityStopInitialTriggerMet())
	to.SetNeedToOverrideLock(m.NeedToOverrideLock())
	to.SetCurrentMarketPrice(m.CurrentMarketPrice())
	to.SetCurrentMarketDateTime(m.CurrentMarketDateTime())
	to.SetSupportOrderFillBilling(m.SupportOrderFillBilling())
	to.SetIsBillable(m.IsBillable())
	to.SetQuantityForBilling(m.QuantityForBilling())
	to.SetNumberOfFailedOrderModifications(m.NumberOfFailedOrderModifications())
	to.SetDTCServerIndex(m.DTCServerIndex())
	to.SetClearingFirmID(m.ClearingFirmID())
	to.SetSenderSubID(m.SenderSubID())
	to.SetSenderLocationId(m.SenderLocationId())
	to.SetSelfMatchPreventionID(m.SelfMatchPreventionID())
	to.SetCTICode(m.CTICode())
	to.SetObtainOrderActionDateTimeFromLastTradeTimeInChart(m.ObtainOrderActionDateTimeFromLastTradeTimeInChart())
	to.SetMaximumShowQuantity(m.MaximumShowQuantity())
	to.SetOrderSubmitted(m.OrderSubmitted())
	to.SetIsSnapshot(m.IsSnapshot())
	to.SetIsFirstMessageInBatch(m.IsFirstMessageInBatch())
	to.SetIsLastMessageInBatch(m.IsLastMessageInBatch())
	to.SetExternalLastActionDateTimeUTC(m.ExternalLastActionDateTimeUTC())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradeOrder) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10110)
	w.BoolField("m_IsOrderDeleted", m.IsOrderDeleted())
	w.Uint64Field("m_InternalOrderID", m.InternalOrderID())
	w.Uint16Field("m_OrderStatusCode", m.OrderStatusCode())
	w.Uint16Field("m_OrderStatusBeforePendingModify", m.OrderStatusBeforePendingModify())
	w.Uint16Field("m_OrderStatusBeforePendingCancel", m.OrderStatusBeforePendingCancel())
	w.StringField("m_ServiceOrderID", m.ServiceOrderID())
	w.StringField("m_ActualSymbol", m.ActualSymbol())
	w.Int32Field("m_OrderType", m.OrderType())
	w.Uint16Field("m_BuySell", m.BuySell())
	w.Float64Field("m_Price1", m.Price1())
	w.Float64Field("m_Price2", m.Price2())
	w.Float64Field("m_OrderQuantity", m.OrderQuantity())
	w.Float64Field("m_FilledQuantity", m.FilledQuantity())
	w.Float64Field("m_AverageFillPrice", m.AverageFillPrice())
	w.Int32Field("m_RealtimeFillStatus", m.RealtimeFillStatus())
	w.BoolField("m_IsRestingOrderDuringFill", m.IsRestingOrderDuringFill())
	w.Int32Field("m_OrderRejectType", m.OrderRejectType())
	w.StringField("m_TradeAccount", m.TradeAccount())
	w.Uint32Field("m_SubAccountIdentifier", m.SubAccountIdentifier())
	w.Int32Field("m_InternalOrderIDModifierForService", m.InternalOrderIDModifierForService())
	w.StringField("m_FIXClientOrderID", m.FIXClientOrderID())
	w.Uint32Field("m_SequenceNumberBasedClientOrderID", m.SequenceNumberBasedClientOrderID())
	w.StringField("m_ClientOrderIDForDTCServer", m.ClientOrderIDForDTCServer())
	w.StringField("m_PreviousClientOrderIDForDTCServer", m.PreviousClientOrderIDForDTCServer())
	w.StringField("m_ExchangeOrderID", m.ExchangeOrderID())
	w.StringField("m_OriginatingClientUsername", m.OriginatingClientUsername())
	w.Int64Field("m_EntryDateTime", m.EntryDateTime())
	w.Int64Field("m_LastActionDateTime", m.LastActionDateTime())
	w.Int64Field("m_ServiceUpdateDateTimeUTC", m.ServiceUpdateDateTimeUTC())
	w.Uint32Field("m_OrderEntryTimeForService", m.OrderEntryTimeForService())
	w.Uint32Field("m_LastModifyTimeForService", m.LastModifyTimeForService())
	w.Int64Field("m_GoodTillDateTime", m.GoodTillDateTime())
	w.Int32Field("m_TimeInForce", m.TimeInForce())
	w.Uint16Field("m_OpenClose", m.OpenClose())
	w.Float64Field("m_TrailStopOffset1", m.TrailStopOffset1())
	w.Float64Field("m_TrailStopStep", m.TrailStopStep())
	w.Float64Field("m_TrailTriggerPrice", m.TrailTriggerPrice())
	w.Float64Field("m_TrailingStopTriggerOffset", m.TrailingStopTriggerOffset())
	w.Uint8Field("m_TrailTriggerHit", m.TrailTriggerHit())
	w.Float64Field("m_TrailToBreakEvenStopOffset", m.TrailToBreakEvenStopOffset())
	w.Float64Field("m_MaximumChaseAmountAsPrice", m.MaximumChaseAmountAsPrice())
	w.Float64Field("m_InitialChaseOrderPrice1", m.InitialChaseOrderPrice1())
	w.Float64Field("m_InitialLastTradePriceForChaseOrders", m.InitialLastTradePriceForChaseOrders())
	w.Int32Field("m_TrailingStopTriggerOCOGroupNumber", m.TrailingStopTriggerOCOGroupNumber())
	w.Float64Field("m_LastModifyPrice1", m.LastModifyPrice1())
	w.Float64Field("m_LastModifyQuantity", m.LastModifyQuantity())
	w.Float64Field("m_CumulativeOrderQuantityFromParentFills", m.CumulativeOrderQuantityFromParentFills())
	w.Float64Field("m_PriorFilledQuantity", m.PriorFilledQuantity())
	w.Float32Field("m_TickSize", m.TickSize())
	w.Int32Field("m_ValueFormat", m.ValueFormat())
	w.Float32Field("m_PriceMultiplier", m.PriceMultiplier())
	w.Uint64Field("m_ParentInternalOrderID", m.ParentInternalOrderID())
	w.Uint64Field("m_TargetChildInternalOrderID", m.TargetChildInternalOrderID())
	w.Uint64Field("m_StopChildInternalOrderID", m.StopChildInternalOrderID())
	w.Float64Field("m_AttachedOrderPriceOffset1", m.AttachedOrderPriceOffset1())
	w.Uint64Field("m_LinkInternalOrderID", m.LinkInternalOrderID())
	w.Uint64Field("m_OCOGroupInternalOrderID", m.OCOGroupInternalOrderID())
	w.Uint64Field("m_OCOSiblingInternalOrderID", m.OCOSiblingInternalOrderID())
	w.Uint8Field("m_DisableChildAndSiblingRelatedActions", m.DisableChildAndSiblingRelatedActions())
	w.Uint8Field("m_OCOManagedByService", m.OCOManagedByService())
	w.Uint8Field("m_BracketOrderServerManaged", m.BracketOrderServerManaged())
	w.StringField("m_LastOrderActionSource", m.LastOrderActionSource())
	w.Uint8Field("m_StopLimitOrderStopPriceTriggered", m.StopLimitOrderStopPriceTriggered())
	w.Uint8Field("m_OCOFullSiblingCancelOnPartialFill", m.OCOFullSiblingCancelOnPartialFill())
	w.Uint8Field("m_ReverseOnCompleteFill", m.ReverseOnCompleteFill())
	w.Uint8Field("m_SupportScaleIn", m.SupportScaleIn())
	w.Uint8Field("m_SupportScaleOut", m.SupportScaleOut())
	w.Int32Field("m_SourceChartNumber", m.SourceChartNumber())
	w.StringField("m_SourceChartbookFileName", m.SourceChartbookFileName())
	w.BoolField("m_IsAutomatedOrder", m.IsAutomatedOrder())
	w.Uint8Field("m_SimulatedOrder", m.SimulatedOrder())
	w.BoolField("m_IsChartReplaying", m.IsChartReplaying())
	w.Int32Field("m_AttachedOrderOCOGroupNumber", m.AttachedOrderOCOGroupNumber())
	w.StringField("m_LastFillExecutionServiceID", m.LastFillExecutionServiceID())
	w.Int32Field("m_FillCount", m.FillCount())
	w.Float64Field("m_LastFillQuantity", m.LastFillQuantity())
	w.Float64Field("m_LastFillPrice", m.LastFillPrice())
	w.Int64Field("m_LastFillDateTimeUTC", m.LastFillDateTimeUTC())
	w.Uint64Field("m_RejectedStopOCOSiblingInternalOrderID", m.RejectedStopOCOSiblingInternalOrderID())
	w.Float64Field("m_RejectedStopReplacementMarketOrderQuantity", m.RejectedStopReplacementMarketOrderQuantity())
	w.Uint8Field("m_EvaluatingForFill", m.EvaluatingForFill())
	w.Uint32Field("m_LastProcessedTimeSalesRecordSequenceForPrices", m.LastProcessedTimeSalesRecordSequenceForPrices())
	w.BoolField("m_IsMarketDataManagementOfOrderEnabled", m.IsMarketDataManagementOfOrderEnabled())
	w.StringField("m_TextTag", m.TextTag())
	w.Int64Field("m_TimedOutOrderRequestedStatusDateTime", m.TimedOutOrderRequestedStatusDateTime())
	w.Uint8Field("m_RequestedStatusForTimedOutOrder", m.RequestedStatusForTimedOutOrder())
	w.Uint8Field("m_SendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled", m.SendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled())
	w.Float64Field("m_QuantityToIncreaseFromParentFill", m.QuantityToIncreaseFromParentFill())
	w.Float64Field("m_MoveToBreakevenStopReferencePrice", m.MoveToBreakevenStopReferencePrice())
	w.Float64Field("m_QuantityTriggeredStop_QuantityForTrigger", m.QuantityTriggeredStop_QuantityForTrigger())
	w.Float64Field("m_AccumulatedTradeVolumeForTriggeredStop", m.AccumulatedTradeVolumeForTriggeredStop())
	w.Uint8Field("m_BidAskQuantityStopInitialTriggerMet", m.BidAskQuantityStopInitialTriggerMet())
	w.Uint8Field("m_NeedToOverrideLock", m.NeedToOverrideLock())
	w.Float64Field("m_CurrentMarketPrice", m.CurrentMarketPrice())
	w.Int64Field("m_CurrentMarketDateTime", m.CurrentMarketDateTime())
	w.Uint8Field("m_SupportOrderFillBilling", m.SupportOrderFillBilling())
	w.BoolField("m_IsBillable", m.IsBillable())
	w.Int32Field("m_QuantityForBilling", m.QuantityForBilling())
	w.Uint32Field("m_NumberOfFailedOrderModifications", m.NumberOfFailedOrderModifications())
	w.Int32Field("m_DTCServerIndex", m.DTCServerIndex())
	w.StringField("m_ClearingFirmID", m.ClearingFirmID())
	w.StringField("m_SenderSubID", m.SenderSubID())
	w.StringField("m_SenderLocationId", m.SenderLocationId())
	w.StringField("m_SelfMatchPreventionID", m.SelfMatchPreventionID())
	w.Int32Field("m_CTICode", m.CTICode())
	w.Uint8Field("m_ObtainOrderActionDateTimeFromLastTradeTimeInChart", m.ObtainOrderActionDateTimeFromLastTradeTimeInChart())
	w.Float64Field("m_MaximumShowQuantity", m.MaximumShowQuantity())
	w.Uint8Field("m_OrderSubmitted", m.OrderSubmitted())
	w.BoolField("m_IsSnapshot", m.IsSnapshot())
	w.BoolField("m_IsFirstMessageInBatch", m.IsFirstMessageInBatch())
	w.BoolField("m_IsLastMessageInBatch", m.IsLastMessageInBatch())
	w.Int64Field("m_ExternalLastActionDateTimeUTC", m.ExternalLastActionDateTimeUTC())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeOrder) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10110 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "m_IsOrderDeleted":
			m.SetIsOrderDeleted(r.Bool())
		case "m_InternalOrderID":
			m.SetInternalOrderID(r.Uint64())
		case "m_OrderStatusCode":
			m.SetOrderStatusCode(r.Uint16())
		case "m_OrderStatusBeforePendingModify":
			m.SetOrderStatusBeforePendingModify(r.Uint16())
		case "m_OrderStatusBeforePendingCancel":
			m.SetOrderStatusBeforePendingCancel(r.Uint16())
		case "m_ServiceOrderID":
			m.SetServiceOrderID(r.String())
		case "m_ActualSymbol":
			m.SetActualSymbol(r.String())
		case "m_OrderType":
			m.SetOrderType(r.Int32())
		case "m_BuySell":
			m.SetBuySell(r.Uint16())
		case "m_Price1":
			m.SetPrice1(r.Float64())
		case "m_Price2":
			m.SetPrice2(r.Float64())
		case "m_OrderQuantity":
			m.SetOrderQuantity(r.Float64())
		case "m_FilledQuantity":
			m.SetFilledQuantity(r.Float64())
		case "m_AverageFillPrice":
			m.SetAverageFillPrice(r.Float64())
		case "m_RealtimeFillStatus":
			m.SetRealtimeFillStatus(r.Int32())
		case "m_IsRestingOrderDuringFill":
			m.SetIsRestingOrderDuringFill(r.Bool())
		case "m_OrderRejectType":
			m.SetOrderRejectType(r.Int32())
		case "m_TradeAccount":
			m.SetTradeAccount(r.String())
		case "m_SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "m_InternalOrderIDModifierForService":
			m.SetInternalOrderIDModifierForService(r.Int32())
		case "m_FIXClientOrderID":
			m.SetFIXClientOrderID(r.String())
		case "m_SequenceNumberBasedClientOrderID":
			m.SetSequenceNumberBasedClientOrderID(r.Uint32())
		case "m_ClientOrderIDForDTCServer":
			m.SetClientOrderIDForDTCServer(r.String())
		case "m_PreviousClientOrderIDForDTCServer":
			m.SetPreviousClientOrderIDForDTCServer(r.String())
		case "m_ExchangeOrderID":
			m.SetExchangeOrderID(r.String())
		case "m_OriginatingClientUsername":
			m.SetOriginatingClientUsername(r.String())
		case "m_EntryDateTime":
			m.SetEntryDateTime(r.Int64())
		case "m_LastActionDateTime":
			m.SetLastActionDateTime(r.Int64())
		case "m_ServiceUpdateDateTimeUTC":
			m.SetServiceUpdateDateTimeUTC(r.Int64())
		case "m_OrderEntryTimeForService":
			m.SetOrderEntryTimeForService(r.Uint32())
		case "m_LastModifyTimeForService":
			m.SetLastModifyTimeForService(r.Uint32())
		case "m_GoodTillDateTime":
			m.SetGoodTillDateTime(r.Int64())
		case "m_TimeInForce":
			m.SetTimeInForce(r.Int32())
		case "m_OpenClose":
			m.SetOpenClose(r.Uint16())
		case "m_TrailStopOffset1":
			m.SetTrailStopOffset1(r.Float64())
		case "m_TrailStopStep":
			m.SetTrailStopStep(r.Float64())
		case "m_TrailTriggerPrice":
			m.SetTrailTriggerPrice(r.Float64())
		case "m_TrailingStopTriggerOffset":
			m.SetTrailingStopTriggerOffset(r.Float64())
		case "m_TrailTriggerHit":
			m.SetTrailTriggerHit(r.Uint8())
		case "m_TrailToBreakEvenStopOffset":
			m.SetTrailToBreakEvenStopOffset(r.Float64())
		case "m_MaximumChaseAmountAsPrice":
			m.SetMaximumChaseAmountAsPrice(r.Float64())
		case "m_InitialChaseOrderPrice1":
			m.SetInitialChaseOrderPrice1(r.Float64())
		case "m_InitialLastTradePriceForChaseOrders":
			m.SetInitialLastTradePriceForChaseOrders(r.Float64())
		case "m_TrailingStopTriggerOCOGroupNumber":
			m.SetTrailingStopTriggerOCOGroupNumber(r.Int32())
		case "m_LastModifyPrice1":
			m.SetLastModifyPrice1(r.Float64())
		case "m_LastModifyQuantity":
			m.SetLastModifyQuantity(r.Float64())
		case "m_CumulativeOrderQuantityFromParentFills":
			m.SetCumulativeOrderQuantityFromParentFills(r.Float64())
		case "m_PriorFilledQuantity":
			m.SetPriorFilledQuantity(r.Float64())
		case "m_TickSize":
			m.SetTickSize(r.Float32())
		case "m_ValueFormat":
			m.SetValueFormat(r.Int32())
		case "m_PriceMultiplier":
			m.SetPriceMultiplier(r.Float32())
		case "m_ParentInternalOrderID":
			m.SetParentInternalOrderID(r.Uint64())
		case "m_TargetChildInternalOrderID":
			m.SetTargetChildInternalOrderID(r.Uint64())
		case "m_StopChildInternalOrderID":
			m.SetStopChildInternalOrderID(r.Uint64())
		case "m_AttachedOrderPriceOffset1":
			m.SetAttachedOrderPriceOffset1(r.Float64())
		case "m_LinkInternalOrderID":
			m.SetLinkInternalOrderID(r.Uint64())
		case "m_OCOGroupInternalOrderID":
			m.SetOCOGroupInternalOrderID(r.Uint64())
		case "m_OCOSiblingInternalOrderID":
			m.SetOCOSiblingInternalOrderID(r.Uint64())
		case "m_DisableChildAndSiblingRelatedActions":
			m.SetDisableChildAndSiblingRelatedActions(r.Uint8())
		case "m_OCOManagedByService":
			m.SetOCOManagedByService(r.Uint8())
		case "m_BracketOrderServerManaged":
			m.SetBracketOrderServerManaged(r.Uint8())
		case "m_LastOrderActionSource":
			m.SetLastOrderActionSource(r.String())
		case "m_StopLimitOrderStopPriceTriggered":
			m.SetStopLimitOrderStopPriceTriggered(r.Uint8())
		case "m_OCOFullSiblingCancelOnPartialFill":
			m.SetOCOFullSiblingCancelOnPartialFill(r.Uint8())
		case "m_ReverseOnCompleteFill":
			m.SetReverseOnCompleteFill(r.Uint8())
		case "m_SupportScaleIn":
			m.SetSupportScaleIn(r.Uint8())
		case "m_SupportScaleOut":
			m.SetSupportScaleOut(r.Uint8())
		case "m_SourceChartNumber":
			m.SetSourceChartNumber(r.Int32())
		case "m_SourceChartbookFileName":
			m.SetSourceChartbookFileName(r.String())
		case "m_IsAutomatedOrder":
			m.SetIsAutomatedOrder(r.Bool())
		case "m_SimulatedOrder":
			m.SetSimulatedOrder(r.Uint8())
		case "m_IsChartReplaying":
			m.SetIsChartReplaying(r.Bool())
		case "m_AttachedOrderOCOGroupNumber":
			m.SetAttachedOrderOCOGroupNumber(r.Int32())
		case "m_LastFillExecutionServiceID":
			m.SetLastFillExecutionServiceID(r.String())
		case "m_FillCount":
			m.SetFillCount(r.Int32())
		case "m_LastFillQuantity":
			m.SetLastFillQuantity(r.Float64())
		case "m_LastFillPrice":
			m.SetLastFillPrice(r.Float64())
		case "m_LastFillDateTimeUTC":
			m.SetLastFillDateTimeUTC(r.Int64())
		case "m_RejectedStopOCOSiblingInternalOrderID":
			m.SetRejectedStopOCOSiblingInternalOrderID(r.Uint64())
		case "m_RejectedStopReplacementMarketOrderQuantity":
			m.SetRejectedStopReplacementMarketOrderQuantity(r.Float64())
		case "m_EvaluatingForFill":
			m.SetEvaluatingForFill(r.Uint8())
		case "m_LastProcessedTimeSalesRecordSequenceForPrices":
			m.SetLastProcessedTimeSalesRecordSequenceForPrices(r.Uint32())
		case "m_IsMarketDataManagementOfOrderEnabled":
			m.SetIsMarketDataManagementOfOrderEnabled(r.Bool())
		case "m_TextTag":
			m.SetTextTag(r.String())
		case "m_TimedOutOrderRequestedStatusDateTime":
			m.SetTimedOutOrderRequestedStatusDateTime(r.Int64())
		case "m_RequestedStatusForTimedOutOrder":
			m.SetRequestedStatusForTimedOutOrder(r.Uint8())
		case "m_SendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled":
			m.SetSendFlattenMarketOrderWhenRelatedOrdersConfirmedCanceled(r.Uint8())
		case "m_QuantityToIncreaseFromParentFill":
			m.SetQuantityToIncreaseFromParentFill(r.Float64())
		case "m_MoveToBreakevenStopReferencePrice":
			m.SetMoveToBreakevenStopReferencePrice(r.Float64())
		case "m_QuantityTriggeredStop_QuantityForTrigger":
			m.SetQuantityTriggeredStop_QuantityForTrigger(r.Float64())
		case "m_AccumulatedTradeVolumeForTriggeredStop":
			m.SetAccumulatedTradeVolumeForTriggeredStop(r.Float64())
		case "m_BidAskQuantityStopInitialTriggerMet":
			m.SetBidAskQuantityStopInitialTriggerMet(r.Uint8())
		case "m_NeedToOverrideLock":
			m.SetNeedToOverrideLock(r.Uint8())
		case "m_CurrentMarketPrice":
			m.SetCurrentMarketPrice(r.Float64())
		case "m_CurrentMarketDateTime":
			m.SetCurrentMarketDateTime(r.Int64())
		case "m_SupportOrderFillBilling":
			m.SetSupportOrderFillBilling(r.Uint8())
		case "m_IsBillable":
			m.SetIsBillable(r.Bool())
		case "m_QuantityForBilling":
			m.SetQuantityForBilling(r.Int32())
		case "m_NumberOfFailedOrderModifications":
			m.SetNumberOfFailedOrderModifications(r.Uint32())
		case "m_DTCServerIndex":
			m.SetDTCServerIndex(r.Int32())
		case "m_ClearingFirmID":
			m.SetClearingFirmID(r.String())
		case "m_SenderSubID":
			m.SetSenderSubID(r.String())
		case "m_SenderLocationId":
			m.SetSenderLocationId(r.String())
		case "m_SelfMatchPreventionID":
			m.SetSelfMatchPreventionID(r.String())
		case "m_CTICode":
			m.SetCTICode(r.Int32())
		case "m_ObtainOrderActionDateTimeFromLastTradeTimeInChart":
			m.SetObtainOrderActionDateTimeFromLastTradeTimeInChart(r.Uint8())
		case "m_MaximumShowQuantity":
			m.SetMaximumShowQuantity(r.Float64())
		case "m_OrderSubmitted":
			m.SetOrderSubmitted(r.Uint8())
		case "m_IsSnapshot":
			m.SetIsSnapshot(r.Bool())
		case "m_IsFirstMessageInBatch":
			m.SetIsFirstMessageInBatch(r.Bool())
		case "m_IsLastMessageInBatch":
			m.SetIsLastMessageInBatch(r.Bool())
		case "m_ExternalLastActionDateTimeUTC":
			m.SetExternalLastActionDateTimeUTC(r.Int64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeOrder) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
