// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const WriteIntradayDataFileSessionValueSize = 44

//     Size       uint16                                     = WriteIntradayDataFileSessionValueSize  (44)
//     Type       uint16                                     = WRITE_INTRADAY_DATA_FILE_SESSION_VALUE  (10140)
//     SymbolID   uint32                                     = 0
//     ValueType  WriteIntradayDataFileSessionValueTypeEnum  = INTRADAY_DATA_FILE_SESSION_VALUE_UNSET  (0)
//     DateTime   DateTimeWithMicrosecondsInt                = 0
//     Date       DateTime                                   = 0
//     Price      float64                                    = 0.000000
//     Volume     float64                                    = 0.000000
var _WriteIntradayDataFileSessionValueDefault = []byte{44, 0, 156, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type WriteIntradayDataFileSessionValue struct {
	p message.Fixed
}

func NewWriteIntradayDataFileSessionValueFrom(b []byte) WriteIntradayDataFileSessionValue {
	return WriteIntradayDataFileSessionValue{p: message.NewFixed(b)}
}

func WrapWriteIntradayDataFileSessionValue(b []byte) WriteIntradayDataFileSessionValue {
	return WriteIntradayDataFileSessionValue{p: message.WrapFixed(b)}
}

func NewWriteIntradayDataFileSessionValue() *WriteIntradayDataFileSessionValue {
	return &WriteIntradayDataFileSessionValue{p: message.NewFixed(_WriteIntradayDataFileSessionValueDefault)}
}

func ParseWriteIntradayDataFileSessionValue(b []byte) (WriteIntradayDataFileSessionValue, error) {
	if len(b) < 4 {
		return WriteIntradayDataFileSessionValue{}, message.ErrShortBuffer
	}
	m := WrapWriteIntradayDataFileSessionValue(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return WriteIntradayDataFileSessionValue{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return WriteIntradayDataFileSessionValue{}, message.ErrBaseSizeOverflow
	}
	if size < 44 {
		clone := *NewWriteIntradayDataFileSessionValue()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _WriteIntradayDataFileSessionValueDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m WriteIntradayDataFileSessionValue) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m WriteIntradayDataFileSessionValue) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID
func (m WriteIntradayDataFileSessionValue) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// ValueType
func (m WriteIntradayDataFileSessionValue) ValueType() WriteIntradayDataFileSessionValueTypeEnum {
	return WriteIntradayDataFileSessionValueTypeEnum(m.p.Int32LE(8))
}

// DateTime
func (m WriteIntradayDataFileSessionValue) DateTime() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(12))
}

// Date
func (m WriteIntradayDataFileSessionValue) Date() DateTime {
	return DateTime(m.p.Int64LE(20))
}

// Price
func (m WriteIntradayDataFileSessionValue) Price() float64 {
	return m.p.Float64LE(28)
}

// Volume
func (m WriteIntradayDataFileSessionValue) Volume() float64 {
	return m.p.Float64LE(36)
}

// SetSymbolID
func (m *WriteIntradayDataFileSessionValue) SetSymbolID(value uint32) *WriteIntradayDataFileSessionValue {
	m.p.SetUint32LE(4, value)
	return m
}

// SetValueType
func (m *WriteIntradayDataFileSessionValue) SetValueType(value WriteIntradayDataFileSessionValueTypeEnum) *WriteIntradayDataFileSessionValue {
	m.p.SetInt32LE(8, int32(value))
	return m
}

// SetDateTime
func (m *WriteIntradayDataFileSessionValue) SetDateTime(value DateTimeWithMicrosecondsInt) *WriteIntradayDataFileSessionValue {
	m.p.SetInt64LE(12, int64(value))
	return m
}

// SetDate
func (m *WriteIntradayDataFileSessionValue) SetDate(value DateTime) *WriteIntradayDataFileSessionValue {
	m.p.SetInt64LE(20, int64(value))
	return m
}

// SetPrice
func (m *WriteIntradayDataFileSessionValue) SetPrice(value float64) *WriteIntradayDataFileSessionValue {
	m.p.SetFloat64LE(28, value)
	return m
}

// SetVolume
func (m *WriteIntradayDataFileSessionValue) SetVolume(value float64) *WriteIntradayDataFileSessionValue {
	m.p.SetFloat64LE(36, value)
	return m
}

func (m WriteIntradayDataFileSessionValue) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m WriteIntradayDataFileSessionValue) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m WriteIntradayDataFileSessionValue) Copy(to WriteIntradayDataFileSessionValue) {
	to.SetSymbolID(m.SymbolID())
	to.SetValueType(m.ValueType())
	to.SetDateTime(m.DateTime())
	to.SetDate(m.Date())
	to.SetPrice(m.Price())
	to.SetVolume(m.Volume())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m WriteIntradayDataFileSessionValue) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10140)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Int32Field("ValueType", int32(m.ValueType()))
	w.Int64Field("DateTime", int64(m.DateTime()))
	w.Int64Field("Date", int64(m.Date()))
	w.Float64Field("Price", m.Price())
	w.Float64Field("Volume", m.Volume())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *WriteIntradayDataFileSessionValue) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10140 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "ValueType":
			m.SetValueType(WriteIntradayDataFileSessionValueTypeEnum(r.Int32()))
		case "DateTime":
			m.SetDateTime(DateTimeWithMicrosecondsInt(r.Int64()))
		case "Date":
			m.SetDate(DateTime(r.Int64()))
		case "Price":
			m.SetPrice(r.Float64())
		case "Volume":
			m.SetVolume(r.Float64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *WriteIntradayDataFileSessionValue) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
