// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDepthSnapshotLevelSize = 56

//     Size                   uint16                    = MarketDepthSnapshotLevelSize  (56)
//     Type                   uint16                    = MARKET_DEPTH_SNAPSHOT_LEVEL  (122)
//     SymbolID               uint32                    = 0
//     Side                   AtBidOrAskEnum            = BID_ASK_UNSET  (0)
//     Price                  float64                   = 0.000000
//     Quantity               float64                   = 0.000000
//     Level                  uint16                    = 0
//     IsFirstMessageInBatch  bool                      = false
//     IsLastMessageInBatch   bool                      = false
//     DateTime               DateTimeWithMilliseconds  = 0.000000
//     NumOrders              uint32                    = 0
var _MarketDepthSnapshotLevelDefault = []byte{56, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDepthSnapshotLevel This is a message sent by Server to provide the initial market depth data
// entries to the Client after the Client subscribes to market data or separately
// subscribes to market depth data. The Client will need to separately subscribe
// to market depth data if the Server requires it.
//
// Each message provides a single entry of depth data. Therefore, the Server
// will send multiple MarketDepthSnapshotLevel messages in a series in order
// for the Client to build up its initial market depth book.
//
// The first message will be identified by the IsFirstMessageInBatch field
// being set to 1. The last message will be identified by the IsLastMessageInBatch
// field being set to 1.
//
// In the case where the market depth book is empty, the Server still needs
// to send through one single message with the SymbolID set, IsFirstMessageInBatch
// equal to 1 and IsLastMessageInBatch equal to 1. All other members will
// be at the default values. The Client will understand this as an empty
// book.
type MarketDepthSnapshotLevel struct {
	p message.Fixed
}

func NewMarketDepthSnapshotLevelFrom(b []byte) MarketDepthSnapshotLevel {
	return MarketDepthSnapshotLevel{p: message.NewFixed(b)}
}

func WrapMarketDepthSnapshotLevel(b []byte) MarketDepthSnapshotLevel {
	return MarketDepthSnapshotLevel{p: message.WrapFixed(b)}
}

func NewMarketDepthSnapshotLevel() *MarketDepthSnapshotLevel {
	return &MarketDepthSnapshotLevel{p: message.NewFixed(_MarketDepthSnapshotLevelDefault)}
}

func ParseMarketDepthSnapshotLevel(b []byte) (MarketDepthSnapshotLevel, error) {
	if len(b) < 4 {
		return MarketDepthSnapshotLevel{}, message.ErrShortBuffer
	}
	m := WrapMarketDepthSnapshotLevel(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDepthSnapshotLevel{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDepthSnapshotLevel{}, message.ErrBaseSizeOverflow
	}
	if size < 56 {
		clone := *NewMarketDepthSnapshotLevel()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDepthSnapshotLevelDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDepthSnapshotLevel) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDepthSnapshotLevel) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest/MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDepthSnapshotLevel) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Side Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
// = 2, if this is an ask side market depth entry.
func (m MarketDepthSnapshotLevel) Side() AtBidOrAskEnum {
	return AtBidOrAskEnum(m.p.Uint16LE(8))
}

// Price This is the price of the market depth entry.
func (m MarketDepthSnapshotLevel) Price() float64 {
	return m.p.Float64LE(16)
}

// Quantity This is the quantity of orders at the Price.
func (m MarketDepthSnapshotLevel) Quantity() float64 {
	return m.p.Float64LE(24)
}

// Level This indicates the level of the price within the market depth book. The
// minimum value is 1. There is no maximum value. A value of 1 is considered
// the best bid or ask data.
func (m MarketDepthSnapshotLevel) Level() uint16 {
	return m.p.Uint16LE(32)
}

// IsFirstMessageInBatch Set to 1 if this is the first message in the batch of messages.
func (m MarketDepthSnapshotLevel) IsFirstMessageInBatch() bool {
	return m.p.Bool(34)
}

// IsLastMessageInBatch Set to 1 if this is the last message in a batch of messages. If there
// is only a single message to be sent, in case the market depth book is
// empty, then IsFirstMessageInBatch will equal 1 and IsLastMessageInBatch
// will equal 1.
func (m MarketDepthSnapshotLevel) IsLastMessageInBatch() bool {
	return m.p.Bool(35)
}

// DateTime
func (m MarketDepthSnapshotLevel) DateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(40))
}

// NumOrders
func (m MarketDepthSnapshotLevel) NumOrders() uint32 {
	return m.p.Uint32LE(48)
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest/MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDepthSnapshotLevel) SetSymbolID(value uint32) *MarketDepthSnapshotLevel {
	m.p.SetUint32LE(4, value)
	return m
}

// SetSide Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
// = 2, if this is an ask side market depth entry.
func (m *MarketDepthSnapshotLevel) SetSide(value AtBidOrAskEnum) *MarketDepthSnapshotLevel {
	m.p.SetUint16LE(8, uint16(value))
	return m
}

// SetPrice This is the price of the market depth entry.
func (m *MarketDepthSnapshotLevel) SetPrice(value float64) *MarketDepthSnapshotLevel {
	m.p.SetFloat64LE(16, value)
	return m
}

// SetQuantity This is the quantity of orders at the Price.
func (m *MarketDepthSnapshotLevel) SetQuantity(value float64) *MarketDepthSnapshotLevel {
	m.p.SetFloat64LE(24, value)
	return m
}

// SetLevel This indicates the level of the price within the market depth book. The
// minimum value is 1. There is no maximum value. A value of 1 is considered
// the best bid or ask data.
func (m *MarketDepthSnapshotLevel) SetLevel(value uint16) *MarketDepthSnapshotLevel {
	m.p.SetUint16LE(32, value)
	return m
}

// SetIsFirstMessageInBatch Set to 1 if this is the first message in the batch of messages.
func (m *MarketDepthSnapshotLevel) SetIsFirstMessageInBatch(value bool) *MarketDepthSnapshotLevel {
	m.p.SetBool(34, value)
	return m
}

// SetIsLastMessageInBatch Set to 1 if this is the last message in a batch of messages. If there
// is only a single message to be sent, in case the market depth book is
// empty, then IsFirstMessageInBatch will equal 1 and IsLastMessageInBatch
// will equal 1.
func (m *MarketDepthSnapshotLevel) SetIsLastMessageInBatch(value bool) *MarketDepthSnapshotLevel {
	m.p.SetBool(35, value)
	return m
}

// SetDateTime
func (m *MarketDepthSnapshotLevel) SetDateTime(value DateTimeWithMilliseconds) *MarketDepthSnapshotLevel {
	m.p.SetFloat64LE(40, float64(value))
	return m
}

// SetNumOrders
func (m *MarketDepthSnapshotLevel) SetNumOrders(value uint32) *MarketDepthSnapshotLevel {
	m.p.SetUint32LE(48, value)
	return m
}

func (m MarketDepthSnapshotLevel) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarketDepthSnapshotLevel) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarketDepthSnapshotLevel) Copy(to MarketDepthSnapshotLevel) {
	to.SetSymbolID(m.SymbolID())
	to.SetSide(m.Side())
	to.SetPrice(m.Price())
	to.SetQuantity(m.Quantity())
	to.SetLevel(m.Level())
	to.SetIsFirstMessageInBatch(m.IsFirstMessageInBatch())
	to.SetIsLastMessageInBatch(m.IsLastMessageInBatch())
	to.SetDateTime(m.DateTime())
	to.SetNumOrders(m.NumOrders())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarketDepthSnapshotLevel) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 122)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Uint16Field("Side", uint16(m.Side()))
	w.Float64Field("Price", m.Price())
	w.Float64Field("Quantity", m.Quantity())
	w.Uint16Field("Level", m.Level())
	w.BoolField("IsFirstMessageInBatch", m.IsFirstMessageInBatch())
	w.BoolField("IsLastMessageInBatch", m.IsLastMessageInBatch())
	w.Float64Field("DateTime", float64(m.DateTime()))
	w.Uint32Field("NumOrders", m.NumOrders())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthSnapshotLevel) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 122 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Side":
			m.SetSide(AtBidOrAskEnum(r.Uint16()))
		case "Price":
			m.SetPrice(r.Float64())
		case "Quantity":
			m.SetQuantity(r.Float64())
		case "Level":
			m.SetLevel(r.Uint16())
		case "IsFirstMessageInBatch":
			m.SetIsFirstMessageInBatch(r.Bool())
		case "IsLastMessageInBatch":
			m.SetIsLastMessageInBatch(r.Bool())
		case "DateTime":
			m.SetDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "NumOrders":
			m.SetNumOrders(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthSnapshotLevel) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
