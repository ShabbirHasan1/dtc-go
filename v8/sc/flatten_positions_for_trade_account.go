// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const FlattenPositionsForTradeAccountSize = 19

//     Size              uint16  = FlattenPositionsForTradeAccountSize  (19)
//     Type              uint16  = FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT  (210)
//     BaseSize          uint16  = FlattenPositionsForTradeAccountSize  (19)
//     TradeAccount      string  = ""
//     ClientOrderID     string  = ""
//     FreeFormText      string  = ""
//     IsAutomatedOrder  bool    = false
var _FlattenPositionsForTradeAccountDefault = []byte{19, 0, 210, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type FlattenPositionsForTradeAccount struct {
	p message.VLS
}

func NewFlattenPositionsForTradeAccountFrom(b []byte) FlattenPositionsForTradeAccount {
	return FlattenPositionsForTradeAccount{p: message.NewVLS(b)}
}

func WrapFlattenPositionsForTradeAccount(b []byte) FlattenPositionsForTradeAccount {
	return FlattenPositionsForTradeAccount{p: message.WrapVLS(b)}
}

func NewFlattenPositionsForTradeAccount() *FlattenPositionsForTradeAccount {
	return &FlattenPositionsForTradeAccount{p: message.NewVLS(_FlattenPositionsForTradeAccountDefault)}
}

func ParseFlattenPositionsForTradeAccount(b []byte) (FlattenPositionsForTradeAccount, error) {
	if len(b) < 6 {
		return FlattenPositionsForTradeAccount{}, message.ErrShortBuffer
	}
	m := WrapFlattenPositionsForTradeAccount(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return FlattenPositionsForTradeAccount{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return FlattenPositionsForTradeAccount{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 19 {
		newSize := len(b) + (19 - baseSize)
		if newSize > message.MaxSize {
			return FlattenPositionsForTradeAccount{}, message.ErrOverflow
		}
		clone := FlattenPositionsForTradeAccount{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _FlattenPositionsForTradeAccountDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(19 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m FlattenPositionsForTradeAccount) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m FlattenPositionsForTradeAccount) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m FlattenPositionsForTradeAccount) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// TradeAccount
func (m FlattenPositionsForTradeAccount) TradeAccount() string {
	return m.p.StringVLS(6)
}

// ClientOrderID
func (m FlattenPositionsForTradeAccount) ClientOrderID() string {
	return m.p.StringVLS(10)
}

// FreeFormText
func (m FlattenPositionsForTradeAccount) FreeFormText() string {
	return m.p.StringVLS(14)
}

// IsAutomatedOrder
func (m FlattenPositionsForTradeAccount) IsAutomatedOrder() bool {
	return m.p.Bool(18)
}

// SetTradeAccount
func (m *FlattenPositionsForTradeAccount) SetTradeAccount(value string) *FlattenPositionsForTradeAccount {
	m.p.SetStringVLS(6, value)
	return m
}

// SetClientOrderID
func (m *FlattenPositionsForTradeAccount) SetClientOrderID(value string) *FlattenPositionsForTradeAccount {
	m.p.SetStringVLS(10, value)
	return m
}

// SetFreeFormText
func (m *FlattenPositionsForTradeAccount) SetFreeFormText(value string) *FlattenPositionsForTradeAccount {
	m.p.SetStringVLS(14, value)
	return m
}

// SetIsAutomatedOrder
func (m *FlattenPositionsForTradeAccount) SetIsAutomatedOrder(value bool) *FlattenPositionsForTradeAccount {
	m.p.SetBool(18, value)
	return m
}

func (m FlattenPositionsForTradeAccount) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m FlattenPositionsForTradeAccount) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m FlattenPositionsForTradeAccount) Copy(to FlattenPositionsForTradeAccount) {
	to.SetTradeAccount(m.TradeAccount())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetFreeFormText(m.FreeFormText())
	to.SetIsAutomatedOrder(m.IsAutomatedOrder())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m FlattenPositionsForTradeAccount) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 210)
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("ClientOrderID", m.ClientOrderID())
	w.StringField("FreeFormText", m.FreeFormText())
	w.BoolField("IsAutomatedOrder", m.IsAutomatedOrder())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *FlattenPositionsForTradeAccount) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 210 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "ClientOrderID":
			m.SetClientOrderID(r.String())
		case "FreeFormText":
			m.SetFreeFormText(r.String())
		case "IsAutomatedOrder":
			m.SetIsAutomatedOrder(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *FlattenPositionsForTradeAccount) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
