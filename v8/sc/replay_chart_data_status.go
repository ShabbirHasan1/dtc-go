// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const ReplayChartDataStatusSize = 22

const ReplayChartDataStatusFixedSize = 272

//     Size                  uint16                     = ReplayChartDataStatusSize  (22)
//     Type                  uint16                     = REPLAY_CHART_DATA_STATUS  (10106)
//     BaseSize              uint16                     = ReplayChartDataStatusSize  (22)
//     RequestID             uint32                     = 0
//     ErrorMessage          string                     = ""
//     Status                ReplayChartDataStatusEnum  = REPLAY_CHART_DATA_STATUS_UNSET  (0)
//     SubAccountIdentifier  uint32                     = 0
var _ReplayChartDataStatusDefault = []byte{22, 0, 122, 39, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                  uint16                     = ReplayChartDataStatusFixedSize  (272)
//     Type                  uint16                     = REPLAY_CHART_DATA_STATUS  (10106)
//     RequestID             uint32                     = 0
//     ErrorMessage          string[256]                = ""
//     Status                ReplayChartDataStatusEnum  = REPLAY_CHART_DATA_STATUS_UNSET  (0)
//     SubAccountIdentifier  uint32                     = 0
var _ReplayChartDataStatusFixedDefault = []byte{16, 1, 122, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type ReplayChartDataStatus struct {
	p message.VLS
}

type ReplayChartDataStatusFixed struct {
	p message.Fixed
}

func NewReplayChartDataStatusFrom(b []byte) ReplayChartDataStatus {
	return ReplayChartDataStatus{p: message.NewVLS(b)}
}

func WrapReplayChartDataStatus(b []byte) ReplayChartDataStatus {
	return ReplayChartDataStatus{p: message.WrapVLS(b)}
}

func NewReplayChartDataStatus() *ReplayChartDataStatus {
	return &ReplayChartDataStatus{p: message.NewVLS(_ReplayChartDataStatusDefault)}
}

func ParseReplayChartDataStatus(b []byte) (ReplayChartDataStatus, error) {
	if len(b) < 6 {
		return ReplayChartDataStatus{}, message.ErrShortBuffer
	}
	m := WrapReplayChartDataStatus(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ReplayChartDataStatus{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return ReplayChartDataStatus{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 22 {
		newSize := len(b) + (22 - baseSize)
		if newSize > message.MaxSize {
			return ReplayChartDataStatus{}, message.ErrOverflow
		}
		clone := ReplayChartDataStatus{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _ReplayChartDataStatusDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(22 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewReplayChartDataStatusFixedFrom(b []byte) ReplayChartDataStatusFixed {
	return ReplayChartDataStatusFixed{p: message.NewFixed(b)}
}

func WrapReplayChartDataStatusFixed(b []byte) ReplayChartDataStatusFixed {
	return ReplayChartDataStatusFixed{p: message.WrapFixed(b)}
}

func NewReplayChartDataStatusFixed() *ReplayChartDataStatusFixed {
	return &ReplayChartDataStatusFixed{p: message.NewFixed(_ReplayChartDataStatusFixedDefault)}
}

func ParseReplayChartDataStatusFixed(b []byte) (ReplayChartDataStatusFixed, error) {
	if len(b) < 4 {
		return ReplayChartDataStatusFixed{}, message.ErrShortBuffer
	}
	m := WrapReplayChartDataStatusFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ReplayChartDataStatusFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return ReplayChartDataStatusFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 272 {
		clone := *NewReplayChartDataStatusFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _ReplayChartDataStatusFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m ReplayChartDataStatus) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ReplayChartDataStatus) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m ReplayChartDataStatus) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m ReplayChartDataStatus) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// ErrorMessage
func (m ReplayChartDataStatus) ErrorMessage() string {
	return m.p.StringVLS(10)
}

// Status
func (m ReplayChartDataStatus) Status() ReplayChartDataStatusEnum {
	return ReplayChartDataStatusEnum(m.p.Int32LE(14))
}

// SubAccountIdentifier
func (m ReplayChartDataStatus) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(18)
}

// Size
func (m ReplayChartDataStatusFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ReplayChartDataStatusFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m ReplayChartDataStatusFixed) RequestID() uint32 {
	return m.p.Uint32LE(4)
}

// ErrorMessage
func (m ReplayChartDataStatusFixed) ErrorMessage() string {
	return m.p.StringFixed(8, 256)
}

// Status
func (m ReplayChartDataStatusFixed) Status() ReplayChartDataStatusEnum {
	return ReplayChartDataStatusEnum(m.p.Int32LE(264))
}

// SubAccountIdentifier
func (m ReplayChartDataStatusFixed) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(268)
}

// SetRequestID
func (m *ReplayChartDataStatus) SetRequestID(value uint32) *ReplayChartDataStatus {
	m.p.SetUint32LE(6, value)
	return m
}

// SetErrorMessage
func (m *ReplayChartDataStatus) SetErrorMessage(value string) *ReplayChartDataStatus {
	m.p.SetStringVLS(10, value)
	return m
}

// SetStatus
func (m *ReplayChartDataStatus) SetStatus(value ReplayChartDataStatusEnum) *ReplayChartDataStatus {
	m.p.SetInt32LE(14, int32(value))
	return m
}

// SetSubAccountIdentifier
func (m *ReplayChartDataStatus) SetSubAccountIdentifier(value uint32) *ReplayChartDataStatus {
	m.p.SetUint32LE(18, value)
	return m
}

// SetRequestID
func (m *ReplayChartDataStatusFixed) SetRequestID(value uint32) *ReplayChartDataStatusFixed {
	m.p.SetUint32LE(4, value)
	return m
}

// SetErrorMessage
func (m *ReplayChartDataStatusFixed) SetErrorMessage(value string) *ReplayChartDataStatusFixed {
	m.p.SetStringFixed(8, 256, value)
	return m
}

// SetStatus
func (m *ReplayChartDataStatusFixed) SetStatus(value ReplayChartDataStatusEnum) *ReplayChartDataStatusFixed {
	m.p.SetInt32LE(264, int32(value))
	return m
}

// SetSubAccountIdentifier
func (m *ReplayChartDataStatusFixed) SetSubAccountIdentifier(value uint32) *ReplayChartDataStatusFixed {
	m.p.SetUint32LE(268, value)
	return m
}

func (m ReplayChartDataStatus) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ReplayChartDataStatus) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m ReplayChartDataStatusFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ReplayChartDataStatusFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m ReplayChartDataStatus) Copy(to ReplayChartDataStatus) {
	to.SetRequestID(m.RequestID())
	to.SetErrorMessage(m.ErrorMessage())
	to.SetStatus(m.Status())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

// CopyTo
func (m ReplayChartDataStatus) CopyTo(to ReplayChartDataStatusFixed) {
	to.SetRequestID(m.RequestID())
	to.SetErrorMessage(m.ErrorMessage())
	to.SetStatus(m.Status())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

// Copy
func (m ReplayChartDataStatusFixed) Copy(to ReplayChartDataStatusFixed) {
	to.SetRequestID(m.RequestID())
	to.SetErrorMessage(m.ErrorMessage())
	to.SetStatus(m.Status())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

// CopyTo
func (m ReplayChartDataStatusFixed) CopyTo(to ReplayChartDataStatus) {
	to.SetRequestID(m.RequestID())
	to.SetErrorMessage(m.ErrorMessage())
	to.SetStatus(m.Status())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ReplayChartDataStatus) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10106)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("ErrorMessage", m.ErrorMessage())
	w.Int32Field("Status", int32(m.Status()))
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataStatus) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10106 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "ErrorMessage":
			m.SetErrorMessage(r.String())
		case "Status":
			m.SetStatus(ReplayChartDataStatusEnum(r.Int32()))
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataStatus) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ReplayChartDataStatusFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10106)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("ErrorMessage", m.ErrorMessage())
	w.Int32Field("Status", int32(m.Status()))
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataStatusFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10106 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "ErrorMessage":
			m.SetErrorMessage(r.String())
		case "Status":
			m.SetStatus(ReplayChartDataStatusEnum(r.Int32()))
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataStatusFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
