// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const CancelOrderSize = 18

const CancelOrderFixedSize = 100

//     Size           uint16  = CancelOrderSize  (18)
//     Type           uint16  = CANCEL_ORDER  (203)
//     BaseSize       uint16  = CancelOrderSize  (18)
//     ServerOrderID  string  = ""
//     ClientOrderID  string  = ""
//     TradeAccount   string  = ""
var _CancelOrderDefault = []byte{18, 0, 203, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size           uint16      = CancelOrderFixedSize  (100)
//     Type           uint16      = CANCEL_ORDER  (203)
//     ServerOrderID  string[32]  = ""
//     ClientOrderID  string[32]  = ""
//     TradeAccount   string[32]  = ""
var _CancelOrderFixedDefault = []byte{100, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// CancelOrder This is a message from the Client to the Server requesting a previously
// sent order to be canceled.
type CancelOrder struct {
	p message.VLS
}

// CancelOrderFixed This is a message from the Client to the Server requesting a previously
// sent order to be canceled.
type CancelOrderFixed struct {
	p message.Fixed
}

func NewCancelOrderFrom(b []byte) CancelOrder {
	return CancelOrder{p: message.NewVLS(b)}
}

func WrapCancelOrder(b []byte) CancelOrder {
	return CancelOrder{p: message.WrapVLS(b)}
}

func NewCancelOrder() *CancelOrder {
	return &CancelOrder{p: message.NewVLS(_CancelOrderDefault)}
}

func ParseCancelOrder(b []byte) (CancelOrder, error) {
	if len(b) < 6 {
		return CancelOrder{}, message.ErrShortBuffer
	}
	m := WrapCancelOrder(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return CancelOrder{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return CancelOrder{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 18 {
		newSize := len(b) + (18 - baseSize)
		if newSize > message.MaxSize {
			return CancelOrder{}, message.ErrOverflow
		}
		clone := CancelOrder{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _CancelOrderDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(18 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewCancelOrderFixedFrom(b []byte) CancelOrderFixed {
	return CancelOrderFixed{p: message.NewFixed(b)}
}

func WrapCancelOrderFixed(b []byte) CancelOrderFixed {
	return CancelOrderFixed{p: message.WrapFixed(b)}
}

func NewCancelOrderFixed() *CancelOrderFixed {
	return &CancelOrderFixed{p: message.NewFixed(_CancelOrderFixedDefault)}
}

func ParseCancelOrderFixed(b []byte) (CancelOrderFixed, error) {
	if len(b) < 4 {
		return CancelOrderFixed{}, message.ErrShortBuffer
	}
	m := WrapCancelOrderFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return CancelOrderFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return CancelOrderFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 100 {
		clone := *NewCancelOrderFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _CancelOrderFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m CancelOrder) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m CancelOrder) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m CancelOrder) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// ServerOrderID This is the order identifier for the order to cancel. The Client needs
// to set this to the ServerOrderID field received back in the most recent
// OrderUpdate message for the order. The only case in which a ServerOrderID
// would change is in the case of a successful order Cancel and Replace operation.
// would change is in the case of a successful order Cancel and Replace operation.
//
// The Server will rely upon this ServerOrderID and only this order identifier
// to identify the order to be canceled. Although the given ClientOrderID
// from the Client must not change.
func (m CancelOrder) ServerOrderID() string {
	return m.p.StringVLS(6)
}

// ClientOrderID This is the Client's own order identifier for the order.
//
// This must be the same throughout the life of the order. If the Server
// sees that this order identifier has changed in relation to the ServerOrderID
// , then it should reject this message with a OrderUpdate message with the
// OrderUpdateReason set to ORDER_CANCEL_REJECTED.
//
// In the case where the order cancellation cannot be performed because the
// ServerOrderID does not exist, the Server will send a OrderUpdate message
// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
// set to the given ClientOrderID in this message. ServerOrderID will be
// unset because an invalid server order identifier was given.
func (m CancelOrder) ClientOrderID() string {
	return m.p.StringVLS(10)
}

// TradeAccount
func (m CancelOrder) TradeAccount() string {
	return m.p.StringVLS(14)
}

// Size The standard message size field. Automatically set by constructor.
func (m CancelOrderFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m CancelOrderFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// ServerOrderID This is the order identifier for the order to cancel. The Client needs
// to set this to the ServerOrderID field received back in the most recent
// OrderUpdate message for the order. The only case in which a ServerOrderID
// would change is in the case of a successful order Cancel and Replace operation.
// would change is in the case of a successful order Cancel and Replace operation.
//
// The Server will rely upon this ServerOrderID and only this order identifier
// to identify the order to be canceled. Although the given ClientOrderID
// from the Client must not change.
func (m CancelOrderFixed) ServerOrderID() string {
	return m.p.StringFixed(4, 32)
}

// ClientOrderID This is the Client's own order identifier for the order.
//
// This must be the same throughout the life of the order. If the Server
// sees that this order identifier has changed in relation to the ServerOrderID
// , then it should reject this message with a OrderUpdate message with the
// OrderUpdateReason set to ORDER_CANCEL_REJECTED.
//
// In the case where the order cancellation cannot be performed because the
// ServerOrderID does not exist, the Server will send a OrderUpdate message
// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
// set to the given ClientOrderID in this message. ServerOrderID will be
// unset because an invalid server order identifier was given.
func (m CancelOrderFixed) ClientOrderID() string {
	return m.p.StringFixed(36, 32)
}

// TradeAccount
func (m CancelOrderFixed) TradeAccount() string {
	return m.p.StringFixed(68, 32)
}

// SetServerOrderID This is the order identifier for the order to cancel. The Client needs
// to set this to the ServerOrderID field received back in the most recent
// OrderUpdate message for the order. The only case in which a ServerOrderID
// would change is in the case of a successful order Cancel and Replace operation.
// would change is in the case of a successful order Cancel and Replace operation.
//
// The Server will rely upon this ServerOrderID and only this order identifier
// to identify the order to be canceled. Although the given ClientOrderID
// from the Client must not change.
func (m *CancelOrder) SetServerOrderID(value string) *CancelOrder {
	m.p.SetStringVLS(6, value)
	return m
}

// SetClientOrderID This is the Client's own order identifier for the order.
//
// This must be the same throughout the life of the order. If the Server
// sees that this order identifier has changed in relation to the ServerOrderID
// , then it should reject this message with a OrderUpdate message with the
// OrderUpdateReason set to ORDER_CANCEL_REJECTED.
//
// In the case where the order cancellation cannot be performed because the
// ServerOrderID does not exist, the Server will send a OrderUpdate message
// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
// set to the given ClientOrderID in this message. ServerOrderID will be
// unset because an invalid server order identifier was given.
func (m *CancelOrder) SetClientOrderID(value string) *CancelOrder {
	m.p.SetStringVLS(10, value)
	return m
}

// SetTradeAccount
func (m *CancelOrder) SetTradeAccount(value string) *CancelOrder {
	m.p.SetStringVLS(14, value)
	return m
}

// SetServerOrderID This is the order identifier for the order to cancel. The Client needs
// to set this to the ServerOrderID field received back in the most recent
// OrderUpdate message for the order. The only case in which a ServerOrderID
// would change is in the case of a successful order Cancel and Replace operation.
// would change is in the case of a successful order Cancel and Replace operation.
//
// The Server will rely upon this ServerOrderID and only this order identifier
// to identify the order to be canceled. Although the given ClientOrderID
// from the Client must not change.
func (m *CancelOrderFixed) SetServerOrderID(value string) *CancelOrderFixed {
	m.p.SetStringFixed(4, 32, value)
	return m
}

// SetClientOrderID This is the Client's own order identifier for the order.
//
// This must be the same throughout the life of the order. If the Server
// sees that this order identifier has changed in relation to the ServerOrderID
// , then it should reject this message with a OrderUpdate message with the
// OrderUpdateReason set to ORDER_CANCEL_REJECTED.
//
// In the case where the order cancellation cannot be performed because the
// ServerOrderID does not exist, the Server will send a OrderUpdate message
// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
// set to the given ClientOrderID in this message. ServerOrderID will be
// unset because an invalid server order identifier was given.
func (m *CancelOrderFixed) SetClientOrderID(value string) *CancelOrderFixed {
	m.p.SetStringFixed(36, 32, value)
	return m
}

// SetTradeAccount
func (m *CancelOrderFixed) SetTradeAccount(value string) *CancelOrderFixed {
	m.p.SetStringFixed(68, 32, value)
	return m
}

func (m CancelOrder) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m CancelOrder) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m CancelOrderFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m CancelOrderFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m CancelOrder) Copy(to CancelOrder) {
	to.SetServerOrderID(m.ServerOrderID())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m CancelOrder) CopyTo(to CancelOrderFixed) {
	to.SetServerOrderID(m.ServerOrderID())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetTradeAccount(m.TradeAccount())
}

// Copy
func (m CancelOrderFixed) Copy(to CancelOrderFixed) {
	to.SetServerOrderID(m.ServerOrderID())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m CancelOrderFixed) CopyTo(to CancelOrder) {
	to.SetServerOrderID(m.ServerOrderID())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetTradeAccount(m.TradeAccount())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m CancelOrder) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 203)
	w.StringField("ServerOrderID", m.ServerOrderID())
	w.StringField("ClientOrderID", m.ClientOrderID())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CancelOrder) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 203 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ServerOrderID":
			m.SetServerOrderID(r.String())
		case "ClientOrderID":
			m.SetClientOrderID(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CancelOrder) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m CancelOrderFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 203)
	w.StringField("ServerOrderID", m.ServerOrderID())
	w.StringField("ClientOrderID", m.ClientOrderID())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CancelOrderFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 203 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ServerOrderID":
			m.SetServerOrderID(r.String())
		case "ClientOrderID":
			m.SetClientOrderID(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CancelOrderFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
