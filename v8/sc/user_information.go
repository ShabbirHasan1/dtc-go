// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const UserInformationSize = 14

//     Size        uint16  = UserInformationSize  (14)
//     Type        uint16  = USER_INFORMATION  (10136)
//     BaseSize    uint16  = UserInformationSize  (14)
//     OperatorID  string  = ""
//     LocationID  string  = ""
var _UserInformationDefault = []byte{14, 0, 152, 39, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type UserInformation struct {
	p message.VLS
}

func NewUserInformationFrom(b []byte) UserInformation {
	return UserInformation{p: message.NewVLS(b)}
}

func WrapUserInformation(b []byte) UserInformation {
	return UserInformation{p: message.WrapVLS(b)}
}

func NewUserInformation() *UserInformation {
	return &UserInformation{p: message.NewVLS(_UserInformationDefault)}
}

func ParseUserInformation(b []byte) (UserInformation, error) {
	if len(b) < 6 {
		return UserInformation{}, message.ErrShortBuffer
	}
	m := WrapUserInformation(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return UserInformation{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return UserInformation{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 14 {
		newSize := len(b) + (14 - baseSize)
		if newSize > message.MaxSize {
			return UserInformation{}, message.ErrOverflow
		}
		clone := UserInformation{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _UserInformationDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(14 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m UserInformation) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m UserInformation) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m UserInformation) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// OperatorID
func (m UserInformation) OperatorID() string {
	return m.p.StringVLS(6)
}

// LocationID
func (m UserInformation) LocationID() string {
	return m.p.StringVLS(10)
}

// SetOperatorID
func (m *UserInformation) SetOperatorID(value string) *UserInformation {
	m.p.SetStringVLS(6, value)
	return m
}

// SetLocationID
func (m *UserInformation) SetLocationID(value string) *UserInformation {
	m.p.SetStringVLS(10, value)
	return m
}

func (m UserInformation) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m UserInformation) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m UserInformation) Copy(to UserInformation) {
	to.SetOperatorID(m.OperatorID())
	to.SetLocationID(m.LocationID())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m UserInformation) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10136)
	w.StringField("OperatorID", m.OperatorID())
	w.StringField("LocationID", m.LocationID())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *UserInformation) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10136 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "OperatorID":
			m.SetOperatorID(r.String())
		case "LocationID":
			m.SetLocationID(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *UserInformation) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
