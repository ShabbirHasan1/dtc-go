// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateBidAskNoTimeStampSize = 24

//     Size         uint16   = MarketDataUpdateBidAskNoTimeStampSize  (24)
//     Type         uint16   = MARKET_DATA_UPDATE_BID_ASK_NO_TIMESTAMP  (143)
//     SymbolID     uint32   = 0
//     BidPrice     float32  = math.MaxFloat32
//     BidQuantity  uint32   = 0
//     AskPrice     float32  = math.MaxFloat32
//     AskQuantity  uint32   = 0
var _MarketDataUpdateBidAskNoTimeStampDefault = []byte{24, 0, 143, 0, 0, 0, 0, 0, 255, 255, 127, 127, 0, 0, 0, 0, 255, 255, 127, 127, 0, 0, 0, 0}

// MarketDataUpdateBidAskNoTimeStamp This message is optional.
//
// Sent by the Server to the Client when there is an update to the Bid Ask
// prices and/or quantities. This message is identical to the MarketDataUpdateBidAsk
// message except it does not have a timestamp. It needs to be sent when
// there is no change with the timestamp for the Bid Ask update as compared
// to the prior update.
//
// When the Server sends this message to the Client, the Client needs to
// use the prior received Bid Ask update timestamp to know what the timestamp
// is for this message.
type MarketDataUpdateBidAskNoTimeStamp struct {
	p message.Fixed
}

func NewMarketDataUpdateBidAskNoTimeStampFrom(b []byte) MarketDataUpdateBidAskNoTimeStamp {
	return MarketDataUpdateBidAskNoTimeStamp{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateBidAskNoTimeStamp(b []byte) MarketDataUpdateBidAskNoTimeStamp {
	return MarketDataUpdateBidAskNoTimeStamp{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateBidAskNoTimeStamp() *MarketDataUpdateBidAskNoTimeStamp {
	return &MarketDataUpdateBidAskNoTimeStamp{p: message.NewFixed(_MarketDataUpdateBidAskNoTimeStampDefault)}
}

func ParseMarketDataUpdateBidAskNoTimeStamp(b []byte) (MarketDataUpdateBidAskNoTimeStamp, error) {
	if len(b) < 4 {
		return MarketDataUpdateBidAskNoTimeStamp{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateBidAskNoTimeStamp(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateBidAskNoTimeStamp{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateBidAskNoTimeStamp{}, message.ErrBaseSizeOverflow
	}
	if size < 24 {
		clone := *NewMarketDataUpdateBidAskNoTimeStamp()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateBidAskNoTimeStampDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateBidAskNoTimeStamp) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateBidAskNoTimeStamp) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateBidAskNoTimeStamp) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// BidPrice The current Bid price. Leave unset if there is no price available.
func (m MarketDataUpdateBidAskNoTimeStamp) BidPrice() float32 {
	return m.p.Float32LE(8)
}

// BidQuantity The current number of contracts/shares at the Bid price.
func (m MarketDataUpdateBidAskNoTimeStamp) BidQuantity() uint32 {
	return m.p.Uint32LE(12)
}

// AskPrice The current Ask or offer price. Leave unset if there is no price available.
// The current Ask or offer price. Leave unset if there is no price available.
func (m MarketDataUpdateBidAskNoTimeStamp) AskPrice() float32 {
	return m.p.Float32LE(16)
}

// AskQuantity The current number of contracts/shares at the Ask price.
func (m MarketDataUpdateBidAskNoTimeStamp) AskQuantity() uint32 {
	return m.p.Uint32LE(20)
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateBidAskNoTimeStamp) SetSymbolID(value uint32) *MarketDataUpdateBidAskNoTimeStamp {
	m.p.SetUint32LE(4, value)
	return m
}

// SetBidPrice The current Bid price. Leave unset if there is no price available.
func (m *MarketDataUpdateBidAskNoTimeStamp) SetBidPrice(value float32) *MarketDataUpdateBidAskNoTimeStamp {
	m.p.SetFloat32LE(8, value)
	return m
}

// SetBidQuantity The current number of contracts/shares at the Bid price.
func (m *MarketDataUpdateBidAskNoTimeStamp) SetBidQuantity(value uint32) *MarketDataUpdateBidAskNoTimeStamp {
	m.p.SetUint32LE(12, value)
	return m
}

// SetAskPrice The current Ask or offer price. Leave unset if there is no price available.
// The current Ask or offer price. Leave unset if there is no price available.
func (m *MarketDataUpdateBidAskNoTimeStamp) SetAskPrice(value float32) *MarketDataUpdateBidAskNoTimeStamp {
	m.p.SetFloat32LE(16, value)
	return m
}

// SetAskQuantity The current number of contracts/shares at the Ask price.
func (m *MarketDataUpdateBidAskNoTimeStamp) SetAskQuantity(value uint32) *MarketDataUpdateBidAskNoTimeStamp {
	m.p.SetUint32LE(20, value)
	return m
}

func (m MarketDataUpdateBidAskNoTimeStamp) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarketDataUpdateBidAskNoTimeStamp) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarketDataUpdateBidAskNoTimeStamp) Copy(to MarketDataUpdateBidAskNoTimeStamp) {
	to.SetSymbolID(m.SymbolID())
	to.SetBidPrice(m.BidPrice())
	to.SetBidQuantity(m.BidQuantity())
	to.SetAskPrice(m.AskPrice())
	to.SetAskQuantity(m.AskQuantity())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarketDataUpdateBidAskNoTimeStamp) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 143)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Float32Field("BidPrice", m.BidPrice())
	w.Uint32Field("BidQuantity", m.BidQuantity())
	w.Float32Field("AskPrice", m.AskPrice())
	w.Uint32Field("AskQuantity", m.AskQuantity())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateBidAskNoTimeStamp) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 143 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "BidPrice":
			m.SetBidPrice(r.Float32())
		case "BidQuantity":
			m.SetBidQuantity(r.Uint32())
		case "AskPrice":
			m.SetAskPrice(r.Float32())
		case "AskQuantity":
			m.SetAskQuantity(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateBidAskNoTimeStamp) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
