// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalAccountBalanceResponseSize = 56

const HistoricalAccountBalanceResponseFixedSize = 232

//     Size               uint16                    = HistoricalAccountBalanceResponseSize  (56)
//     Type               uint16                    = HISTORICAL_ACCOUNT_BALANCE_RESPONSE  (606)
//     BaseSize           uint16                    = HistoricalAccountBalanceResponseSize  (56)
//     RequestID          int32                     = 0
//     DateTime           DateTimeWithMilliseconds  = 0.000000
//     CashBalance        float64                   = 0.000000
//     AccountCurrency    string                    = ""
//     TradeAccount       string                    = ""
//     IsFinalResponse    bool                      = false
//     NoAccountBalances  uint8                     = 0
//     InfoText           string                    = ""
//     TransactionId      string                    = ""
var _HistoricalAccountBalanceResponseDefault = []byte{56, 0, 94, 2, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size               uint16                    = HistoricalAccountBalanceResponseFixedSize  (232)
//     Type               uint16                    = HISTORICAL_ACCOUNT_BALANCE_RESPONSE  (606)
//     RequestID          int32                     = 0
//     DateTime           DateTimeWithMilliseconds  = 0.000000
//     CashBalance        float64                   = 0.000000
//     AccountCurrency    string[8]                 = ""
//     TradeAccount       string[32]                = ""
//     IsFinalResponse    bool                      = false
//     NoAccountBalances  uint8                     = 0
//     InfoText           string[96]                = ""
//     TransactionId      string[64]                = ""
var _HistoricalAccountBalanceResponseFixedDefault = []byte{232, 0, 94, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type HistoricalAccountBalanceResponse struct {
	p message.VLS
}

type HistoricalAccountBalanceResponseFixed struct {
	p message.Fixed
}

func NewHistoricalAccountBalanceResponseFrom(b []byte) HistoricalAccountBalanceResponse {
	return HistoricalAccountBalanceResponse{p: message.NewVLS(b)}
}

func WrapHistoricalAccountBalanceResponse(b []byte) HistoricalAccountBalanceResponse {
	return HistoricalAccountBalanceResponse{p: message.WrapVLS(b)}
}

func NewHistoricalAccountBalanceResponse() *HistoricalAccountBalanceResponse {
	return &HistoricalAccountBalanceResponse{p: message.NewVLS(_HistoricalAccountBalanceResponseDefault)}
}

func ParseHistoricalAccountBalanceResponse(b []byte) (HistoricalAccountBalanceResponse, error) {
	if len(b) < 6 {
		return HistoricalAccountBalanceResponse{}, message.ErrShortBuffer
	}
	m := WrapHistoricalAccountBalanceResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalAccountBalanceResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalAccountBalanceResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 56 {
		newSize := len(b) + (56 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalAccountBalanceResponse{}, message.ErrOverflow
		}
		clone := HistoricalAccountBalanceResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalAccountBalanceResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(56 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(32)
			if offset > 0 {
				clone.p.SetUint16LE(32, offset+shift)
			}
			offset = clone.p.Uint16LE(36)
			if offset > 0 {
				clone.p.SetUint16LE(36, offset+shift)
			}
			offset = clone.p.Uint16LE(42)
			if offset > 0 {
				clone.p.SetUint16LE(42, offset+shift)
			}
			offset = clone.p.Uint16LE(46)
			if offset > 0 {
				clone.p.SetUint16LE(46, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalAccountBalanceResponseFixedFrom(b []byte) HistoricalAccountBalanceResponseFixed {
	return HistoricalAccountBalanceResponseFixed{p: message.NewFixed(b)}
}

func WrapHistoricalAccountBalanceResponseFixed(b []byte) HistoricalAccountBalanceResponseFixed {
	return HistoricalAccountBalanceResponseFixed{p: message.WrapFixed(b)}
}

func NewHistoricalAccountBalanceResponseFixed() *HistoricalAccountBalanceResponseFixed {
	return &HistoricalAccountBalanceResponseFixed{p: message.NewFixed(_HistoricalAccountBalanceResponseFixedDefault)}
}

func ParseHistoricalAccountBalanceResponseFixed(b []byte) (HistoricalAccountBalanceResponseFixed, error) {
	if len(b) < 4 {
		return HistoricalAccountBalanceResponseFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalAccountBalanceResponseFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalAccountBalanceResponseFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalAccountBalanceResponseFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 232 {
		clone := *NewHistoricalAccountBalanceResponseFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalAccountBalanceResponseFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m HistoricalAccountBalanceResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalAccountBalanceResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalAccountBalanceResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m HistoricalAccountBalanceResponse) RequestID() int32 {
	return m.p.Int32LE(8)
}

// DateTime
func (m HistoricalAccountBalanceResponse) DateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(16))
}

// CashBalance
func (m HistoricalAccountBalanceResponse) CashBalance() float64 {
	return m.p.Float64LE(24)
}

// AccountCurrency
func (m HistoricalAccountBalanceResponse) AccountCurrency() string {
	return m.p.StringVLS(32)
}

// TradeAccount
func (m HistoricalAccountBalanceResponse) TradeAccount() string {
	return m.p.StringVLS(36)
}

// IsFinalResponse
func (m HistoricalAccountBalanceResponse) IsFinalResponse() bool {
	return m.p.Bool(40)
}

// NoAccountBalances
func (m HistoricalAccountBalanceResponse) NoAccountBalances() uint8 {
	return m.p.Uint8(41)
}

// InfoText
func (m HistoricalAccountBalanceResponse) InfoText() string {
	return m.p.StringVLS(42)
}

// TransactionId
func (m HistoricalAccountBalanceResponse) TransactionId() string {
	return m.p.StringVLS(46)
}

// Size
func (m HistoricalAccountBalanceResponseFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalAccountBalanceResponseFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m HistoricalAccountBalanceResponseFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// DateTime
func (m HistoricalAccountBalanceResponseFixed) DateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(8))
}

// CashBalance
func (m HistoricalAccountBalanceResponseFixed) CashBalance() float64 {
	return m.p.Float64LE(16)
}

// AccountCurrency
func (m HistoricalAccountBalanceResponseFixed) AccountCurrency() string {
	return m.p.StringFixed(24, 8)
}

// TradeAccount
func (m HistoricalAccountBalanceResponseFixed) TradeAccount() string {
	return m.p.StringFixed(32, 32)
}

// IsFinalResponse
func (m HistoricalAccountBalanceResponseFixed) IsFinalResponse() bool {
	return m.p.Bool(64)
}

// NoAccountBalances
func (m HistoricalAccountBalanceResponseFixed) NoAccountBalances() uint8 {
	return m.p.Uint8(65)
}

// InfoText
func (m HistoricalAccountBalanceResponseFixed) InfoText() string {
	return m.p.StringFixed(66, 96)
}

// TransactionId
func (m HistoricalAccountBalanceResponseFixed) TransactionId() string {
	return m.p.StringFixed(162, 64)
}

// SetRequestID
func (m *HistoricalAccountBalanceResponse) SetRequestID(value int32) *HistoricalAccountBalanceResponse {
	m.p.SetInt32LE(8, value)
	return m
}

// SetDateTime
func (m *HistoricalAccountBalanceResponse) SetDateTime(value DateTimeWithMilliseconds) *HistoricalAccountBalanceResponse {
	m.p.SetFloat64LE(16, float64(value))
	return m
}

// SetCashBalance
func (m *HistoricalAccountBalanceResponse) SetCashBalance(value float64) *HistoricalAccountBalanceResponse {
	m.p.SetFloat64LE(24, value)
	return m
}

// SetAccountCurrency
func (m *HistoricalAccountBalanceResponse) SetAccountCurrency(value string) *HistoricalAccountBalanceResponse {
	m.p.SetStringVLS(32, value)
	return m
}

// SetTradeAccount
func (m *HistoricalAccountBalanceResponse) SetTradeAccount(value string) *HistoricalAccountBalanceResponse {
	m.p.SetStringVLS(36, value)
	return m
}

// SetIsFinalResponse
func (m *HistoricalAccountBalanceResponse) SetIsFinalResponse(value bool) *HistoricalAccountBalanceResponse {
	m.p.SetBool(40, value)
	return m
}

// SetNoAccountBalances
func (m *HistoricalAccountBalanceResponse) SetNoAccountBalances(value uint8) *HistoricalAccountBalanceResponse {
	m.p.SetUint8(41, value)
	return m
}

// SetInfoText
func (m *HistoricalAccountBalanceResponse) SetInfoText(value string) *HistoricalAccountBalanceResponse {
	m.p.SetStringVLS(42, value)
	return m
}

// SetTransactionId
func (m *HistoricalAccountBalanceResponse) SetTransactionId(value string) *HistoricalAccountBalanceResponse {
	m.p.SetStringVLS(46, value)
	return m
}

// SetRequestID
func (m *HistoricalAccountBalanceResponseFixed) SetRequestID(value int32) *HistoricalAccountBalanceResponseFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetDateTime
func (m *HistoricalAccountBalanceResponseFixed) SetDateTime(value DateTimeWithMilliseconds) *HistoricalAccountBalanceResponseFixed {
	m.p.SetFloat64LE(8, float64(value))
	return m
}

// SetCashBalance
func (m *HistoricalAccountBalanceResponseFixed) SetCashBalance(value float64) *HistoricalAccountBalanceResponseFixed {
	m.p.SetFloat64LE(16, value)
	return m
}

// SetAccountCurrency
func (m *HistoricalAccountBalanceResponseFixed) SetAccountCurrency(value string) *HistoricalAccountBalanceResponseFixed {
	m.p.SetStringFixed(24, 8, value)
	return m
}

// SetTradeAccount
func (m *HistoricalAccountBalanceResponseFixed) SetTradeAccount(value string) *HistoricalAccountBalanceResponseFixed {
	m.p.SetStringFixed(32, 32, value)
	return m
}

// SetIsFinalResponse
func (m *HistoricalAccountBalanceResponseFixed) SetIsFinalResponse(value bool) *HistoricalAccountBalanceResponseFixed {
	m.p.SetBool(64, value)
	return m
}

// SetNoAccountBalances
func (m *HistoricalAccountBalanceResponseFixed) SetNoAccountBalances(value uint8) *HistoricalAccountBalanceResponseFixed {
	m.p.SetUint8(65, value)
	return m
}

// SetInfoText
func (m *HistoricalAccountBalanceResponseFixed) SetInfoText(value string) *HistoricalAccountBalanceResponseFixed {
	m.p.SetStringFixed(66, 96, value)
	return m
}

// SetTransactionId
func (m *HistoricalAccountBalanceResponseFixed) SetTransactionId(value string) *HistoricalAccountBalanceResponseFixed {
	m.p.SetStringFixed(162, 64, value)
	return m
}

func (m HistoricalAccountBalanceResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalAccountBalanceResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m HistoricalAccountBalanceResponseFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalAccountBalanceResponseFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m HistoricalAccountBalanceResponse) Copy(to HistoricalAccountBalanceResponse) {
	to.SetRequestID(m.RequestID())
	to.SetDateTime(m.DateTime())
	to.SetCashBalance(m.CashBalance())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetIsFinalResponse(m.IsFinalResponse())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetInfoText(m.InfoText())
	to.SetTransactionId(m.TransactionId())
}

// CopyTo
func (m HistoricalAccountBalanceResponse) CopyTo(to HistoricalAccountBalanceResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetDateTime(m.DateTime())
	to.SetCashBalance(m.CashBalance())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetIsFinalResponse(m.IsFinalResponse())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetInfoText(m.InfoText())
	to.SetTransactionId(m.TransactionId())
}

// Copy
func (m HistoricalAccountBalanceResponseFixed) Copy(to HistoricalAccountBalanceResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetDateTime(m.DateTime())
	to.SetCashBalance(m.CashBalance())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetIsFinalResponse(m.IsFinalResponse())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetInfoText(m.InfoText())
	to.SetTransactionId(m.TransactionId())
}

// CopyTo
func (m HistoricalAccountBalanceResponseFixed) CopyTo(to HistoricalAccountBalanceResponse) {
	to.SetRequestID(m.RequestID())
	to.SetDateTime(m.DateTime())
	to.SetCashBalance(m.CashBalance())
	to.SetAccountCurrency(m.AccountCurrency())
	to.SetTradeAccount(m.TradeAccount())
	to.SetIsFinalResponse(m.IsFinalResponse())
	to.SetNoAccountBalances(m.NoAccountBalances())
	to.SetInfoText(m.InfoText())
	to.SetTransactionId(m.TransactionId())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalAccountBalanceResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 606)
	w.Int32Field("RequestID", m.RequestID())
	w.Float64Field("DateTime", float64(m.DateTime()))
	w.Float64Field("CashBalance", m.CashBalance())
	w.StringField("AccountCurrency", m.AccountCurrency())
	w.StringField("TradeAccount", m.TradeAccount())
	w.BoolField("IsFinalResponse", m.IsFinalResponse())
	w.Uint8Field("NoAccountBalances", m.NoAccountBalances())
	w.StringField("InfoText", m.InfoText())
	w.StringField("TransactionId", m.TransactionId())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalAccountBalanceResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 606 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "DateTime":
			m.SetDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "CashBalance":
			m.SetCashBalance(r.Float64())
		case "AccountCurrency":
			m.SetAccountCurrency(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "IsFinalResponse":
			m.SetIsFinalResponse(r.Bool())
		case "NoAccountBalances":
			m.SetNoAccountBalances(r.Uint8())
		case "InfoText":
			m.SetInfoText(r.String())
		case "TransactionId":
			m.SetTransactionId(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalAccountBalanceResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalAccountBalanceResponseFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 606)
	w.Int32Field("RequestID", m.RequestID())
	w.Float64Field("DateTime", float64(m.DateTime()))
	w.Float64Field("CashBalance", m.CashBalance())
	w.StringField("AccountCurrency", m.AccountCurrency())
	w.StringField("TradeAccount", m.TradeAccount())
	w.BoolField("IsFinalResponse", m.IsFinalResponse())
	w.Uint8Field("NoAccountBalances", m.NoAccountBalances())
	w.StringField("InfoText", m.InfoText())
	w.StringField("TransactionId", m.TransactionId())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalAccountBalanceResponseFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 606 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "DateTime":
			m.SetDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "CashBalance":
			m.SetCashBalance(r.Float64())
		case "AccountCurrency":
			m.SetAccountCurrency(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "IsFinalResponse":
			m.SetIsFinalResponse(r.Bool())
		case "NoAccountBalances":
			m.SetNoAccountBalances(r.Uint8())
		case "InfoText":
			m.SetInfoText(r.String())
		case "TransactionId":
			m.SetTransactionId(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalAccountBalanceResponseFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
