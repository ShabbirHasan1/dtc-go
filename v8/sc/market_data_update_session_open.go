// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateSessionOpenSize = 24

//     Size                uint16         = MarketDataUpdateSessionOpenSize  (24)
//     Type                uint16         = MARKET_DATA_UPDATE_SESSION_OPEN  (120)
//     SymbolID            uint32         = 0
//     Price               float64        = 0.000000
//     TradingSessionDate  DateTime4Byte  = 0
var _MarketDataUpdateSessionOpenDefault = []byte{24, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateSessionOpen Sent by the Server to the Client to update the session Open.
type MarketDataUpdateSessionOpen struct {
	p message.Fixed
}

func NewMarketDataUpdateSessionOpenFrom(b []byte) MarketDataUpdateSessionOpen {
	return MarketDataUpdateSessionOpen{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateSessionOpen(b []byte) MarketDataUpdateSessionOpen {
	return MarketDataUpdateSessionOpen{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateSessionOpen() *MarketDataUpdateSessionOpen {
	return &MarketDataUpdateSessionOpen{p: message.NewFixed(_MarketDataUpdateSessionOpenDefault)}
}

func ParseMarketDataUpdateSessionOpen(b []byte) (MarketDataUpdateSessionOpen, error) {
	if len(b) < 4 {
		return MarketDataUpdateSessionOpen{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateSessionOpen(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateSessionOpen{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateSessionOpen{}, message.ErrBaseSizeOverflow
	}
	if size < 24 {
		clone := *NewMarketDataUpdateSessionOpen()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateSessionOpenDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateSessionOpen) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateSessionOpen) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateSessionOpen) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Price The session Open price.
func (m MarketDataUpdateSessionOpen) Price() float64 {
	return m.p.Float64LE(8)
}

// TradingSessionDate
func (m MarketDataUpdateSessionOpen) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(16))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateSessionOpen) SetSymbolID(value uint32) *MarketDataUpdateSessionOpen {
	m.p.SetUint32LE(4, value)
	return m
}

// SetPrice The session Open price.
func (m *MarketDataUpdateSessionOpen) SetPrice(value float64) *MarketDataUpdateSessionOpen {
	m.p.SetFloat64LE(8, value)
	return m
}

// SetTradingSessionDate
func (m *MarketDataUpdateSessionOpen) SetTradingSessionDate(value DateTime4Byte) *MarketDataUpdateSessionOpen {
	m.p.SetUint32LE(16, uint32(value))
	return m
}

func (m MarketDataUpdateSessionOpen) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarketDataUpdateSessionOpen) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarketDataUpdateSessionOpen) Copy(to MarketDataUpdateSessionOpen) {
	to.SetSymbolID(m.SymbolID())
	to.SetPrice(m.Price())
	to.SetTradingSessionDate(m.TradingSessionDate())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarketDataUpdateSessionOpen) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 120)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Float64Field("Price", m.Price())
	w.Uint32Field("TradingSessionDate", uint32(m.TradingSessionDate()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateSessionOpen) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 120 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Price":
			m.SetPrice(r.Float64())
		case "TradingSessionDate":
			m.SetTradingSessionDate(DateTime4Byte(r.Uint32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateSessionOpen) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
