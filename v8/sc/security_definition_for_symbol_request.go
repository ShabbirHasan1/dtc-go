// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const SecurityDefinitionForSymbolRequestSize = 20

const SecurityDefinitionForSymbolRequestFixedSize = 88

//     Size       uint16  = SecurityDefinitionForSymbolRequestSize  (20)
//     Type       uint16  = SECURITY_DEFINITION_FOR_SYMBOL_REQUEST  (506)
//     BaseSize   uint16  = SecurityDefinitionForSymbolRequestSize  (20)
//     RequestID  int32   = 0
//     Symbol     string  = ""
//     Exchange   string  = ""
var _SecurityDefinitionForSymbolRequestDefault = []byte{20, 0, 250, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size       uint16      = SecurityDefinitionForSymbolRequestFixedSize  (88)
//     Type       uint16      = SECURITY_DEFINITION_FOR_SYMBOL_REQUEST  (506)
//     RequestID  int32       = 0
//     Symbol     string[64]  = ""
//     Exchange   string[16]  = ""
var _SecurityDefinitionForSymbolRequestFixedDefault = []byte{88, 0, 250, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// SecurityDefinitionForSymbolRequest This is a message from the Client to the Server for requesting Security
// Definition data for a specific symbol.
//
// The Server will return a single SecurityDefinitionResponse message in
// response to this request.
//
// The Client must always send a SecurityDefinitionForSymbolRequest message
// to the Server in order to obtain the IntegerToFloatPriceDivisor value
// in case the Server uses the integer market data messages.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type SecurityDefinitionForSymbolRequest struct {
	p message.VLS
}

// SecurityDefinitionForSymbolRequestFixed This is a message from the Client to the Server for requesting Security
// Definition data for a specific symbol.
//
// The Server will return a single SecurityDefinitionResponse message in
// response to this request.
//
// The Client must always send a SecurityDefinitionForSymbolRequest message
// to the Server in order to obtain the IntegerToFloatPriceDivisor value
// in case the Server uses the integer market data messages.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type SecurityDefinitionForSymbolRequestFixed struct {
	p message.Fixed
}

func NewSecurityDefinitionForSymbolRequestFrom(b []byte) SecurityDefinitionForSymbolRequest {
	return SecurityDefinitionForSymbolRequest{p: message.NewVLS(b)}
}

func WrapSecurityDefinitionForSymbolRequest(b []byte) SecurityDefinitionForSymbolRequest {
	return SecurityDefinitionForSymbolRequest{p: message.WrapVLS(b)}
}

func NewSecurityDefinitionForSymbolRequest() *SecurityDefinitionForSymbolRequest {
	return &SecurityDefinitionForSymbolRequest{p: message.NewVLS(_SecurityDefinitionForSymbolRequestDefault)}
}

func ParseSecurityDefinitionForSymbolRequest(b []byte) (SecurityDefinitionForSymbolRequest, error) {
	if len(b) < 6 {
		return SecurityDefinitionForSymbolRequest{}, message.ErrShortBuffer
	}
	m := WrapSecurityDefinitionForSymbolRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return SecurityDefinitionForSymbolRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return SecurityDefinitionForSymbolRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 20 {
		newSize := len(b) + (20 - baseSize)
		if newSize > message.MaxSize {
			return SecurityDefinitionForSymbolRequest{}, message.ErrOverflow
		}
		clone := SecurityDefinitionForSymbolRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _SecurityDefinitionForSymbolRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(20 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
			offset = clone.p.Uint16LE(16)
			if offset > 0 {
				clone.p.SetUint16LE(16, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewSecurityDefinitionForSymbolRequestFixedFrom(b []byte) SecurityDefinitionForSymbolRequestFixed {
	return SecurityDefinitionForSymbolRequestFixed{p: message.NewFixed(b)}
}

func WrapSecurityDefinitionForSymbolRequestFixed(b []byte) SecurityDefinitionForSymbolRequestFixed {
	return SecurityDefinitionForSymbolRequestFixed{p: message.WrapFixed(b)}
}

func NewSecurityDefinitionForSymbolRequestFixed() *SecurityDefinitionForSymbolRequestFixed {
	return &SecurityDefinitionForSymbolRequestFixed{p: message.NewFixed(_SecurityDefinitionForSymbolRequestFixedDefault)}
}

func ParseSecurityDefinitionForSymbolRequestFixed(b []byte) (SecurityDefinitionForSymbolRequestFixed, error) {
	if len(b) < 4 {
		return SecurityDefinitionForSymbolRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapSecurityDefinitionForSymbolRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return SecurityDefinitionForSymbolRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return SecurityDefinitionForSymbolRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 88 {
		clone := *NewSecurityDefinitionForSymbolRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _SecurityDefinitionForSymbolRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m SecurityDefinitionForSymbolRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m SecurityDefinitionForSymbolRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m SecurityDefinitionForSymbolRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m SecurityDefinitionForSymbolRequest) RequestID() int32 {
	return m.p.Int32LE(8)
}

// Symbol The symbol to return a security definition for.
func (m SecurityDefinitionForSymbolRequest) Symbol() string {
	return m.p.StringVLS(12)
}

// Exchange The optional exchange for the Symbol.
func (m SecurityDefinitionForSymbolRequest) Exchange() string {
	return m.p.StringVLS(16)
}

// Size The standard message size field. Automatically set by constructor.
func (m SecurityDefinitionForSymbolRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m SecurityDefinitionForSymbolRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m SecurityDefinitionForSymbolRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// Symbol The symbol to return a security definition for.
func (m SecurityDefinitionForSymbolRequestFixed) Symbol() string {
	return m.p.StringFixed(8, 64)
}

// Exchange The optional exchange for the Symbol.
func (m SecurityDefinitionForSymbolRequestFixed) Exchange() string {
	return m.p.StringFixed(72, 16)
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m *SecurityDefinitionForSymbolRequest) SetRequestID(value int32) *SecurityDefinitionForSymbolRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetSymbol The symbol to return a security definition for.
func (m *SecurityDefinitionForSymbolRequest) SetSymbol(value string) *SecurityDefinitionForSymbolRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetExchange The optional exchange for the Symbol.
func (m *SecurityDefinitionForSymbolRequest) SetExchange(value string) *SecurityDefinitionForSymbolRequest {
	m.p.SetStringVLS(16, value)
	return m
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m *SecurityDefinitionForSymbolRequestFixed) SetRequestID(value int32) *SecurityDefinitionForSymbolRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetSymbol The symbol to return a security definition for.
func (m *SecurityDefinitionForSymbolRequestFixed) SetSymbol(value string) *SecurityDefinitionForSymbolRequestFixed {
	m.p.SetStringFixed(8, 64, value)
	return m
}

// SetExchange The optional exchange for the Symbol.
func (m *SecurityDefinitionForSymbolRequestFixed) SetExchange(value string) *SecurityDefinitionForSymbolRequestFixed {
	m.p.SetStringFixed(72, 16, value)
	return m
}

func (m SecurityDefinitionForSymbolRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m SecurityDefinitionForSymbolRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m SecurityDefinitionForSymbolRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m SecurityDefinitionForSymbolRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m SecurityDefinitionForSymbolRequest) Copy(to SecurityDefinitionForSymbolRequest) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
}

// CopyTo
func (m SecurityDefinitionForSymbolRequest) CopyTo(to SecurityDefinitionForSymbolRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
}

// Copy
func (m SecurityDefinitionForSymbolRequestFixed) Copy(to SecurityDefinitionForSymbolRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
}

// CopyTo
func (m SecurityDefinitionForSymbolRequestFixed) CopyTo(to SecurityDefinitionForSymbolRequest) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m SecurityDefinitionForSymbolRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 506)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionForSymbolRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 506 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionForSymbolRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m SecurityDefinitionForSymbolRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 506)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionForSymbolRequestFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 506 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionForSymbolRequestFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
