// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const AlertMessageSize = 14

const AlertMessageFixedSize = 164

//     Size          uint16  = AlertMessageSize  (14)
//     Type          uint16  = ALERT_MESSAGE  (702)
//     BaseSize      uint16  = AlertMessageSize  (14)
//     MessageText   string  = ""
//     TradeAccount  string  = ""
var _AlertMessageDefault = []byte{14, 0, 190, 2, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size          uint16       = AlertMessageFixedSize  (164)
//     Type          uint16       = ALERT_MESSAGE  (702)
//     MessageText   string[128]  = ""
//     TradeAccount  string[32]   = ""
var _AlertMessageFixedDefault = []byte{164, 0, 190, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type AlertMessage struct {
	p message.VLS
}

type AlertMessageFixed struct {
	p message.Fixed
}

func NewAlertMessageFrom(b []byte) AlertMessage {
	return AlertMessage{p: message.NewVLS(b)}
}

func WrapAlertMessage(b []byte) AlertMessage {
	return AlertMessage{p: message.WrapVLS(b)}
}

func NewAlertMessage() *AlertMessage {
	return &AlertMessage{p: message.NewVLS(_AlertMessageDefault)}
}

func ParseAlertMessage(b []byte) (AlertMessage, error) {
	if len(b) < 6 {
		return AlertMessage{}, message.ErrShortBuffer
	}
	m := WrapAlertMessage(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AlertMessage{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return AlertMessage{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 14 {
		newSize := len(b) + (14 - baseSize)
		if newSize > message.MaxSize {
			return AlertMessage{}, message.ErrOverflow
		}
		clone := AlertMessage{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _AlertMessageDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(14 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewAlertMessageFixedFrom(b []byte) AlertMessageFixed {
	return AlertMessageFixed{p: message.NewFixed(b)}
}

func WrapAlertMessageFixed(b []byte) AlertMessageFixed {
	return AlertMessageFixed{p: message.WrapFixed(b)}
}

func NewAlertMessageFixed() *AlertMessageFixed {
	return &AlertMessageFixed{p: message.NewFixed(_AlertMessageFixedDefault)}
}

func ParseAlertMessageFixed(b []byte) (AlertMessageFixed, error) {
	if len(b) < 4 {
		return AlertMessageFixed{}, message.ErrShortBuffer
	}
	m := WrapAlertMessageFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AlertMessageFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return AlertMessageFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 164 {
		clone := *NewAlertMessageFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _AlertMessageFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m AlertMessage) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m AlertMessage) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m AlertMessage) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// MessageText
func (m AlertMessage) MessageText() string {
	return m.p.StringVLS(6)
}

// TradeAccount
func (m AlertMessage) TradeAccount() string {
	return m.p.StringVLS(10)
}

// Size
func (m AlertMessageFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m AlertMessageFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// MessageText
func (m AlertMessageFixed) MessageText() string {
	return m.p.StringFixed(4, 128)
}

// TradeAccount
func (m AlertMessageFixed) TradeAccount() string {
	return m.p.StringFixed(132, 32)
}

// SetMessageText
func (m *AlertMessage) SetMessageText(value string) *AlertMessage {
	m.p.SetStringVLS(6, value)
	return m
}

// SetTradeAccount
func (m *AlertMessage) SetTradeAccount(value string) *AlertMessage {
	m.p.SetStringVLS(10, value)
	return m
}

// SetMessageText
func (m *AlertMessageFixed) SetMessageText(value string) *AlertMessageFixed {
	m.p.SetStringFixed(4, 128, value)
	return m
}

// SetTradeAccount
func (m *AlertMessageFixed) SetTradeAccount(value string) *AlertMessageFixed {
	m.p.SetStringFixed(132, 32, value)
	return m
}

func (m AlertMessage) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m AlertMessage) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m AlertMessageFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m AlertMessageFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m AlertMessage) Copy(to AlertMessage) {
	to.SetMessageText(m.MessageText())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m AlertMessage) CopyTo(to AlertMessageFixed) {
	to.SetMessageText(m.MessageText())
	to.SetTradeAccount(m.TradeAccount())
}

// Copy
func (m AlertMessageFixed) Copy(to AlertMessageFixed) {
	to.SetMessageText(m.MessageText())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m AlertMessageFixed) CopyTo(to AlertMessage) {
	to.SetMessageText(m.MessageText())
	to.SetTradeAccount(m.TradeAccount())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m AlertMessage) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 702)
	w.StringField("MessageText", m.MessageText())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AlertMessage) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 702 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "MessageText":
			m.SetMessageText(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AlertMessage) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m AlertMessageFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 702)
	w.StringField("MessageText", m.MessageText())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AlertMessageFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 702 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "MessageText":
			m.SetMessageText(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AlertMessageFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
