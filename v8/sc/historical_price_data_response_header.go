// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalPriceDataResponseHeaderSize = 20

//     Size                    uint16                      = HistoricalPriceDataResponseHeaderSize  (20)
//     Type                    uint16                      = HISTORICAL_PRICE_DATA_RESPONSE_HEADER  (801)
//     RequestID               int32                       = 0
//     RecordInterval          HistoricalDataIntervalEnum  = INTERVAL_TICK  (0)
//     UseZLibCompression      bool                        = false
//     NoRecordsToReturn       uint8                       = 0
//     IntToFloatPriceDivisor  float32                     = 0.000000
var _HistoricalPriceDataResponseHeaderDefault = []byte{20, 0, 33, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// HistoricalPriceDataResponseHeader When a historical price data request is not rejected, this message header
// will begin the historical price data response from the Server. There will
// be one HistoricalPriceDataResponseHeader message sent ahead of the HistoricalPriceDataRecordResponse
// / HistoricalPriceDataTickRecordResponse messages. If the NoRecordsToReturn
// field is nonzero, then there are no further records that will be sent
// by the Server in response to the request by the Client.
//
// This message is never compressed.
type HistoricalPriceDataResponseHeader struct {
	p message.Fixed
}

func NewHistoricalPriceDataResponseHeaderFrom(b []byte) HistoricalPriceDataResponseHeader {
	return HistoricalPriceDataResponseHeader{p: message.NewFixed(b)}
}

func WrapHistoricalPriceDataResponseHeader(b []byte) HistoricalPriceDataResponseHeader {
	return HistoricalPriceDataResponseHeader{p: message.WrapFixed(b)}
}

func NewHistoricalPriceDataResponseHeader() *HistoricalPriceDataResponseHeader {
	return &HistoricalPriceDataResponseHeader{p: message.NewFixed(_HistoricalPriceDataResponseHeaderDefault)}
}

func ParseHistoricalPriceDataResponseHeader(b []byte) (HistoricalPriceDataResponseHeader, error) {
	if len(b) < 4 {
		return HistoricalPriceDataResponseHeader{}, message.ErrShortBuffer
	}
	m := WrapHistoricalPriceDataResponseHeader(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalPriceDataResponseHeader{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalPriceDataResponseHeader{}, message.ErrBaseSizeOverflow
	}
	if size < 20 {
		clone := *NewHistoricalPriceDataResponseHeader()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalPriceDataResponseHeaderDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalPriceDataResponseHeader) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalPriceDataResponseHeader) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m HistoricalPriceDataResponseHeader) RequestID() int32 {
	return m.p.Int32LE(4)
}

// RecordInterval The data interval of type HistoricalDataIntervalEnum requested by the
// Client.
func (m HistoricalPriceDataResponseHeader) RecordInterval() HistoricalDataIntervalEnum {
	return HistoricalDataIntervalEnum(m.p.Int32LE(8))
}

// UseZLibCompression 1 = All subsequent messages are using standard ZLib compression. 0 = no
// compression.
func (m HistoricalPriceDataResponseHeader) UseZLibCompression() bool {
	return m.p.Bool(12)
}

// NoRecordsToReturn If there are no records to return in response to the request and there
// was no error, this will be set to 1.
func (m HistoricalPriceDataResponseHeader) NoRecordsToReturn() uint8 {
	return m.p.Uint8(13)
}

// IntToFloatPriceDivisor This field is no longer used.
func (m HistoricalPriceDataResponseHeader) IntToFloatPriceDivisor() float32 {
	return m.p.Float32LE(16)
}

// SetRequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m *HistoricalPriceDataResponseHeader) SetRequestID(value int32) *HistoricalPriceDataResponseHeader {
	m.p.SetInt32LE(4, value)
	return m
}

// SetRecordInterval The data interval of type HistoricalDataIntervalEnum requested by the
// Client.
func (m *HistoricalPriceDataResponseHeader) SetRecordInterval(value HistoricalDataIntervalEnum) *HistoricalPriceDataResponseHeader {
	m.p.SetInt32LE(8, int32(value))
	return m
}

// SetUseZLibCompression 1 = All subsequent messages are using standard ZLib compression. 0 = no
// compression.
func (m *HistoricalPriceDataResponseHeader) SetUseZLibCompression(value bool) *HistoricalPriceDataResponseHeader {
	m.p.SetBool(12, value)
	return m
}

// SetNoRecordsToReturn If there are no records to return in response to the request and there
// was no error, this will be set to 1.
func (m *HistoricalPriceDataResponseHeader) SetNoRecordsToReturn(value uint8) *HistoricalPriceDataResponseHeader {
	m.p.SetUint8(13, value)
	return m
}

// SetIntToFloatPriceDivisor This field is no longer used.
func (m *HistoricalPriceDataResponseHeader) SetIntToFloatPriceDivisor(value float32) *HistoricalPriceDataResponseHeader {
	m.p.SetFloat32LE(16, value)
	return m
}

func (m HistoricalPriceDataResponseHeader) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalPriceDataResponseHeader) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m HistoricalPriceDataResponseHeader) Copy(to HistoricalPriceDataResponseHeader) {
	to.SetRequestID(m.RequestID())
	to.SetRecordInterval(m.RecordInterval())
	to.SetUseZLibCompression(m.UseZLibCompression())
	to.SetNoRecordsToReturn(m.NoRecordsToReturn())
	to.SetIntToFloatPriceDivisor(m.IntToFloatPriceDivisor())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalPriceDataResponseHeader) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 801)
	w.Int32Field("RequestID", m.RequestID())
	w.Int32Field("RecordInterval", int32(m.RecordInterval()))
	w.BoolField("UseZLibCompression", m.UseZLibCompression())
	w.Uint8Field("NoRecordsToReturn", m.NoRecordsToReturn())
	w.Float32Field("IntToFloatPriceDivisor", m.IntToFloatPriceDivisor())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataResponseHeader) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 801 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RecordInterval":
			m.SetRecordInterval(HistoricalDataIntervalEnum(r.Int32()))
		case "UseZLibCompression":
			m.SetUseZLibCompression(r.Bool())
		case "NoRecordsToReturn":
			m.SetNoRecordsToReturn(r.Uint8())
		case "IntToFloatPriceDivisor":
			m.SetIntToFloatPriceDivisor(r.Float32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataResponseHeader) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
