// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HeartbeatExtendedSize = 62

//     Size                                    uint16                       = HeartbeatExtendedSize  (62)
//     Type                                    uint16                       = HEARTBEAT  (3)
//     NumDroppedMessages                      uint32                       = 0
//     CurrentDateTime                         DateTime                     = 0
//     SecondsSinceLastReceivedHeartbeat       uint16                       = 0
//     NumberOfOutstandingSentBuffers          uint16                       = 0
//     PendingTransmissionDelayInMilliseconds  uint16                       = 0
//     CurrentSendBufferSizeInBytes            uint32                       = 0
//     SendingDateTimeMicroseconds             DateTimeWithMicrosecondsInt  = 0
//     DataCompressionRatio                    float32                      = 0.000000
//     TotalUncompressedBytes                  uint64                       = 0
//     TotalCompressionTime                    float64                      = 0.000000
//     NumberOfCompressions                    uint32                       = 0
//     SourceIPAddress                         uint32                       = 0
var _HeartbeatExtendedDefault = []byte{62, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type HeartbeatExtended struct {
	p message.Fixed
}

func NewHeartbeatExtendedFrom(b []byte) HeartbeatExtended {
	return HeartbeatExtended{p: message.NewFixed(b)}
}

func WrapHeartbeatExtended(b []byte) HeartbeatExtended {
	return HeartbeatExtended{p: message.WrapFixed(b)}
}

func NewHeartbeatExtended() *HeartbeatExtended {
	return &HeartbeatExtended{p: message.NewFixed(_HeartbeatExtendedDefault)}
}

func ParseHeartbeatExtended(b []byte) (HeartbeatExtended, error) {
	if len(b) < 4 {
		return HeartbeatExtended{}, message.ErrShortBuffer
	}
	m := WrapHeartbeatExtended(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HeartbeatExtended{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HeartbeatExtended{}, message.ErrBaseSizeOverflow
	}
	if size < 62 {
		clone := *NewHeartbeatExtended()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HeartbeatExtendedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m HeartbeatExtended) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HeartbeatExtended) Type() uint16 {
	return m.p.Uint16LE(2)
}

// NumDroppedMessages
func (m HeartbeatExtended) NumDroppedMessages() uint32 {
	return m.p.Uint32LE(4)
}

// CurrentDateTime
func (m HeartbeatExtended) CurrentDateTime() DateTime {
	return DateTime(m.p.Int64LE(8))
}

// SecondsSinceLastReceivedHeartbeat
func (m HeartbeatExtended) SecondsSinceLastReceivedHeartbeat() uint16 {
	return m.p.Uint16LE(16)
}

// NumberOfOutstandingSentBuffers
func (m HeartbeatExtended) NumberOfOutstandingSentBuffers() uint16 {
	return m.p.Uint16LE(18)
}

// PendingTransmissionDelayInMilliseconds
func (m HeartbeatExtended) PendingTransmissionDelayInMilliseconds() uint16 {
	return m.p.Uint16LE(20)
}

// CurrentSendBufferSizeInBytes
func (m HeartbeatExtended) CurrentSendBufferSizeInBytes() uint32 {
	return m.p.Uint32LE(22)
}

// SendingDateTimeMicroseconds
func (m HeartbeatExtended) SendingDateTimeMicroseconds() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(26))
}

// DataCompressionRatio
func (m HeartbeatExtended) DataCompressionRatio() float32 {
	return m.p.Float32LE(34)
}

// TotalUncompressedBytes
func (m HeartbeatExtended) TotalUncompressedBytes() uint64 {
	return m.p.Uint64LE(38)
}

// TotalCompressionTime
func (m HeartbeatExtended) TotalCompressionTime() float64 {
	return m.p.Float64LE(46)
}

// NumberOfCompressions
func (m HeartbeatExtended) NumberOfCompressions() uint32 {
	return m.p.Uint32LE(54)
}

// SourceIPAddress
func (m HeartbeatExtended) SourceIPAddress() uint32 {
	return m.p.Uint32LE(58)
}

// SetNumDroppedMessages
func (m *HeartbeatExtended) SetNumDroppedMessages(value uint32) *HeartbeatExtended {
	m.p.SetUint32LE(4, value)
	return m
}

// SetCurrentDateTime
func (m *HeartbeatExtended) SetCurrentDateTime(value DateTime) *HeartbeatExtended {
	m.p.SetInt64LE(8, int64(value))
	return m
}

// SetSecondsSinceLastReceivedHeartbeat
func (m *HeartbeatExtended) SetSecondsSinceLastReceivedHeartbeat(value uint16) *HeartbeatExtended {
	m.p.SetUint16LE(16, value)
	return m
}

// SetNumberOfOutstandingSentBuffers
func (m *HeartbeatExtended) SetNumberOfOutstandingSentBuffers(value uint16) *HeartbeatExtended {
	m.p.SetUint16LE(18, value)
	return m
}

// SetPendingTransmissionDelayInMilliseconds
func (m *HeartbeatExtended) SetPendingTransmissionDelayInMilliseconds(value uint16) *HeartbeatExtended {
	m.p.SetUint16LE(20, value)
	return m
}

// SetCurrentSendBufferSizeInBytes
func (m *HeartbeatExtended) SetCurrentSendBufferSizeInBytes(value uint32) *HeartbeatExtended {
	m.p.SetUint32LE(22, value)
	return m
}

// SetSendingDateTimeMicroseconds
func (m *HeartbeatExtended) SetSendingDateTimeMicroseconds(value DateTimeWithMicrosecondsInt) *HeartbeatExtended {
	m.p.SetInt64LE(26, int64(value))
	return m
}

// SetDataCompressionRatio
func (m *HeartbeatExtended) SetDataCompressionRatio(value float32) *HeartbeatExtended {
	m.p.SetFloat32LE(34, value)
	return m
}

// SetTotalUncompressedBytes
func (m *HeartbeatExtended) SetTotalUncompressedBytes(value uint64) *HeartbeatExtended {
	m.p.SetUint64LE(38, value)
	return m
}

// SetTotalCompressionTime
func (m *HeartbeatExtended) SetTotalCompressionTime(value float64) *HeartbeatExtended {
	m.p.SetFloat64LE(46, value)
	return m
}

// SetNumberOfCompressions
func (m *HeartbeatExtended) SetNumberOfCompressions(value uint32) *HeartbeatExtended {
	m.p.SetUint32LE(54, value)
	return m
}

// SetSourceIPAddress
func (m *HeartbeatExtended) SetSourceIPAddress(value uint32) *HeartbeatExtended {
	m.p.SetUint32LE(58, value)
	return m
}

func (m HeartbeatExtended) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HeartbeatExtended) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m HeartbeatExtended) Copy(to HeartbeatExtended) {
	to.SetNumDroppedMessages(m.NumDroppedMessages())
	to.SetCurrentDateTime(m.CurrentDateTime())
	to.SetSecondsSinceLastReceivedHeartbeat(m.SecondsSinceLastReceivedHeartbeat())
	to.SetNumberOfOutstandingSentBuffers(m.NumberOfOutstandingSentBuffers())
	to.SetPendingTransmissionDelayInMilliseconds(m.PendingTransmissionDelayInMilliseconds())
	to.SetCurrentSendBufferSizeInBytes(m.CurrentSendBufferSizeInBytes())
	to.SetSendingDateTimeMicroseconds(m.SendingDateTimeMicroseconds())
	to.SetDataCompressionRatio(m.DataCompressionRatio())
	to.SetTotalUncompressedBytes(m.TotalUncompressedBytes())
	to.SetTotalCompressionTime(m.TotalCompressionTime())
	to.SetNumberOfCompressions(m.NumberOfCompressions())
	to.SetSourceIPAddress(m.SourceIPAddress())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HeartbeatExtended) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 3)
	w.Uint32Field("NumDroppedMessages", m.NumDroppedMessages())
	w.Int64Field("CurrentDateTime", int64(m.CurrentDateTime()))
	w.Uint16Field("SecondsSinceLastReceivedHeartbeat", m.SecondsSinceLastReceivedHeartbeat())
	w.Uint16Field("NumberOfOutstandingSentBuffers", m.NumberOfOutstandingSentBuffers())
	w.Uint16Field("PendingTransmissionDelayInMilliseconds", m.PendingTransmissionDelayInMilliseconds())
	w.Uint32Field("CurrentSendBufferSizeInBytes", m.CurrentSendBufferSizeInBytes())
	w.Int64Field("SendingDateTimeMicroseconds", int64(m.SendingDateTimeMicroseconds()))
	w.Float32Field("DataCompressionRatio", m.DataCompressionRatio())
	w.Uint64Field("TotalUncompressedBytes", m.TotalUncompressedBytes())
	w.Float64Field("TotalCompressionTime", m.TotalCompressionTime())
	w.Uint32Field("NumberOfCompressions", m.NumberOfCompressions())
	w.Uint32Field("SourceIPAddress", m.SourceIPAddress())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HeartbeatExtended) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 3 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "NumDroppedMessages":
			m.SetNumDroppedMessages(r.Uint32())
		case "CurrentDateTime":
			m.SetCurrentDateTime(DateTime(r.Int64()))
		case "SecondsSinceLastReceivedHeartbeat":
			m.SetSecondsSinceLastReceivedHeartbeat(r.Uint16())
		case "NumberOfOutstandingSentBuffers":
			m.SetNumberOfOutstandingSentBuffers(r.Uint16())
		case "PendingTransmissionDelayInMilliseconds":
			m.SetPendingTransmissionDelayInMilliseconds(r.Uint16())
		case "CurrentSendBufferSizeInBytes":
			m.SetCurrentSendBufferSizeInBytes(r.Uint32())
		case "SendingDateTimeMicroseconds":
			m.SetSendingDateTimeMicroseconds(DateTimeWithMicrosecondsInt(r.Int64()))
		case "DataCompressionRatio":
			m.SetDataCompressionRatio(r.Float32())
		case "TotalUncompressedBytes":
			m.SetTotalUncompressedBytes(r.Uint64())
		case "TotalCompressionTime":
			m.SetTotalCompressionTime(r.Float64())
		case "NumberOfCompressions":
			m.SetNumberOfCompressions(r.Uint32())
		case "SourceIPAddress":
			m.SetSourceIPAddress(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HeartbeatExtended) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
