// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradeAccountDataUpdateSize = 232

//     Size                                                                     uint16   = TradeAccountDataUpdateSize  (232)
//     Type                                                                     uint16   = TRADE_ACCOUNT_DATA_UPDATE  (10117)
//     BaseSize                                                                 uint16   = TradeAccountDataUpdateSize  (232)
//     RequestID                                                                uint32   = 0
//     IsNewAccount                                                             bool     = false
//     NewAccountAuthorizedUsername                                             string   = ""
//     TradeAccount                                                             string   = ""
//     CurrencyCodeIsSet                                                        bool     = false
//     CurrencyCode                                                             string   = ""
//     DailyNetLossLimitInAccountCurrencyIsSet                                  bool     = false
//     DailyNetLossLimitInAccountCurrency                                       float32  = 0.000000
//     PercentOfCashBalanceForDailyNetLossLimitIsSet                            bool     = false
//     PercentOfCashBalanceForDailyNetLossLimit                                 int32    = 0
//     UseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet                bool     = false
//     UseTrailingAccountValueToNotAllowIncreaseInPositions                     bool     = false
//     DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet                       bool     = false
//     DoNotAllowIncreaseInPositionsAtDailyLossLimit                            uint8    = 0
//     FlattenPositionsAtDailyLossLimitIsSet                                    bool     = false
//     FlattenPositionsAtDailyLossLimit                                         uint8    = 0
//     ClosePositionsAtEndOfDayIsSet                                            bool     = false
//     ClosePositionsAtEndOfDay                                                 uint8    = 0
//     FlattenPositionsWhenUnderMarginIntradayIsSet                             bool     = false
//     FlattenPositionsWhenUnderMarginIntraday                                  uint8    = 0
//     FlattenPositionsWhenUnderMarginAtEndOfDayIsSet                           bool     = false
//     FlattenPositionsWhenUnderMarginAtEndOfDay                                uint8    = 0
//     SenderSubIDIsSet                                                         bool     = false
//     SenderSubID                                                              string   = ""
//     SenderLocationIdIsSet                                                    bool     = false
//     SenderLocationId                                                         string   = ""
//     SelfMatchPreventionIDIsSet                                               bool     = false
//     SelfMatchPreventionID                                                    string   = ""
//     CTICodeIsSet                                                             bool     = false
//     CTICode                                                                  int32    = 0
//     TradeAccountIsReadOnlyIsSet                                              bool     = false
//     TradeAccountIsReadOnly                                                   bool     = false
//     MaximumGlobalPositionQuantityIsSet                                       bool     = false
//     MaximumGlobalPositionQuantity                                            int32    = 0
//     TradeFeePerContractIsSet                                                 bool     = false
//     TradeFeePerContract                                                      float64  = 0.000000
//     TradeFeePerShareIsSet                                                    bool     = false
//     TradeFeePerShare                                                         float64  = 0.000000
//     RequireSufficientMarginForNewPositionsIsSet                              bool     = false
//     RequireSufficientMarginForNewPositions                                   uint8    = 0
//     UsePercentOfMarginIsSet                                                  bool     = false
//     UsePercentOfMargin                                                       int32    = 100
//     UsePercentOfMarginForDayTradingIsSet                                     bool     = false
//     UsePercentOfMarginForDayTrading                                          int32    = 100
//     MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet                bool     = false
//     MaximumAllowedAccountBalanceForPositionsAsPercentage                     int32    = 100
//     FirmIDIsSet                                                              bool     = false
//     FirmID                                                                   string   = ""
//     TradingIsDisabledIsSet                                                   bool     = false
//     TradingIsDisabled                                                        bool     = false
//     DescriptiveNameIsSet                                                     bool     = false
//     DescriptiveName                                                          string   = ""
//     IsMasterFirmControlAccountIsSet                                          bool     = false
//     IsMasterFirmControlAccount                                               bool     = false
//     MinimumRequiredAccountValueIsSet                                         bool     = false
//     MinimumRequiredAccountValue                                              float64  = 0.000000
//     BeginTimeForDayMarginIsSet                                               bool     = false
//     BeginTimeForDayMargin                                                    int64    = 0
//     EndTimeForDayMarginIsSet                                                 bool     = false
//     EndTimeForDayMargin                                                      int64    = 0
//     DayMarginTimeZoneIsSet                                                   bool     = false
//     DayMarginTimeZone                                                        string   = ""
//     UseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet               bool     = false
//     UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday                    bool     = false
//     UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet             bool     = false
//     UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay                  bool     = false
//     UseMasterFirm_SymbolLimitsArrayIsSet                                     bool     = false
//     UseMasterFirm_SymbolLimitsArray                                          bool     = false
//     UseMasterFirm_TradeFeesIsSet                                             bool     = false
//     UseMasterFirm_TradeFees                                                  bool     = false
//     UseMasterFirm_TradeFeePerShareIsSet                                      bool     = false
//     UseMasterFirm_TradeFeePerShare                                           bool     = false
//     UseMasterFirm_RequireSufficientMarginForNewPositionsIsSet                bool     = false
//     UseMasterFirm_RequireSufficientMarginForNewPositions                     bool     = false
//     UseMasterFirm_UsePercentOfMarginIsSet                                    bool     = false
//     UseMasterFirm_UsePercentOfMargin                                         bool     = false
//     UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet  bool     = false
//     UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage       bool     = false
//     UseMasterFirm_MinimumRequiredAccountValueIsSet                           bool     = false
//     UseMasterFirm_MinimumRequiredAccountValue                                bool     = false
//     UseMasterFirm_MarginTimeSettingsIsSet                                    bool     = false
//     UseMasterFirm_MarginTimeSettings                                         bool     = false
//     UseMasterFirm_TradingIsDisabledIsSet                                     bool     = false
//     UseMasterFirm_TradingIsDisabled                                          bool     = false
//     IsTradeStatisticsPublicallySharedIsSet                                   bool     = false
//     IsTradeStatisticsPublicallyShared                                        bool     = false
//     IsReadOnlyFollowingRequestsAllowedIsSet                                  bool     = false
//     IsReadOnlyFollowingRequestsAllowed                                       bool     = false
//     IsTradeAccountSharingAllowedIsSet                                        bool     = false
//     IsTradeAccountSharingAllowed                                             bool     = false
//     ReadOnlyShareToAllSCUsernamesIsSet                                       bool     = false
//     ReadOnlyShareToAllSCUsernames                                            uint8    = 0
//     UseMasterFirm_SymbolCommissionsArrayIsSet                                bool     = false
//     UseMasterFirm_SymbolCommissionsArray                                     bool     = false
//     UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet         bool     = false
//     UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit              bool     = false
//     UseMasterFirm_UsePercentOfMarginForDayTradingIsSet                       bool     = false
//     UseMasterFirm_UsePercentOfMarginForDayTrading                            bool     = false
//     UseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet                    bool     = false
//     UseMasterFirm_SymbolCommissionsArrayFullOverride                         bool     = false
//     UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet          bool     = false
//     UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders               bool     = false
//     UseMasterFirm_UsePercentOfMarginFullOverrideIsSet                        bool     = false
//     UseMasterFirm_UsePercentOfMarginFullOverride                             bool     = false
//     UseMasterFirm_TradeFeesFullOverrideIsSet                                 bool     = false
//     UseMasterFirm_TradeFeesFullOverride                                      bool     = false
//     UseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet           bool     = false
//     UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride                bool     = false
//     LiquidationOnlyModeIsSet                                                 bool     = false
//     LiquidationOnlyMode                                                      uint8    = 0
//     CustomerOrFirmIsSet                                                      bool     = false
//     CustomerOrFirm                                                           uint8    = 0
//     MasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet                bool     = false
//     MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet                     uint8    = 0
//     MasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet                bool     = false
//     MasterFirm_FlattenCancelWhenUnderMinimumAccountValue                     uint8    = 0
//     MasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet                     bool     = false
//     MasterFirm_FlattenCancelWhenUnderMarginIntraday                          uint8    = 0
//     MasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet                     bool     = false
//     MasterFirm_FlattenCancelWhenUnderMarginEndOfDay                          uint8    = 0
//     MasterFirm_MaximumOrderQuantityIsSet                                     uint32   = 0
//     MasterFirm_MaximumOrderQuantity                                          uint32   = 0
//     ExchangeTraderIdIsSet                                                    bool     = false
//     ExchangeTraderId                                                         string   = ""
//     UseFixedCashOnHandBalanceIsSet                                           bool     = false
//     UseFixedCashOnHandBalance                                                bool     = false
//     FixedCashOnHandBalanceIsSet                                              bool     = false
//     FixedCashOnHandBalance                                                   float32  = 0.000000
var _TradeAccountDataUpdateDefault = []byte{232, 0, 133, 39, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 100, 0, 0, 0, 0, 100, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradeAccountDataUpdate struct {
	p message.VLS
}

func NewTradeAccountDataUpdateFrom(b []byte) TradeAccountDataUpdate {
	return TradeAccountDataUpdate{p: message.NewVLS(b)}
}

func WrapTradeAccountDataUpdate(b []byte) TradeAccountDataUpdate {
	return TradeAccountDataUpdate{p: message.WrapVLS(b)}
}

func NewTradeAccountDataUpdate() *TradeAccountDataUpdate {
	return &TradeAccountDataUpdate{p: message.NewVLS(_TradeAccountDataUpdateDefault)}
}

func ParseTradeAccountDataUpdate(b []byte) (TradeAccountDataUpdate, error) {
	if len(b) < 6 {
		return TradeAccountDataUpdate{}, message.ErrShortBuffer
	}
	m := WrapTradeAccountDataUpdate(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradeAccountDataUpdate{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradeAccountDataUpdate{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 232 {
		newSize := len(b) + (232 - baseSize)
		if newSize > message.MaxSize {
			return TradeAccountDataUpdate{}, message.ErrOverflow
		}
		clone := TradeAccountDataUpdate{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradeAccountDataUpdateDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(232 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(11)
			if offset > 0 {
				clone.p.SetUint16LE(11, offset+shift)
			}
			offset = clone.p.Uint16LE(15)
			if offset > 0 {
				clone.p.SetUint16LE(15, offset+shift)
			}
			offset = clone.p.Uint16LE(20)
			if offset > 0 {
				clone.p.SetUint16LE(20, offset+shift)
			}
			offset = clone.p.Uint16LE(47)
			if offset > 0 {
				clone.p.SetUint16LE(47, offset+shift)
			}
			offset = clone.p.Uint16LE(52)
			if offset > 0 {
				clone.p.SetUint16LE(52, offset+shift)
			}
			offset = clone.p.Uint16LE(57)
			if offset > 0 {
				clone.p.SetUint16LE(57, offset+shift)
			}
			offset = clone.p.Uint16LE(109)
			if offset > 0 {
				clone.p.SetUint16LE(109, offset+shift)
			}
			offset = clone.p.Uint16LE(116)
			if offset > 0 {
				clone.p.SetUint16LE(116, offset+shift)
			}
			offset = clone.p.Uint16LE(150)
			if offset > 0 {
				clone.p.SetUint16LE(150, offset+shift)
			}
			offset = clone.p.Uint16LE(221)
			if offset > 0 {
				clone.p.SetUint16LE(221, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradeAccountDataUpdate) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradeAccountDataUpdate) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradeAccountDataUpdate) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m TradeAccountDataUpdate) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// IsNewAccount
func (m TradeAccountDataUpdate) IsNewAccount() bool {
	return m.p.Bool(10)
}

// NewAccountAuthorizedUsername
func (m TradeAccountDataUpdate) NewAccountAuthorizedUsername() string {
	return m.p.StringVLS(11)
}

// TradeAccount
func (m TradeAccountDataUpdate) TradeAccount() string {
	return m.p.StringVLS(15)
}

// CurrencyCodeIsSet
func (m TradeAccountDataUpdate) CurrencyCodeIsSet() bool {
	return m.p.Bool(19)
}

// CurrencyCode
func (m TradeAccountDataUpdate) CurrencyCode() string {
	return m.p.StringVLS(20)
}

// DailyNetLossLimitInAccountCurrencyIsSet
func (m TradeAccountDataUpdate) DailyNetLossLimitInAccountCurrencyIsSet() bool {
	return m.p.Bool(24)
}

// DailyNetLossLimitInAccountCurrency
func (m TradeAccountDataUpdate) DailyNetLossLimitInAccountCurrency() float32 {
	return m.p.Float32LE(25)
}

// PercentOfCashBalanceForDailyNetLossLimitIsSet
func (m TradeAccountDataUpdate) PercentOfCashBalanceForDailyNetLossLimitIsSet() bool {
	return m.p.Bool(29)
}

// PercentOfCashBalanceForDailyNetLossLimit
func (m TradeAccountDataUpdate) PercentOfCashBalanceForDailyNetLossLimit() int32 {
	return m.p.Int32LE(30)
}

// UseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet
func (m TradeAccountDataUpdate) UseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet() bool {
	return m.p.Bool(34)
}

// UseTrailingAccountValueToNotAllowIncreaseInPositions
func (m TradeAccountDataUpdate) UseTrailingAccountValueToNotAllowIncreaseInPositions() bool {
	return m.p.Bool(35)
}

// DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet
func (m TradeAccountDataUpdate) DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet() bool {
	return m.p.Bool(36)
}

// DoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m TradeAccountDataUpdate) DoNotAllowIncreaseInPositionsAtDailyLossLimit() uint8 {
	return m.p.Uint8(37)
}

// FlattenPositionsAtDailyLossLimitIsSet
func (m TradeAccountDataUpdate) FlattenPositionsAtDailyLossLimitIsSet() bool {
	return m.p.Bool(38)
}

// FlattenPositionsAtDailyLossLimit
func (m TradeAccountDataUpdate) FlattenPositionsAtDailyLossLimit() uint8 {
	return m.p.Uint8(39)
}

// ClosePositionsAtEndOfDayIsSet
func (m TradeAccountDataUpdate) ClosePositionsAtEndOfDayIsSet() bool {
	return m.p.Bool(40)
}

// ClosePositionsAtEndOfDay
func (m TradeAccountDataUpdate) ClosePositionsAtEndOfDay() uint8 {
	return m.p.Uint8(41)
}

// FlattenPositionsWhenUnderMarginIntradayIsSet
func (m TradeAccountDataUpdate) FlattenPositionsWhenUnderMarginIntradayIsSet() bool {
	return m.p.Bool(42)
}

// FlattenPositionsWhenUnderMarginIntraday
func (m TradeAccountDataUpdate) FlattenPositionsWhenUnderMarginIntraday() uint8 {
	return m.p.Uint8(43)
}

// FlattenPositionsWhenUnderMarginAtEndOfDayIsSet
func (m TradeAccountDataUpdate) FlattenPositionsWhenUnderMarginAtEndOfDayIsSet() bool {
	return m.p.Bool(44)
}

// FlattenPositionsWhenUnderMarginAtEndOfDay
func (m TradeAccountDataUpdate) FlattenPositionsWhenUnderMarginAtEndOfDay() uint8 {
	return m.p.Uint8(45)
}

// SenderSubIDIsSet
func (m TradeAccountDataUpdate) SenderSubIDIsSet() bool {
	return m.p.Bool(46)
}

// SenderSubID
func (m TradeAccountDataUpdate) SenderSubID() string {
	return m.p.StringVLS(47)
}

// SenderLocationIdIsSet
func (m TradeAccountDataUpdate) SenderLocationIdIsSet() bool {
	return m.p.Bool(51)
}

// SenderLocationId
func (m TradeAccountDataUpdate) SenderLocationId() string {
	return m.p.StringVLS(52)
}

// SelfMatchPreventionIDIsSet
func (m TradeAccountDataUpdate) SelfMatchPreventionIDIsSet() bool {
	return m.p.Bool(56)
}

// SelfMatchPreventionID
func (m TradeAccountDataUpdate) SelfMatchPreventionID() string {
	return m.p.StringVLS(57)
}

// CTICodeIsSet
func (m TradeAccountDataUpdate) CTICodeIsSet() bool {
	return m.p.Bool(61)
}

// CTICode
func (m TradeAccountDataUpdate) CTICode() int32 {
	return m.p.Int32LE(62)
}

// TradeAccountIsReadOnlyIsSet
func (m TradeAccountDataUpdate) TradeAccountIsReadOnlyIsSet() bool {
	return m.p.Bool(66)
}

// TradeAccountIsReadOnly
func (m TradeAccountDataUpdate) TradeAccountIsReadOnly() bool {
	return m.p.Bool(67)
}

// MaximumGlobalPositionQuantityIsSet
func (m TradeAccountDataUpdate) MaximumGlobalPositionQuantityIsSet() bool {
	return m.p.Bool(68)
}

// MaximumGlobalPositionQuantity
func (m TradeAccountDataUpdate) MaximumGlobalPositionQuantity() int32 {
	return m.p.Int32LE(69)
}

// TradeFeePerContractIsSet
func (m TradeAccountDataUpdate) TradeFeePerContractIsSet() bool {
	return m.p.Bool(73)
}

// TradeFeePerContract
func (m TradeAccountDataUpdate) TradeFeePerContract() float64 {
	return m.p.Float64LE(74)
}

// TradeFeePerShareIsSet
func (m TradeAccountDataUpdate) TradeFeePerShareIsSet() bool {
	return m.p.Bool(82)
}

// TradeFeePerShare
func (m TradeAccountDataUpdate) TradeFeePerShare() float64 {
	return m.p.Float64LE(83)
}

// RequireSufficientMarginForNewPositionsIsSet
func (m TradeAccountDataUpdate) RequireSufficientMarginForNewPositionsIsSet() bool {
	return m.p.Bool(91)
}

// RequireSufficientMarginForNewPositions
func (m TradeAccountDataUpdate) RequireSufficientMarginForNewPositions() uint8 {
	return m.p.Uint8(92)
}

// UsePercentOfMarginIsSet
func (m TradeAccountDataUpdate) UsePercentOfMarginIsSet() bool {
	return m.p.Bool(93)
}

// UsePercentOfMargin
func (m TradeAccountDataUpdate) UsePercentOfMargin() int32 {
	return m.p.Int32LE(94)
}

// UsePercentOfMarginForDayTradingIsSet
func (m TradeAccountDataUpdate) UsePercentOfMarginForDayTradingIsSet() bool {
	return m.p.Bool(98)
}

// UsePercentOfMarginForDayTrading
func (m TradeAccountDataUpdate) UsePercentOfMarginForDayTrading() int32 {
	return m.p.Int32LE(99)
}

// MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet
func (m TradeAccountDataUpdate) MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet() bool {
	return m.p.Bool(103)
}

// MaximumAllowedAccountBalanceForPositionsAsPercentage
func (m TradeAccountDataUpdate) MaximumAllowedAccountBalanceForPositionsAsPercentage() int32 {
	return m.p.Int32LE(104)
}

// FirmIDIsSet
func (m TradeAccountDataUpdate) FirmIDIsSet() bool {
	return m.p.Bool(108)
}

// FirmID
func (m TradeAccountDataUpdate) FirmID() string {
	return m.p.StringVLS(109)
}

// TradingIsDisabledIsSet
func (m TradeAccountDataUpdate) TradingIsDisabledIsSet() bool {
	return m.p.Bool(113)
}

// TradingIsDisabled
func (m TradeAccountDataUpdate) TradingIsDisabled() bool {
	return m.p.Bool(114)
}

// DescriptiveNameIsSet
func (m TradeAccountDataUpdate) DescriptiveNameIsSet() bool {
	return m.p.Bool(115)
}

// DescriptiveName
func (m TradeAccountDataUpdate) DescriptiveName() string {
	return m.p.StringVLS(116)
}

// IsMasterFirmControlAccountIsSet
func (m TradeAccountDataUpdate) IsMasterFirmControlAccountIsSet() bool {
	return m.p.Bool(120)
}

// IsMasterFirmControlAccount
func (m TradeAccountDataUpdate) IsMasterFirmControlAccount() bool {
	return m.p.Bool(121)
}

// MinimumRequiredAccountValueIsSet
func (m TradeAccountDataUpdate) MinimumRequiredAccountValueIsSet() bool {
	return m.p.Bool(122)
}

// MinimumRequiredAccountValue
func (m TradeAccountDataUpdate) MinimumRequiredAccountValue() float64 {
	return m.p.Float64LE(123)
}

// BeginTimeForDayMarginIsSet
func (m TradeAccountDataUpdate) BeginTimeForDayMarginIsSet() bool {
	return m.p.Bool(131)
}

// BeginTimeForDayMargin
func (m TradeAccountDataUpdate) BeginTimeForDayMargin() int64 {
	return m.p.Int64LE(132)
}

// EndTimeForDayMarginIsSet
func (m TradeAccountDataUpdate) EndTimeForDayMarginIsSet() bool {
	return m.p.Bool(140)
}

// EndTimeForDayMargin
func (m TradeAccountDataUpdate) EndTimeForDayMargin() int64 {
	return m.p.Int64LE(141)
}

// DayMarginTimeZoneIsSet
func (m TradeAccountDataUpdate) DayMarginTimeZoneIsSet() bool {
	return m.p.Bool(149)
}

// DayMarginTimeZone
func (m TradeAccountDataUpdate) DayMarginTimeZone() string {
	return m.p.StringVLS(150)
}

// UseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet() bool {
	return m.p.Bool(154)
}

// UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday
func (m TradeAccountDataUpdate) UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday() bool {
	return m.p.Bool(155)
}

// UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet() bool {
	return m.p.Bool(156)
}

// UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay
func (m TradeAccountDataUpdate) UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay() bool {
	return m.p.Bool(157)
}

// UseMasterFirm_SymbolLimitsArrayIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_SymbolLimitsArrayIsSet() bool {
	return m.p.Bool(158)
}

// UseMasterFirm_SymbolLimitsArray
func (m TradeAccountDataUpdate) UseMasterFirm_SymbolLimitsArray() bool {
	return m.p.Bool(159)
}

// UseMasterFirm_TradeFeesIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_TradeFeesIsSet() bool {
	return m.p.Bool(160)
}

// UseMasterFirm_TradeFees
func (m TradeAccountDataUpdate) UseMasterFirm_TradeFees() bool {
	return m.p.Bool(161)
}

// UseMasterFirm_TradeFeePerShareIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_TradeFeePerShareIsSet() bool {
	return m.p.Bool(162)
}

// UseMasterFirm_TradeFeePerShare
func (m TradeAccountDataUpdate) UseMasterFirm_TradeFeePerShare() bool {
	return m.p.Bool(163)
}

// UseMasterFirm_RequireSufficientMarginForNewPositionsIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_RequireSufficientMarginForNewPositionsIsSet() bool {
	return m.p.Bool(164)
}

// UseMasterFirm_RequireSufficientMarginForNewPositions
func (m TradeAccountDataUpdate) UseMasterFirm_RequireSufficientMarginForNewPositions() bool {
	return m.p.Bool(165)
}

// UseMasterFirm_UsePercentOfMarginIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMarginIsSet() bool {
	return m.p.Bool(166)
}

// UseMasterFirm_UsePercentOfMargin
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMargin() bool {
	return m.p.Bool(167)
}

// UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet() bool {
	return m.p.Bool(168)
}

// UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage
func (m TradeAccountDataUpdate) UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage() bool {
	return m.p.Bool(169)
}

// UseMasterFirm_MinimumRequiredAccountValueIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_MinimumRequiredAccountValueIsSet() bool {
	return m.p.Bool(170)
}

// UseMasterFirm_MinimumRequiredAccountValue
func (m TradeAccountDataUpdate) UseMasterFirm_MinimumRequiredAccountValue() bool {
	return m.p.Bool(171)
}

// UseMasterFirm_MarginTimeSettingsIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_MarginTimeSettingsIsSet() bool {
	return m.p.Bool(172)
}

// UseMasterFirm_MarginTimeSettings
func (m TradeAccountDataUpdate) UseMasterFirm_MarginTimeSettings() bool {
	return m.p.Bool(173)
}

// UseMasterFirm_TradingIsDisabledIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_TradingIsDisabledIsSet() bool {
	return m.p.Bool(174)
}

// UseMasterFirm_TradingIsDisabled
func (m TradeAccountDataUpdate) UseMasterFirm_TradingIsDisabled() bool {
	return m.p.Bool(175)
}

// IsTradeStatisticsPublicallySharedIsSet
func (m TradeAccountDataUpdate) IsTradeStatisticsPublicallySharedIsSet() bool {
	return m.p.Bool(176)
}

// IsTradeStatisticsPublicallyShared
func (m TradeAccountDataUpdate) IsTradeStatisticsPublicallyShared() bool {
	return m.p.Bool(177)
}

// IsReadOnlyFollowingRequestsAllowedIsSet
func (m TradeAccountDataUpdate) IsReadOnlyFollowingRequestsAllowedIsSet() bool {
	return m.p.Bool(178)
}

// IsReadOnlyFollowingRequestsAllowed
func (m TradeAccountDataUpdate) IsReadOnlyFollowingRequestsAllowed() bool {
	return m.p.Bool(179)
}

// IsTradeAccountSharingAllowedIsSet
func (m TradeAccountDataUpdate) IsTradeAccountSharingAllowedIsSet() bool {
	return m.p.Bool(180)
}

// IsTradeAccountSharingAllowed
func (m TradeAccountDataUpdate) IsTradeAccountSharingAllowed() bool {
	return m.p.Bool(181)
}

// ReadOnlyShareToAllSCUsernamesIsSet
func (m TradeAccountDataUpdate) ReadOnlyShareToAllSCUsernamesIsSet() bool {
	return m.p.Bool(182)
}

// ReadOnlyShareToAllSCUsernames
func (m TradeAccountDataUpdate) ReadOnlyShareToAllSCUsernames() uint8 {
	return m.p.Uint8(183)
}

// UseMasterFirm_SymbolCommissionsArrayIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_SymbolCommissionsArrayIsSet() bool {
	return m.p.Bool(184)
}

// UseMasterFirm_SymbolCommissionsArray
func (m TradeAccountDataUpdate) UseMasterFirm_SymbolCommissionsArray() bool {
	return m.p.Bool(185)
}

// UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet() bool {
	return m.p.Bool(186)
}

// UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m TradeAccountDataUpdate) UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit() bool {
	return m.p.Bool(187)
}

// UseMasterFirm_UsePercentOfMarginForDayTradingIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMarginForDayTradingIsSet() bool {
	return m.p.Bool(188)
}

// UseMasterFirm_UsePercentOfMarginForDayTrading
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMarginForDayTrading() bool {
	return m.p.Bool(189)
}

// UseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet() bool {
	return m.p.Bool(190)
}

// UseMasterFirm_SymbolCommissionsArrayFullOverride
func (m TradeAccountDataUpdate) UseMasterFirm_SymbolCommissionsArrayFullOverride() bool {
	return m.p.Bool(191)
}

// UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet() bool {
	return m.p.Bool(192)
}

// UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders
func (m TradeAccountDataUpdate) UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders() bool {
	return m.p.Bool(193)
}

// UseMasterFirm_UsePercentOfMarginFullOverrideIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMarginFullOverrideIsSet() bool {
	return m.p.Bool(194)
}

// UseMasterFirm_UsePercentOfMarginFullOverride
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMarginFullOverride() bool {
	return m.p.Bool(195)
}

// UseMasterFirm_TradeFeesFullOverrideIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_TradeFeesFullOverrideIsSet() bool {
	return m.p.Bool(196)
}

// UseMasterFirm_TradeFeesFullOverride
func (m TradeAccountDataUpdate) UseMasterFirm_TradeFeesFullOverride() bool {
	return m.p.Bool(197)
}

// UseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet() bool {
	return m.p.Bool(198)
}

// UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride
func (m TradeAccountDataUpdate) UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride() bool {
	return m.p.Bool(199)
}

// LiquidationOnlyModeIsSet
func (m TradeAccountDataUpdate) LiquidationOnlyModeIsSet() bool {
	return m.p.Bool(200)
}

// LiquidationOnlyMode
func (m TradeAccountDataUpdate) LiquidationOnlyMode() uint8 {
	return m.p.Uint8(201)
}

// CustomerOrFirmIsSet
func (m TradeAccountDataUpdate) CustomerOrFirmIsSet() bool {
	return m.p.Bool(202)
}

// CustomerOrFirm
func (m TradeAccountDataUpdate) CustomerOrFirm() uint8 {
	return m.p.Uint8(203)
}

// MasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet() bool {
	return m.p.Bool(204)
}

// MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet() uint8 {
	return m.p.Uint8(205)
}

// MasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet() bool {
	return m.p.Bool(206)
}

// MasterFirm_FlattenCancelWhenUnderMinimumAccountValue
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelWhenUnderMinimumAccountValue() uint8 {
	return m.p.Uint8(207)
}

// MasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet() bool {
	return m.p.Bool(208)
}

// MasterFirm_FlattenCancelWhenUnderMarginIntraday
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelWhenUnderMarginIntraday() uint8 {
	return m.p.Uint8(209)
}

// MasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet() bool {
	return m.p.Bool(210)
}

// MasterFirm_FlattenCancelWhenUnderMarginEndOfDay
func (m TradeAccountDataUpdate) MasterFirm_FlattenCancelWhenUnderMarginEndOfDay() uint8 {
	return m.p.Uint8(211)
}

// MasterFirm_MaximumOrderQuantityIsSet
func (m TradeAccountDataUpdate) MasterFirm_MaximumOrderQuantityIsSet() uint32 {
	return m.p.Uint32LE(212)
}

// MasterFirm_MaximumOrderQuantity
func (m TradeAccountDataUpdate) MasterFirm_MaximumOrderQuantity() uint32 {
	return m.p.Uint32LE(216)
}

// ExchangeTraderIdIsSet
func (m TradeAccountDataUpdate) ExchangeTraderIdIsSet() bool {
	return m.p.Bool(220)
}

// ExchangeTraderId
func (m TradeAccountDataUpdate) ExchangeTraderId() string {
	return m.p.StringVLS(221)
}

// UseFixedCashOnHandBalanceIsSet
func (m TradeAccountDataUpdate) UseFixedCashOnHandBalanceIsSet() bool {
	return m.p.Bool(225)
}

// UseFixedCashOnHandBalance
func (m TradeAccountDataUpdate) UseFixedCashOnHandBalance() bool {
	return m.p.Bool(226)
}

// FixedCashOnHandBalanceIsSet
func (m TradeAccountDataUpdate) FixedCashOnHandBalanceIsSet() bool {
	return m.p.Bool(227)
}

// FixedCashOnHandBalance
func (m TradeAccountDataUpdate) FixedCashOnHandBalance() float32 {
	return m.p.Float32LE(228)
}

// SetRequestID
func (m *TradeAccountDataUpdate) SetRequestID(value uint32) *TradeAccountDataUpdate {
	m.p.SetUint32LE(6, value)
	return m
}

// SetIsNewAccount
func (m *TradeAccountDataUpdate) SetIsNewAccount(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(10, value)
	return m
}

// SetNewAccountAuthorizedUsername
func (m *TradeAccountDataUpdate) SetNewAccountAuthorizedUsername(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(11, value)
	return m
}

// SetTradeAccount
func (m *TradeAccountDataUpdate) SetTradeAccount(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(15, value)
	return m
}

// SetCurrencyCodeIsSet
func (m *TradeAccountDataUpdate) SetCurrencyCodeIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(19, value)
	return m
}

// SetCurrencyCode
func (m *TradeAccountDataUpdate) SetCurrencyCode(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(20, value)
	return m
}

// SetDailyNetLossLimitInAccountCurrencyIsSet
func (m *TradeAccountDataUpdate) SetDailyNetLossLimitInAccountCurrencyIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(24, value)
	return m
}

// SetDailyNetLossLimitInAccountCurrency
func (m *TradeAccountDataUpdate) SetDailyNetLossLimitInAccountCurrency(value float32) *TradeAccountDataUpdate {
	m.p.SetFloat32LE(25, value)
	return m
}

// SetPercentOfCashBalanceForDailyNetLossLimitIsSet
func (m *TradeAccountDataUpdate) SetPercentOfCashBalanceForDailyNetLossLimitIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(29, value)
	return m
}

// SetPercentOfCashBalanceForDailyNetLossLimit
func (m *TradeAccountDataUpdate) SetPercentOfCashBalanceForDailyNetLossLimit(value int32) *TradeAccountDataUpdate {
	m.p.SetInt32LE(30, value)
	return m
}

// SetUseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet
func (m *TradeAccountDataUpdate) SetUseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(34, value)
	return m
}

// SetUseTrailingAccountValueToNotAllowIncreaseInPositions
func (m *TradeAccountDataUpdate) SetUseTrailingAccountValueToNotAllowIncreaseInPositions(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(35, value)
	return m
}

// SetDoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet
func (m *TradeAccountDataUpdate) SetDoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(36, value)
	return m
}

// SetDoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m *TradeAccountDataUpdate) SetDoNotAllowIncreaseInPositionsAtDailyLossLimit(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(37, value)
	return m
}

// SetFlattenPositionsAtDailyLossLimitIsSet
func (m *TradeAccountDataUpdate) SetFlattenPositionsAtDailyLossLimitIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(38, value)
	return m
}

// SetFlattenPositionsAtDailyLossLimit
func (m *TradeAccountDataUpdate) SetFlattenPositionsAtDailyLossLimit(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(39, value)
	return m
}

// SetClosePositionsAtEndOfDayIsSet
func (m *TradeAccountDataUpdate) SetClosePositionsAtEndOfDayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(40, value)
	return m
}

// SetClosePositionsAtEndOfDay
func (m *TradeAccountDataUpdate) SetClosePositionsAtEndOfDay(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(41, value)
	return m
}

// SetFlattenPositionsWhenUnderMarginIntradayIsSet
func (m *TradeAccountDataUpdate) SetFlattenPositionsWhenUnderMarginIntradayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(42, value)
	return m
}

// SetFlattenPositionsWhenUnderMarginIntraday
func (m *TradeAccountDataUpdate) SetFlattenPositionsWhenUnderMarginIntraday(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(43, value)
	return m
}

// SetFlattenPositionsWhenUnderMarginAtEndOfDayIsSet
func (m *TradeAccountDataUpdate) SetFlattenPositionsWhenUnderMarginAtEndOfDayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(44, value)
	return m
}

// SetFlattenPositionsWhenUnderMarginAtEndOfDay
func (m *TradeAccountDataUpdate) SetFlattenPositionsWhenUnderMarginAtEndOfDay(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(45, value)
	return m
}

// SetSenderSubIDIsSet
func (m *TradeAccountDataUpdate) SetSenderSubIDIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(46, value)
	return m
}

// SetSenderSubID
func (m *TradeAccountDataUpdate) SetSenderSubID(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(47, value)
	return m
}

// SetSenderLocationIdIsSet
func (m *TradeAccountDataUpdate) SetSenderLocationIdIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(51, value)
	return m
}

// SetSenderLocationId
func (m *TradeAccountDataUpdate) SetSenderLocationId(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(52, value)
	return m
}

// SetSelfMatchPreventionIDIsSet
func (m *TradeAccountDataUpdate) SetSelfMatchPreventionIDIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(56, value)
	return m
}

// SetSelfMatchPreventionID
func (m *TradeAccountDataUpdate) SetSelfMatchPreventionID(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(57, value)
	return m
}

// SetCTICodeIsSet
func (m *TradeAccountDataUpdate) SetCTICodeIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(61, value)
	return m
}

// SetCTICode
func (m *TradeAccountDataUpdate) SetCTICode(value int32) *TradeAccountDataUpdate {
	m.p.SetInt32LE(62, value)
	return m
}

// SetTradeAccountIsReadOnlyIsSet
func (m *TradeAccountDataUpdate) SetTradeAccountIsReadOnlyIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(66, value)
	return m
}

// SetTradeAccountIsReadOnly
func (m *TradeAccountDataUpdate) SetTradeAccountIsReadOnly(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(67, value)
	return m
}

// SetMaximumGlobalPositionQuantityIsSet
func (m *TradeAccountDataUpdate) SetMaximumGlobalPositionQuantityIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(68, value)
	return m
}

// SetMaximumGlobalPositionQuantity
func (m *TradeAccountDataUpdate) SetMaximumGlobalPositionQuantity(value int32) *TradeAccountDataUpdate {
	m.p.SetInt32LE(69, value)
	return m
}

// SetTradeFeePerContractIsSet
func (m *TradeAccountDataUpdate) SetTradeFeePerContractIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(73, value)
	return m
}

// SetTradeFeePerContract
func (m *TradeAccountDataUpdate) SetTradeFeePerContract(value float64) *TradeAccountDataUpdate {
	m.p.SetFloat64LE(74, value)
	return m
}

// SetTradeFeePerShareIsSet
func (m *TradeAccountDataUpdate) SetTradeFeePerShareIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(82, value)
	return m
}

// SetTradeFeePerShare
func (m *TradeAccountDataUpdate) SetTradeFeePerShare(value float64) *TradeAccountDataUpdate {
	m.p.SetFloat64LE(83, value)
	return m
}

// SetRequireSufficientMarginForNewPositionsIsSet
func (m *TradeAccountDataUpdate) SetRequireSufficientMarginForNewPositionsIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(91, value)
	return m
}

// SetRequireSufficientMarginForNewPositions
func (m *TradeAccountDataUpdate) SetRequireSufficientMarginForNewPositions(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(92, value)
	return m
}

// SetUsePercentOfMarginIsSet
func (m *TradeAccountDataUpdate) SetUsePercentOfMarginIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(93, value)
	return m
}

// SetUsePercentOfMargin
func (m *TradeAccountDataUpdate) SetUsePercentOfMargin(value int32) *TradeAccountDataUpdate {
	m.p.SetInt32LE(94, value)
	return m
}

// SetUsePercentOfMarginForDayTradingIsSet
func (m *TradeAccountDataUpdate) SetUsePercentOfMarginForDayTradingIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(98, value)
	return m
}

// SetUsePercentOfMarginForDayTrading
func (m *TradeAccountDataUpdate) SetUsePercentOfMarginForDayTrading(value int32) *TradeAccountDataUpdate {
	m.p.SetInt32LE(99, value)
	return m
}

// SetMaximumAllowedAccountBalanceForPositionsAsPercentageIsSet
func (m *TradeAccountDataUpdate) SetMaximumAllowedAccountBalanceForPositionsAsPercentageIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(103, value)
	return m
}

// SetMaximumAllowedAccountBalanceForPositionsAsPercentage
func (m *TradeAccountDataUpdate) SetMaximumAllowedAccountBalanceForPositionsAsPercentage(value int32) *TradeAccountDataUpdate {
	m.p.SetInt32LE(104, value)
	return m
}

// SetFirmIDIsSet
func (m *TradeAccountDataUpdate) SetFirmIDIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(108, value)
	return m
}

// SetFirmID
func (m *TradeAccountDataUpdate) SetFirmID(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(109, value)
	return m
}

// SetTradingIsDisabledIsSet
func (m *TradeAccountDataUpdate) SetTradingIsDisabledIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(113, value)
	return m
}

// SetTradingIsDisabled
func (m *TradeAccountDataUpdate) SetTradingIsDisabled(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(114, value)
	return m
}

// SetDescriptiveNameIsSet
func (m *TradeAccountDataUpdate) SetDescriptiveNameIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(115, value)
	return m
}

// SetDescriptiveName
func (m *TradeAccountDataUpdate) SetDescriptiveName(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(116, value)
	return m
}

// SetIsMasterFirmControlAccountIsSet
func (m *TradeAccountDataUpdate) SetIsMasterFirmControlAccountIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(120, value)
	return m
}

// SetIsMasterFirmControlAccount
func (m *TradeAccountDataUpdate) SetIsMasterFirmControlAccount(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(121, value)
	return m
}

// SetMinimumRequiredAccountValueIsSet
func (m *TradeAccountDataUpdate) SetMinimumRequiredAccountValueIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(122, value)
	return m
}

// SetMinimumRequiredAccountValue
func (m *TradeAccountDataUpdate) SetMinimumRequiredAccountValue(value float64) *TradeAccountDataUpdate {
	m.p.SetFloat64LE(123, value)
	return m
}

// SetBeginTimeForDayMarginIsSet
func (m *TradeAccountDataUpdate) SetBeginTimeForDayMarginIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(131, value)
	return m
}

// SetBeginTimeForDayMargin
func (m *TradeAccountDataUpdate) SetBeginTimeForDayMargin(value int64) *TradeAccountDataUpdate {
	m.p.SetInt64LE(132, value)
	return m
}

// SetEndTimeForDayMarginIsSet
func (m *TradeAccountDataUpdate) SetEndTimeForDayMarginIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(140, value)
	return m
}

// SetEndTimeForDayMargin
func (m *TradeAccountDataUpdate) SetEndTimeForDayMargin(value int64) *TradeAccountDataUpdate {
	m.p.SetInt64LE(141, value)
	return m
}

// SetDayMarginTimeZoneIsSet
func (m *TradeAccountDataUpdate) SetDayMarginTimeZoneIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(149, value)
	return m
}

// SetDayMarginTimeZone
func (m *TradeAccountDataUpdate) SetDayMarginTimeZone(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(150, value)
	return m
}

// SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(154, value)
	return m
}

// SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday
func (m *TradeAccountDataUpdate) SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(155, value)
	return m
}

// SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(156, value)
	return m
}

// SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay
func (m *TradeAccountDataUpdate) SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(157, value)
	return m
}

// SetUseMasterFirm_SymbolLimitsArrayIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_SymbolLimitsArrayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(158, value)
	return m
}

// SetUseMasterFirm_SymbolLimitsArray
func (m *TradeAccountDataUpdate) SetUseMasterFirm_SymbolLimitsArray(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(159, value)
	return m
}

// SetUseMasterFirm_TradeFeesIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradeFeesIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(160, value)
	return m
}

// SetUseMasterFirm_TradeFees
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradeFees(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(161, value)
	return m
}

// SetUseMasterFirm_TradeFeePerShareIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradeFeePerShareIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(162, value)
	return m
}

// SetUseMasterFirm_TradeFeePerShare
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradeFeePerShare(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(163, value)
	return m
}

// SetUseMasterFirm_RequireSufficientMarginForNewPositionsIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_RequireSufficientMarginForNewPositionsIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(164, value)
	return m
}

// SetUseMasterFirm_RequireSufficientMarginForNewPositions
func (m *TradeAccountDataUpdate) SetUseMasterFirm_RequireSufficientMarginForNewPositions(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(165, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMarginIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(166, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMargin
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMargin(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(167, value)
	return m
}

// SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(168, value)
	return m
}

// SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage
func (m *TradeAccountDataUpdate) SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(169, value)
	return m
}

// SetUseMasterFirm_MinimumRequiredAccountValueIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_MinimumRequiredAccountValueIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(170, value)
	return m
}

// SetUseMasterFirm_MinimumRequiredAccountValue
func (m *TradeAccountDataUpdate) SetUseMasterFirm_MinimumRequiredAccountValue(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(171, value)
	return m
}

// SetUseMasterFirm_MarginTimeSettingsIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_MarginTimeSettingsIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(172, value)
	return m
}

// SetUseMasterFirm_MarginTimeSettings
func (m *TradeAccountDataUpdate) SetUseMasterFirm_MarginTimeSettings(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(173, value)
	return m
}

// SetUseMasterFirm_TradingIsDisabledIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradingIsDisabledIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(174, value)
	return m
}

// SetUseMasterFirm_TradingIsDisabled
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradingIsDisabled(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(175, value)
	return m
}

// SetIsTradeStatisticsPublicallySharedIsSet
func (m *TradeAccountDataUpdate) SetIsTradeStatisticsPublicallySharedIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(176, value)
	return m
}

// SetIsTradeStatisticsPublicallyShared
func (m *TradeAccountDataUpdate) SetIsTradeStatisticsPublicallyShared(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(177, value)
	return m
}

// SetIsReadOnlyFollowingRequestsAllowedIsSet
func (m *TradeAccountDataUpdate) SetIsReadOnlyFollowingRequestsAllowedIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(178, value)
	return m
}

// SetIsReadOnlyFollowingRequestsAllowed
func (m *TradeAccountDataUpdate) SetIsReadOnlyFollowingRequestsAllowed(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(179, value)
	return m
}

// SetIsTradeAccountSharingAllowedIsSet
func (m *TradeAccountDataUpdate) SetIsTradeAccountSharingAllowedIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(180, value)
	return m
}

// SetIsTradeAccountSharingAllowed
func (m *TradeAccountDataUpdate) SetIsTradeAccountSharingAllowed(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(181, value)
	return m
}

// SetReadOnlyShareToAllSCUsernamesIsSet
func (m *TradeAccountDataUpdate) SetReadOnlyShareToAllSCUsernamesIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(182, value)
	return m
}

// SetReadOnlyShareToAllSCUsernames
func (m *TradeAccountDataUpdate) SetReadOnlyShareToAllSCUsernames(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(183, value)
	return m
}

// SetUseMasterFirm_SymbolCommissionsArrayIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_SymbolCommissionsArrayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(184, value)
	return m
}

// SetUseMasterFirm_SymbolCommissionsArray
func (m *TradeAccountDataUpdate) SetUseMasterFirm_SymbolCommissionsArray(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(185, value)
	return m
}

// SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(186, value)
	return m
}

// SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit
func (m *TradeAccountDataUpdate) SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(187, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginForDayTradingIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMarginForDayTradingIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(188, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginForDayTrading
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMarginForDayTrading(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(189, value)
	return m
}

// SetUseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(190, value)
	return m
}

// SetUseMasterFirm_SymbolCommissionsArrayFullOverride
func (m *TradeAccountDataUpdate) SetUseMasterFirm_SymbolCommissionsArrayFullOverride(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(191, value)
	return m
}

// SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(192, value)
	return m
}

// SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders
func (m *TradeAccountDataUpdate) SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(193, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginFullOverrideIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMarginFullOverrideIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(194, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginFullOverride
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMarginFullOverride(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(195, value)
	return m
}

// SetUseMasterFirm_TradeFeesFullOverrideIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradeFeesFullOverrideIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(196, value)
	return m
}

// SetUseMasterFirm_TradeFeesFullOverride
func (m *TradeAccountDataUpdate) SetUseMasterFirm_TradeFeesFullOverride(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(197, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(198, value)
	return m
}

// SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride
func (m *TradeAccountDataUpdate) SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(199, value)
	return m
}

// SetLiquidationOnlyModeIsSet
func (m *TradeAccountDataUpdate) SetLiquidationOnlyModeIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(200, value)
	return m
}

// SetLiquidationOnlyMode
func (m *TradeAccountDataUpdate) SetLiquidationOnlyMode(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(201, value)
	return m
}

// SetCustomerOrFirmIsSet
func (m *TradeAccountDataUpdate) SetCustomerOrFirmIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(202, value)
	return m
}

// SetCustomerOrFirm
func (m *TradeAccountDataUpdate) SetCustomerOrFirm(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(203, value)
	return m
}

// SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(204, value)
	return m
}

// SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(205, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(206, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(207, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(208, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMarginIntraday
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelWhenUnderMarginIntraday(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(209, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(210, value)
	return m
}

// SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay
func (m *TradeAccountDataUpdate) SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay(value uint8) *TradeAccountDataUpdate {
	m.p.SetUint8(211, value)
	return m
}

// SetMasterFirm_MaximumOrderQuantityIsSet
func (m *TradeAccountDataUpdate) SetMasterFirm_MaximumOrderQuantityIsSet(value uint32) *TradeAccountDataUpdate {
	m.p.SetUint32LE(212, value)
	return m
}

// SetMasterFirm_MaximumOrderQuantity
func (m *TradeAccountDataUpdate) SetMasterFirm_MaximumOrderQuantity(value uint32) *TradeAccountDataUpdate {
	m.p.SetUint32LE(216, value)
	return m
}

// SetExchangeTraderIdIsSet
func (m *TradeAccountDataUpdate) SetExchangeTraderIdIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(220, value)
	return m
}

// SetExchangeTraderId
func (m *TradeAccountDataUpdate) SetExchangeTraderId(value string) *TradeAccountDataUpdate {
	m.p.SetStringVLS(221, value)
	return m
}

// SetUseFixedCashOnHandBalanceIsSet
func (m *TradeAccountDataUpdate) SetUseFixedCashOnHandBalanceIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(225, value)
	return m
}

// SetUseFixedCashOnHandBalance
func (m *TradeAccountDataUpdate) SetUseFixedCashOnHandBalance(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(226, value)
	return m
}

// SetFixedCashOnHandBalanceIsSet
func (m *TradeAccountDataUpdate) SetFixedCashOnHandBalanceIsSet(value bool) *TradeAccountDataUpdate {
	m.p.SetBool(227, value)
	return m
}

// SetFixedCashOnHandBalance
func (m *TradeAccountDataUpdate) SetFixedCashOnHandBalance(value float32) *TradeAccountDataUpdate {
	m.p.SetFloat32LE(228, value)
	return m
}

func (m TradeAccountDataUpdate) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradeAccountDataUpdate) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradeAccountDataUpdate) Copy(to TradeAccountDataUpdate) {
	to.SetRequestID(m.RequestID())
	to.SetIsNewAccount(m.IsNewAccount())
	to.SetNewAccountAuthorizedUsername(m.NewAccountAuthorizedUsername())
	to.SetTradeAccount(m.TradeAccount())
	to.SetCurrencyCodeIsSet(m.CurrencyCodeIsSet())
	to.SetCurrencyCode(m.CurrencyCode())
	to.SetDailyNetLossLimitInAccountCurrencyIsSet(m.DailyNetLossLimitInAccountCurrencyIsSet())
	to.SetDailyNetLossLimitInAccountCurrency(m.DailyNetLossLimitInAccountCurrency())
	to.SetPercentOfCashBalanceForDailyNetLossLimitIsSet(m.PercentOfCashBalanceForDailyNetLossLimitIsSet())
	to.SetPercentOfCashBalanceForDailyNetLossLimit(m.PercentOfCashBalanceForDailyNetLossLimit())
	to.SetUseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet(m.UseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet())
	to.SetUseTrailingAccountValueToNotAllowIncreaseInPositions(m.UseTrailingAccountValueToNotAllowIncreaseInPositions())
	to.SetDoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet(m.DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet())
	to.SetDoNotAllowIncreaseInPositionsAtDailyLossLimit(m.DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	to.SetFlattenPositionsAtDailyLossLimitIsSet(m.FlattenPositionsAtDailyLossLimitIsSet())
	to.SetFlattenPositionsAtDailyLossLimit(m.FlattenPositionsAtDailyLossLimit())
	to.SetClosePositionsAtEndOfDayIsSet(m.ClosePositionsAtEndOfDayIsSet())
	to.SetClosePositionsAtEndOfDay(m.ClosePositionsAtEndOfDay())
	to.SetFlattenPositionsWhenUnderMarginIntradayIsSet(m.FlattenPositionsWhenUnderMarginIntradayIsSet())
	to.SetFlattenPositionsWhenUnderMarginIntraday(m.FlattenPositionsWhenUnderMarginIntraday())
	to.SetFlattenPositionsWhenUnderMarginAtEndOfDayIsSet(m.FlattenPositionsWhenUnderMarginAtEndOfDayIsSet())
	to.SetFlattenPositionsWhenUnderMarginAtEndOfDay(m.FlattenPositionsWhenUnderMarginAtEndOfDay())
	to.SetSenderSubIDIsSet(m.SenderSubIDIsSet())
	to.SetSenderSubID(m.SenderSubID())
	to.SetSenderLocationIdIsSet(m.SenderLocationIdIsSet())
	to.SetSenderLocationId(m.SenderLocationId())
	to.SetSelfMatchPreventionIDIsSet(m.SelfMatchPreventionIDIsSet())
	to.SetSelfMatchPreventionID(m.SelfMatchPreventionID())
	to.SetCTICodeIsSet(m.CTICodeIsSet())
	to.SetCTICode(m.CTICode())
	to.SetTradeAccountIsReadOnlyIsSet(m.TradeAccountIsReadOnlyIsSet())
	to.SetTradeAccountIsReadOnly(m.TradeAccountIsReadOnly())
	to.SetMaximumGlobalPositionQuantityIsSet(m.MaximumGlobalPositionQuantityIsSet())
	to.SetMaximumGlobalPositionQuantity(m.MaximumGlobalPositionQuantity())
	to.SetTradeFeePerContractIsSet(m.TradeFeePerContractIsSet())
	to.SetTradeFeePerContract(m.TradeFeePerContract())
	to.SetTradeFeePerShareIsSet(m.TradeFeePerShareIsSet())
	to.SetTradeFeePerShare(m.TradeFeePerShare())
	to.SetRequireSufficientMarginForNewPositionsIsSet(m.RequireSufficientMarginForNewPositionsIsSet())
	to.SetRequireSufficientMarginForNewPositions(m.RequireSufficientMarginForNewPositions())
	to.SetUsePercentOfMarginIsSet(m.UsePercentOfMarginIsSet())
	to.SetUsePercentOfMargin(m.UsePercentOfMargin())
	to.SetUsePercentOfMarginForDayTradingIsSet(m.UsePercentOfMarginForDayTradingIsSet())
	to.SetUsePercentOfMarginForDayTrading(m.UsePercentOfMarginForDayTrading())
	to.SetMaximumAllowedAccountBalanceForPositionsAsPercentageIsSet(m.MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet())
	to.SetMaximumAllowedAccountBalanceForPositionsAsPercentage(m.MaximumAllowedAccountBalanceForPositionsAsPercentage())
	to.SetFirmIDIsSet(m.FirmIDIsSet())
	to.SetFirmID(m.FirmID())
	to.SetTradingIsDisabledIsSet(m.TradingIsDisabledIsSet())
	to.SetTradingIsDisabled(m.TradingIsDisabled())
	to.SetDescriptiveNameIsSet(m.DescriptiveNameIsSet())
	to.SetDescriptiveName(m.DescriptiveName())
	to.SetIsMasterFirmControlAccountIsSet(m.IsMasterFirmControlAccountIsSet())
	to.SetIsMasterFirmControlAccount(m.IsMasterFirmControlAccount())
	to.SetMinimumRequiredAccountValueIsSet(m.MinimumRequiredAccountValueIsSet())
	to.SetMinimumRequiredAccountValue(m.MinimumRequiredAccountValue())
	to.SetBeginTimeForDayMarginIsSet(m.BeginTimeForDayMarginIsSet())
	to.SetBeginTimeForDayMargin(m.BeginTimeForDayMargin())
	to.SetEndTimeForDayMarginIsSet(m.EndTimeForDayMarginIsSet())
	to.SetEndTimeForDayMargin(m.EndTimeForDayMargin())
	to.SetDayMarginTimeZoneIsSet(m.DayMarginTimeZoneIsSet())
	to.SetDayMarginTimeZone(m.DayMarginTimeZone())
	to.SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet(m.UseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet())
	to.SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday(m.UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday())
	to.SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet(m.UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet())
	to.SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay(m.UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay())
	to.SetUseMasterFirm_SymbolLimitsArrayIsSet(m.UseMasterFirm_SymbolLimitsArrayIsSet())
	to.SetUseMasterFirm_SymbolLimitsArray(m.UseMasterFirm_SymbolLimitsArray())
	to.SetUseMasterFirm_TradeFeesIsSet(m.UseMasterFirm_TradeFeesIsSet())
	to.SetUseMasterFirm_TradeFees(m.UseMasterFirm_TradeFees())
	to.SetUseMasterFirm_TradeFeePerShareIsSet(m.UseMasterFirm_TradeFeePerShareIsSet())
	to.SetUseMasterFirm_TradeFeePerShare(m.UseMasterFirm_TradeFeePerShare())
	to.SetUseMasterFirm_RequireSufficientMarginForNewPositionsIsSet(m.UseMasterFirm_RequireSufficientMarginForNewPositionsIsSet())
	to.SetUseMasterFirm_RequireSufficientMarginForNewPositions(m.UseMasterFirm_RequireSufficientMarginForNewPositions())
	to.SetUseMasterFirm_UsePercentOfMarginIsSet(m.UseMasterFirm_UsePercentOfMarginIsSet())
	to.SetUseMasterFirm_UsePercentOfMargin(m.UseMasterFirm_UsePercentOfMargin())
	to.SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet(m.UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet())
	to.SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage(m.UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage())
	to.SetUseMasterFirm_MinimumRequiredAccountValueIsSet(m.UseMasterFirm_MinimumRequiredAccountValueIsSet())
	to.SetUseMasterFirm_MinimumRequiredAccountValue(m.UseMasterFirm_MinimumRequiredAccountValue())
	to.SetUseMasterFirm_MarginTimeSettingsIsSet(m.UseMasterFirm_MarginTimeSettingsIsSet())
	to.SetUseMasterFirm_MarginTimeSettings(m.UseMasterFirm_MarginTimeSettings())
	to.SetUseMasterFirm_TradingIsDisabledIsSet(m.UseMasterFirm_TradingIsDisabledIsSet())
	to.SetUseMasterFirm_TradingIsDisabled(m.UseMasterFirm_TradingIsDisabled())
	to.SetIsTradeStatisticsPublicallySharedIsSet(m.IsTradeStatisticsPublicallySharedIsSet())
	to.SetIsTradeStatisticsPublicallyShared(m.IsTradeStatisticsPublicallyShared())
	to.SetIsReadOnlyFollowingRequestsAllowedIsSet(m.IsReadOnlyFollowingRequestsAllowedIsSet())
	to.SetIsReadOnlyFollowingRequestsAllowed(m.IsReadOnlyFollowingRequestsAllowed())
	to.SetIsTradeAccountSharingAllowedIsSet(m.IsTradeAccountSharingAllowedIsSet())
	to.SetIsTradeAccountSharingAllowed(m.IsTradeAccountSharingAllowed())
	to.SetReadOnlyShareToAllSCUsernamesIsSet(m.ReadOnlyShareToAllSCUsernamesIsSet())
	to.SetReadOnlyShareToAllSCUsernames(m.ReadOnlyShareToAllSCUsernames())
	to.SetUseMasterFirm_SymbolCommissionsArrayIsSet(m.UseMasterFirm_SymbolCommissionsArrayIsSet())
	to.SetUseMasterFirm_SymbolCommissionsArray(m.UseMasterFirm_SymbolCommissionsArray())
	to.SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet(m.UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet())
	to.SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit(m.UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	to.SetUseMasterFirm_UsePercentOfMarginForDayTradingIsSet(m.UseMasterFirm_UsePercentOfMarginForDayTradingIsSet())
	to.SetUseMasterFirm_UsePercentOfMarginForDayTrading(m.UseMasterFirm_UsePercentOfMarginForDayTrading())
	to.SetUseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet(m.UseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet())
	to.SetUseMasterFirm_SymbolCommissionsArrayFullOverride(m.UseMasterFirm_SymbolCommissionsArrayFullOverride())
	to.SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet(m.UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet())
	to.SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders(m.UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders())
	to.SetUseMasterFirm_UsePercentOfMarginFullOverrideIsSet(m.UseMasterFirm_UsePercentOfMarginFullOverrideIsSet())
	to.SetUseMasterFirm_UsePercentOfMarginFullOverride(m.UseMasterFirm_UsePercentOfMarginFullOverride())
	to.SetUseMasterFirm_TradeFeesFullOverrideIsSet(m.UseMasterFirm_TradeFeesFullOverrideIsSet())
	to.SetUseMasterFirm_TradeFeesFullOverride(m.UseMasterFirm_TradeFeesFullOverride())
	to.SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet(m.UseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet())
	to.SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride(m.UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride())
	to.SetLiquidationOnlyModeIsSet(m.LiquidationOnlyModeIsSet())
	to.SetLiquidationOnlyMode(m.LiquidationOnlyMode())
	to.SetCustomerOrFirmIsSet(m.CustomerOrFirmIsSet())
	to.SetCustomerOrFirm(m.CustomerOrFirm())
	to.SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet(m.MasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet())
	to.SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet(m.MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet())
	to.SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet(m.MasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet())
	to.SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue(m.MasterFirm_FlattenCancelWhenUnderMinimumAccountValue())
	to.SetMasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet(m.MasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet())
	to.SetMasterFirm_FlattenCancelWhenUnderMarginIntraday(m.MasterFirm_FlattenCancelWhenUnderMarginIntraday())
	to.SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet(m.MasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet())
	to.SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay(m.MasterFirm_FlattenCancelWhenUnderMarginEndOfDay())
	to.SetMasterFirm_MaximumOrderQuantityIsSet(m.MasterFirm_MaximumOrderQuantityIsSet())
	to.SetMasterFirm_MaximumOrderQuantity(m.MasterFirm_MaximumOrderQuantity())
	to.SetExchangeTraderIdIsSet(m.ExchangeTraderIdIsSet())
	to.SetExchangeTraderId(m.ExchangeTraderId())
	to.SetUseFixedCashOnHandBalanceIsSet(m.UseFixedCashOnHandBalanceIsSet())
	to.SetUseFixedCashOnHandBalance(m.UseFixedCashOnHandBalance())
	to.SetFixedCashOnHandBalanceIsSet(m.FixedCashOnHandBalanceIsSet())
	to.SetFixedCashOnHandBalance(m.FixedCashOnHandBalance())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradeAccountDataUpdate) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10117)
	w.Uint32Field("RequestID", m.RequestID())
	w.BoolField("IsNewAccount", m.IsNewAccount())
	w.StringField("NewAccountAuthorizedUsername", m.NewAccountAuthorizedUsername())
	w.StringField("TradeAccount", m.TradeAccount())
	w.BoolField("CurrencyCodeIsSet", m.CurrencyCodeIsSet())
	w.StringField("CurrencyCode", m.CurrencyCode())
	w.BoolField("DailyNetLossLimitInAccountCurrencyIsSet", m.DailyNetLossLimitInAccountCurrencyIsSet())
	w.Float32Field("DailyNetLossLimitInAccountCurrency", m.DailyNetLossLimitInAccountCurrency())
	w.BoolField("PercentOfCashBalanceForDailyNetLossLimitIsSet", m.PercentOfCashBalanceForDailyNetLossLimitIsSet())
	w.Int32Field("PercentOfCashBalanceForDailyNetLossLimit", m.PercentOfCashBalanceForDailyNetLossLimit())
	w.BoolField("UseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet", m.UseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet())
	w.BoolField("UseTrailingAccountValueToNotAllowIncreaseInPositions", m.UseTrailingAccountValueToNotAllowIncreaseInPositions())
	w.BoolField("DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet", m.DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet())
	w.Uint8Field("DoNotAllowIncreaseInPositionsAtDailyLossLimit", m.DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	w.BoolField("FlattenPositionsAtDailyLossLimitIsSet", m.FlattenPositionsAtDailyLossLimitIsSet())
	w.Uint8Field("FlattenPositionsAtDailyLossLimit", m.FlattenPositionsAtDailyLossLimit())
	w.BoolField("ClosePositionsAtEndOfDayIsSet", m.ClosePositionsAtEndOfDayIsSet())
	w.Uint8Field("ClosePositionsAtEndOfDay", m.ClosePositionsAtEndOfDay())
	w.BoolField("FlattenPositionsWhenUnderMarginIntradayIsSet", m.FlattenPositionsWhenUnderMarginIntradayIsSet())
	w.Uint8Field("FlattenPositionsWhenUnderMarginIntraday", m.FlattenPositionsWhenUnderMarginIntraday())
	w.BoolField("FlattenPositionsWhenUnderMarginAtEndOfDayIsSet", m.FlattenPositionsWhenUnderMarginAtEndOfDayIsSet())
	w.Uint8Field("FlattenPositionsWhenUnderMarginAtEndOfDay", m.FlattenPositionsWhenUnderMarginAtEndOfDay())
	w.BoolField("SenderSubIDIsSet", m.SenderSubIDIsSet())
	w.StringField("SenderSubID", m.SenderSubID())
	w.BoolField("SenderLocationIdIsSet", m.SenderLocationIdIsSet())
	w.StringField("SenderLocationId", m.SenderLocationId())
	w.BoolField("SelfMatchPreventionIDIsSet", m.SelfMatchPreventionIDIsSet())
	w.StringField("SelfMatchPreventionID", m.SelfMatchPreventionID())
	w.BoolField("CTICodeIsSet", m.CTICodeIsSet())
	w.Int32Field("CTICode", m.CTICode())
	w.BoolField("TradeAccountIsReadOnlyIsSet", m.TradeAccountIsReadOnlyIsSet())
	w.BoolField("TradeAccountIsReadOnly", m.TradeAccountIsReadOnly())
	w.BoolField("MaximumGlobalPositionQuantityIsSet", m.MaximumGlobalPositionQuantityIsSet())
	w.Int32Field("MaximumGlobalPositionQuantity", m.MaximumGlobalPositionQuantity())
	w.BoolField("TradeFeePerContractIsSet", m.TradeFeePerContractIsSet())
	w.Float64Field("TradeFeePerContract", m.TradeFeePerContract())
	w.BoolField("TradeFeePerShareIsSet", m.TradeFeePerShareIsSet())
	w.Float64Field("TradeFeePerShare", m.TradeFeePerShare())
	w.BoolField("RequireSufficientMarginForNewPositionsIsSet", m.RequireSufficientMarginForNewPositionsIsSet())
	w.Uint8Field("RequireSufficientMarginForNewPositions", m.RequireSufficientMarginForNewPositions())
	w.BoolField("UsePercentOfMarginIsSet", m.UsePercentOfMarginIsSet())
	w.Int32Field("UsePercentOfMargin", m.UsePercentOfMargin())
	w.BoolField("UsePercentOfMarginForDayTradingIsSet", m.UsePercentOfMarginForDayTradingIsSet())
	w.Int32Field("UsePercentOfMarginForDayTrading", m.UsePercentOfMarginForDayTrading())
	w.BoolField("MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet", m.MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet())
	w.Int32Field("MaximumAllowedAccountBalanceForPositionsAsPercentage", m.MaximumAllowedAccountBalanceForPositionsAsPercentage())
	w.BoolField("FirmIDIsSet", m.FirmIDIsSet())
	w.StringField("FirmID", m.FirmID())
	w.BoolField("TradingIsDisabledIsSet", m.TradingIsDisabledIsSet())
	w.BoolField("TradingIsDisabled", m.TradingIsDisabled())
	w.BoolField("DescriptiveNameIsSet", m.DescriptiveNameIsSet())
	w.StringField("DescriptiveName", m.DescriptiveName())
	w.BoolField("IsMasterFirmControlAccountIsSet", m.IsMasterFirmControlAccountIsSet())
	w.BoolField("IsMasterFirmControlAccount", m.IsMasterFirmControlAccount())
	w.BoolField("MinimumRequiredAccountValueIsSet", m.MinimumRequiredAccountValueIsSet())
	w.Float64Field("MinimumRequiredAccountValue", m.MinimumRequiredAccountValue())
	w.BoolField("BeginTimeForDayMarginIsSet", m.BeginTimeForDayMarginIsSet())
	w.Int64Field("BeginTimeForDayMargin", m.BeginTimeForDayMargin())
	w.BoolField("EndTimeForDayMarginIsSet", m.EndTimeForDayMarginIsSet())
	w.Int64Field("EndTimeForDayMargin", m.EndTimeForDayMargin())
	w.BoolField("DayMarginTimeZoneIsSet", m.DayMarginTimeZoneIsSet())
	w.StringField("DayMarginTimeZone", m.DayMarginTimeZone())
	w.BoolField("m_UseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet", m.UseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet())
	w.BoolField("m_UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday", m.UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday())
	w.BoolField("m_UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet", m.UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet())
	w.BoolField("m_UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay", m.UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay())
	w.BoolField("m_UseMasterFirm_SymbolLimitsArrayIsSet", m.UseMasterFirm_SymbolLimitsArrayIsSet())
	w.BoolField("m_UseMasterFirm_SymbolLimitsArray", m.UseMasterFirm_SymbolLimitsArray())
	w.BoolField("m_UseMasterFirm_TradeFeesIsSet", m.UseMasterFirm_TradeFeesIsSet())
	w.BoolField("m_UseMasterFirm_TradeFees", m.UseMasterFirm_TradeFees())
	w.BoolField("m_UseMasterFirm_TradeFeePerShareIsSet", m.UseMasterFirm_TradeFeePerShareIsSet())
	w.BoolField("m_UseMasterFirm_TradeFeePerShare", m.UseMasterFirm_TradeFeePerShare())
	w.BoolField("m_UseMasterFirm_RequireSufficientMarginForNewPositionsIsSet", m.UseMasterFirm_RequireSufficientMarginForNewPositionsIsSet())
	w.BoolField("m_UseMasterFirm_RequireSufficientMarginForNewPositions", m.UseMasterFirm_RequireSufficientMarginForNewPositions())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginIsSet", m.UseMasterFirm_UsePercentOfMarginIsSet())
	w.BoolField("m_UseMasterFirm_UsePercentOfMargin", m.UseMasterFirm_UsePercentOfMargin())
	w.BoolField("m_UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet", m.UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet())
	w.BoolField("m_UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage", m.UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage())
	w.BoolField("m_UseMasterFirm_MinimumRequiredAccountValueIsSet", m.UseMasterFirm_MinimumRequiredAccountValueIsSet())
	w.BoolField("m_UseMasterFirm_MinimumRequiredAccountValue", m.UseMasterFirm_MinimumRequiredAccountValue())
	w.BoolField("m_UseMasterFirm_MarginTimeSettingsIsSet", m.UseMasterFirm_MarginTimeSettingsIsSet())
	w.BoolField("m_UseMasterFirm_MarginTimeSettings", m.UseMasterFirm_MarginTimeSettings())
	w.BoolField("m_UseMasterFirm_TradingIsDisabledIsSet", m.UseMasterFirm_TradingIsDisabledIsSet())
	w.BoolField("m_UseMasterFirm_TradingIsDisabled", m.UseMasterFirm_TradingIsDisabled())
	w.BoolField("IsTradeStatisticsPublicallySharedIsSet", m.IsTradeStatisticsPublicallySharedIsSet())
	w.BoolField("IsTradeStatisticsPublicallyShared", m.IsTradeStatisticsPublicallyShared())
	w.BoolField("IsReadOnlyFollowingRequestsAllowedIsSet", m.IsReadOnlyFollowingRequestsAllowedIsSet())
	w.BoolField("IsReadOnlyFollowingRequestsAllowed", m.IsReadOnlyFollowingRequestsAllowed())
	w.BoolField("IsTradeAccountSharingAllowedIsSet", m.IsTradeAccountSharingAllowedIsSet())
	w.BoolField("IsTradeAccountSharingAllowed", m.IsTradeAccountSharingAllowed())
	w.BoolField("ReadOnlyShareToAllSCUsernamesIsSet", m.ReadOnlyShareToAllSCUsernamesIsSet())
	w.Uint8Field("ReadOnlyShareToAllSCUsernames", m.ReadOnlyShareToAllSCUsernames())
	w.BoolField("m_UseMasterFirm_SymbolCommissionsArrayIsSet", m.UseMasterFirm_SymbolCommissionsArrayIsSet())
	w.BoolField("m_UseMasterFirm_SymbolCommissionsArray", m.UseMasterFirm_SymbolCommissionsArray())
	w.BoolField("m_UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet", m.UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet())
	w.BoolField("m_UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit", m.UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginForDayTradingIsSet", m.UseMasterFirm_UsePercentOfMarginForDayTradingIsSet())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginForDayTrading", m.UseMasterFirm_UsePercentOfMarginForDayTrading())
	w.BoolField("m_UseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet", m.UseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet())
	w.BoolField("m_UseMasterFirm_SymbolCommissionsArrayFullOverride", m.UseMasterFirm_SymbolCommissionsArrayFullOverride())
	w.BoolField("m_UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet", m.UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet())
	w.BoolField("m_UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders", m.UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginFullOverrideIsSet", m.UseMasterFirm_UsePercentOfMarginFullOverrideIsSet())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginFullOverride", m.UseMasterFirm_UsePercentOfMarginFullOverride())
	w.BoolField("m_UseMasterFirm_TradeFeesFullOverrideIsSet", m.UseMasterFirm_TradeFeesFullOverrideIsSet())
	w.BoolField("m_UseMasterFirm_TradeFeesFullOverride", m.UseMasterFirm_TradeFeesFullOverride())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet", m.UseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet())
	w.BoolField("m_UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride", m.UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride())
	w.BoolField("m_LiquidationOnlyModeIsSet", m.LiquidationOnlyModeIsSet())
	w.Uint8Field("m_LiquidationOnlyMode", m.LiquidationOnlyMode())
	w.BoolField("m_CustomerOrFirmIsSet", m.CustomerOrFirmIsSet())
	w.Uint8Field("m_CustomerOrFirm", m.CustomerOrFirm())
	w.BoolField("m_MasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet", m.MasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet())
	w.Uint8Field("m_MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet", m.MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet())
	w.BoolField("m_MasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet", m.MasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet())
	w.Uint8Field("m_MasterFirm_FlattenCancelWhenUnderMinimumAccountValue", m.MasterFirm_FlattenCancelWhenUnderMinimumAccountValue())
	w.BoolField("m_MasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet", m.MasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet())
	w.Uint8Field("m_MasterFirm_FlattenCancelWhenUnderMarginIntraday", m.MasterFirm_FlattenCancelWhenUnderMarginIntraday())
	w.BoolField("m_MasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet", m.MasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet())
	w.Uint8Field("m_MasterFirm_FlattenCancelWhenUnderMarginEndOfDay", m.MasterFirm_FlattenCancelWhenUnderMarginEndOfDay())
	w.Uint32Field("m_MasterFirm_MaximumOrderQuantityIsSet", m.MasterFirm_MaximumOrderQuantityIsSet())
	w.Uint32Field("m_MasterFirm_MaximumOrderQuantity", m.MasterFirm_MaximumOrderQuantity())
	w.BoolField("m_ExchangeTraderIdIsSet", m.ExchangeTraderIdIsSet())
	w.StringField("m_ExchangeTraderId", m.ExchangeTraderId())
	w.BoolField("m_UseFixedCashOnHandBalanceIsSet", m.UseFixedCashOnHandBalanceIsSet())
	w.BoolField("m_UseFixedCashOnHandBalance", m.UseFixedCashOnHandBalance())
	w.BoolField("m_FixedCashOnHandBalanceIsSet", m.FixedCashOnHandBalanceIsSet())
	w.Float32Field("m_FixedCashOnHandBalance", m.FixedCashOnHandBalance())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataUpdate) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10117 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "IsNewAccount":
			m.SetIsNewAccount(r.Bool())
		case "NewAccountAuthorizedUsername":
			m.SetNewAccountAuthorizedUsername(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "CurrencyCodeIsSet":
			m.SetCurrencyCodeIsSet(r.Bool())
		case "CurrencyCode":
			m.SetCurrencyCode(r.String())
		case "DailyNetLossLimitInAccountCurrencyIsSet":
			m.SetDailyNetLossLimitInAccountCurrencyIsSet(r.Bool())
		case "DailyNetLossLimitInAccountCurrency":
			m.SetDailyNetLossLimitInAccountCurrency(r.Float32())
		case "PercentOfCashBalanceForDailyNetLossLimitIsSet":
			m.SetPercentOfCashBalanceForDailyNetLossLimitIsSet(r.Bool())
		case "PercentOfCashBalanceForDailyNetLossLimit":
			m.SetPercentOfCashBalanceForDailyNetLossLimit(r.Int32())
		case "UseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet":
			m.SetUseTrailingAccountValueToNotAllowIncreaseInPositionsIsSet(r.Bool())
		case "UseTrailingAccountValueToNotAllowIncreaseInPositions":
			m.SetUseTrailingAccountValueToNotAllowIncreaseInPositions(r.Bool())
		case "DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet":
			m.SetDoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet(r.Bool())
		case "DoNotAllowIncreaseInPositionsAtDailyLossLimit":
			m.SetDoNotAllowIncreaseInPositionsAtDailyLossLimit(r.Uint8())
		case "FlattenPositionsAtDailyLossLimitIsSet":
			m.SetFlattenPositionsAtDailyLossLimitIsSet(r.Bool())
		case "FlattenPositionsAtDailyLossLimit":
			m.SetFlattenPositionsAtDailyLossLimit(r.Uint8())
		case "ClosePositionsAtEndOfDayIsSet":
			m.SetClosePositionsAtEndOfDayIsSet(r.Bool())
		case "ClosePositionsAtEndOfDay":
			m.SetClosePositionsAtEndOfDay(r.Uint8())
		case "FlattenPositionsWhenUnderMarginIntradayIsSet":
			m.SetFlattenPositionsWhenUnderMarginIntradayIsSet(r.Bool())
		case "FlattenPositionsWhenUnderMarginIntraday":
			m.SetFlattenPositionsWhenUnderMarginIntraday(r.Uint8())
		case "FlattenPositionsWhenUnderMarginAtEndOfDayIsSet":
			m.SetFlattenPositionsWhenUnderMarginAtEndOfDayIsSet(r.Bool())
		case "FlattenPositionsWhenUnderMarginAtEndOfDay":
			m.SetFlattenPositionsWhenUnderMarginAtEndOfDay(r.Uint8())
		case "SenderSubIDIsSet":
			m.SetSenderSubIDIsSet(r.Bool())
		case "SenderSubID":
			m.SetSenderSubID(r.String())
		case "SenderLocationIdIsSet":
			m.SetSenderLocationIdIsSet(r.Bool())
		case "SenderLocationId":
			m.SetSenderLocationId(r.String())
		case "SelfMatchPreventionIDIsSet":
			m.SetSelfMatchPreventionIDIsSet(r.Bool())
		case "SelfMatchPreventionID":
			m.SetSelfMatchPreventionID(r.String())
		case "CTICodeIsSet":
			m.SetCTICodeIsSet(r.Bool())
		case "CTICode":
			m.SetCTICode(r.Int32())
		case "TradeAccountIsReadOnlyIsSet":
			m.SetTradeAccountIsReadOnlyIsSet(r.Bool())
		case "TradeAccountIsReadOnly":
			m.SetTradeAccountIsReadOnly(r.Bool())
		case "MaximumGlobalPositionQuantityIsSet":
			m.SetMaximumGlobalPositionQuantityIsSet(r.Bool())
		case "MaximumGlobalPositionQuantity":
			m.SetMaximumGlobalPositionQuantity(r.Int32())
		case "TradeFeePerContractIsSet":
			m.SetTradeFeePerContractIsSet(r.Bool())
		case "TradeFeePerContract":
			m.SetTradeFeePerContract(r.Float64())
		case "TradeFeePerShareIsSet":
			m.SetTradeFeePerShareIsSet(r.Bool())
		case "TradeFeePerShare":
			m.SetTradeFeePerShare(r.Float64())
		case "RequireSufficientMarginForNewPositionsIsSet":
			m.SetRequireSufficientMarginForNewPositionsIsSet(r.Bool())
		case "RequireSufficientMarginForNewPositions":
			m.SetRequireSufficientMarginForNewPositions(r.Uint8())
		case "UsePercentOfMarginIsSet":
			m.SetUsePercentOfMarginIsSet(r.Bool())
		case "UsePercentOfMargin":
			m.SetUsePercentOfMargin(r.Int32())
		case "UsePercentOfMarginForDayTradingIsSet":
			m.SetUsePercentOfMarginForDayTradingIsSet(r.Bool())
		case "UsePercentOfMarginForDayTrading":
			m.SetUsePercentOfMarginForDayTrading(r.Int32())
		case "MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet":
			m.SetMaximumAllowedAccountBalanceForPositionsAsPercentageIsSet(r.Bool())
		case "MaximumAllowedAccountBalanceForPositionsAsPercentage":
			m.SetMaximumAllowedAccountBalanceForPositionsAsPercentage(r.Int32())
		case "FirmIDIsSet":
			m.SetFirmIDIsSet(r.Bool())
		case "FirmID":
			m.SetFirmID(r.String())
		case "TradingIsDisabledIsSet":
			m.SetTradingIsDisabledIsSet(r.Bool())
		case "TradingIsDisabled":
			m.SetTradingIsDisabled(r.Bool())
		case "DescriptiveNameIsSet":
			m.SetDescriptiveNameIsSet(r.Bool())
		case "DescriptiveName":
			m.SetDescriptiveName(r.String())
		case "IsMasterFirmControlAccountIsSet":
			m.SetIsMasterFirmControlAccountIsSet(r.Bool())
		case "IsMasterFirmControlAccount":
			m.SetIsMasterFirmControlAccount(r.Bool())
		case "MinimumRequiredAccountValueIsSet":
			m.SetMinimumRequiredAccountValueIsSet(r.Bool())
		case "MinimumRequiredAccountValue":
			m.SetMinimumRequiredAccountValue(r.Float64())
		case "BeginTimeForDayMarginIsSet":
			m.SetBeginTimeForDayMarginIsSet(r.Bool())
		case "BeginTimeForDayMargin":
			m.SetBeginTimeForDayMargin(r.Int64())
		case "EndTimeForDayMarginIsSet":
			m.SetEndTimeForDayMarginIsSet(r.Bool())
		case "EndTimeForDayMargin":
			m.SetEndTimeForDayMargin(r.Int64())
		case "DayMarginTimeZoneIsSet":
			m.SetDayMarginTimeZoneIsSet(r.Bool())
		case "DayMarginTimeZone":
			m.SetDayMarginTimeZone(r.String())
		case "m_UseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet":
			m.SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntradayIsSet(r.Bool())
		case "m_UseMasterFirm_FlattenPositionsWhenUnderMarginIntraday":
			m.SetUseMasterFirm_FlattenPositionsWhenUnderMarginIntraday(r.Bool())
		case "m_UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet":
			m.SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDayIsSet(r.Bool())
		case "m_UseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay":
			m.SetUseMasterFirm_FlattenPositionsWhenUnderMarginAtEndOfDay(r.Bool())
		case "m_UseMasterFirm_SymbolLimitsArrayIsSet":
			m.SetUseMasterFirm_SymbolLimitsArrayIsSet(r.Bool())
		case "m_UseMasterFirm_SymbolLimitsArray":
			m.SetUseMasterFirm_SymbolLimitsArray(r.Bool())
		case "m_UseMasterFirm_TradeFeesIsSet":
			m.SetUseMasterFirm_TradeFeesIsSet(r.Bool())
		case "m_UseMasterFirm_TradeFees":
			m.SetUseMasterFirm_TradeFees(r.Bool())
		case "m_UseMasterFirm_TradeFeePerShareIsSet":
			m.SetUseMasterFirm_TradeFeePerShareIsSet(r.Bool())
		case "m_UseMasterFirm_TradeFeePerShare":
			m.SetUseMasterFirm_TradeFeePerShare(r.Bool())
		case "m_UseMasterFirm_RequireSufficientMarginForNewPositionsIsSet":
			m.SetUseMasterFirm_RequireSufficientMarginForNewPositionsIsSet(r.Bool())
		case "m_UseMasterFirm_RequireSufficientMarginForNewPositions":
			m.SetUseMasterFirm_RequireSufficientMarginForNewPositions(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginIsSet":
			m.SetUseMasterFirm_UsePercentOfMarginIsSet(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMargin":
			m.SetUseMasterFirm_UsePercentOfMargin(r.Bool())
		case "m_UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet":
			m.SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentageIsSet(r.Bool())
		case "m_UseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage":
			m.SetUseMasterFirm_MaximumAllowedAccountBalanceForPositionsAsPercentage(r.Bool())
		case "m_UseMasterFirm_MinimumRequiredAccountValueIsSet":
			m.SetUseMasterFirm_MinimumRequiredAccountValueIsSet(r.Bool())
		case "m_UseMasterFirm_MinimumRequiredAccountValue":
			m.SetUseMasterFirm_MinimumRequiredAccountValue(r.Bool())
		case "m_UseMasterFirm_MarginTimeSettingsIsSet":
			m.SetUseMasterFirm_MarginTimeSettingsIsSet(r.Bool())
		case "m_UseMasterFirm_MarginTimeSettings":
			m.SetUseMasterFirm_MarginTimeSettings(r.Bool())
		case "m_UseMasterFirm_TradingIsDisabledIsSet":
			m.SetUseMasterFirm_TradingIsDisabledIsSet(r.Bool())
		case "m_UseMasterFirm_TradingIsDisabled":
			m.SetUseMasterFirm_TradingIsDisabled(r.Bool())
		case "IsTradeStatisticsPublicallySharedIsSet":
			m.SetIsTradeStatisticsPublicallySharedIsSet(r.Bool())
		case "IsTradeStatisticsPublicallyShared":
			m.SetIsTradeStatisticsPublicallyShared(r.Bool())
		case "IsReadOnlyFollowingRequestsAllowedIsSet":
			m.SetIsReadOnlyFollowingRequestsAllowedIsSet(r.Bool())
		case "IsReadOnlyFollowingRequestsAllowed":
			m.SetIsReadOnlyFollowingRequestsAllowed(r.Bool())
		case "IsTradeAccountSharingAllowedIsSet":
			m.SetIsTradeAccountSharingAllowedIsSet(r.Bool())
		case "IsTradeAccountSharingAllowed":
			m.SetIsTradeAccountSharingAllowed(r.Bool())
		case "ReadOnlyShareToAllSCUsernamesIsSet":
			m.SetReadOnlyShareToAllSCUsernamesIsSet(r.Bool())
		case "ReadOnlyShareToAllSCUsernames":
			m.SetReadOnlyShareToAllSCUsernames(r.Uint8())
		case "m_UseMasterFirm_SymbolCommissionsArrayIsSet":
			m.SetUseMasterFirm_SymbolCommissionsArrayIsSet(r.Bool())
		case "m_UseMasterFirm_SymbolCommissionsArray":
			m.SetUseMasterFirm_SymbolCommissionsArray(r.Bool())
		case "m_UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet":
			m.SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimitIsSet(r.Bool())
		case "m_UseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit":
			m.SetUseMasterFirm_DoNotAllowIncreaseInPositionsAtDailyLossLimit(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginForDayTradingIsSet":
			m.SetUseMasterFirm_UsePercentOfMarginForDayTradingIsSet(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginForDayTrading":
			m.SetUseMasterFirm_UsePercentOfMarginForDayTrading(r.Bool())
		case "m_UseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet":
			m.SetUseMasterFirm_SymbolCommissionsArrayFullOverrideIsSet(r.Bool())
		case "m_UseMasterFirm_SymbolCommissionsArrayFullOverride":
			m.SetUseMasterFirm_SymbolCommissionsArrayFullOverride(r.Bool())
		case "m_UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet":
			m.SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrdersIsSet(r.Bool())
		case "m_UseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders":
			m.SetUseMasterFirm_NumDaysBeforeLastTradingDateToDisallowOrders(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginFullOverrideIsSet":
			m.SetUseMasterFirm_UsePercentOfMarginFullOverrideIsSet(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginFullOverride":
			m.SetUseMasterFirm_UsePercentOfMarginFullOverride(r.Bool())
		case "m_UseMasterFirm_TradeFeesFullOverrideIsSet":
			m.SetUseMasterFirm_TradeFeesFullOverrideIsSet(r.Bool())
		case "m_UseMasterFirm_TradeFeesFullOverride":
			m.SetUseMasterFirm_TradeFeesFullOverride(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet":
			m.SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverrideIsSet(r.Bool())
		case "m_UseMasterFirm_UsePercentOfMarginForDayTradingFullOverride":
			m.SetUseMasterFirm_UsePercentOfMarginForDayTradingFullOverride(r.Bool())
		case "m_LiquidationOnlyModeIsSet":
			m.SetLiquidationOnlyModeIsSet(r.Bool())
		case "m_LiquidationOnlyMode":
			m.SetLiquidationOnlyMode(r.Uint8())
		case "m_CustomerOrFirmIsSet":
			m.SetCustomerOrFirmIsSet(r.Bool())
		case "m_CustomerOrFirm":
			m.SetCustomerOrFirm(r.Uint8())
		case "m_MasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet":
			m.SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMetIsSet(r.Bool())
		case "m_MasterFirm_FlattenCancelAccountWhenDailyLossLimitMet":
			m.SetMasterFirm_FlattenCancelAccountWhenDailyLossLimitMet(r.Uint8())
		case "m_MasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet":
			m.SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValueIsSet(r.Bool())
		case "m_MasterFirm_FlattenCancelWhenUnderMinimumAccountValue":
			m.SetMasterFirm_FlattenCancelWhenUnderMinimumAccountValue(r.Uint8())
		case "m_MasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet":
			m.SetMasterFirm_FlattenCancelWhenUnderMarginIntradayIsSet(r.Bool())
		case "m_MasterFirm_FlattenCancelWhenUnderMarginIntraday":
			m.SetMasterFirm_FlattenCancelWhenUnderMarginIntraday(r.Uint8())
		case "m_MasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet":
			m.SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDayIsSet(r.Bool())
		case "m_MasterFirm_FlattenCancelWhenUnderMarginEndOfDay":
			m.SetMasterFirm_FlattenCancelWhenUnderMarginEndOfDay(r.Uint8())
		case "m_MasterFirm_MaximumOrderQuantityIsSet":
			m.SetMasterFirm_MaximumOrderQuantityIsSet(r.Uint32())
		case "m_MasterFirm_MaximumOrderQuantity":
			m.SetMasterFirm_MaximumOrderQuantity(r.Uint32())
		case "m_ExchangeTraderIdIsSet":
			m.SetExchangeTraderIdIsSet(r.Bool())
		case "m_ExchangeTraderId":
			m.SetExchangeTraderId(r.String())
		case "m_UseFixedCashOnHandBalanceIsSet":
			m.SetUseFixedCashOnHandBalanceIsSet(r.Bool())
		case "m_UseFixedCashOnHandBalance":
			m.SetUseFixedCashOnHandBalance(r.Bool())
		case "m_FixedCashOnHandBalanceIsSet":
			m.SetFixedCashOnHandBalanceIsSet(r.Bool())
		case "m_FixedCashOnHandBalance":
			m.SetFixedCashOnHandBalance(r.Float32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradeAccountDataUpdate) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
