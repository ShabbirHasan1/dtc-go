// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalMarketDepthDataRecordResponseSize = 32

//     Size           uint16                       = HistoricalMarketDepthDataRecordResponseSize  (32)
//     Type           uint16                       = HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE  (903)
//     RequestID      int32                        = 0
//     StartDateTime  DateTimeWithMicrosecondsInt  = 0
//     Command        uint8                        = 0
//     Flags          uint8                        = 0
//     NumOrders      uint16                       = 0
//     Price          float32                      = 0.000000
//     Quantity       uint32                       = 0
//     IsFinalRecord  bool                         = false
var _HistoricalMarketDepthDataRecordResponseDefault = []byte{32, 0, 135, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type HistoricalMarketDepthDataRecordResponse struct {
	p message.Fixed
}

func NewHistoricalMarketDepthDataRecordResponseFrom(b []byte) HistoricalMarketDepthDataRecordResponse {
	return HistoricalMarketDepthDataRecordResponse{p: message.NewFixed(b)}
}

func WrapHistoricalMarketDepthDataRecordResponse(b []byte) HistoricalMarketDepthDataRecordResponse {
	return HistoricalMarketDepthDataRecordResponse{p: message.WrapFixed(b)}
}

func NewHistoricalMarketDepthDataRecordResponse() *HistoricalMarketDepthDataRecordResponse {
	return &HistoricalMarketDepthDataRecordResponse{p: message.NewFixed(_HistoricalMarketDepthDataRecordResponseDefault)}
}

func ParseHistoricalMarketDepthDataRecordResponse(b []byte) (HistoricalMarketDepthDataRecordResponse, error) {
	if len(b) < 4 {
		return HistoricalMarketDepthDataRecordResponse{}, message.ErrShortBuffer
	}
	m := WrapHistoricalMarketDepthDataRecordResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalMarketDepthDataRecordResponse{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalMarketDepthDataRecordResponse{}, message.ErrBaseSizeOverflow
	}
	if size < 32 {
		clone := *NewHistoricalMarketDepthDataRecordResponse()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalMarketDepthDataRecordResponseDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m HistoricalMarketDepthDataRecordResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalMarketDepthDataRecordResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m HistoricalMarketDepthDataRecordResponse) RequestID() int32 {
	return m.p.Int32LE(4)
}

// StartDateTime
func (m HistoricalMarketDepthDataRecordResponse) StartDateTime() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(8))
}

// Command
func (m HistoricalMarketDepthDataRecordResponse) Command() uint8 {
	return m.p.Uint8(16)
}

// Flags
func (m HistoricalMarketDepthDataRecordResponse) Flags() uint8 {
	return m.p.Uint8(17)
}

// NumOrders
func (m HistoricalMarketDepthDataRecordResponse) NumOrders() uint16 {
	return m.p.Uint16LE(18)
}

// Price
func (m HistoricalMarketDepthDataRecordResponse) Price() float32 {
	return m.p.Float32LE(20)
}

// Quantity
func (m HistoricalMarketDepthDataRecordResponse) Quantity() uint32 {
	return m.p.Uint32LE(24)
}

// IsFinalRecord
func (m HistoricalMarketDepthDataRecordResponse) IsFinalRecord() bool {
	return m.p.Bool(28)
}

// SetRequestID
func (m *HistoricalMarketDepthDataRecordResponse) SetRequestID(value int32) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetInt32LE(4, value)
	return m
}

// SetStartDateTime
func (m *HistoricalMarketDepthDataRecordResponse) SetStartDateTime(value DateTimeWithMicrosecondsInt) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetInt64LE(8, int64(value))
	return m
}

// SetCommand
func (m *HistoricalMarketDepthDataRecordResponse) SetCommand(value uint8) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetUint8(16, value)
	return m
}

// SetFlags
func (m *HistoricalMarketDepthDataRecordResponse) SetFlags(value uint8) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetUint8(17, value)
	return m
}

// SetNumOrders
func (m *HistoricalMarketDepthDataRecordResponse) SetNumOrders(value uint16) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetUint16LE(18, value)
	return m
}

// SetPrice
func (m *HistoricalMarketDepthDataRecordResponse) SetPrice(value float32) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetFloat32LE(20, value)
	return m
}

// SetQuantity
func (m *HistoricalMarketDepthDataRecordResponse) SetQuantity(value uint32) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetUint32LE(24, value)
	return m
}

// SetIsFinalRecord
func (m *HistoricalMarketDepthDataRecordResponse) SetIsFinalRecord(value bool) *HistoricalMarketDepthDataRecordResponse {
	m.p.SetBool(28, value)
	return m
}

func (m HistoricalMarketDepthDataRecordResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalMarketDepthDataRecordResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m HistoricalMarketDepthDataRecordResponse) Copy(to HistoricalMarketDepthDataRecordResponse) {
	to.SetRequestID(m.RequestID())
	to.SetStartDateTime(m.StartDateTime())
	to.SetCommand(m.Command())
	to.SetFlags(m.Flags())
	to.SetNumOrders(m.NumOrders())
	to.SetPrice(m.Price())
	to.SetQuantity(m.Quantity())
	to.SetIsFinalRecord(m.IsFinalRecord())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalMarketDepthDataRecordResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 903)
	w.Int32Field("RequestID", m.RequestID())
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Uint8Field("Command", m.Command())
	w.Uint8Field("Flags", m.Flags())
	w.Uint16Field("NumOrders", m.NumOrders())
	w.Float32Field("Price", m.Price())
	w.Uint32Field("Quantity", m.Quantity())
	w.BoolField("IsFinalRecord", m.IsFinalRecord())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataRecordResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 903 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "StartDateTime":
			m.SetStartDateTime(DateTimeWithMicrosecondsInt(r.Int64()))
		case "Command":
			m.SetCommand(r.Uint8())
		case "Flags":
			m.SetFlags(r.Uint8())
		case "NumOrders":
			m.SetNumOrders(r.Uint16())
		case "Price":
			m.SetPrice(r.Float32())
		case "Quantity":
			m.SetQuantity(r.Uint32())
		case "IsFinalRecord":
			m.SetIsFinalRecord(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataRecordResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
