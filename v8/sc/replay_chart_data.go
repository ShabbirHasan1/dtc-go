// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const ReplayChartDataSize = 88

const ReplayChartDataFixedSize = 426

//     Size                                                   uint16                       = ReplayChartDataSize  (88)
//     Type                                                   uint16                       = REPLAY_CHART_DATA  (10104)
//     BaseSize                                               uint16                       = ReplayChartDataSize  (88)
//     RequestID                                              uint32                       = 0
//     Symbol                                                 string                       = ""
//     TradeAccount                                           string                       = ""
//     TimeZone                                               string                       = ""
//     StartDateTimeForInitialData                            DateTimeWithMillisecondsInt  = 0
//     StartDateTime                                          DateTimeWithMillisecondsInt  = 0
//     StopDateTime                                           DateTimeWithMillisecondsInt  = 0
//     SessionBeginTimeInSeconds                              uint16                       = 0
//     SessionEndTimeInSeconds                                uint16                       = 0
//     ReplaySpeed                                            float32                      = 1.000000
//     BarTimeInSeconds                                       int32                        = 0
//     PauseReplayAfterInitialDataSent                        uint8                        = 0
//     UseSavedPriorState                                     bool                         = false
//     SymbolVolatility                                       float32                      = 0.000000
//     InterestRate                                           float32                      = 0.000000
//     NumberOfOrdersToTriggerFinishToStopDateTime            int32                        = 0
//     MaximumNumberOfOrdersPerReplaySession                  int32                        = 0
//     NumberOfDaysForInitialDataFromBeforeLastSavedDateTime  int32                        = 0
//     SubAccountIdentifier                                   uint32                       = 0
//     OptionsPriceSendIntervalInSeconds                      int32                        = 0
var _ReplayChartDataDefault = []byte{88, 0, 120, 39, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                                                   uint16                       = ReplayChartDataFixedSize  (426)
//     Type                                                   uint16                       = REPLAY_CHART_DATA  (10104)
//     RequestID                                              uint32                       = 0
//     Symbol                                                 string[64]                   = ""
//     TradeAccount                                           string[32]                   = ""
//     TimeZone                                               string[256]                  = ""
//     StartDateTimeForInitialData                            DateTimeWithMillisecondsInt  = 0
//     StartDateTime                                          DateTimeWithMillisecondsInt  = 0
//     StopDateTime                                           DateTimeWithMillisecondsInt  = 0
//     SessionBeginTimeInSeconds                              uint16                       = 0
//     SessionEndTimeInSeconds                                uint16                       = 0
//     ReplaySpeed                                            float32                      = 1.000000
//     BarTimeInSeconds                                       int32                        = 0
//     PauseReplayAfterInitialDataSent                        uint8                        = 0
//     UseSavedPriorState                                     bool                         = false
//     SymbolVolatility                                       float32                      = 0.000000
//     InterestRate                                           float32                      = 0.000000
//     NumberOfOrdersToTriggerFinishToStopDateTime            int32                        = 0
//     MaximumNumberOfOrdersPerReplaySession                  int32                        = 0
//     NumberOfDaysForInitialDataFromBeforeLastSavedDateTime  int32                        = 0
//     SubAccountIdentifier                                   uint32                       = 0
//     OptionsPriceSendIntervalInSeconds                      int32                        = 0
var _ReplayChartDataFixedDefault = []byte{170, 1, 120, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type ReplayChartData struct {
	p message.VLS
}

type ReplayChartDataFixed struct {
	p message.Fixed
}

func NewReplayChartDataFrom(b []byte) ReplayChartData {
	return ReplayChartData{p: message.NewVLS(b)}
}

func WrapReplayChartData(b []byte) ReplayChartData {
	return ReplayChartData{p: message.WrapVLS(b)}
}

func NewReplayChartData() *ReplayChartData {
	return &ReplayChartData{p: message.NewVLS(_ReplayChartDataDefault)}
}

func ParseReplayChartData(b []byte) (ReplayChartData, error) {
	if len(b) < 6 {
		return ReplayChartData{}, message.ErrShortBuffer
	}
	m := WrapReplayChartData(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ReplayChartData{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return ReplayChartData{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 88 {
		newSize := len(b) + (88 - baseSize)
		if newSize > message.MaxSize {
			return ReplayChartData{}, message.ErrOverflow
		}
		clone := ReplayChartData{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _ReplayChartDataDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(88 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
			offset = clone.p.Uint16LE(18)
			if offset > 0 {
				clone.p.SetUint16LE(18, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewReplayChartDataFixedFrom(b []byte) ReplayChartDataFixed {
	return ReplayChartDataFixed{p: message.NewFixed(b)}
}

func WrapReplayChartDataFixed(b []byte) ReplayChartDataFixed {
	return ReplayChartDataFixed{p: message.WrapFixed(b)}
}

func NewReplayChartDataFixed() *ReplayChartDataFixed {
	return &ReplayChartDataFixed{p: message.NewFixed(_ReplayChartDataFixedDefault)}
}

func ParseReplayChartDataFixed(b []byte) (ReplayChartDataFixed, error) {
	if len(b) < 4 {
		return ReplayChartDataFixed{}, message.ErrShortBuffer
	}
	m := WrapReplayChartDataFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ReplayChartDataFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return ReplayChartDataFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 426 {
		clone := *NewReplayChartDataFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _ReplayChartDataFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m ReplayChartData) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ReplayChartData) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m ReplayChartData) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m ReplayChartData) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// Symbol
func (m ReplayChartData) Symbol() string {
	return m.p.StringVLS(10)
}

// TradeAccount
func (m ReplayChartData) TradeAccount() string {
	return m.p.StringVLS(14)
}

// TimeZone
func (m ReplayChartData) TimeZone() string {
	return m.p.StringVLS(18)
}

// StartDateTimeForInitialData
func (m ReplayChartData) StartDateTimeForInitialData() DateTimeWithMillisecondsInt {
	return DateTimeWithMillisecondsInt(m.p.Int64LE(22))
}

// StartDateTime
func (m ReplayChartData) StartDateTime() DateTimeWithMillisecondsInt {
	return DateTimeWithMillisecondsInt(m.p.Int64LE(30))
}

// StopDateTime
func (m ReplayChartData) StopDateTime() DateTimeWithMillisecondsInt {
	return DateTimeWithMillisecondsInt(m.p.Int64LE(38))
}

// SessionBeginTimeInSeconds
func (m ReplayChartData) SessionBeginTimeInSeconds() uint16 {
	return m.p.Uint16LE(46)
}

// SessionEndTimeInSeconds
func (m ReplayChartData) SessionEndTimeInSeconds() uint16 {
	return m.p.Uint16LE(48)
}

// ReplaySpeed
func (m ReplayChartData) ReplaySpeed() float32 {
	return m.p.Float32LE(50)
}

// BarTimeInSeconds
func (m ReplayChartData) BarTimeInSeconds() int32 {
	return m.p.Int32LE(54)
}

// PauseReplayAfterInitialDataSent
func (m ReplayChartData) PauseReplayAfterInitialDataSent() uint8 {
	return m.p.Uint8(58)
}

// UseSavedPriorState
func (m ReplayChartData) UseSavedPriorState() bool {
	return m.p.Bool(59)
}

// SymbolVolatility
func (m ReplayChartData) SymbolVolatility() float32 {
	return m.p.Float32LE(60)
}

// InterestRate
func (m ReplayChartData) InterestRate() float32 {
	return m.p.Float32LE(64)
}

// NumberOfOrdersToTriggerFinishToStopDateTime
func (m ReplayChartData) NumberOfOrdersToTriggerFinishToStopDateTime() int32 {
	return m.p.Int32LE(68)
}

// MaximumNumberOfOrdersPerReplaySession
func (m ReplayChartData) MaximumNumberOfOrdersPerReplaySession() int32 {
	return m.p.Int32LE(72)
}

// NumberOfDaysForInitialDataFromBeforeLastSavedDateTime
func (m ReplayChartData) NumberOfDaysForInitialDataFromBeforeLastSavedDateTime() int32 {
	return m.p.Int32LE(76)
}

// SubAccountIdentifier
func (m ReplayChartData) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(80)
}

// OptionsPriceSendIntervalInSeconds
func (m ReplayChartData) OptionsPriceSendIntervalInSeconds() int32 {
	return m.p.Int32LE(84)
}

// Size
func (m ReplayChartDataFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ReplayChartDataFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m ReplayChartDataFixed) RequestID() uint32 {
	return m.p.Uint32LE(4)
}

// Symbol
func (m ReplayChartDataFixed) Symbol() string {
	return m.p.StringFixed(8, 64)
}

// TradeAccount
func (m ReplayChartDataFixed) TradeAccount() string {
	return m.p.StringFixed(72, 32)
}

// TimeZone
func (m ReplayChartDataFixed) TimeZone() string {
	return m.p.StringFixed(104, 256)
}

// StartDateTimeForInitialData
func (m ReplayChartDataFixed) StartDateTimeForInitialData() DateTimeWithMillisecondsInt {
	return DateTimeWithMillisecondsInt(m.p.Int64LE(360))
}

// StartDateTime
func (m ReplayChartDataFixed) StartDateTime() DateTimeWithMillisecondsInt {
	return DateTimeWithMillisecondsInt(m.p.Int64LE(368))
}

// StopDateTime
func (m ReplayChartDataFixed) StopDateTime() DateTimeWithMillisecondsInt {
	return DateTimeWithMillisecondsInt(m.p.Int64LE(376))
}

// SessionBeginTimeInSeconds
func (m ReplayChartDataFixed) SessionBeginTimeInSeconds() uint16 {
	return m.p.Uint16LE(384)
}

// SessionEndTimeInSeconds
func (m ReplayChartDataFixed) SessionEndTimeInSeconds() uint16 {
	return m.p.Uint16LE(386)
}

// ReplaySpeed
func (m ReplayChartDataFixed) ReplaySpeed() float32 {
	return m.p.Float32LE(388)
}

// BarTimeInSeconds
func (m ReplayChartDataFixed) BarTimeInSeconds() int32 {
	return m.p.Int32LE(392)
}

// PauseReplayAfterInitialDataSent
func (m ReplayChartDataFixed) PauseReplayAfterInitialDataSent() uint8 {
	return m.p.Uint8(396)
}

// UseSavedPriorState
func (m ReplayChartDataFixed) UseSavedPriorState() bool {
	return m.p.Bool(397)
}

// SymbolVolatility
func (m ReplayChartDataFixed) SymbolVolatility() float32 {
	return m.p.Float32LE(398)
}

// InterestRate
func (m ReplayChartDataFixed) InterestRate() float32 {
	return m.p.Float32LE(402)
}

// NumberOfOrdersToTriggerFinishToStopDateTime
func (m ReplayChartDataFixed) NumberOfOrdersToTriggerFinishToStopDateTime() int32 {
	return m.p.Int32LE(406)
}

// MaximumNumberOfOrdersPerReplaySession
func (m ReplayChartDataFixed) MaximumNumberOfOrdersPerReplaySession() int32 {
	return m.p.Int32LE(410)
}

// NumberOfDaysForInitialDataFromBeforeLastSavedDateTime
func (m ReplayChartDataFixed) NumberOfDaysForInitialDataFromBeforeLastSavedDateTime() int32 {
	return m.p.Int32LE(414)
}

// SubAccountIdentifier
func (m ReplayChartDataFixed) SubAccountIdentifier() uint32 {
	return m.p.Uint32LE(418)
}

// OptionsPriceSendIntervalInSeconds
func (m ReplayChartDataFixed) OptionsPriceSendIntervalInSeconds() int32 {
	return m.p.Int32LE(422)
}

// SetRequestID
func (m *ReplayChartData) SetRequestID(value uint32) *ReplayChartData {
	m.p.SetUint32LE(6, value)
	return m
}

// SetSymbol
func (m *ReplayChartData) SetSymbol(value string) *ReplayChartData {
	m.p.SetStringVLS(10, value)
	return m
}

// SetTradeAccount
func (m *ReplayChartData) SetTradeAccount(value string) *ReplayChartData {
	m.p.SetStringVLS(14, value)
	return m
}

// SetTimeZone
func (m *ReplayChartData) SetTimeZone(value string) *ReplayChartData {
	m.p.SetStringVLS(18, value)
	return m
}

// SetStartDateTimeForInitialData
func (m *ReplayChartData) SetStartDateTimeForInitialData(value DateTimeWithMillisecondsInt) *ReplayChartData {
	m.p.SetInt64LE(22, int64(value))
	return m
}

// SetStartDateTime
func (m *ReplayChartData) SetStartDateTime(value DateTimeWithMillisecondsInt) *ReplayChartData {
	m.p.SetInt64LE(30, int64(value))
	return m
}

// SetStopDateTime
func (m *ReplayChartData) SetStopDateTime(value DateTimeWithMillisecondsInt) *ReplayChartData {
	m.p.SetInt64LE(38, int64(value))
	return m
}

// SetSessionBeginTimeInSeconds
func (m *ReplayChartData) SetSessionBeginTimeInSeconds(value uint16) *ReplayChartData {
	m.p.SetUint16LE(46, value)
	return m
}

// SetSessionEndTimeInSeconds
func (m *ReplayChartData) SetSessionEndTimeInSeconds(value uint16) *ReplayChartData {
	m.p.SetUint16LE(48, value)
	return m
}

// SetReplaySpeed
func (m *ReplayChartData) SetReplaySpeed(value float32) *ReplayChartData {
	m.p.SetFloat32LE(50, value)
	return m
}

// SetBarTimeInSeconds
func (m *ReplayChartData) SetBarTimeInSeconds(value int32) *ReplayChartData {
	m.p.SetInt32LE(54, value)
	return m
}

// SetPauseReplayAfterInitialDataSent
func (m *ReplayChartData) SetPauseReplayAfterInitialDataSent(value uint8) *ReplayChartData {
	m.p.SetUint8(58, value)
	return m
}

// SetUseSavedPriorState
func (m *ReplayChartData) SetUseSavedPriorState(value bool) *ReplayChartData {
	m.p.SetBool(59, value)
	return m
}

// SetSymbolVolatility
func (m *ReplayChartData) SetSymbolVolatility(value float32) *ReplayChartData {
	m.p.SetFloat32LE(60, value)
	return m
}

// SetInterestRate
func (m *ReplayChartData) SetInterestRate(value float32) *ReplayChartData {
	m.p.SetFloat32LE(64, value)
	return m
}

// SetNumberOfOrdersToTriggerFinishToStopDateTime
func (m *ReplayChartData) SetNumberOfOrdersToTriggerFinishToStopDateTime(value int32) *ReplayChartData {
	m.p.SetInt32LE(68, value)
	return m
}

// SetMaximumNumberOfOrdersPerReplaySession
func (m *ReplayChartData) SetMaximumNumberOfOrdersPerReplaySession(value int32) *ReplayChartData {
	m.p.SetInt32LE(72, value)
	return m
}

// SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime
func (m *ReplayChartData) SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(value int32) *ReplayChartData {
	m.p.SetInt32LE(76, value)
	return m
}

// SetSubAccountIdentifier
func (m *ReplayChartData) SetSubAccountIdentifier(value uint32) *ReplayChartData {
	m.p.SetUint32LE(80, value)
	return m
}

// SetOptionsPriceSendIntervalInSeconds
func (m *ReplayChartData) SetOptionsPriceSendIntervalInSeconds(value int32) *ReplayChartData {
	m.p.SetInt32LE(84, value)
	return m
}

// SetRequestID
func (m *ReplayChartDataFixed) SetRequestID(value uint32) *ReplayChartDataFixed {
	m.p.SetUint32LE(4, value)
	return m
}

// SetSymbol
func (m *ReplayChartDataFixed) SetSymbol(value string) *ReplayChartDataFixed {
	m.p.SetStringFixed(8, 64, value)
	return m
}

// SetTradeAccount
func (m *ReplayChartDataFixed) SetTradeAccount(value string) *ReplayChartDataFixed {
	m.p.SetStringFixed(72, 32, value)
	return m
}

// SetTimeZone
func (m *ReplayChartDataFixed) SetTimeZone(value string) *ReplayChartDataFixed {
	m.p.SetStringFixed(104, 256, value)
	return m
}

// SetStartDateTimeForInitialData
func (m *ReplayChartDataFixed) SetStartDateTimeForInitialData(value DateTimeWithMillisecondsInt) *ReplayChartDataFixed {
	m.p.SetInt64LE(360, int64(value))
	return m
}

// SetStartDateTime
func (m *ReplayChartDataFixed) SetStartDateTime(value DateTimeWithMillisecondsInt) *ReplayChartDataFixed {
	m.p.SetInt64LE(368, int64(value))
	return m
}

// SetStopDateTime
func (m *ReplayChartDataFixed) SetStopDateTime(value DateTimeWithMillisecondsInt) *ReplayChartDataFixed {
	m.p.SetInt64LE(376, int64(value))
	return m
}

// SetSessionBeginTimeInSeconds
func (m *ReplayChartDataFixed) SetSessionBeginTimeInSeconds(value uint16) *ReplayChartDataFixed {
	m.p.SetUint16LE(384, value)
	return m
}

// SetSessionEndTimeInSeconds
func (m *ReplayChartDataFixed) SetSessionEndTimeInSeconds(value uint16) *ReplayChartDataFixed {
	m.p.SetUint16LE(386, value)
	return m
}

// SetReplaySpeed
func (m *ReplayChartDataFixed) SetReplaySpeed(value float32) *ReplayChartDataFixed {
	m.p.SetFloat32LE(388, value)
	return m
}

// SetBarTimeInSeconds
func (m *ReplayChartDataFixed) SetBarTimeInSeconds(value int32) *ReplayChartDataFixed {
	m.p.SetInt32LE(392, value)
	return m
}

// SetPauseReplayAfterInitialDataSent
func (m *ReplayChartDataFixed) SetPauseReplayAfterInitialDataSent(value uint8) *ReplayChartDataFixed {
	m.p.SetUint8(396, value)
	return m
}

// SetUseSavedPriorState
func (m *ReplayChartDataFixed) SetUseSavedPriorState(value bool) *ReplayChartDataFixed {
	m.p.SetBool(397, value)
	return m
}

// SetSymbolVolatility
func (m *ReplayChartDataFixed) SetSymbolVolatility(value float32) *ReplayChartDataFixed {
	m.p.SetFloat32LE(398, value)
	return m
}

// SetInterestRate
func (m *ReplayChartDataFixed) SetInterestRate(value float32) *ReplayChartDataFixed {
	m.p.SetFloat32LE(402, value)
	return m
}

// SetNumberOfOrdersToTriggerFinishToStopDateTime
func (m *ReplayChartDataFixed) SetNumberOfOrdersToTriggerFinishToStopDateTime(value int32) *ReplayChartDataFixed {
	m.p.SetInt32LE(406, value)
	return m
}

// SetMaximumNumberOfOrdersPerReplaySession
func (m *ReplayChartDataFixed) SetMaximumNumberOfOrdersPerReplaySession(value int32) *ReplayChartDataFixed {
	m.p.SetInt32LE(410, value)
	return m
}

// SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime
func (m *ReplayChartDataFixed) SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(value int32) *ReplayChartDataFixed {
	m.p.SetInt32LE(414, value)
	return m
}

// SetSubAccountIdentifier
func (m *ReplayChartDataFixed) SetSubAccountIdentifier(value uint32) *ReplayChartDataFixed {
	m.p.SetUint32LE(418, value)
	return m
}

// SetOptionsPriceSendIntervalInSeconds
func (m *ReplayChartDataFixed) SetOptionsPriceSendIntervalInSeconds(value int32) *ReplayChartDataFixed {
	m.p.SetInt32LE(422, value)
	return m
}

func (m ReplayChartData) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ReplayChartData) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m ReplayChartDataFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ReplayChartDataFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m ReplayChartData) Copy(to ReplayChartData) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetTimeZone(m.TimeZone())
	to.SetStartDateTimeForInitialData(m.StartDateTimeForInitialData())
	to.SetStartDateTime(m.StartDateTime())
	to.SetStopDateTime(m.StopDateTime())
	to.SetSessionBeginTimeInSeconds(m.SessionBeginTimeInSeconds())
	to.SetSessionEndTimeInSeconds(m.SessionEndTimeInSeconds())
	to.SetReplaySpeed(m.ReplaySpeed())
	to.SetBarTimeInSeconds(m.BarTimeInSeconds())
	to.SetPauseReplayAfterInitialDataSent(m.PauseReplayAfterInitialDataSent())
	to.SetUseSavedPriorState(m.UseSavedPriorState())
	to.SetSymbolVolatility(m.SymbolVolatility())
	to.SetInterestRate(m.InterestRate())
	to.SetNumberOfOrdersToTriggerFinishToStopDateTime(m.NumberOfOrdersToTriggerFinishToStopDateTime())
	to.SetMaximumNumberOfOrdersPerReplaySession(m.MaximumNumberOfOrdersPerReplaySession())
	to.SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(m.NumberOfDaysForInitialDataFromBeforeLastSavedDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetOptionsPriceSendIntervalInSeconds(m.OptionsPriceSendIntervalInSeconds())
}

// CopyTo
func (m ReplayChartData) CopyTo(to ReplayChartDataFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetTimeZone(m.TimeZone())
	to.SetStartDateTimeForInitialData(m.StartDateTimeForInitialData())
	to.SetStartDateTime(m.StartDateTime())
	to.SetStopDateTime(m.StopDateTime())
	to.SetSessionBeginTimeInSeconds(m.SessionBeginTimeInSeconds())
	to.SetSessionEndTimeInSeconds(m.SessionEndTimeInSeconds())
	to.SetReplaySpeed(m.ReplaySpeed())
	to.SetBarTimeInSeconds(m.BarTimeInSeconds())
	to.SetPauseReplayAfterInitialDataSent(m.PauseReplayAfterInitialDataSent())
	to.SetUseSavedPriorState(m.UseSavedPriorState())
	to.SetSymbolVolatility(m.SymbolVolatility())
	to.SetInterestRate(m.InterestRate())
	to.SetNumberOfOrdersToTriggerFinishToStopDateTime(m.NumberOfOrdersToTriggerFinishToStopDateTime())
	to.SetMaximumNumberOfOrdersPerReplaySession(m.MaximumNumberOfOrdersPerReplaySession())
	to.SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(m.NumberOfDaysForInitialDataFromBeforeLastSavedDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetOptionsPriceSendIntervalInSeconds(m.OptionsPriceSendIntervalInSeconds())
}

// Copy
func (m ReplayChartDataFixed) Copy(to ReplayChartDataFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetTimeZone(m.TimeZone())
	to.SetStartDateTimeForInitialData(m.StartDateTimeForInitialData())
	to.SetStartDateTime(m.StartDateTime())
	to.SetStopDateTime(m.StopDateTime())
	to.SetSessionBeginTimeInSeconds(m.SessionBeginTimeInSeconds())
	to.SetSessionEndTimeInSeconds(m.SessionEndTimeInSeconds())
	to.SetReplaySpeed(m.ReplaySpeed())
	to.SetBarTimeInSeconds(m.BarTimeInSeconds())
	to.SetPauseReplayAfterInitialDataSent(m.PauseReplayAfterInitialDataSent())
	to.SetUseSavedPriorState(m.UseSavedPriorState())
	to.SetSymbolVolatility(m.SymbolVolatility())
	to.SetInterestRate(m.InterestRate())
	to.SetNumberOfOrdersToTriggerFinishToStopDateTime(m.NumberOfOrdersToTriggerFinishToStopDateTime())
	to.SetMaximumNumberOfOrdersPerReplaySession(m.MaximumNumberOfOrdersPerReplaySession())
	to.SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(m.NumberOfDaysForInitialDataFromBeforeLastSavedDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetOptionsPriceSendIntervalInSeconds(m.OptionsPriceSendIntervalInSeconds())
}

// CopyTo
func (m ReplayChartDataFixed) CopyTo(to ReplayChartData) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetTradeAccount(m.TradeAccount())
	to.SetTimeZone(m.TimeZone())
	to.SetStartDateTimeForInitialData(m.StartDateTimeForInitialData())
	to.SetStartDateTime(m.StartDateTime())
	to.SetStopDateTime(m.StopDateTime())
	to.SetSessionBeginTimeInSeconds(m.SessionBeginTimeInSeconds())
	to.SetSessionEndTimeInSeconds(m.SessionEndTimeInSeconds())
	to.SetReplaySpeed(m.ReplaySpeed())
	to.SetBarTimeInSeconds(m.BarTimeInSeconds())
	to.SetPauseReplayAfterInitialDataSent(m.PauseReplayAfterInitialDataSent())
	to.SetUseSavedPriorState(m.UseSavedPriorState())
	to.SetSymbolVolatility(m.SymbolVolatility())
	to.SetInterestRate(m.InterestRate())
	to.SetNumberOfOrdersToTriggerFinishToStopDateTime(m.NumberOfOrdersToTriggerFinishToStopDateTime())
	to.SetMaximumNumberOfOrdersPerReplaySession(m.MaximumNumberOfOrdersPerReplaySession())
	to.SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(m.NumberOfDaysForInitialDataFromBeforeLastSavedDateTime())
	to.SetSubAccountIdentifier(m.SubAccountIdentifier())
	to.SetOptionsPriceSendIntervalInSeconds(m.OptionsPriceSendIntervalInSeconds())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ReplayChartData) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10104)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("TimeZone", m.TimeZone())
	w.Int64Field("StartDateTimeForInitialData", int64(m.StartDateTimeForInitialData()))
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Int64Field("StopDateTime", int64(m.StopDateTime()))
	w.Uint16Field("SessionBeginTimeInSeconds", m.SessionBeginTimeInSeconds())
	w.Uint16Field("SessionEndTimeInSeconds", m.SessionEndTimeInSeconds())
	w.Float32Field("ReplaySpeed", m.ReplaySpeed())
	w.Int32Field("BarTimeInSeconds", m.BarTimeInSeconds())
	w.Uint8Field("PauseReplayAfterInitialDataSent", m.PauseReplayAfterInitialDataSent())
	w.BoolField("UseSavedPriorState", m.UseSavedPriorState())
	w.Float32Field("SymbolVolatility", m.SymbolVolatility())
	w.Float32Field("InterestRate", m.InterestRate())
	w.Int32Field("NumberOfOrdersToTriggerFinishToStopDateTime", m.NumberOfOrdersToTriggerFinishToStopDateTime())
	w.Int32Field("MaximumNumberOfOrdersPerReplaySession", m.MaximumNumberOfOrdersPerReplaySession())
	w.Int32Field("NumberOfDaysForInitialDataFromBeforeLastSavedDateTime", m.NumberOfDaysForInitialDataFromBeforeLastSavedDateTime())
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	w.Int32Field("OptionsPriceSendIntervalInSeconds", m.OptionsPriceSendIntervalInSeconds())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartData) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10104 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "TimeZone":
			m.SetTimeZone(r.String())
		case "StartDateTimeForInitialData":
			m.SetStartDateTimeForInitialData(DateTimeWithMillisecondsInt(r.Int64()))
		case "StartDateTime":
			m.SetStartDateTime(DateTimeWithMillisecondsInt(r.Int64()))
		case "StopDateTime":
			m.SetStopDateTime(DateTimeWithMillisecondsInt(r.Int64()))
		case "SessionBeginTimeInSeconds":
			m.SetSessionBeginTimeInSeconds(r.Uint16())
		case "SessionEndTimeInSeconds":
			m.SetSessionEndTimeInSeconds(r.Uint16())
		case "ReplaySpeed":
			m.SetReplaySpeed(r.Float32())
		case "BarTimeInSeconds":
			m.SetBarTimeInSeconds(r.Int32())
		case "PauseReplayAfterInitialDataSent":
			m.SetPauseReplayAfterInitialDataSent(r.Uint8())
		case "UseSavedPriorState":
			m.SetUseSavedPriorState(r.Bool())
		case "SymbolVolatility":
			m.SetSymbolVolatility(r.Float32())
		case "InterestRate":
			m.SetInterestRate(r.Float32())
		case "NumberOfOrdersToTriggerFinishToStopDateTime":
			m.SetNumberOfOrdersToTriggerFinishToStopDateTime(r.Int32())
		case "MaximumNumberOfOrdersPerReplaySession":
			m.SetMaximumNumberOfOrdersPerReplaySession(r.Int32())
		case "NumberOfDaysForInitialDataFromBeforeLastSavedDateTime":
			m.SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(r.Int32())
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "OptionsPriceSendIntervalInSeconds":
			m.SetOptionsPriceSendIntervalInSeconds(r.Int32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartData) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ReplayChartDataFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10104)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("TimeZone", m.TimeZone())
	w.Int64Field("StartDateTimeForInitialData", int64(m.StartDateTimeForInitialData()))
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Int64Field("StopDateTime", int64(m.StopDateTime()))
	w.Uint16Field("SessionBeginTimeInSeconds", m.SessionBeginTimeInSeconds())
	w.Uint16Field("SessionEndTimeInSeconds", m.SessionEndTimeInSeconds())
	w.Float32Field("ReplaySpeed", m.ReplaySpeed())
	w.Int32Field("BarTimeInSeconds", m.BarTimeInSeconds())
	w.Uint8Field("PauseReplayAfterInitialDataSent", m.PauseReplayAfterInitialDataSent())
	w.BoolField("UseSavedPriorState", m.UseSavedPriorState())
	w.Float32Field("SymbolVolatility", m.SymbolVolatility())
	w.Float32Field("InterestRate", m.InterestRate())
	w.Int32Field("NumberOfOrdersToTriggerFinishToStopDateTime", m.NumberOfOrdersToTriggerFinishToStopDateTime())
	w.Int32Field("MaximumNumberOfOrdersPerReplaySession", m.MaximumNumberOfOrdersPerReplaySession())
	w.Int32Field("NumberOfDaysForInitialDataFromBeforeLastSavedDateTime", m.NumberOfDaysForInitialDataFromBeforeLastSavedDateTime())
	w.Uint32Field("SubAccountIdentifier", m.SubAccountIdentifier())
	w.Int32Field("OptionsPriceSendIntervalInSeconds", m.OptionsPriceSendIntervalInSeconds())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10104 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "TimeZone":
			m.SetTimeZone(r.String())
		case "StartDateTimeForInitialData":
			m.SetStartDateTimeForInitialData(DateTimeWithMillisecondsInt(r.Int64()))
		case "StartDateTime":
			m.SetStartDateTime(DateTimeWithMillisecondsInt(r.Int64()))
		case "StopDateTime":
			m.SetStopDateTime(DateTimeWithMillisecondsInt(r.Int64()))
		case "SessionBeginTimeInSeconds":
			m.SetSessionBeginTimeInSeconds(r.Uint16())
		case "SessionEndTimeInSeconds":
			m.SetSessionEndTimeInSeconds(r.Uint16())
		case "ReplaySpeed":
			m.SetReplaySpeed(r.Float32())
		case "BarTimeInSeconds":
			m.SetBarTimeInSeconds(r.Int32())
		case "PauseReplayAfterInitialDataSent":
			m.SetPauseReplayAfterInitialDataSent(r.Uint8())
		case "UseSavedPriorState":
			m.SetUseSavedPriorState(r.Bool())
		case "SymbolVolatility":
			m.SetSymbolVolatility(r.Float32())
		case "InterestRate":
			m.SetInterestRate(r.Float32())
		case "NumberOfOrdersToTriggerFinishToStopDateTime":
			m.SetNumberOfOrdersToTriggerFinishToStopDateTime(r.Int32())
		case "MaximumNumberOfOrdersPerReplaySession":
			m.SetMaximumNumberOfOrdersPerReplaySession(r.Int32())
		case "NumberOfDaysForInitialDataFromBeforeLastSavedDateTime":
			m.SetNumberOfDaysForInitialDataFromBeforeLastSavedDateTime(r.Int32())
		case "SubAccountIdentifier":
			m.SetSubAccountIdentifier(r.Uint32())
		case "OptionsPriceSendIntervalInSeconds":
			m.SetOptionsPriceSendIntervalInSeconds(r.Int32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
