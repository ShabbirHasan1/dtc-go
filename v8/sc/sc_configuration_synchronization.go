// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const SCConfigurationSynchronizationSize = 31

//     Size                             uint16  = SCConfigurationSynchronizationSize  (31)
//     Type                             uint16  = SC_CONFIGURATION_SYNCHRONIZATION  (10109)
//     BaseSize                         uint16  = SCConfigurationSynchronizationSize  (31)
//     MessageID                        uint32  = 0
//     CurrentInboundSequenceNumber     uint32  = 0
//     CurrentOutboundSequenceNumber    uint32  = 0
//     CurrentInternalOrderID           uint64  = 0
//     IsSnapshot                       bool    = false
//     LastReceivedExecutionIdentifier  string  = ""
var _SCConfigurationSynchronizationDefault = []byte{31, 0, 125, 39, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type SCConfigurationSynchronization struct {
	p message.VLS
}

func NewSCConfigurationSynchronizationFrom(b []byte) SCConfigurationSynchronization {
	return SCConfigurationSynchronization{p: message.NewVLS(b)}
}

func WrapSCConfigurationSynchronization(b []byte) SCConfigurationSynchronization {
	return SCConfigurationSynchronization{p: message.WrapVLS(b)}
}

func NewSCConfigurationSynchronization() *SCConfigurationSynchronization {
	return &SCConfigurationSynchronization{p: message.NewVLS(_SCConfigurationSynchronizationDefault)}
}

func ParseSCConfigurationSynchronization(b []byte) (SCConfigurationSynchronization, error) {
	if len(b) < 6 {
		return SCConfigurationSynchronization{}, message.ErrShortBuffer
	}
	m := WrapSCConfigurationSynchronization(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return SCConfigurationSynchronization{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return SCConfigurationSynchronization{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 31 {
		newSize := len(b) + (31 - baseSize)
		if newSize > message.MaxSize {
			return SCConfigurationSynchronization{}, message.ErrOverflow
		}
		clone := SCConfigurationSynchronization{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _SCConfigurationSynchronizationDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(31 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(27)
			if offset > 0 {
				clone.p.SetUint16LE(27, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m SCConfigurationSynchronization) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m SCConfigurationSynchronization) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m SCConfigurationSynchronization) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// MessageID
func (m SCConfigurationSynchronization) MessageID() uint32 {
	return m.p.Uint32LE(6)
}

// CurrentInboundSequenceNumber
func (m SCConfigurationSynchronization) CurrentInboundSequenceNumber() uint32 {
	return m.p.Uint32LE(10)
}

// CurrentOutboundSequenceNumber
func (m SCConfigurationSynchronization) CurrentOutboundSequenceNumber() uint32 {
	return m.p.Uint32LE(14)
}

// CurrentInternalOrderID
func (m SCConfigurationSynchronization) CurrentInternalOrderID() uint64 {
	return m.p.Uint64LE(18)
}

// IsSnapshot
func (m SCConfigurationSynchronization) IsSnapshot() bool {
	return m.p.Bool(26)
}

// LastReceivedExecutionIdentifier
func (m SCConfigurationSynchronization) LastReceivedExecutionIdentifier() string {
	return m.p.StringVLS(27)
}

// SetMessageID
func (m *SCConfigurationSynchronization) SetMessageID(value uint32) *SCConfigurationSynchronization {
	m.p.SetUint32LE(6, value)
	return m
}

// SetCurrentInboundSequenceNumber
func (m *SCConfigurationSynchronization) SetCurrentInboundSequenceNumber(value uint32) *SCConfigurationSynchronization {
	m.p.SetUint32LE(10, value)
	return m
}

// SetCurrentOutboundSequenceNumber
func (m *SCConfigurationSynchronization) SetCurrentOutboundSequenceNumber(value uint32) *SCConfigurationSynchronization {
	m.p.SetUint32LE(14, value)
	return m
}

// SetCurrentInternalOrderID
func (m *SCConfigurationSynchronization) SetCurrentInternalOrderID(value uint64) *SCConfigurationSynchronization {
	m.p.SetUint64LE(18, value)
	return m
}

// SetIsSnapshot
func (m *SCConfigurationSynchronization) SetIsSnapshot(value bool) *SCConfigurationSynchronization {
	m.p.SetBool(26, value)
	return m
}

// SetLastReceivedExecutionIdentifier
func (m *SCConfigurationSynchronization) SetLastReceivedExecutionIdentifier(value string) *SCConfigurationSynchronization {
	m.p.SetStringVLS(27, value)
	return m
}

func (m SCConfigurationSynchronization) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m SCConfigurationSynchronization) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m SCConfigurationSynchronization) Copy(to SCConfigurationSynchronization) {
	to.SetMessageID(m.MessageID())
	to.SetCurrentInboundSequenceNumber(m.CurrentInboundSequenceNumber())
	to.SetCurrentOutboundSequenceNumber(m.CurrentOutboundSequenceNumber())
	to.SetCurrentInternalOrderID(m.CurrentInternalOrderID())
	to.SetIsSnapshot(m.IsSnapshot())
	to.SetLastReceivedExecutionIdentifier(m.LastReceivedExecutionIdentifier())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m SCConfigurationSynchronization) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10109)
	w.Uint32Field("MessageID", m.MessageID())
	w.Uint32Field("CurrentInboundSequenceNumber", m.CurrentInboundSequenceNumber())
	w.Uint32Field("CurrentOutboundSequenceNumber", m.CurrentOutboundSequenceNumber())
	w.Uint64Field("CurrentInternalOrderID", m.CurrentInternalOrderID())
	w.BoolField("IsSnapshot", m.IsSnapshot())
	w.StringField("LastReceivedExecutionIdentifier", m.LastReceivedExecutionIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SCConfigurationSynchronization) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10109 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "MessageID":
			m.SetMessageID(r.Uint32())
		case "CurrentInboundSequenceNumber":
			m.SetCurrentInboundSequenceNumber(r.Uint32())
		case "CurrentOutboundSequenceNumber":
			m.SetCurrentOutboundSequenceNumber(r.Uint32())
		case "CurrentInternalOrderID":
			m.SetCurrentInternalOrderID(r.Uint64())
		case "IsSnapshot":
			m.SetIsSnapshot(r.Bool())
		case "LastReceivedExecutionIdentifier":
			m.SetLastReceivedExecutionIdentifier(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SCConfigurationSynchronization) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
