// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const CurrentPositionsRequestSize = 16

const CurrentPositionsRequestFixedSize = 40

//     Size          uint16  = CurrentPositionsRequestSize  (16)
//     Type          uint16  = CURRENT_POSITIONS_REQUEST  (305)
//     BaseSize      uint16  = CurrentPositionsRequestSize  (16)
//     RequestID     int32   = 0
//     TradeAccount  string  = ""
var _CurrentPositionsRequestDefault = []byte{16, 0, 49, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size          uint16      = CurrentPositionsRequestFixedSize  (40)
//     Type          uint16      = CURRENT_POSITIONS_REQUEST  (305)
//     RequestID     int32       = 0
//     TradeAccount  string[32]  = ""
var _CurrentPositionsRequestFixedDefault = []byte{40, 0, 49, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// CurrentPositionsRequest This is a message from the Client to the Server to request the current
// open Trade Positions.
type CurrentPositionsRequest struct {
	p message.VLS
}

// CurrentPositionsRequestFixed This is a message from the Client to the Server to request the current
// open Trade Positions.
type CurrentPositionsRequestFixed struct {
	p message.Fixed
}

func NewCurrentPositionsRequestFrom(b []byte) CurrentPositionsRequest {
	return CurrentPositionsRequest{p: message.NewVLS(b)}
}

func WrapCurrentPositionsRequest(b []byte) CurrentPositionsRequest {
	return CurrentPositionsRequest{p: message.WrapVLS(b)}
}

func NewCurrentPositionsRequest() *CurrentPositionsRequest {
	return &CurrentPositionsRequest{p: message.NewVLS(_CurrentPositionsRequestDefault)}
}

func ParseCurrentPositionsRequest(b []byte) (CurrentPositionsRequest, error) {
	if len(b) < 6 {
		return CurrentPositionsRequest{}, message.ErrShortBuffer
	}
	m := WrapCurrentPositionsRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return CurrentPositionsRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return CurrentPositionsRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 16 {
		newSize := len(b) + (16 - baseSize)
		if newSize > message.MaxSize {
			return CurrentPositionsRequest{}, message.ErrOverflow
		}
		clone := CurrentPositionsRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _CurrentPositionsRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(16 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewCurrentPositionsRequestFixedFrom(b []byte) CurrentPositionsRequestFixed {
	return CurrentPositionsRequestFixed{p: message.NewFixed(b)}
}

func WrapCurrentPositionsRequestFixed(b []byte) CurrentPositionsRequestFixed {
	return CurrentPositionsRequestFixed{p: message.WrapFixed(b)}
}

func NewCurrentPositionsRequestFixed() *CurrentPositionsRequestFixed {
	return &CurrentPositionsRequestFixed{p: message.NewFixed(_CurrentPositionsRequestFixedDefault)}
}

func ParseCurrentPositionsRequestFixed(b []byte) (CurrentPositionsRequestFixed, error) {
	if len(b) < 4 {
		return CurrentPositionsRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapCurrentPositionsRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return CurrentPositionsRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return CurrentPositionsRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 40 {
		clone := *NewCurrentPositionsRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _CurrentPositionsRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m CurrentPositionsRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m CurrentPositionsRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m CurrentPositionsRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The request identifier. The Server will send this back in the PositionUpdate
// response messages.
func (m CurrentPositionsRequest) RequestID() int32 {
	return m.p.Int32LE(8)
}

// TradeAccount This is an optional field. Leave this empty to request the Server to return
// all current open Trade Positions for all trade accounts on the logged
// in Username. Otherwise, specify a particular trade account to request
// Trade Positions for.
func (m CurrentPositionsRequest) TradeAccount() string {
	return m.p.StringVLS(12)
}

// Size The standard message size field. Automatically set by constructor.
func (m CurrentPositionsRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m CurrentPositionsRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The request identifier. The Server will send this back in the PositionUpdate
// response messages.
func (m CurrentPositionsRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// TradeAccount This is an optional field. Leave this empty to request the Server to return
// all current open Trade Positions for all trade accounts on the logged
// in Username. Otherwise, specify a particular trade account to request
// Trade Positions for.
func (m CurrentPositionsRequestFixed) TradeAccount() string {
	return m.p.StringFixed(8, 32)
}

// SetRequestID The request identifier. The Server will send this back in the PositionUpdate
// response messages.
func (m *CurrentPositionsRequest) SetRequestID(value int32) *CurrentPositionsRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetTradeAccount This is an optional field. Leave this empty to request the Server to return
// all current open Trade Positions for all trade accounts on the logged
// in Username. Otherwise, specify a particular trade account to request
// Trade Positions for.
func (m *CurrentPositionsRequest) SetTradeAccount(value string) *CurrentPositionsRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetRequestID The request identifier. The Server will send this back in the PositionUpdate
// response messages.
func (m *CurrentPositionsRequestFixed) SetRequestID(value int32) *CurrentPositionsRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetTradeAccount This is an optional field. Leave this empty to request the Server to return
// all current open Trade Positions for all trade accounts on the logged
// in Username. Otherwise, specify a particular trade account to request
// Trade Positions for.
func (m *CurrentPositionsRequestFixed) SetTradeAccount(value string) *CurrentPositionsRequestFixed {
	m.p.SetStringFixed(8, 32, value)
	return m
}

func (m CurrentPositionsRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m CurrentPositionsRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m CurrentPositionsRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m CurrentPositionsRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m CurrentPositionsRequest) Copy(to CurrentPositionsRequest) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m CurrentPositionsRequest) CopyTo(to CurrentPositionsRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

// Copy
func (m CurrentPositionsRequestFixed) Copy(to CurrentPositionsRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

// CopyTo
func (m CurrentPositionsRequestFixed) CopyTo(to CurrentPositionsRequest) {
	to.SetRequestID(m.RequestID())
	to.SetTradeAccount(m.TradeAccount())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m CurrentPositionsRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 305)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CurrentPositionsRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 305 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CurrentPositionsRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m CurrentPositionsRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 305)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("TradeAccount", m.TradeAccount())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CurrentPositionsRequestFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 305 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *CurrentPositionsRequestFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
