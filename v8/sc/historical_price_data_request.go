// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalPriceDataRequestSize = 48

const HistoricalPriceDataRequestFixedSize = 120

//     Size                              uint16                      = HistoricalPriceDataRequestSize  (48)
//     Type                              uint16                      = HISTORICAL_PRICE_DATA_REQUEST  (800)
//     BaseSize                          uint16                      = HistoricalPriceDataRequestSize  (48)
//     RequestID                         int32                       = 0
//     Symbol                            string                      = ""
//     Exchange                          string                      = ""
//     RecordInterval                    HistoricalDataIntervalEnum  = INTERVAL_TICK  (0)
//     StartDateTime                     DateTime                    = 0
//     EndDateTime                       DateTime                    = 0
//     MaxDaysToReturn                   uint32                      = 0
//     UseZLibCompression                bool                        = false
//     RequestDividendAdjustedStockData  uint8                       = 0
//     Integer_1                         uint16                      = 0
var _HistoricalPriceDataRequestDefault = []byte{48, 0, 32, 3, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                              uint16                      = HistoricalPriceDataRequestFixedSize  (120)
//     Type                              uint16                      = HISTORICAL_PRICE_DATA_REQUEST  (800)
//     RequestID                         int32                       = 0
//     Symbol                            string[64]                  = ""
//     Exchange                          string[16]                  = ""
//     RecordInterval                    HistoricalDataIntervalEnum  = INTERVAL_TICK  (0)
//     StartDateTime                     DateTime                    = 0
//     EndDateTime                       DateTime                    = 0
//     MaxDaysToReturn                   uint32                      = 0
//     UseZLibCompression                bool                        = false
//     RequestDividendAdjustedStockData  uint8                       = 0
//     Integer_1                         uint16                      = 0
var _HistoricalPriceDataRequestFixedDefault = []byte{120, 0, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// HistoricalPriceDataRequest This is a message from the Client to the Server for requesting historical
// price data.
//
// This request can be on the same or a separate network socket connection
// compared to the streaming market data. This is going to be specified by
// the Server.
type HistoricalPriceDataRequest struct {
	p message.VLS
}

// HistoricalPriceDataRequestFixed This is a message from the Client to the Server for requesting historical
// price data.
//
// This request can be on the same or a separate network socket connection
// compared to the streaming market data. This is going to be specified by
// the Server.
type HistoricalPriceDataRequestFixed struct {
	p message.Fixed
}

func NewHistoricalPriceDataRequestFrom(b []byte) HistoricalPriceDataRequest {
	return HistoricalPriceDataRequest{p: message.NewVLS(b)}
}

func WrapHistoricalPriceDataRequest(b []byte) HistoricalPriceDataRequest {
	return HistoricalPriceDataRequest{p: message.WrapVLS(b)}
}

func NewHistoricalPriceDataRequest() *HistoricalPriceDataRequest {
	return &HistoricalPriceDataRequest{p: message.NewVLS(_HistoricalPriceDataRequestDefault)}
}

func ParseHistoricalPriceDataRequest(b []byte) (HistoricalPriceDataRequest, error) {
	if len(b) < 6 {
		return HistoricalPriceDataRequest{}, message.ErrShortBuffer
	}
	m := WrapHistoricalPriceDataRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalPriceDataRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalPriceDataRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 48 {
		newSize := len(b) + (48 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalPriceDataRequest{}, message.ErrOverflow
		}
		clone := HistoricalPriceDataRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalPriceDataRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(48 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
			offset = clone.p.Uint16LE(16)
			if offset > 0 {
				clone.p.SetUint16LE(16, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalPriceDataRequestFixedFrom(b []byte) HistoricalPriceDataRequestFixed {
	return HistoricalPriceDataRequestFixed{p: message.NewFixed(b)}
}

func WrapHistoricalPriceDataRequestFixed(b []byte) HistoricalPriceDataRequestFixed {
	return HistoricalPriceDataRequestFixed{p: message.WrapFixed(b)}
}

func NewHistoricalPriceDataRequestFixed() *HistoricalPriceDataRequestFixed {
	return &HistoricalPriceDataRequestFixed{p: message.NewFixed(_HistoricalPriceDataRequestFixedDefault)}
}

func ParseHistoricalPriceDataRequestFixed(b []byte) (HistoricalPriceDataRequestFixed, error) {
	if len(b) < 4 {
		return HistoricalPriceDataRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalPriceDataRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalPriceDataRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalPriceDataRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 120 {
		clone := *NewHistoricalPriceDataRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalPriceDataRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalPriceDataRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalPriceDataRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalPriceDataRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID Unique integer identifier to identify this request. The historical price
// data response messages from the Server will contain this identifier so
// they can be matched up with the request from the Client. This identifier
// only needs to be unique to the historical price data messages. It can
// conflict with identifiers used with other classes of messages.
func (m HistoricalPriceDataRequest) RequestID() int32 {
	return m.p.Int32LE(8)
}

// Symbol The Symbol historical price data is requested for.
func (m HistoricalPriceDataRequest) Symbol() string {
	return m.p.StringVLS(12)
}

// Exchange Optional: The exchange for the Symbol.
func (m HistoricalPriceDataRequest) Exchange() string {
	return m.p.StringVLS(16)
}

// RecordInterval The interval/timeframe of each record for the time range of the historical
// data requested. Can be any of:
//
// INTERVAL_TICK = 0
// INTERVAL_1_SECOND = 1
// INTERVAL_1_MINUTE = 60
// INTERVAL_1_DAY = 86400
// INTERVAL_1_WEEK = 604800
func (m HistoricalPriceDataRequest) RecordInterval() HistoricalDataIntervalEnum {
	return HistoricalDataIntervalEnum(m.p.Int32LE(20))
}

// StartDateTime The starting Date-Time for the historical price data returned, if available
// for the specified Symbol.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data starting at the earliest data available for the Symbol.
func (m HistoricalPriceDataRequest) StartDateTime() DateTime {
	return DateTime(m.p.Int64LE(24))
}

// EndDateTime The ending Date-Time for the historical price data returned.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data ending at the very latest data available for the symbol.
func (m HistoricalPriceDataRequest) EndDateTime() DateTime {
	return DateTime(m.p.Int64LE(32))
}

// MaxDaysToReturn specifies the maximum number of days of data the Server
// needs to return, if available, counting back from the latest Date-Time
// of data available for the symbol, or counting back from EndDateTime if
// it is set to a value other than 0.
//
// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
func (m HistoricalPriceDataRequest) MaxDaysToReturn() uint32 {
	return m.p.Uint32LE(40)
}

// UseZLibCompression Set this to 1, to request the Server use ZLib compression in the response
// when returning data. The Server can optionally ignore this if it does
// not support compression or does not want to use compression for any reason.
// not support compression or does not want to use compression for any reason.
//
// The HistoricalPriceDataResponseHeader will not be compressed. Only the
// historical price data records themselves.
//
// When receiving a batch of data on the network socket, give it to ZLib.
// It will respond with some uncompressed data and you put that into a buffer
// and then process as many complete historical data messages out of it that
// you can. Continue with this process until finished.
func (m HistoricalPriceDataRequest) UseZLibCompression() bool {
	return m.p.Bool(44)
}

// RequestDividendAdjustedStockData In the case of a stock symbol, setting this to a value of 1 will request
// dividend adjusted data from the Server, if available. It is optional for
// the Server to support this.
func (m HistoricalPriceDataRequest) RequestDividendAdjustedStockData() uint8 {
	return m.p.Uint8(45)
}

// Integer_1 A general purpose 2 byte flag field from the Client to the Server which
// can be used for any special purpose the Client and Server require.
func (m HistoricalPriceDataRequest) Integer_1() uint16 {
	return m.p.Uint16LE(46)
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalPriceDataRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalPriceDataRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID Unique integer identifier to identify this request. The historical price
// data response messages from the Server will contain this identifier so
// they can be matched up with the request from the Client. This identifier
// only needs to be unique to the historical price data messages. It can
// conflict with identifiers used with other classes of messages.
func (m HistoricalPriceDataRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// Symbol The Symbol historical price data is requested for.
func (m HistoricalPriceDataRequestFixed) Symbol() string {
	return m.p.StringFixed(8, 64)
}

// Exchange Optional: The exchange for the Symbol.
func (m HistoricalPriceDataRequestFixed) Exchange() string {
	return m.p.StringFixed(72, 16)
}

// RecordInterval The interval/timeframe of each record for the time range of the historical
// data requested. Can be any of:
//
// INTERVAL_TICK = 0
// INTERVAL_1_SECOND = 1
// INTERVAL_1_MINUTE = 60
// INTERVAL_1_DAY = 86400
// INTERVAL_1_WEEK = 604800
func (m HistoricalPriceDataRequestFixed) RecordInterval() HistoricalDataIntervalEnum {
	return HistoricalDataIntervalEnum(m.p.Int32LE(88))
}

// StartDateTime The starting Date-Time for the historical price data returned, if available
// for the specified Symbol.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data starting at the earliest data available for the Symbol.
func (m HistoricalPriceDataRequestFixed) StartDateTime() DateTime {
	return DateTime(m.p.Int64LE(96))
}

// EndDateTime The ending Date-Time for the historical price data returned.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data ending at the very latest data available for the symbol.
func (m HistoricalPriceDataRequestFixed) EndDateTime() DateTime {
	return DateTime(m.p.Int64LE(104))
}

// MaxDaysToReturn specifies the maximum number of days of data the Server
// needs to return, if available, counting back from the latest Date-Time
// of data available for the symbol, or counting back from EndDateTime if
// it is set to a value other than 0.
//
// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
func (m HistoricalPriceDataRequestFixed) MaxDaysToReturn() uint32 {
	return m.p.Uint32LE(112)
}

// UseZLibCompression Set this to 1, to request the Server use ZLib compression in the response
// when returning data. The Server can optionally ignore this if it does
// not support compression or does not want to use compression for any reason.
// not support compression or does not want to use compression for any reason.
//
// The HistoricalPriceDataResponseHeader will not be compressed. Only the
// historical price data records themselves.
//
// When receiving a batch of data on the network socket, give it to ZLib.
// It will respond with some uncompressed data and you put that into a buffer
// and then process as many complete historical data messages out of it that
// you can. Continue with this process until finished.
func (m HistoricalPriceDataRequestFixed) UseZLibCompression() bool {
	return m.p.Bool(116)
}

// RequestDividendAdjustedStockData In the case of a stock symbol, setting this to a value of 1 will request
// dividend adjusted data from the Server, if available. It is optional for
// the Server to support this.
func (m HistoricalPriceDataRequestFixed) RequestDividendAdjustedStockData() uint8 {
	return m.p.Uint8(117)
}

// Integer_1 A general purpose 2 byte flag field from the Client to the Server which
// can be used for any special purpose the Client and Server require.
func (m HistoricalPriceDataRequestFixed) Integer_1() uint16 {
	return m.p.Uint16LE(118)
}

// SetRequestID Unique integer identifier to identify this request. The historical price
// data response messages from the Server will contain this identifier so
// they can be matched up with the request from the Client. This identifier
// only needs to be unique to the historical price data messages. It can
// conflict with identifiers used with other classes of messages.
func (m *HistoricalPriceDataRequest) SetRequestID(value int32) *HistoricalPriceDataRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetSymbol The Symbol historical price data is requested for.
func (m *HistoricalPriceDataRequest) SetSymbol(value string) *HistoricalPriceDataRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetExchange Optional: The exchange for the Symbol.
func (m *HistoricalPriceDataRequest) SetExchange(value string) *HistoricalPriceDataRequest {
	m.p.SetStringVLS(16, value)
	return m
}

// SetRecordInterval The interval/timeframe of each record for the time range of the historical
// data requested. Can be any of:
//
// INTERVAL_TICK = 0
// INTERVAL_1_SECOND = 1
// INTERVAL_1_MINUTE = 60
// INTERVAL_1_DAY = 86400
// INTERVAL_1_WEEK = 604800
func (m *HistoricalPriceDataRequest) SetRecordInterval(value HistoricalDataIntervalEnum) *HistoricalPriceDataRequest {
	m.p.SetInt32LE(20, int32(value))
	return m
}

// SetStartDateTime The starting Date-Time for the historical price data returned, if available
// for the specified Symbol.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data starting at the earliest data available for the Symbol.
func (m *HistoricalPriceDataRequest) SetStartDateTime(value DateTime) *HistoricalPriceDataRequest {
	m.p.SetInt64LE(24, int64(value))
	return m
}

// SetEndDateTime The ending Date-Time for the historical price data returned.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data ending at the very latest data available for the symbol.
func (m *HistoricalPriceDataRequest) SetEndDateTime(value DateTime) *HistoricalPriceDataRequest {
	m.p.SetInt64LE(32, int64(value))
	return m
}

// SetMaxDaysToReturn MaxDaysToReturn specifies the maximum number of days of data the Server
// needs to return, if available, counting back from the latest Date-Time
// of data available for the symbol, or counting back from EndDateTime if
// it is set to a value other than 0.
//
// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
func (m *HistoricalPriceDataRequest) SetMaxDaysToReturn(value uint32) *HistoricalPriceDataRequest {
	m.p.SetUint32LE(40, value)
	return m
}

// SetUseZLibCompression Set this to 1, to request the Server use ZLib compression in the response
// when returning data. The Server can optionally ignore this if it does
// not support compression or does not want to use compression for any reason.
// not support compression or does not want to use compression for any reason.
//
// The HistoricalPriceDataResponseHeader will not be compressed. Only the
// historical price data records themselves.
//
// When receiving a batch of data on the network socket, give it to ZLib.
// It will respond with some uncompressed data and you put that into a buffer
// and then process as many complete historical data messages out of it that
// you can. Continue with this process until finished.
func (m *HistoricalPriceDataRequest) SetUseZLibCompression(value bool) *HistoricalPriceDataRequest {
	m.p.SetBool(44, value)
	return m
}

// SetRequestDividendAdjustedStockData In the case of a stock symbol, setting this to a value of 1 will request
// dividend adjusted data from the Server, if available. It is optional for
// the Server to support this.
func (m *HistoricalPriceDataRequest) SetRequestDividendAdjustedStockData(value uint8) *HistoricalPriceDataRequest {
	m.p.SetUint8(45, value)
	return m
}

// SetInteger_1 A general purpose 2 byte flag field from the Client to the Server which
// can be used for any special purpose the Client and Server require.
func (m *HistoricalPriceDataRequest) SetInteger_1(value uint16) *HistoricalPriceDataRequest {
	m.p.SetUint16LE(46, value)
	return m
}

// SetRequestID Unique integer identifier to identify this request. The historical price
// data response messages from the Server will contain this identifier so
// they can be matched up with the request from the Client. This identifier
// only needs to be unique to the historical price data messages. It can
// conflict with identifiers used with other classes of messages.
func (m *HistoricalPriceDataRequestFixed) SetRequestID(value int32) *HistoricalPriceDataRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetSymbol The Symbol historical price data is requested for.
func (m *HistoricalPriceDataRequestFixed) SetSymbol(value string) *HistoricalPriceDataRequestFixed {
	m.p.SetStringFixed(8, 64, value)
	return m
}

// SetExchange Optional: The exchange for the Symbol.
func (m *HistoricalPriceDataRequestFixed) SetExchange(value string) *HistoricalPriceDataRequestFixed {
	m.p.SetStringFixed(72, 16, value)
	return m
}

// SetRecordInterval The interval/timeframe of each record for the time range of the historical
// data requested. Can be any of:
//
// INTERVAL_TICK = 0
// INTERVAL_1_SECOND = 1
// INTERVAL_1_MINUTE = 60
// INTERVAL_1_DAY = 86400
// INTERVAL_1_WEEK = 604800
func (m *HistoricalPriceDataRequestFixed) SetRecordInterval(value HistoricalDataIntervalEnum) *HistoricalPriceDataRequestFixed {
	m.p.SetInt32LE(88, int32(value))
	return m
}

// SetStartDateTime The starting Date-Time for the historical price data returned, if available
// for the specified Symbol.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data starting at the earliest data available for the Symbol.
func (m *HistoricalPriceDataRequestFixed) SetStartDateTime(value DateTime) *HistoricalPriceDataRequestFixed {
	m.p.SetInt64LE(96, int64(value))
	return m
}

// SetEndDateTime The ending Date-Time for the historical price data returned.
//
// If it is not set or set to 0, then this is a request to the Server to
// return data ending at the very latest data available for the symbol.
func (m *HistoricalPriceDataRequestFixed) SetEndDateTime(value DateTime) *HistoricalPriceDataRequestFixed {
	m.p.SetInt64LE(104, int64(value))
	return m
}

// SetMaxDaysToReturn MaxDaysToReturn specifies the maximum number of days of data the Server
// needs to return, if available, counting back from the latest Date-Time
// of data available for the symbol, or counting back from EndDateTime if
// it is set to a value other than 0.
//
// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
func (m *HistoricalPriceDataRequestFixed) SetMaxDaysToReturn(value uint32) *HistoricalPriceDataRequestFixed {
	m.p.SetUint32LE(112, value)
	return m
}

// SetUseZLibCompression Set this to 1, to request the Server use ZLib compression in the response
// when returning data. The Server can optionally ignore this if it does
// not support compression or does not want to use compression for any reason.
// not support compression or does not want to use compression for any reason.
//
// The HistoricalPriceDataResponseHeader will not be compressed. Only the
// historical price data records themselves.
//
// When receiving a batch of data on the network socket, give it to ZLib.
// It will respond with some uncompressed data and you put that into a buffer
// and then process as many complete historical data messages out of it that
// you can. Continue with this process until finished.
func (m *HistoricalPriceDataRequestFixed) SetUseZLibCompression(value bool) *HistoricalPriceDataRequestFixed {
	m.p.SetBool(116, value)
	return m
}

// SetRequestDividendAdjustedStockData In the case of a stock symbol, setting this to a value of 1 will request
// dividend adjusted data from the Server, if available. It is optional for
// the Server to support this.
func (m *HistoricalPriceDataRequestFixed) SetRequestDividendAdjustedStockData(value uint8) *HistoricalPriceDataRequestFixed {
	m.p.SetUint8(117, value)
	return m
}

// SetInteger_1 A general purpose 2 byte flag field from the Client to the Server which
// can be used for any special purpose the Client and Server require.
func (m *HistoricalPriceDataRequestFixed) SetInteger_1(value uint16) *HistoricalPriceDataRequestFixed {
	m.p.SetUint16LE(118, value)
	return m
}

func (m HistoricalPriceDataRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalPriceDataRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m HistoricalPriceDataRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m HistoricalPriceDataRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m HistoricalPriceDataRequest) Copy(to HistoricalPriceDataRequest) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetRecordInterval(m.RecordInterval())
	to.SetStartDateTime(m.StartDateTime())
	to.SetEndDateTime(m.EndDateTime())
	to.SetMaxDaysToReturn(m.MaxDaysToReturn())
	to.SetUseZLibCompression(m.UseZLibCompression())
	to.SetRequestDividendAdjustedStockData(m.RequestDividendAdjustedStockData())
	to.SetInteger_1(m.Integer_1())
}

// CopyTo
func (m HistoricalPriceDataRequest) CopyTo(to HistoricalPriceDataRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetRecordInterval(m.RecordInterval())
	to.SetStartDateTime(m.StartDateTime())
	to.SetEndDateTime(m.EndDateTime())
	to.SetMaxDaysToReturn(m.MaxDaysToReturn())
	to.SetUseZLibCompression(m.UseZLibCompression())
	to.SetRequestDividendAdjustedStockData(m.RequestDividendAdjustedStockData())
	to.SetInteger_1(m.Integer_1())
}

// Copy
func (m HistoricalPriceDataRequestFixed) Copy(to HistoricalPriceDataRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetRecordInterval(m.RecordInterval())
	to.SetStartDateTime(m.StartDateTime())
	to.SetEndDateTime(m.EndDateTime())
	to.SetMaxDaysToReturn(m.MaxDaysToReturn())
	to.SetUseZLibCompression(m.UseZLibCompression())
	to.SetRequestDividendAdjustedStockData(m.RequestDividendAdjustedStockData())
	to.SetInteger_1(m.Integer_1())
}

// CopyTo
func (m HistoricalPriceDataRequestFixed) CopyTo(to HistoricalPriceDataRequest) {
	to.SetRequestID(m.RequestID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetRecordInterval(m.RecordInterval())
	to.SetStartDateTime(m.StartDateTime())
	to.SetEndDateTime(m.EndDateTime())
	to.SetMaxDaysToReturn(m.MaxDaysToReturn())
	to.SetUseZLibCompression(m.UseZLibCompression())
	to.SetRequestDividendAdjustedStockData(m.RequestDividendAdjustedStockData())
	to.SetInteger_1(m.Integer_1())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalPriceDataRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 800)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.Int32Field("RecordInterval", int32(m.RecordInterval()))
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Int64Field("EndDateTime", int64(m.EndDateTime()))
	w.Uint32Field("MaxDaysToReturn", m.MaxDaysToReturn())
	w.BoolField("UseZLibCompression", m.UseZLibCompression())
	w.Uint8Field("RequestDividendAdjustedStockData", m.RequestDividendAdjustedStockData())
	w.Uint16Field("Integer_1", m.Integer_1())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 800 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "RecordInterval":
			m.SetRecordInterval(HistoricalDataIntervalEnum(r.Int32()))
		case "StartDateTime":
			m.SetStartDateTime(DateTime(r.Int64()))
		case "EndDateTime":
			m.SetEndDateTime(DateTime(r.Int64()))
		case "MaxDaysToReturn":
			m.SetMaxDaysToReturn(r.Uint32())
		case "UseZLibCompression":
			m.SetUseZLibCompression(r.Bool())
		case "RequestDividendAdjustedStockData":
			m.SetRequestDividendAdjustedStockData(r.Uint8())
		case "Integer_1":
			m.SetInteger_1(r.Uint16())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m HistoricalPriceDataRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 800)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.Int32Field("RecordInterval", int32(m.RecordInterval()))
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Int64Field("EndDateTime", int64(m.EndDateTime()))
	w.Uint32Field("MaxDaysToReturn", m.MaxDaysToReturn())
	w.BoolField("UseZLibCompression", m.UseZLibCompression())
	w.Uint8Field("RequestDividendAdjustedStockData", m.RequestDividendAdjustedStockData())
	w.Uint16Field("Integer_1", m.Integer_1())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRequestFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 800 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "RecordInterval":
			m.SetRecordInterval(HistoricalDataIntervalEnum(r.Int32()))
		case "StartDateTime":
			m.SetStartDateTime(DateTime(r.Int64()))
		case "EndDateTime":
			m.SetEndDateTime(DateTime(r.Int64()))
		case "MaxDaysToReturn":
			m.SetMaxDaysToReturn(r.Uint32())
		case "UseZLibCompression":
			m.SetUseZLibCompression(r.Bool())
		case "RequestDividendAdjustedStockData":
			m.SetRequestDividendAdjustedStockData(r.Uint8())
		case "Integer_1":
			m.SetInteger_1(r.Uint16())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRequestFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
