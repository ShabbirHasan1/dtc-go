// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const JournalEntriesRequestSize = 16

//     Size           uint16    = JournalEntriesRequestSize  (16)
//     Type           uint16    = JOURNAL_ENTRIES_REQUEST  (704)
//     RequestID      int32     = 0
//     StartDateTime  DateTime  = 0
var _JournalEntriesRequestDefault = []byte{16, 0, 192, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type JournalEntriesRequest struct {
	p message.Fixed
}

func NewJournalEntriesRequestFrom(b []byte) JournalEntriesRequest {
	return JournalEntriesRequest{p: message.NewFixed(b)}
}

func WrapJournalEntriesRequest(b []byte) JournalEntriesRequest {
	return JournalEntriesRequest{p: message.WrapFixed(b)}
}

func NewJournalEntriesRequest() *JournalEntriesRequest {
	return &JournalEntriesRequest{p: message.NewFixed(_JournalEntriesRequestDefault)}
}

func ParseJournalEntriesRequest(b []byte) (JournalEntriesRequest, error) {
	if len(b) < 4 {
		return JournalEntriesRequest{}, message.ErrShortBuffer
	}
	m := WrapJournalEntriesRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return JournalEntriesRequest{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return JournalEntriesRequest{}, message.ErrBaseSizeOverflow
	}
	if size < 16 {
		clone := *NewJournalEntriesRequest()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _JournalEntriesRequestDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m JournalEntriesRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m JournalEntriesRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m JournalEntriesRequest) RequestID() int32 {
	return m.p.Int32LE(4)
}

// StartDateTime
func (m JournalEntriesRequest) StartDateTime() DateTime {
	return DateTime(m.p.Int64LE(8))
}

// SetRequestID
func (m *JournalEntriesRequest) SetRequestID(value int32) *JournalEntriesRequest {
	m.p.SetInt32LE(4, value)
	return m
}

// SetStartDateTime
func (m *JournalEntriesRequest) SetStartDateTime(value DateTime) *JournalEntriesRequest {
	m.p.SetInt64LE(8, int64(value))
	return m
}

func (m JournalEntriesRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m JournalEntriesRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m JournalEntriesRequest) Copy(to JournalEntriesRequest) {
	to.SetRequestID(m.RequestID())
	to.SetStartDateTime(m.StartDateTime())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m JournalEntriesRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 704)
	w.Int32Field("RequestID", m.RequestID())
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *JournalEntriesRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 704 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "StartDateTime":
			m.SetStartDateTime(DateTime(r.Int64()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *JournalEntriesRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
