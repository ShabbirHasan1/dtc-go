// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateSessionSettlementSize = 24

//     Size      uint16         = MarketDataUpdateSessionSettlementSize  (24)
//     Type      uint16         = MARKET_DATA_UPDATE_SESSION_SETTLEMENT  (119)
//     SymbolID  uint32         = 0
//     Price     float64        = 0.000000
//     DateTime  DateTime4Byte  = 0
var _MarketDataUpdateSessionSettlementDefault = []byte{24, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateSessionSettlement Sent by the Server to the Client to update the session settlement price
// when the session settlement price changes.
type MarketDataUpdateSessionSettlement struct {
	p message.Fixed
}

func NewMarketDataUpdateSessionSettlementFrom(b []byte) MarketDataUpdateSessionSettlement {
	return MarketDataUpdateSessionSettlement{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateSessionSettlement(b []byte) MarketDataUpdateSessionSettlement {
	return MarketDataUpdateSessionSettlement{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateSessionSettlement() *MarketDataUpdateSessionSettlement {
	return &MarketDataUpdateSessionSettlement{p: message.NewFixed(_MarketDataUpdateSessionSettlementDefault)}
}

func ParseMarketDataUpdateSessionSettlement(b []byte) (MarketDataUpdateSessionSettlement, error) {
	if len(b) < 4 {
		return MarketDataUpdateSessionSettlement{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateSessionSettlement(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateSessionSettlement{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateSessionSettlement{}, message.ErrBaseSizeOverflow
	}
	if size < 24 {
		clone := *NewMarketDataUpdateSessionSettlement()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateSessionSettlementDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateSessionSettlement) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateSessionSettlement) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateSessionSettlement) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Price The settlement price.
func (m MarketDataUpdateSessionSettlement) Price() float64 {
	return m.p.Float64LE(8)
}

// DateTime That trading date the settlement price is for. The time component is not
// normally considered relevant in this case.
func (m MarketDataUpdateSessionSettlement) DateTime() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(16))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateSessionSettlement) SetSymbolID(value uint32) *MarketDataUpdateSessionSettlement {
	m.p.SetUint32LE(4, value)
	return m
}

// SetPrice The settlement price.
func (m *MarketDataUpdateSessionSettlement) SetPrice(value float64) *MarketDataUpdateSessionSettlement {
	m.p.SetFloat64LE(8, value)
	return m
}

// SetDateTime That trading date the settlement price is for. The time component is not
// normally considered relevant in this case.
func (m *MarketDataUpdateSessionSettlement) SetDateTime(value DateTime4Byte) *MarketDataUpdateSessionSettlement {
	m.p.SetUint32LE(16, uint32(value))
	return m
}

func (m MarketDataUpdateSessionSettlement) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarketDataUpdateSessionSettlement) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarketDataUpdateSessionSettlement) Copy(to MarketDataUpdateSessionSettlement) {
	to.SetSymbolID(m.SymbolID())
	to.SetPrice(m.Price())
	to.SetDateTime(m.DateTime())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarketDataUpdateSessionSettlement) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 119)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Float64Field("Price", m.Price())
	w.Uint32Field("DateTime", uint32(m.DateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateSessionSettlement) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 119 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Price":
			m.SetPrice(r.Float64())
		case "DateTime":
			m.SetDateTime(DateTime4Byte(r.Uint32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateSessionSettlement) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
