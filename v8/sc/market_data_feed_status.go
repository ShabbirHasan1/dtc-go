// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataFeedStatusSize = 8

//     Size    uint16                    = MarketDataFeedStatusSize  (8)
//     Type    uint16                    = MARKET_DATA_FEED_STATUS  (100)
//     Status  MarketDataFeedStatusEnum  = MARKET_DATA_FEED_STATUS_UNSET  (0)
var _MarketDataFeedStatusDefault = []byte{8, 0, 100, 0, 0, 0, 0, 0}

// MarketDataFeedStatus The s_MarketDataFeed_STATUS message is an optional message sent by the
// Server to indicate the overall status of the market data feed. This status
// applies to all symbols that have been subscribed to for market data.
type MarketDataFeedStatus struct {
	p message.Fixed
}

func NewMarketDataFeedStatusFrom(b []byte) MarketDataFeedStatus {
	return MarketDataFeedStatus{p: message.NewFixed(b)}
}

func WrapMarketDataFeedStatus(b []byte) MarketDataFeedStatus {
	return MarketDataFeedStatus{p: message.WrapFixed(b)}
}

func NewMarketDataFeedStatus() *MarketDataFeedStatus {
	return &MarketDataFeedStatus{p: message.NewFixed(_MarketDataFeedStatusDefault)}
}

func ParseMarketDataFeedStatus(b []byte) (MarketDataFeedStatus, error) {
	if len(b) < 4 {
		return MarketDataFeedStatus{}, message.ErrShortBuffer
	}
	m := WrapMarketDataFeedStatus(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataFeedStatus{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataFeedStatus{}, message.ErrBaseSizeOverflow
	}
	if size < 8 {
		clone := *NewMarketDataFeedStatus()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataFeedStatusDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataFeedStatus) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataFeedStatus) Type() uint16 {
	return m.p.Uint16LE(2)
}

// Status This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
// to indicate the market data feed has been restored.
//
// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
// will the data feed be considered lost.
func (m MarketDataFeedStatus) Status() MarketDataFeedStatusEnum {
	return MarketDataFeedStatusEnum(m.p.Int32LE(4))
}

// SetStatus This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
// to indicate the market data feed has been restored.
//
// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
// will the data feed be considered lost.
func (m *MarketDataFeedStatus) SetStatus(value MarketDataFeedStatusEnum) *MarketDataFeedStatus {
	m.p.SetInt32LE(4, int32(value))
	return m
}

func (m MarketDataFeedStatus) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m MarketDataFeedStatus) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m MarketDataFeedStatus) Copy(to MarketDataFeedStatus) {
	to.SetStatus(m.Status())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m MarketDataFeedStatus) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 100)
	w.Int32Field("Status", int32(m.Status()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataFeedStatus) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 100 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "Status":
			m.SetStatus(MarketDataFeedStatusEnum(r.Int32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataFeedStatus) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
