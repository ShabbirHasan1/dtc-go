// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const ReplayChartDataPerformActionSize = 18

const ReplayChartDataPerformActionFixedSize = 16

//     Size         uint16                     = ReplayChartDataPerformActionSize  (18)
//     Type         uint16                     = REPLAY_CHART_DATA_PERFORM_ACTION  (10105)
//     BaseSize     uint16                     = ReplayChartDataPerformActionSize  (18)
//     RequestID    uint32                     = 0
//     Action       ReplayChartDataActionEnum  = REPLAY_CHART_DATA_ACTION_NONE  (0)
//     ReplaySpeed  float32                    = 0.000000
var _ReplayChartDataPerformActionDefault = []byte{18, 0, 121, 39, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size         uint16                     = ReplayChartDataPerformActionFixedSize  (16)
//     Type         uint16                     = REPLAY_CHART_DATA_PERFORM_ACTION  (10105)
//     RequestID    uint32                     = 0
//     Action       ReplayChartDataActionEnum  = REPLAY_CHART_DATA_ACTION_NONE  (0)
//     ReplaySpeed  float32                    = 0.000000
var _ReplayChartDataPerformActionFixedDefault = []byte{16, 0, 121, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type ReplayChartDataPerformAction struct {
	p message.VLS
}

type ReplayChartDataPerformActionFixed struct {
	p message.Fixed
}

func NewReplayChartDataPerformActionFrom(b []byte) ReplayChartDataPerformAction {
	return ReplayChartDataPerformAction{p: message.NewVLS(b)}
}

func WrapReplayChartDataPerformAction(b []byte) ReplayChartDataPerformAction {
	return ReplayChartDataPerformAction{p: message.WrapVLS(b)}
}

func NewReplayChartDataPerformAction() *ReplayChartDataPerformAction {
	return &ReplayChartDataPerformAction{p: message.NewVLS(_ReplayChartDataPerformActionDefault)}
}

func ParseReplayChartDataPerformAction(b []byte) (ReplayChartDataPerformAction, error) {
	if len(b) < 6 {
		return ReplayChartDataPerformAction{}, message.ErrShortBuffer
	}
	m := WrapReplayChartDataPerformAction(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ReplayChartDataPerformAction{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return ReplayChartDataPerformAction{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 18 {
		newSize := len(b) + (18 - baseSize)
		if newSize > message.MaxSize {
			return ReplayChartDataPerformAction{}, message.ErrOverflow
		}
		clone := ReplayChartDataPerformAction{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _ReplayChartDataPerformActionDefault[baseSize:])
		return clone, nil
	}
	return m, nil
}

func NewReplayChartDataPerformActionFixedFrom(b []byte) ReplayChartDataPerformActionFixed {
	return ReplayChartDataPerformActionFixed{p: message.NewFixed(b)}
}

func WrapReplayChartDataPerformActionFixed(b []byte) ReplayChartDataPerformActionFixed {
	return ReplayChartDataPerformActionFixed{p: message.WrapFixed(b)}
}

func NewReplayChartDataPerformActionFixed() *ReplayChartDataPerformActionFixed {
	return &ReplayChartDataPerformActionFixed{p: message.NewFixed(_ReplayChartDataPerformActionFixedDefault)}
}

func ParseReplayChartDataPerformActionFixed(b []byte) (ReplayChartDataPerformActionFixed, error) {
	if len(b) < 4 {
		return ReplayChartDataPerformActionFixed{}, message.ErrShortBuffer
	}
	m := WrapReplayChartDataPerformActionFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ReplayChartDataPerformActionFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return ReplayChartDataPerformActionFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 16 {
		clone := *NewReplayChartDataPerformActionFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _ReplayChartDataPerformActionFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m ReplayChartDataPerformAction) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ReplayChartDataPerformAction) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m ReplayChartDataPerformAction) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m ReplayChartDataPerformAction) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// Action
func (m ReplayChartDataPerformAction) Action() ReplayChartDataActionEnum {
	return ReplayChartDataActionEnum(m.p.Int32LE(10))
}

// ReplaySpeed
func (m ReplayChartDataPerformAction) ReplaySpeed() float32 {
	return m.p.Float32LE(14)
}

// Size
func (m ReplayChartDataPerformActionFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m ReplayChartDataPerformActionFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m ReplayChartDataPerformActionFixed) RequestID() uint32 {
	return m.p.Uint32LE(4)
}

// Action
func (m ReplayChartDataPerformActionFixed) Action() ReplayChartDataActionEnum {
	return ReplayChartDataActionEnum(m.p.Int32LE(8))
}

// ReplaySpeed
func (m ReplayChartDataPerformActionFixed) ReplaySpeed() float32 {
	return m.p.Float32LE(12)
}

// SetRequestID
func (m *ReplayChartDataPerformAction) SetRequestID(value uint32) *ReplayChartDataPerformAction {
	m.p.SetUint32LE(6, value)
	return m
}

// SetAction
func (m *ReplayChartDataPerformAction) SetAction(value ReplayChartDataActionEnum) *ReplayChartDataPerformAction {
	m.p.SetInt32LE(10, int32(value))
	return m
}

// SetReplaySpeed
func (m *ReplayChartDataPerformAction) SetReplaySpeed(value float32) *ReplayChartDataPerformAction {
	m.p.SetFloat32LE(14, value)
	return m
}

// SetRequestID
func (m *ReplayChartDataPerformActionFixed) SetRequestID(value uint32) *ReplayChartDataPerformActionFixed {
	m.p.SetUint32LE(4, value)
	return m
}

// SetAction
func (m *ReplayChartDataPerformActionFixed) SetAction(value ReplayChartDataActionEnum) *ReplayChartDataPerformActionFixed {
	m.p.SetInt32LE(8, int32(value))
	return m
}

// SetReplaySpeed
func (m *ReplayChartDataPerformActionFixed) SetReplaySpeed(value float32) *ReplayChartDataPerformActionFixed {
	m.p.SetFloat32LE(12, value)
	return m
}

func (m ReplayChartDataPerformAction) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ReplayChartDataPerformAction) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m ReplayChartDataPerformActionFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m ReplayChartDataPerformActionFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m ReplayChartDataPerformAction) Copy(to ReplayChartDataPerformAction) {
	to.SetRequestID(m.RequestID())
	to.SetAction(m.Action())
	to.SetReplaySpeed(m.ReplaySpeed())
}

// CopyTo
func (m ReplayChartDataPerformAction) CopyTo(to ReplayChartDataPerformActionFixed) {
	to.SetRequestID(m.RequestID())
	to.SetAction(m.Action())
	to.SetReplaySpeed(m.ReplaySpeed())
}

// Copy
func (m ReplayChartDataPerformActionFixed) Copy(to ReplayChartDataPerformActionFixed) {
	to.SetRequestID(m.RequestID())
	to.SetAction(m.Action())
	to.SetReplaySpeed(m.ReplaySpeed())
}

// CopyTo
func (m ReplayChartDataPerformActionFixed) CopyTo(to ReplayChartDataPerformAction) {
	to.SetRequestID(m.RequestID())
	to.SetAction(m.Action())
	to.SetReplaySpeed(m.ReplaySpeed())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ReplayChartDataPerformAction) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10105)
	w.Uint32Field("RequestID", m.RequestID())
	w.Int32Field("Action", int32(m.Action()))
	w.Float32Field("ReplaySpeed", m.ReplaySpeed())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataPerformAction) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10105 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Action":
			m.SetAction(ReplayChartDataActionEnum(r.Int32()))
		case "ReplaySpeed":
			m.SetReplaySpeed(r.Float32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataPerformAction) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m ReplayChartDataPerformActionFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10105)
	w.Uint32Field("RequestID", m.RequestID())
	w.Int32Field("Action", int32(m.Action()))
	w.Float32Field("ReplaySpeed", m.ReplaySpeed())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataPerformActionFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10105 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Action":
			m.SetAction(ReplayChartDataActionEnum(r.Int32()))
		case "ReplaySpeed":
			m.SetReplaySpeed(r.Float32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ReplayChartDataPerformActionFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
