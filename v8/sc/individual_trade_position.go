// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const IndividualTradePositionSize = 54

//     Size                     uint16   = IndividualTradePositionSize  (54)
//     Type                     uint16   = INDIVIDUAL_TRADE_POSITION  (10112)
//     BaseSize                 uint16   = IndividualTradePositionSize  (54)
//     Symbol                   string   = ""
//     IsSimulated              bool     = false
//     TradeAccount             string   = ""
//     Quantity                 float64  = 0.000000
//     PositionPrice            float64  = 0.000000
//     OpenProfitLoss           float64  = 0.000000
//     TradeDateTime            int64    = 0
//     FillExecutionIdentifier  string   = ""
//     IsSnapshot               bool     = false
//     IsFirstMessageInBatch    bool     = false
//     IsLastMessageInBatch     bool     = false
var _IndividualTradePositionDefault = []byte{54, 0, 128, 39, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type IndividualTradePosition struct {
	p message.VLS
}

func NewIndividualTradePositionFrom(b []byte) IndividualTradePosition {
	return IndividualTradePosition{p: message.NewVLS(b)}
}

func WrapIndividualTradePosition(b []byte) IndividualTradePosition {
	return IndividualTradePosition{p: message.WrapVLS(b)}
}

func NewIndividualTradePosition() *IndividualTradePosition {
	return &IndividualTradePosition{p: message.NewVLS(_IndividualTradePositionDefault)}
}

func ParseIndividualTradePosition(b []byte) (IndividualTradePosition, error) {
	if len(b) < 6 {
		return IndividualTradePosition{}, message.ErrShortBuffer
	}
	m := WrapIndividualTradePosition(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return IndividualTradePosition{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return IndividualTradePosition{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 54 {
		newSize := len(b) + (54 - baseSize)
		if newSize > message.MaxSize {
			return IndividualTradePosition{}, message.ErrOverflow
		}
		clone := IndividualTradePosition{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _IndividualTradePositionDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(54 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
			offset = clone.p.Uint16LE(11)
			if offset > 0 {
				clone.p.SetUint16LE(11, offset+shift)
			}
			offset = clone.p.Uint16LE(47)
			if offset > 0 {
				clone.p.SetUint16LE(47, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m IndividualTradePosition) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m IndividualTradePosition) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m IndividualTradePosition) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// Symbol
func (m IndividualTradePosition) Symbol() string {
	return m.p.StringVLS(6)
}

// IsSimulated
func (m IndividualTradePosition) IsSimulated() bool {
	return m.p.Bool(10)
}

// TradeAccount
func (m IndividualTradePosition) TradeAccount() string {
	return m.p.StringVLS(11)
}

// Quantity
func (m IndividualTradePosition) Quantity() float64 {
	return m.p.Float64LE(15)
}

// PositionPrice
func (m IndividualTradePosition) PositionPrice() float64 {
	return m.p.Float64LE(23)
}

// OpenProfitLoss
func (m IndividualTradePosition) OpenProfitLoss() float64 {
	return m.p.Float64LE(31)
}

// TradeDateTime
func (m IndividualTradePosition) TradeDateTime() int64 {
	return m.p.Int64LE(39)
}

// FillExecutionIdentifier
func (m IndividualTradePosition) FillExecutionIdentifier() string {
	return m.p.StringVLS(47)
}

// IsSnapshot
func (m IndividualTradePosition) IsSnapshot() bool {
	return m.p.Bool(51)
}

// IsFirstMessageInBatch
func (m IndividualTradePosition) IsFirstMessageInBatch() bool {
	return m.p.Bool(52)
}

// IsLastMessageInBatch
func (m IndividualTradePosition) IsLastMessageInBatch() bool {
	return m.p.Bool(53)
}

// SetSymbol
func (m *IndividualTradePosition) SetSymbol(value string) *IndividualTradePosition {
	m.p.SetStringVLS(6, value)
	return m
}

// SetIsSimulated
func (m *IndividualTradePosition) SetIsSimulated(value bool) *IndividualTradePosition {
	m.p.SetBool(10, value)
	return m
}

// SetTradeAccount
func (m *IndividualTradePosition) SetTradeAccount(value string) *IndividualTradePosition {
	m.p.SetStringVLS(11, value)
	return m
}

// SetQuantity
func (m *IndividualTradePosition) SetQuantity(value float64) *IndividualTradePosition {
	m.p.SetFloat64LE(15, value)
	return m
}

// SetPositionPrice
func (m *IndividualTradePosition) SetPositionPrice(value float64) *IndividualTradePosition {
	m.p.SetFloat64LE(23, value)
	return m
}

// SetOpenProfitLoss
func (m *IndividualTradePosition) SetOpenProfitLoss(value float64) *IndividualTradePosition {
	m.p.SetFloat64LE(31, value)
	return m
}

// SetTradeDateTime
func (m *IndividualTradePosition) SetTradeDateTime(value int64) *IndividualTradePosition {
	m.p.SetInt64LE(39, value)
	return m
}

// SetFillExecutionIdentifier
func (m *IndividualTradePosition) SetFillExecutionIdentifier(value string) *IndividualTradePosition {
	m.p.SetStringVLS(47, value)
	return m
}

// SetIsSnapshot
func (m *IndividualTradePosition) SetIsSnapshot(value bool) *IndividualTradePosition {
	m.p.SetBool(51, value)
	return m
}

// SetIsFirstMessageInBatch
func (m *IndividualTradePosition) SetIsFirstMessageInBatch(value bool) *IndividualTradePosition {
	m.p.SetBool(52, value)
	return m
}

// SetIsLastMessageInBatch
func (m *IndividualTradePosition) SetIsLastMessageInBatch(value bool) *IndividualTradePosition {
	m.p.SetBool(53, value)
	return m
}

func (m IndividualTradePosition) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m IndividualTradePosition) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m IndividualTradePosition) Copy(to IndividualTradePosition) {
	to.SetSymbol(m.Symbol())
	to.SetIsSimulated(m.IsSimulated())
	to.SetTradeAccount(m.TradeAccount())
	to.SetQuantity(m.Quantity())
	to.SetPositionPrice(m.PositionPrice())
	to.SetOpenProfitLoss(m.OpenProfitLoss())
	to.SetTradeDateTime(m.TradeDateTime())
	to.SetFillExecutionIdentifier(m.FillExecutionIdentifier())
	to.SetIsSnapshot(m.IsSnapshot())
	to.SetIsFirstMessageInBatch(m.IsFirstMessageInBatch())
	to.SetIsLastMessageInBatch(m.IsLastMessageInBatch())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m IndividualTradePosition) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10112)
	w.StringField("m_Symbol", m.Symbol())
	w.BoolField("m_IsSimulated", m.IsSimulated())
	w.StringField("m_TradeAccount", m.TradeAccount())
	w.Float64Field("m_Quantity", m.Quantity())
	w.Float64Field("m_PositionPrice", m.PositionPrice())
	w.Float64Field("m_OpenProfitLoss", m.OpenProfitLoss())
	w.Int64Field("m_TradeDateTime", m.TradeDateTime())
	w.StringField("m_FillExecutionIdentifier", m.FillExecutionIdentifier())
	w.BoolField("m_IsSnapshot", m.IsSnapshot())
	w.BoolField("m_IsFirstMessageInBatch", m.IsFirstMessageInBatch())
	w.BoolField("m_IsLastMessageInBatch", m.IsLastMessageInBatch())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *IndividualTradePosition) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10112 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "m_Symbol":
			m.SetSymbol(r.String())
		case "m_IsSimulated":
			m.SetIsSimulated(r.Bool())
		case "m_TradeAccount":
			m.SetTradeAccount(r.String())
		case "m_Quantity":
			m.SetQuantity(r.Float64())
		case "m_PositionPrice":
			m.SetPositionPrice(r.Float64())
		case "m_OpenProfitLoss":
			m.SetOpenProfitLoss(r.Float64())
		case "m_TradeDateTime":
			m.SetTradeDateTime(r.Int64())
		case "m_FillExecutionIdentifier":
			m.SetFillExecutionIdentifier(r.String())
		case "m_IsSnapshot":
			m.SetIsSnapshot(r.Bool())
		case "m_IsFirstMessageInBatch":
			m.SetIsFirstMessageInBatch(r.Bool())
		case "m_IsLastMessageInBatch":
			m.SetIsLastMessageInBatch(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *IndividualTradePosition) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
