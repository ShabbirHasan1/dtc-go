// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const TradePositionConsolidatedSize = 161

//     Size                                   uint16   = TradePositionConsolidatedSize  (161)
//     Type                                   uint16   = TRADE_POSITION_CONSOLIDATED  (10113)
//     BaseSize                               uint16   = TradePositionConsolidatedSize  (161)
//     IsDeleted                              bool     = false
//     Symbol                                 string   = ""
//     IsSimulated                            bool     = false
//     TradeAccount                           string   = ""
//     CurrencyCode                           string   = ""
//     Quantity                               float64  = 0.000000
//     AveragePrice                           float64  = 0.000000
//     OpenProfitLoss                         float64  = 0.000000
//     DailyProfitLoss                        float64  = 0.000000
//     LastDailyProfitLossResetDateTimeUTC    int64    = 0
//     ServicePositionQuantity                float64  = 0.000000
//     PositionHasBeenUpdatedByService        uint8    = 0
//     PriceHighDuringPosition                float64  = 0.000000
//     PriceLowDuringPosition                 float64  = 0.000000
//     PriceLastDuringPosition                float64  = 0.000000
//     LastProcessedTimeAndSalesSequence      int64    = 0
//     TotalMarginRequirement                 float64  = 0.000000
//     InitialEntryDateTimeUTC                int64    = 0
//     IsFromDTCServerReplay                  bool     = false
//     MostRecentPositionIncreaseDateTimeUTC  int64    = 0
//     IsSnapshot                             bool     = false
//     IsFirstMessageInBatch                  bool     = false
//     IsLastMessageInBatch                   bool     = false
//     MarginRequirementFull                  float64  = 0.000000
//     MarginRequirementFullPositionsOnly     float64  = 0.000000
//     MaxPotentialPositionQuantity           float64  = 0.000000
//     QuantityAtEndOfDayCaptureTime          float64  = 0.000000
var _TradePositionConsolidatedDefault = []byte{161, 0, 129, 39, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type TradePositionConsolidated struct {
	p message.VLS
}

func NewTradePositionConsolidatedFrom(b []byte) TradePositionConsolidated {
	return TradePositionConsolidated{p: message.NewVLS(b)}
}

func WrapTradePositionConsolidated(b []byte) TradePositionConsolidated {
	return TradePositionConsolidated{p: message.WrapVLS(b)}
}

func NewTradePositionConsolidated() *TradePositionConsolidated {
	return &TradePositionConsolidated{p: message.NewVLS(_TradePositionConsolidatedDefault)}
}

func ParseTradePositionConsolidated(b []byte) (TradePositionConsolidated, error) {
	if len(b) < 6 {
		return TradePositionConsolidated{}, message.ErrShortBuffer
	}
	m := WrapTradePositionConsolidated(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return TradePositionConsolidated{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return TradePositionConsolidated{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 161 {
		newSize := len(b) + (161 - baseSize)
		if newSize > message.MaxSize {
			return TradePositionConsolidated{}, message.ErrOverflow
		}
		clone := TradePositionConsolidated{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _TradePositionConsolidatedDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(161 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(7)
			if offset > 0 {
				clone.p.SetUint16LE(7, offset+shift)
			}
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
			offset = clone.p.Uint16LE(16)
			if offset > 0 {
				clone.p.SetUint16LE(16, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

// Size
func (m TradePositionConsolidated) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m TradePositionConsolidated) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m TradePositionConsolidated) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// IsDeleted
func (m TradePositionConsolidated) IsDeleted() bool {
	return m.p.Bool(6)
}

// Symbol
func (m TradePositionConsolidated) Symbol() string {
	return m.p.StringVLS(7)
}

// IsSimulated
func (m TradePositionConsolidated) IsSimulated() bool {
	return m.p.Bool(11)
}

// TradeAccount
func (m TradePositionConsolidated) TradeAccount() string {
	return m.p.StringVLS(12)
}

// CurrencyCode
func (m TradePositionConsolidated) CurrencyCode() string {
	return m.p.StringVLS(16)
}

// Quantity
func (m TradePositionConsolidated) Quantity() float64 {
	return m.p.Float64LE(20)
}

// AveragePrice
func (m TradePositionConsolidated) AveragePrice() float64 {
	return m.p.Float64LE(28)
}

// OpenProfitLoss
func (m TradePositionConsolidated) OpenProfitLoss() float64 {
	return m.p.Float64LE(36)
}

// DailyProfitLoss
func (m TradePositionConsolidated) DailyProfitLoss() float64 {
	return m.p.Float64LE(44)
}

// LastDailyProfitLossResetDateTimeUTC
func (m TradePositionConsolidated) LastDailyProfitLossResetDateTimeUTC() int64 {
	return m.p.Int64LE(52)
}

// ServicePositionQuantity
func (m TradePositionConsolidated) ServicePositionQuantity() float64 {
	return m.p.Float64LE(60)
}

// PositionHasBeenUpdatedByService
func (m TradePositionConsolidated) PositionHasBeenUpdatedByService() uint8 {
	return m.p.Uint8(68)
}

// PriceHighDuringPosition
func (m TradePositionConsolidated) PriceHighDuringPosition() float64 {
	return m.p.Float64LE(69)
}

// PriceLowDuringPosition
func (m TradePositionConsolidated) PriceLowDuringPosition() float64 {
	return m.p.Float64LE(77)
}

// PriceLastDuringPosition
func (m TradePositionConsolidated) PriceLastDuringPosition() float64 {
	return m.p.Float64LE(85)
}

// LastProcessedTimeAndSalesSequence
func (m TradePositionConsolidated) LastProcessedTimeAndSalesSequence() int64 {
	return m.p.Int64LE(93)
}

// TotalMarginRequirement
func (m TradePositionConsolidated) TotalMarginRequirement() float64 {
	return m.p.Float64LE(101)
}

// InitialEntryDateTimeUTC
func (m TradePositionConsolidated) InitialEntryDateTimeUTC() int64 {
	return m.p.Int64LE(109)
}

// IsFromDTCServerReplay
func (m TradePositionConsolidated) IsFromDTCServerReplay() bool {
	return m.p.Bool(117)
}

// MostRecentPositionIncreaseDateTimeUTC
func (m TradePositionConsolidated) MostRecentPositionIncreaseDateTimeUTC() int64 {
	return m.p.Int64LE(118)
}

// IsSnapshot
func (m TradePositionConsolidated) IsSnapshot() bool {
	return m.p.Bool(126)
}

// IsFirstMessageInBatch
func (m TradePositionConsolidated) IsFirstMessageInBatch() bool {
	return m.p.Bool(127)
}

// IsLastMessageInBatch
func (m TradePositionConsolidated) IsLastMessageInBatch() bool {
	return m.p.Bool(128)
}

// MarginRequirementFull
func (m TradePositionConsolidated) MarginRequirementFull() float64 {
	return m.p.Float64LE(129)
}

// MarginRequirementFullPositionsOnly
func (m TradePositionConsolidated) MarginRequirementFullPositionsOnly() float64 {
	return m.p.Float64LE(137)
}

// MaxPotentialPositionQuantity
func (m TradePositionConsolidated) MaxPotentialPositionQuantity() float64 {
	return m.p.Float64LE(145)
}

// QuantityAtEndOfDayCaptureTime
func (m TradePositionConsolidated) QuantityAtEndOfDayCaptureTime() float64 {
	return m.p.Float64LE(153)
}

// SetIsDeleted
func (m *TradePositionConsolidated) SetIsDeleted(value bool) *TradePositionConsolidated {
	m.p.SetBool(6, value)
	return m
}

// SetSymbol
func (m *TradePositionConsolidated) SetSymbol(value string) *TradePositionConsolidated {
	m.p.SetStringVLS(7, value)
	return m
}

// SetIsSimulated
func (m *TradePositionConsolidated) SetIsSimulated(value bool) *TradePositionConsolidated {
	m.p.SetBool(11, value)
	return m
}

// SetTradeAccount
func (m *TradePositionConsolidated) SetTradeAccount(value string) *TradePositionConsolidated {
	m.p.SetStringVLS(12, value)
	return m
}

// SetCurrencyCode
func (m *TradePositionConsolidated) SetCurrencyCode(value string) *TradePositionConsolidated {
	m.p.SetStringVLS(16, value)
	return m
}

// SetQuantity
func (m *TradePositionConsolidated) SetQuantity(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(20, value)
	return m
}

// SetAveragePrice
func (m *TradePositionConsolidated) SetAveragePrice(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(28, value)
	return m
}

// SetOpenProfitLoss
func (m *TradePositionConsolidated) SetOpenProfitLoss(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(36, value)
	return m
}

// SetDailyProfitLoss
func (m *TradePositionConsolidated) SetDailyProfitLoss(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(44, value)
	return m
}

// SetLastDailyProfitLossResetDateTimeUTC
func (m *TradePositionConsolidated) SetLastDailyProfitLossResetDateTimeUTC(value int64) *TradePositionConsolidated {
	m.p.SetInt64LE(52, value)
	return m
}

// SetServicePositionQuantity
func (m *TradePositionConsolidated) SetServicePositionQuantity(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(60, value)
	return m
}

// SetPositionHasBeenUpdatedByService
func (m *TradePositionConsolidated) SetPositionHasBeenUpdatedByService(value uint8) *TradePositionConsolidated {
	m.p.SetUint8(68, value)
	return m
}

// SetPriceHighDuringPosition
func (m *TradePositionConsolidated) SetPriceHighDuringPosition(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(69, value)
	return m
}

// SetPriceLowDuringPosition
func (m *TradePositionConsolidated) SetPriceLowDuringPosition(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(77, value)
	return m
}

// SetPriceLastDuringPosition
func (m *TradePositionConsolidated) SetPriceLastDuringPosition(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(85, value)
	return m
}

// SetLastProcessedTimeAndSalesSequence
func (m *TradePositionConsolidated) SetLastProcessedTimeAndSalesSequence(value int64) *TradePositionConsolidated {
	m.p.SetInt64LE(93, value)
	return m
}

// SetTotalMarginRequirement
func (m *TradePositionConsolidated) SetTotalMarginRequirement(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(101, value)
	return m
}

// SetInitialEntryDateTimeUTC
func (m *TradePositionConsolidated) SetInitialEntryDateTimeUTC(value int64) *TradePositionConsolidated {
	m.p.SetInt64LE(109, value)
	return m
}

// SetIsFromDTCServerReplay
func (m *TradePositionConsolidated) SetIsFromDTCServerReplay(value bool) *TradePositionConsolidated {
	m.p.SetBool(117, value)
	return m
}

// SetMostRecentPositionIncreaseDateTimeUTC
func (m *TradePositionConsolidated) SetMostRecentPositionIncreaseDateTimeUTC(value int64) *TradePositionConsolidated {
	m.p.SetInt64LE(118, value)
	return m
}

// SetIsSnapshot
func (m *TradePositionConsolidated) SetIsSnapshot(value bool) *TradePositionConsolidated {
	m.p.SetBool(126, value)
	return m
}

// SetIsFirstMessageInBatch
func (m *TradePositionConsolidated) SetIsFirstMessageInBatch(value bool) *TradePositionConsolidated {
	m.p.SetBool(127, value)
	return m
}

// SetIsLastMessageInBatch
func (m *TradePositionConsolidated) SetIsLastMessageInBatch(value bool) *TradePositionConsolidated {
	m.p.SetBool(128, value)
	return m
}

// SetMarginRequirementFull
func (m *TradePositionConsolidated) SetMarginRequirementFull(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(129, value)
	return m
}

// SetMarginRequirementFullPositionsOnly
func (m *TradePositionConsolidated) SetMarginRequirementFullPositionsOnly(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(137, value)
	return m
}

// SetMaxPotentialPositionQuantity
func (m *TradePositionConsolidated) SetMaxPotentialPositionQuantity(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(145, value)
	return m
}

// SetQuantityAtEndOfDayCaptureTime
func (m *TradePositionConsolidated) SetQuantityAtEndOfDayCaptureTime(value float64) *TradePositionConsolidated {
	m.p.SetFloat64LE(153, value)
	return m
}

func (m TradePositionConsolidated) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m TradePositionConsolidated) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m TradePositionConsolidated) Copy(to TradePositionConsolidated) {
	to.SetIsDeleted(m.IsDeleted())
	to.SetSymbol(m.Symbol())
	to.SetIsSimulated(m.IsSimulated())
	to.SetTradeAccount(m.TradeAccount())
	to.SetCurrencyCode(m.CurrencyCode())
	to.SetQuantity(m.Quantity())
	to.SetAveragePrice(m.AveragePrice())
	to.SetOpenProfitLoss(m.OpenProfitLoss())
	to.SetDailyProfitLoss(m.DailyProfitLoss())
	to.SetLastDailyProfitLossResetDateTimeUTC(m.LastDailyProfitLossResetDateTimeUTC())
	to.SetServicePositionQuantity(m.ServicePositionQuantity())
	to.SetPositionHasBeenUpdatedByService(m.PositionHasBeenUpdatedByService())
	to.SetPriceHighDuringPosition(m.PriceHighDuringPosition())
	to.SetPriceLowDuringPosition(m.PriceLowDuringPosition())
	to.SetPriceLastDuringPosition(m.PriceLastDuringPosition())
	to.SetLastProcessedTimeAndSalesSequence(m.LastProcessedTimeAndSalesSequence())
	to.SetTotalMarginRequirement(m.TotalMarginRequirement())
	to.SetInitialEntryDateTimeUTC(m.InitialEntryDateTimeUTC())
	to.SetIsFromDTCServerReplay(m.IsFromDTCServerReplay())
	to.SetMostRecentPositionIncreaseDateTimeUTC(m.MostRecentPositionIncreaseDateTimeUTC())
	to.SetIsSnapshot(m.IsSnapshot())
	to.SetIsFirstMessageInBatch(m.IsFirstMessageInBatch())
	to.SetIsLastMessageInBatch(m.IsLastMessageInBatch())
	to.SetMarginRequirementFull(m.MarginRequirementFull())
	to.SetMarginRequirementFullPositionsOnly(m.MarginRequirementFullPositionsOnly())
	to.SetMaxPotentialPositionQuantity(m.MaxPotentialPositionQuantity())
	to.SetQuantityAtEndOfDayCaptureTime(m.QuantityAtEndOfDayCaptureTime())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m TradePositionConsolidated) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10113)
	w.BoolField("m_IsDeleted", m.IsDeleted())
	w.StringField("m_Symbol", m.Symbol())
	w.BoolField("m_IsSimulated", m.IsSimulated())
	w.StringField("m_TradeAccount", m.TradeAccount())
	w.StringField("m_CurrencyCode", m.CurrencyCode())
	w.Float64Field("m_Quantity", m.Quantity())
	w.Float64Field("m_AveragePrice", m.AveragePrice())
	w.Float64Field("m_OpenProfitLoss", m.OpenProfitLoss())
	w.Float64Field("m_DailyProfitLoss", m.DailyProfitLoss())
	w.Int64Field("m_LastDailyProfitLossResetDateTimeUTC", m.LastDailyProfitLossResetDateTimeUTC())
	w.Float64Field("m_ServicePositionQuantity", m.ServicePositionQuantity())
	w.Uint8Field("m_PositionHasBeenUpdatedByService", m.PositionHasBeenUpdatedByService())
	w.Float64Field("m_PriceHighDuringPosition", m.PriceHighDuringPosition())
	w.Float64Field("m_PriceLowDuringPosition", m.PriceLowDuringPosition())
	w.Float64Field("m_PriceLastDuringPosition", m.PriceLastDuringPosition())
	w.Int64Field("m_LastProcessedTimeAndSalesSequence", m.LastProcessedTimeAndSalesSequence())
	w.Float64Field("m_TotalMarginRequirement", m.TotalMarginRequirement())
	w.Int64Field("m_InitialEntryDateTimeUTC", m.InitialEntryDateTimeUTC())
	w.BoolField("m_IsFromDTCServerReplay", m.IsFromDTCServerReplay())
	w.Int64Field("m_MostRecentPositionIncreaseDateTimeUTC", m.MostRecentPositionIncreaseDateTimeUTC())
	w.BoolField("m_IsSnapshot", m.IsSnapshot())
	w.BoolField("m_IsFirstMessageInBatch", m.IsFirstMessageInBatch())
	w.BoolField("m_IsLastMessageInBatch", m.IsLastMessageInBatch())
	w.Float64Field("m_MarginRequirementFull", m.MarginRequirementFull())
	w.Float64Field("m_MarginRequirementFullPositionsOnly", m.MarginRequirementFullPositionsOnly())
	w.Float64Field("m_MaxPotentialPositionQuantity", m.MaxPotentialPositionQuantity())
	w.Float64Field("m_QuantityAtEndOfDayCaptureTime", m.QuantityAtEndOfDayCaptureTime())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradePositionConsolidated) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10113 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "m_IsDeleted":
			m.SetIsDeleted(r.Bool())
		case "m_Symbol":
			m.SetSymbol(r.String())
		case "m_IsSimulated":
			m.SetIsSimulated(r.Bool())
		case "m_TradeAccount":
			m.SetTradeAccount(r.String())
		case "m_CurrencyCode":
			m.SetCurrencyCode(r.String())
		case "m_Quantity":
			m.SetQuantity(r.Float64())
		case "m_AveragePrice":
			m.SetAveragePrice(r.Float64())
		case "m_OpenProfitLoss":
			m.SetOpenProfitLoss(r.Float64())
		case "m_DailyProfitLoss":
			m.SetDailyProfitLoss(r.Float64())
		case "m_LastDailyProfitLossResetDateTimeUTC":
			m.SetLastDailyProfitLossResetDateTimeUTC(r.Int64())
		case "m_ServicePositionQuantity":
			m.SetServicePositionQuantity(r.Float64())
		case "m_PositionHasBeenUpdatedByService":
			m.SetPositionHasBeenUpdatedByService(r.Uint8())
		case "m_PriceHighDuringPosition":
			m.SetPriceHighDuringPosition(r.Float64())
		case "m_PriceLowDuringPosition":
			m.SetPriceLowDuringPosition(r.Float64())
		case "m_PriceLastDuringPosition":
			m.SetPriceLastDuringPosition(r.Float64())
		case "m_LastProcessedTimeAndSalesSequence":
			m.SetLastProcessedTimeAndSalesSequence(r.Int64())
		case "m_TotalMarginRequirement":
			m.SetTotalMarginRequirement(r.Float64())
		case "m_InitialEntryDateTimeUTC":
			m.SetInitialEntryDateTimeUTC(r.Int64())
		case "m_IsFromDTCServerReplay":
			m.SetIsFromDTCServerReplay(r.Bool())
		case "m_MostRecentPositionIncreaseDateTimeUTC":
			m.SetMostRecentPositionIncreaseDateTimeUTC(r.Int64())
		case "m_IsSnapshot":
			m.SetIsSnapshot(r.Bool())
		case "m_IsFirstMessageInBatch":
			m.SetIsFirstMessageInBatch(r.Bool())
		case "m_IsLastMessageInBatch":
			m.SetIsLastMessageInBatch(r.Bool())
		case "m_MarginRequirementFull":
			m.SetMarginRequirementFull(r.Float64())
		case "m_MarginRequirementFullPositionsOnly":
			m.SetMarginRequirementFullPositionsOnly(r.Float64())
		case "m_MaxPotentialPositionQuantity":
			m.SetMaxPotentialPositionQuantity(r.Float64())
		case "m_QuantityAtEndOfDayCaptureTime":
			m.SetQuantityAtEndOfDayCaptureTime(r.Float64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *TradePositionConsolidated) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
