// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const SymbolsForExchangeRequestSize = 28

const SymbolsForExchangeRequestFixedSize = 96

//     Size           uint16             = SymbolsForExchangeRequestSize  (28)
//     Type           uint16             = SYMBOLS_FOR_EXCHANGE_REQUEST  (502)
//     BaseSize       uint16             = SymbolsForExchangeRequestSize  (28)
//     RequestID      int32              = 0
//     Exchange       string             = ""
//     SecurityType   SecurityTypeEnum   = SECURITY_TYPE_UNSET  (0)
//     RequestAction  RequestActionEnum  = SUBSCRIBE  (0)
//     Symbol         string             = ""
var _SymbolsForExchangeRequestDefault = []byte{28, 0, 246, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}

//     Size           uint16             = SymbolsForExchangeRequestFixedSize  (96)
//     Type           uint16             = SYMBOLS_FOR_EXCHANGE_REQUEST  (502)
//     RequestID      int32              = 0
//     Exchange       string[16]         = ""
//     SecurityType   SecurityTypeEnum   = SECURITY_TYPE_UNSET  (0)
//     RequestAction  RequestActionEnum  = SUBSCRIBE  (0)
//     Symbol         string[64]         = ""
var _SymbolsForExchangeRequestFixedDefault = []byte{96, 0, 246, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// SymbolsForExchangeRequest This is a message from the Client to the Server to request all of the
// Symbols for a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type SymbolsForExchangeRequest struct {
	p message.VLS
}

// SymbolsForExchangeRequestFixed This is a message from the Client to the Server to request all of the
// Symbols for a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type SymbolsForExchangeRequestFixed struct {
	p message.Fixed
}

func NewSymbolsForExchangeRequestFrom(b []byte) SymbolsForExchangeRequest {
	return SymbolsForExchangeRequest{p: message.NewVLS(b)}
}

func WrapSymbolsForExchangeRequest(b []byte) SymbolsForExchangeRequest {
	return SymbolsForExchangeRequest{p: message.WrapVLS(b)}
}

func NewSymbolsForExchangeRequest() *SymbolsForExchangeRequest {
	return &SymbolsForExchangeRequest{p: message.NewVLS(_SymbolsForExchangeRequestDefault)}
}

func ParseSymbolsForExchangeRequest(b []byte) (SymbolsForExchangeRequest, error) {
	if len(b) < 6 {
		return SymbolsForExchangeRequest{}, message.ErrShortBuffer
	}
	m := WrapSymbolsForExchangeRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return SymbolsForExchangeRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return SymbolsForExchangeRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 28 {
		newSize := len(b) + (28 - baseSize)
		if newSize > message.MaxSize {
			return SymbolsForExchangeRequest{}, message.ErrOverflow
		}
		clone := SymbolsForExchangeRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _SymbolsForExchangeRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(28 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
			offset = clone.p.Uint16LE(24)
			if offset > 0 {
				clone.p.SetUint16LE(24, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewSymbolsForExchangeRequestFixedFrom(b []byte) SymbolsForExchangeRequestFixed {
	return SymbolsForExchangeRequestFixed{p: message.NewFixed(b)}
}

func WrapSymbolsForExchangeRequestFixed(b []byte) SymbolsForExchangeRequestFixed {
	return SymbolsForExchangeRequestFixed{p: message.WrapFixed(b)}
}

func NewSymbolsForExchangeRequestFixed() *SymbolsForExchangeRequestFixed {
	return &SymbolsForExchangeRequestFixed{p: message.NewFixed(_SymbolsForExchangeRequestFixedDefault)}
}

func ParseSymbolsForExchangeRequestFixed(b []byte) (SymbolsForExchangeRequestFixed, error) {
	if len(b) < 4 {
		return SymbolsForExchangeRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapSymbolsForExchangeRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return SymbolsForExchangeRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return SymbolsForExchangeRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 96 {
		clone := *NewSymbolsForExchangeRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _SymbolsForExchangeRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m SymbolsForExchangeRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m SymbolsForExchangeRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m SymbolsForExchangeRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m SymbolsForExchangeRequest) RequestID() int32 {
	return m.p.Int32LE(8)
}

// Exchange The Exchange to return the available symbols listed on that Exchange.
func (m SymbolsForExchangeRequest) Exchange() string {
	return m.p.StringVLS(12)
}

// SecurityType The optional Security Type.
func (m SymbolsForExchangeRequest) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(m.p.Int32LE(16))
}

// RequestAction
func (m SymbolsForExchangeRequest) RequestAction() RequestActionEnum {
	return RequestActionEnum(m.p.Int32LE(20))
}

// Symbol
func (m SymbolsForExchangeRequest) Symbol() string {
	return m.p.StringVLS(24)
}

// Size The standard message size field. Automatically set by constructor.
func (m SymbolsForExchangeRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m SymbolsForExchangeRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m SymbolsForExchangeRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// Exchange The Exchange to return the available symbols listed on that Exchange.
func (m SymbolsForExchangeRequestFixed) Exchange() string {
	return m.p.StringFixed(8, 16)
}

// SecurityType The optional Security Type.
func (m SymbolsForExchangeRequestFixed) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(m.p.Int32LE(24))
}

// RequestAction
func (m SymbolsForExchangeRequestFixed) RequestAction() RequestActionEnum {
	return RequestActionEnum(m.p.Int32LE(28))
}

// Symbol
func (m SymbolsForExchangeRequestFixed) Symbol() string {
	return m.p.StringFixed(32, 64)
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m *SymbolsForExchangeRequest) SetRequestID(value int32) *SymbolsForExchangeRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetExchange The Exchange to return the available symbols listed on that Exchange.
func (m *SymbolsForExchangeRequest) SetExchange(value string) *SymbolsForExchangeRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetSecurityType The optional Security Type.
func (m *SymbolsForExchangeRequest) SetSecurityType(value SecurityTypeEnum) *SymbolsForExchangeRequest {
	m.p.SetInt32LE(16, int32(value))
	return m
}

// SetRequestAction
func (m *SymbolsForExchangeRequest) SetRequestAction(value RequestActionEnum) *SymbolsForExchangeRequest {
	m.p.SetInt32LE(20, int32(value))
	return m
}

// SetSymbol
func (m *SymbolsForExchangeRequest) SetSymbol(value string) *SymbolsForExchangeRequest {
	m.p.SetStringVLS(24, value)
	return m
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m *SymbolsForExchangeRequestFixed) SetRequestID(value int32) *SymbolsForExchangeRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetExchange The Exchange to return the available symbols listed on that Exchange.
func (m *SymbolsForExchangeRequestFixed) SetExchange(value string) *SymbolsForExchangeRequestFixed {
	m.p.SetStringFixed(8, 16, value)
	return m
}

// SetSecurityType The optional Security Type.
func (m *SymbolsForExchangeRequestFixed) SetSecurityType(value SecurityTypeEnum) *SymbolsForExchangeRequestFixed {
	m.p.SetInt32LE(24, int32(value))
	return m
}

// SetRequestAction
func (m *SymbolsForExchangeRequestFixed) SetRequestAction(value RequestActionEnum) *SymbolsForExchangeRequestFixed {
	m.p.SetInt32LE(28, int32(value))
	return m
}

// SetSymbol
func (m *SymbolsForExchangeRequestFixed) SetSymbol(value string) *SymbolsForExchangeRequestFixed {
	m.p.SetStringFixed(32, 64, value)
	return m
}

func (m SymbolsForExchangeRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m SymbolsForExchangeRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m SymbolsForExchangeRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m SymbolsForExchangeRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m SymbolsForExchangeRequest) Copy(to SymbolsForExchangeRequest) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
	to.SetRequestAction(m.RequestAction())
	to.SetSymbol(m.Symbol())
}

// CopyTo
func (m SymbolsForExchangeRequest) CopyTo(to SymbolsForExchangeRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
	to.SetRequestAction(m.RequestAction())
	to.SetSymbol(m.Symbol())
}

// Copy
func (m SymbolsForExchangeRequestFixed) Copy(to SymbolsForExchangeRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
	to.SetRequestAction(m.RequestAction())
	to.SetSymbol(m.Symbol())
}

// CopyTo
func (m SymbolsForExchangeRequestFixed) CopyTo(to SymbolsForExchangeRequest) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetSecurityType(m.SecurityType())
	to.SetRequestAction(m.RequestAction())
	to.SetSymbol(m.Symbol())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m SymbolsForExchangeRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 502)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Exchange", m.Exchange())
	w.Int32Field("SecurityType", int32(m.SecurityType()))
	w.Int32Field("RequestAction", int32(m.RequestAction()))
	w.StringField("Symbol", m.Symbol())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SymbolsForExchangeRequest) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 502 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Exchange":
			m.SetExchange(r.String())
		case "SecurityType":
			m.SetSecurityType(SecurityTypeEnum(r.Int32()))
		case "RequestAction":
			m.SetRequestAction(RequestActionEnum(r.Int32()))
		case "Symbol":
			m.SetSymbol(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SymbolsForExchangeRequest) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m SymbolsForExchangeRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 502)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Exchange", m.Exchange())
	w.Int32Field("SecurityType", int32(m.SecurityType()))
	w.Int32Field("RequestAction", int32(m.RequestAction()))
	w.StringField("Symbol", m.Symbol())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SymbolsForExchangeRequestFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 502 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Exchange":
			m.SetExchange(r.String())
		case "SecurityType":
			m.SetSecurityType(SecurityTypeEnum(r.Int32()))
		case "RequestAction":
			m.SetRequestAction(RequestActionEnum(r.Int32()))
		case "Symbol":
			m.SetSymbol(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SymbolsForExchangeRequestFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
