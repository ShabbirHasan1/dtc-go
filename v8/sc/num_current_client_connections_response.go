// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const NumCurrentClientConnectionsResponseSize = 22

const NumCurrentClientConnectionsResponseFixedSize = 48

//     Size                               uint16  = NumCurrentClientConnectionsResponseSize  (22)
//     Type                               uint16  = NUM_CURRENT_CLIENT_CONNECTIONS_RESPONSE  (10108)
//     BaseSize                           uint16  = NumCurrentClientConnectionsResponseSize  (22)
//     RequestID                          uint32  = 0
//     Username                           string  = ""
//     NumConnectionsForDifferentDevices  int32   = 0
//     NumConnectionsForSameDevice        int32   = 0
var _NumCurrentClientConnectionsResponseDefault = []byte{22, 0, 124, 39, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                               uint16      = NumCurrentClientConnectionsResponseFixedSize  (48)
//     Type                               uint16      = NUM_CURRENT_CLIENT_CONNECTIONS_RESPONSE  (10108)
//     RequestID                          uint32      = 0
//     Username                           string[32]  = ""
//     NumConnectionsForDifferentDevices  int32       = 0
//     NumConnectionsForSameDevice        int32       = 0
var _NumCurrentClientConnectionsResponseFixedDefault = []byte{48, 0, 124, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type NumCurrentClientConnectionsResponse struct {
	p message.VLS
}

type NumCurrentClientConnectionsResponseFixed struct {
	p message.Fixed
}

func NewNumCurrentClientConnectionsResponseFrom(b []byte) NumCurrentClientConnectionsResponse {
	return NumCurrentClientConnectionsResponse{p: message.NewVLS(b)}
}

func WrapNumCurrentClientConnectionsResponse(b []byte) NumCurrentClientConnectionsResponse {
	return NumCurrentClientConnectionsResponse{p: message.WrapVLS(b)}
}

func NewNumCurrentClientConnectionsResponse() *NumCurrentClientConnectionsResponse {
	return &NumCurrentClientConnectionsResponse{p: message.NewVLS(_NumCurrentClientConnectionsResponseDefault)}
}

func ParseNumCurrentClientConnectionsResponse(b []byte) (NumCurrentClientConnectionsResponse, error) {
	if len(b) < 6 {
		return NumCurrentClientConnectionsResponse{}, message.ErrShortBuffer
	}
	m := WrapNumCurrentClientConnectionsResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return NumCurrentClientConnectionsResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return NumCurrentClientConnectionsResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 22 {
		newSize := len(b) + (22 - baseSize)
		if newSize > message.MaxSize {
			return NumCurrentClientConnectionsResponse{}, message.ErrOverflow
		}
		clone := NumCurrentClientConnectionsResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _NumCurrentClientConnectionsResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(22 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewNumCurrentClientConnectionsResponseFixedFrom(b []byte) NumCurrentClientConnectionsResponseFixed {
	return NumCurrentClientConnectionsResponseFixed{p: message.NewFixed(b)}
}

func WrapNumCurrentClientConnectionsResponseFixed(b []byte) NumCurrentClientConnectionsResponseFixed {
	return NumCurrentClientConnectionsResponseFixed{p: message.WrapFixed(b)}
}

func NewNumCurrentClientConnectionsResponseFixed() *NumCurrentClientConnectionsResponseFixed {
	return &NumCurrentClientConnectionsResponseFixed{p: message.NewFixed(_NumCurrentClientConnectionsResponseFixedDefault)}
}

func ParseNumCurrentClientConnectionsResponseFixed(b []byte) (NumCurrentClientConnectionsResponseFixed, error) {
	if len(b) < 4 {
		return NumCurrentClientConnectionsResponseFixed{}, message.ErrShortBuffer
	}
	m := WrapNumCurrentClientConnectionsResponseFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return NumCurrentClientConnectionsResponseFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return NumCurrentClientConnectionsResponseFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 48 {
		clone := *NewNumCurrentClientConnectionsResponseFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _NumCurrentClientConnectionsResponseFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m NumCurrentClientConnectionsResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m NumCurrentClientConnectionsResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m NumCurrentClientConnectionsResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m NumCurrentClientConnectionsResponse) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// Username
func (m NumCurrentClientConnectionsResponse) Username() string {
	return m.p.StringVLS(10)
}

// NumConnectionsForDifferentDevices
func (m NumCurrentClientConnectionsResponse) NumConnectionsForDifferentDevices() int32 {
	return m.p.Int32LE(14)
}

// NumConnectionsForSameDevice
func (m NumCurrentClientConnectionsResponse) NumConnectionsForSameDevice() int32 {
	return m.p.Int32LE(18)
}

// Size
func (m NumCurrentClientConnectionsResponseFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m NumCurrentClientConnectionsResponseFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m NumCurrentClientConnectionsResponseFixed) RequestID() uint32 {
	return m.p.Uint32LE(4)
}

// Username
func (m NumCurrentClientConnectionsResponseFixed) Username() string {
	return m.p.StringFixed(8, 32)
}

// NumConnectionsForDifferentDevices
func (m NumCurrentClientConnectionsResponseFixed) NumConnectionsForDifferentDevices() int32 {
	return m.p.Int32LE(40)
}

// NumConnectionsForSameDevice
func (m NumCurrentClientConnectionsResponseFixed) NumConnectionsForSameDevice() int32 {
	return m.p.Int32LE(44)
}

// SetRequestID
func (m *NumCurrentClientConnectionsResponse) SetRequestID(value uint32) *NumCurrentClientConnectionsResponse {
	m.p.SetUint32LE(6, value)
	return m
}

// SetUsername
func (m *NumCurrentClientConnectionsResponse) SetUsername(value string) *NumCurrentClientConnectionsResponse {
	m.p.SetStringVLS(10, value)
	return m
}

// SetNumConnectionsForDifferentDevices
func (m *NumCurrentClientConnectionsResponse) SetNumConnectionsForDifferentDevices(value int32) *NumCurrentClientConnectionsResponse {
	m.p.SetInt32LE(14, value)
	return m
}

// SetNumConnectionsForSameDevice
func (m *NumCurrentClientConnectionsResponse) SetNumConnectionsForSameDevice(value int32) *NumCurrentClientConnectionsResponse {
	m.p.SetInt32LE(18, value)
	return m
}

// SetRequestID
func (m *NumCurrentClientConnectionsResponseFixed) SetRequestID(value uint32) *NumCurrentClientConnectionsResponseFixed {
	m.p.SetUint32LE(4, value)
	return m
}

// SetUsername
func (m *NumCurrentClientConnectionsResponseFixed) SetUsername(value string) *NumCurrentClientConnectionsResponseFixed {
	m.p.SetStringFixed(8, 32, value)
	return m
}

// SetNumConnectionsForDifferentDevices
func (m *NumCurrentClientConnectionsResponseFixed) SetNumConnectionsForDifferentDevices(value int32) *NumCurrentClientConnectionsResponseFixed {
	m.p.SetInt32LE(40, value)
	return m
}

// SetNumConnectionsForSameDevice
func (m *NumCurrentClientConnectionsResponseFixed) SetNumConnectionsForSameDevice(value int32) *NumCurrentClientConnectionsResponseFixed {
	m.p.SetInt32LE(44, value)
	return m
}

func (m NumCurrentClientConnectionsResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m NumCurrentClientConnectionsResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m NumCurrentClientConnectionsResponseFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m NumCurrentClientConnectionsResponseFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m NumCurrentClientConnectionsResponse) Copy(to NumCurrentClientConnectionsResponse) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetNumConnectionsForDifferentDevices(m.NumConnectionsForDifferentDevices())
	to.SetNumConnectionsForSameDevice(m.NumConnectionsForSameDevice())
}

// CopyTo
func (m NumCurrentClientConnectionsResponse) CopyTo(to NumCurrentClientConnectionsResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetNumConnectionsForDifferentDevices(m.NumConnectionsForDifferentDevices())
	to.SetNumConnectionsForSameDevice(m.NumConnectionsForSameDevice())
}

// Copy
func (m NumCurrentClientConnectionsResponseFixed) Copy(to NumCurrentClientConnectionsResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetNumConnectionsForDifferentDevices(m.NumConnectionsForDifferentDevices())
	to.SetNumConnectionsForSameDevice(m.NumConnectionsForSameDevice())
}

// CopyTo
func (m NumCurrentClientConnectionsResponseFixed) CopyTo(to NumCurrentClientConnectionsResponse) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetNumConnectionsForDifferentDevices(m.NumConnectionsForDifferentDevices())
	to.SetNumConnectionsForSameDevice(m.NumConnectionsForSameDevice())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m NumCurrentClientConnectionsResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10108)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("Username", m.Username())
	w.Int32Field("NumConnectionsForDifferentDevices", m.NumConnectionsForDifferentDevices())
	w.Int32Field("NumConnectionsForSameDevice", m.NumConnectionsForSameDevice())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *NumCurrentClientConnectionsResponse) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10108 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Username":
			m.SetUsername(r.String())
		case "NumConnectionsForDifferentDevices":
			m.SetNumConnectionsForDifferentDevices(r.Int32())
		case "NumConnectionsForSameDevice":
			m.SetNumConnectionsForSameDevice(r.Int32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *NumCurrentClientConnectionsResponse) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m NumCurrentClientConnectionsResponseFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10108)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("Username", m.Username())
	w.Int32Field("NumConnectionsForDifferentDevices", m.NumConnectionsForDifferentDevices())
	w.Int32Field("NumConnectionsForSameDevice", m.NumConnectionsForSameDevice())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *NumCurrentClientConnectionsResponseFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10108 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Username":
			m.SetUsername(r.String())
		case "NumConnectionsForDifferentDevices":
			m.SetNumConnectionsForDifferentDevices(r.Int32())
		case "NumConnectionsForSameDevice":
			m.SetNumConnectionsForSameDevice(r.Int32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *NumCurrentClientConnectionsResponseFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
