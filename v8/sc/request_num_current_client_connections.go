// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 21:46:24.141427 +0800 WITA m=+0.018610501

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const RequestNumCurrentClientConnectionsSize = 22

const RequestNumCurrentClientConnectionsFixedSize = 48

//     Size              uint16  = RequestNumCurrentClientConnectionsSize  (22)
//     Type              uint16  = REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS  (10107)
//     BaseSize          uint16  = RequestNumCurrentClientConnectionsSize  (22)
//     RequestID         uint32  = 0
//     Username          string  = ""
//     DeviceIdentifier  int64   = 0
var _RequestNumCurrentClientConnectionsDefault = []byte{22, 0, 123, 39, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size              uint16      = RequestNumCurrentClientConnectionsFixedSize  (48)
//     Type              uint16      = REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS  (10107)
//     RequestID         uint32      = 0
//     Username          string[32]  = ""
//     DeviceIdentifier  int64       = 0
var _RequestNumCurrentClientConnectionsFixedDefault = []byte{48, 0, 123, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type RequestNumCurrentClientConnections struct {
	p message.VLS
}

type RequestNumCurrentClientConnectionsFixed struct {
	p message.Fixed
}

func NewRequestNumCurrentClientConnectionsFrom(b []byte) RequestNumCurrentClientConnections {
	return RequestNumCurrentClientConnections{p: message.NewVLS(b)}
}

func WrapRequestNumCurrentClientConnections(b []byte) RequestNumCurrentClientConnections {
	return RequestNumCurrentClientConnections{p: message.WrapVLS(b)}
}

func NewRequestNumCurrentClientConnections() *RequestNumCurrentClientConnections {
	return &RequestNumCurrentClientConnections{p: message.NewVLS(_RequestNumCurrentClientConnectionsDefault)}
}

func ParseRequestNumCurrentClientConnections(b []byte) (RequestNumCurrentClientConnections, error) {
	if len(b) < 6 {
		return RequestNumCurrentClientConnections{}, message.ErrShortBuffer
	}
	m := WrapRequestNumCurrentClientConnections(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return RequestNumCurrentClientConnections{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return RequestNumCurrentClientConnections{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 22 {
		newSize := len(b) + (22 - baseSize)
		if newSize > message.MaxSize {
			return RequestNumCurrentClientConnections{}, message.ErrOverflow
		}
		clone := RequestNumCurrentClientConnections{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _RequestNumCurrentClientConnectionsDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(22 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewRequestNumCurrentClientConnectionsFixedFrom(b []byte) RequestNumCurrentClientConnectionsFixed {
	return RequestNumCurrentClientConnectionsFixed{p: message.NewFixed(b)}
}

func WrapRequestNumCurrentClientConnectionsFixed(b []byte) RequestNumCurrentClientConnectionsFixed {
	return RequestNumCurrentClientConnectionsFixed{p: message.WrapFixed(b)}
}

func NewRequestNumCurrentClientConnectionsFixed() *RequestNumCurrentClientConnectionsFixed {
	return &RequestNumCurrentClientConnectionsFixed{p: message.NewFixed(_RequestNumCurrentClientConnectionsFixedDefault)}
}

func ParseRequestNumCurrentClientConnectionsFixed(b []byte) (RequestNumCurrentClientConnectionsFixed, error) {
	if len(b) < 4 {
		return RequestNumCurrentClientConnectionsFixed{}, message.ErrShortBuffer
	}
	m := WrapRequestNumCurrentClientConnectionsFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return RequestNumCurrentClientConnectionsFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return RequestNumCurrentClientConnectionsFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 48 {
		clone := *NewRequestNumCurrentClientConnectionsFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _RequestNumCurrentClientConnectionsFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m RequestNumCurrentClientConnections) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m RequestNumCurrentClientConnections) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m RequestNumCurrentClientConnections) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m RequestNumCurrentClientConnections) RequestID() uint32 {
	return m.p.Uint32LE(6)
}

// Username
func (m RequestNumCurrentClientConnections) Username() string {
	return m.p.StringVLS(10)
}

// DeviceIdentifier
func (m RequestNumCurrentClientConnections) DeviceIdentifier() int64 {
	return m.p.Int64LE(14)
}

// Size
func (m RequestNumCurrentClientConnectionsFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m RequestNumCurrentClientConnectionsFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m RequestNumCurrentClientConnectionsFixed) RequestID() uint32 {
	return m.p.Uint32LE(4)
}

// Username
func (m RequestNumCurrentClientConnectionsFixed) Username() string {
	return m.p.StringFixed(8, 32)
}

// DeviceIdentifier
func (m RequestNumCurrentClientConnectionsFixed) DeviceIdentifier() int64 {
	return m.p.Int64LE(40)
}

// SetRequestID
func (m *RequestNumCurrentClientConnections) SetRequestID(value uint32) *RequestNumCurrentClientConnections {
	m.p.SetUint32LE(6, value)
	return m
}

// SetUsername
func (m *RequestNumCurrentClientConnections) SetUsername(value string) *RequestNumCurrentClientConnections {
	m.p.SetStringVLS(10, value)
	return m
}

// SetDeviceIdentifier
func (m *RequestNumCurrentClientConnections) SetDeviceIdentifier(value int64) *RequestNumCurrentClientConnections {
	m.p.SetInt64LE(14, value)
	return m
}

// SetRequestID
func (m *RequestNumCurrentClientConnectionsFixed) SetRequestID(value uint32) *RequestNumCurrentClientConnectionsFixed {
	m.p.SetUint32LE(4, value)
	return m
}

// SetUsername
func (m *RequestNumCurrentClientConnectionsFixed) SetUsername(value string) *RequestNumCurrentClientConnectionsFixed {
	m.p.SetStringFixed(8, 32, value)
	return m
}

// SetDeviceIdentifier
func (m *RequestNumCurrentClientConnectionsFixed) SetDeviceIdentifier(value int64) *RequestNumCurrentClientConnectionsFixed {
	m.p.SetInt64LE(40, value)
	return m
}

func (m RequestNumCurrentClientConnections) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m RequestNumCurrentClientConnections) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m RequestNumCurrentClientConnectionsFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m RequestNumCurrentClientConnectionsFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

// Copy
func (m RequestNumCurrentClientConnections) Copy(to RequestNumCurrentClientConnections) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetDeviceIdentifier(m.DeviceIdentifier())
}

// CopyTo
func (m RequestNumCurrentClientConnections) CopyTo(to RequestNumCurrentClientConnectionsFixed) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetDeviceIdentifier(m.DeviceIdentifier())
}

// Copy
func (m RequestNumCurrentClientConnectionsFixed) Copy(to RequestNumCurrentClientConnectionsFixed) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetDeviceIdentifier(m.DeviceIdentifier())
}

// CopyTo
func (m RequestNumCurrentClientConnectionsFixed) CopyTo(to RequestNumCurrentClientConnections) {
	to.SetRequestID(m.RequestID())
	to.SetUsername(m.Username())
	to.SetDeviceIdentifier(m.DeviceIdentifier())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m RequestNumCurrentClientConnections) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10107)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("Username", m.Username())
	w.Int64Field("DeviceIdentifier", m.DeviceIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *RequestNumCurrentClientConnections) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10107 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Username":
			m.SetUsername(r.String())
		case "DeviceIdentifier":
			m.SetDeviceIdentifier(r.Int64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *RequestNumCurrentClientConnections) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m RequestNumCurrentClientConnectionsFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 10107)
	w.Uint32Field("RequestID", m.RequestID())
	w.StringField("Username", m.Username())
	w.Int64Field("DeviceIdentifier", m.DeviceIdentifier())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *RequestNumCurrentClientConnectionsFixed) UnmarshalJSONDoc(r *json.Reader) error {
	if r.Type != 10107 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Uint32())
		case "Username":
			m.SetUsername(r.String())
		case "DeviceIdentifier":
			m.SetDeviceIdentifier(r.Int64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *RequestNumCurrentClientConnectionsFixed) UnmarshalJSONReader(r *json.Reader) error {
	return m.UnmarshalJSONDoc(r)
}
