// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const AccountBalanceRejectSize = 16

const AccountBalanceRejectFixedSize = 104

//     Size        uint16  = AccountBalanceRejectSize  (16)
//     Type        uint16  = ACCOUNT_BALANCE_REJECT  (602)
//     BaseSize    uint16  = AccountBalanceRejectSize  (16)
//     RequestID   int32   = 0
//     RejectText  string  = ""
var _AccountBalanceRejectDefault = []byte{16, 0, 90, 2, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size        uint16      = AccountBalanceRejectFixedSize  (104)
//     Type        uint16      = ACCOUNT_BALANCE_REJECT  (602)
//     RequestID   int32       = 0
//     RejectText  string[96]  = ""
var _AccountBalanceRejectFixedDefault = []byte{104, 0, 90, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type AccountBalanceReject struct {
	p message.VLS
}

type AccountBalanceRejectFixed struct {
	p message.Fixed
}

func NewAccountBalanceRejectFrom(b []byte) AccountBalanceReject {
	return AccountBalanceReject{p: message.NewVLS(b)}
}

func WrapAccountBalanceReject(b []byte) AccountBalanceReject {
	return AccountBalanceReject{p: message.WrapVLS(b)}
}

func NewAccountBalanceReject() *AccountBalanceReject {
	return &AccountBalanceReject{p: message.NewVLS(_AccountBalanceRejectDefault)}
}

func ParseAccountBalanceReject(b []byte) (AccountBalanceReject, error) {
	if len(b) < 6 {
		return AccountBalanceReject{}, message.ErrShortBuffer
	}
	m := WrapAccountBalanceReject(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AccountBalanceReject{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return AccountBalanceReject{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 16 {
		newSize := len(b) + (16 - baseSize)
		if newSize > message.MaxSize {
			return AccountBalanceReject{}, message.ErrOverflow
		}
		clone := AccountBalanceReject{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _AccountBalanceRejectDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(16 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewAccountBalanceRejectFixedFrom(b []byte) AccountBalanceRejectFixed {
	return AccountBalanceRejectFixed{p: message.NewFixed(b)}
}

func WrapAccountBalanceRejectFixed(b []byte) AccountBalanceRejectFixed {
	return AccountBalanceRejectFixed{p: message.WrapFixed(b)}
}

func NewAccountBalanceRejectFixed() *AccountBalanceRejectFixed {
	return &AccountBalanceRejectFixed{p: message.NewFixed(_AccountBalanceRejectFixedDefault)}
}

func ParseAccountBalanceRejectFixed(b []byte) (AccountBalanceRejectFixed, error) {
	if len(b) < 4 {
		return AccountBalanceRejectFixed{}, message.ErrShortBuffer
	}
	m := WrapAccountBalanceRejectFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AccountBalanceRejectFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return AccountBalanceRejectFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 104 {
		clone := *NewAccountBalanceRejectFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _AccountBalanceRejectFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m AccountBalanceReject) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m AccountBalanceReject) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m AccountBalanceReject) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The unique request identifier sent in the corresponding request.
func (m AccountBalanceReject) RequestID() int32 {
	return m.p.Int32LE(8)
}

// RejectText The text reason the ACCOUNT_BALANCE_REQUEST message was rejected.
func (m AccountBalanceReject) RejectText() string {
	return m.p.StringVLS(12)
}

// Size The standard message size field. Automatically set by constructor.
func (m AccountBalanceRejectFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m AccountBalanceRejectFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The unique request identifier sent in the corresponding request.
func (m AccountBalanceRejectFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// RejectText The text reason the ACCOUNT_BALANCE_REQUEST message was rejected.
func (m AccountBalanceRejectFixed) RejectText() string {
	return m.p.StringFixed(8, 96)
}

// SetRequestID The unique request identifier sent in the corresponding request.
func (m *AccountBalanceReject) SetRequestID(value int32) *AccountBalanceReject {
	m.p.SetInt32LE(8, value)
	return m
}

// SetRejectText The text reason the ACCOUNT_BALANCE_REQUEST message was rejected.
func (m *AccountBalanceReject) SetRejectText(value string) *AccountBalanceReject {
	m.p.SetStringVLS(12, value)
	return m
}

// SetRequestID The unique request identifier sent in the corresponding request.
func (m *AccountBalanceRejectFixed) SetRequestID(value int32) *AccountBalanceRejectFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetRejectText The text reason the ACCOUNT_BALANCE_REQUEST message was rejected.
func (m *AccountBalanceRejectFixed) SetRejectText(value string) *AccountBalanceRejectFixed {
	m.p.SetStringFixed(8, 96, value)
	return m
}

func (m *AccountBalanceReject) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *AccountBalanceReject) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *AccountBalanceReject) Clone() *AccountBalanceReject {
	return &AccountBalanceReject{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *AccountBalanceRejectFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *AccountBalanceRejectFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *AccountBalanceRejectFixed) Clone() *AccountBalanceRejectFixed {
	return &AccountBalanceRejectFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m AccountBalanceReject) Copy(to AccountBalanceReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m AccountBalanceReject) CopyTo(to AccountBalanceRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// Copy
func (m AccountBalanceRejectFixed) Copy(to AccountBalanceRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m AccountBalanceRejectFixed) CopyTo(to AccountBalanceReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceReject) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *AccountBalanceReject) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 602)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceReject) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *AccountBalanceReject) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 602 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceRejectFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *AccountBalanceRejectFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 602)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceRejectFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *AccountBalanceRejectFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 602 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
