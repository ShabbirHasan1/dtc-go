// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateOpenInterestSize = 16

//     Size                uint16         = MarketDataUpdateOpenInterestSize  (16)
//     Type                uint16         = MARKET_DATA_UPDATE_OPEN_INTEREST  (124)
//     SymbolID            uint32         = 0
//     OpenInterest        uint32         = 0
//     TradingSessionDate  DateTime4Byte  = 0
var _MarketDataUpdateOpenInterestDefault = []byte{16, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateOpenInterest The MarketDataUpdateOpenInterest message is sent by the Server to the
// Client to update the OpenInterest field previously sent through the MarketDataSnapshot
// message.
type MarketDataUpdateOpenInterest struct {
	p message.Fixed
}

func NewMarketDataUpdateOpenInterestFrom(b []byte) MarketDataUpdateOpenInterest {
	return MarketDataUpdateOpenInterest{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateOpenInterest(b []byte) MarketDataUpdateOpenInterest {
	return MarketDataUpdateOpenInterest{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateOpenInterest() *MarketDataUpdateOpenInterest {
	return &MarketDataUpdateOpenInterest{p: message.NewFixed(_MarketDataUpdateOpenInterestDefault)}
}

func ParseMarketDataUpdateOpenInterest(b []byte) (MarketDataUpdateOpenInterest, error) {
	if len(b) < 4 {
		return MarketDataUpdateOpenInterest{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateOpenInterest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateOpenInterest{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateOpenInterest{}, message.ErrBaseSizeOverflow
	}
	if size < 16 {
		clone := *NewMarketDataUpdateOpenInterest()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateOpenInterestDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateOpenInterest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateOpenInterest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateOpenInterest) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// OpenInterest The open interest for the symbol.
func (m MarketDataUpdateOpenInterest) OpenInterest() uint32 {
	return m.p.Uint32LE(8)
}

// TradingSessionDate
func (m MarketDataUpdateOpenInterest) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(12))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateOpenInterest) SetSymbolID(value uint32) *MarketDataUpdateOpenInterest {
	m.p.SetUint32LE(4, value)
	return m
}

// SetOpenInterest The open interest for the symbol.
func (m *MarketDataUpdateOpenInterest) SetOpenInterest(value uint32) *MarketDataUpdateOpenInterest {
	m.p.SetUint32LE(8, value)
	return m
}

// SetTradingSessionDate
func (m *MarketDataUpdateOpenInterest) SetTradingSessionDate(value DateTime4Byte) *MarketDataUpdateOpenInterest {
	m.p.SetUint32LE(12, uint32(value))
	return m
}

func (m *MarketDataUpdateOpenInterest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDataUpdateOpenInterest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDataUpdateOpenInterest) Clone() *MarketDataUpdateOpenInterest {
	return &MarketDataUpdateOpenInterest{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDataUpdateOpenInterest) Copy(to MarketDataUpdateOpenInterest) {
	to.SetSymbolID(m.SymbolID())
	to.SetOpenInterest(m.OpenInterest())
	to.SetTradingSessionDate(m.TradingSessionDate())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateOpenInterest) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDataUpdateOpenInterest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 124)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Uint32Field("OpenInterest", m.OpenInterest())
	w.Uint32Field("TradingSessionDate", uint32(m.TradingSessionDate()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateOpenInterest) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDataUpdateOpenInterest) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 124 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "OpenInterest":
			m.SetOpenInterest(r.Uint32())
		case "TradingSessionDate":
			m.SetTradingSessionDate(DateTime4Byte(r.Uint32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
