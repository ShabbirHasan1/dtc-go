// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const LogonRequestSize = 56

const LogonRequestFixedSize = 284

//     Size                            uint16  = LogonRequestSize  (56)
//     Type                            uint16  = LOGON_REQUEST  (1)
//     BaseSize                        uint16  = LogonRequestSize  (56)
//     ProtocolVersion                 int32   = CURRENT_VERSION  (8)
//     Username                        string  = ""
//     Password                        string  = ""
//     GeneralTextData                 string  = ""
//     Integer_1                       int32   = 0
//     Integer_2                       int32   = 0
//     HeartbeatIntervalInSeconds      int32   = 0
//     Unused1                         int32   = 0
//     TradeAccount                    string  = ""
//     HardwareIdentifier              string  = ""
//     ClientName                      string  = ""
//     MarketDataTransmissionInterval  int32   = 0
var _LogonRequestDefault = []byte{56, 0, 1, 0, 56, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                            uint16      = LogonRequestFixedSize  (284)
//     Type                            uint16      = LOGON_REQUEST  (1)
//     ProtocolVersion                 int32       = CURRENT_VERSION  (8)
//     Username                        string[32]  = ""
//     Password                        string[32]  = ""
//     GeneralTextData                 string[64]  = ""
//     Integer_1                       int32       = 0
//     Integer_2                       int32       = 0
//     HeartbeatIntervalInSeconds      int32       = 0
//     Unused1                         int32       = 0
//     TradeAccount                    string[32]  = ""
//     HardwareIdentifier              string[64]  = ""
//     ClientName                      string[32]  = ""
//     MarketDataTransmissionInterval  int32       = 0
var _LogonRequestFixedDefault = []byte{28, 1, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// LogonRequest The LogonRequest message is sent from the Client to the Server requesting
// to logon to the Server.
//
// This is the very first message the Client sends to the Server before being
// allowed to send any other message other than the EncodingRequest.
type LogonRequest struct {
	p message.VLS
}

// LogonRequestFixed The LogonRequest message is sent from the Client to the Server requesting
// to logon to the Server.
//
// This is the very first message the Client sends to the Server before being
// allowed to send any other message other than the EncodingRequest.
type LogonRequestFixed struct {
	p message.Fixed
}

func NewLogonRequestFrom(b []byte) LogonRequest {
	return LogonRequest{p: message.NewVLS(b)}
}

func WrapLogonRequest(b []byte) LogonRequest {
	return LogonRequest{p: message.WrapVLS(b)}
}

func NewLogonRequest() *LogonRequest {
	return &LogonRequest{p: message.NewVLS(_LogonRequestDefault)}
}

func ParseLogonRequest(b []byte) (LogonRequest, error) {
	if len(b) < 6 {
		return LogonRequest{}, message.ErrShortBuffer
	}
	m := WrapLogonRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return LogonRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return LogonRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 56 {
		newSize := len(b) + (56 - baseSize)
		if newSize > message.MaxSize {
			return LogonRequest{}, message.ErrOverflow
		}
		clone := LogonRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _LogonRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(56 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
			offset = clone.p.Uint16LE(16)
			if offset > 0 {
				clone.p.SetUint16LE(16, offset+shift)
			}
			offset = clone.p.Uint16LE(20)
			if offset > 0 {
				clone.p.SetUint16LE(20, offset+shift)
			}
			offset = clone.p.Uint16LE(40)
			if offset > 0 {
				clone.p.SetUint16LE(40, offset+shift)
			}
			offset = clone.p.Uint16LE(44)
			if offset > 0 {
				clone.p.SetUint16LE(44, offset+shift)
			}
			offset = clone.p.Uint16LE(48)
			if offset > 0 {
				clone.p.SetUint16LE(48, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewLogonRequestFixedFrom(b []byte) LogonRequestFixed {
	return LogonRequestFixed{p: message.NewFixed(b)}
}

func WrapLogonRequestFixed(b []byte) LogonRequestFixed {
	return LogonRequestFixed{p: message.WrapFixed(b)}
}

func NewLogonRequestFixed() *LogonRequestFixed {
	return &LogonRequestFixed{p: message.NewFixed(_LogonRequestFixedDefault)}
}

func ParseLogonRequestFixed(b []byte) (LogonRequestFixed, error) {
	if len(b) < 4 {
		return LogonRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapLogonRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return LogonRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return LogonRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 284 {
		clone := *NewLogonRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _LogonRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m LogonRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
//
// To determine the field number for JSON, refer to this message type constant
// in the DTCProtocol.h file.
func (m LogonRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m LogonRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// ProtocolVersion The protocol version supported by the Client. Automatically set by constructor.
// The protocol version supported by the Client. Automatically set by constructor.
func (m LogonRequest) ProtocolVersion() int32 {
	return m.p.Int32LE(8)
}

// Username Optional username for the server to authenticate the Client.
func (m LogonRequest) Username() string {
	return m.p.StringVLS(12)
}

// Password Optional password for the server to authenticate the Client.
func (m LogonRequest) Password() string {
	return m.p.StringVLS(16)
}

// GeneralTextData Optional general-purpose text string. For example, this could be used
// to pass a license key that the Server may require.
func (m LogonRequest) GeneralTextData() string {
	return m.p.StringVLS(20)
}

// Integer_1 Optional. General-purpose integer.
func (m LogonRequest) Integer_1() int32 {
	return m.p.Int32LE(24)
}

// Integer_2 Optional. General-purpose integer.
func (m LogonRequest) Integer_2() int32 {
	return m.p.Int32LE(28)
}

// HeartbeatIntervalInSeconds The interval in seconds that each side, the Client and the Server, needs
// to use to send Heartbeat messages to the other side.
//
// This should be a value from anywhere from 5 to 60 seconds.
//
// This field is required.
func (m LogonRequest) HeartbeatIntervalInSeconds() int32 {
	return m.p.Int32LE(32)
}

// Unused1
func (m LogonRequest) Unused1() int32 {
	return m.p.Int32LE(36)
}

// TradeAccount This is an optional field and this should only be set to a Trade Account
// identifier if that is required to logon by the Server. this would only
// be implemented in rare cases. Usually this would be the case if the logon
// is bound to a particular Trade Account and not changeable after the log
// in.
//
// The server is still required to implement the TradeAccountsRequest and
// TradeAccountResponsemessages.
func (m LogonRequest) TradeAccount() string {
	return m.p.StringVLS(40)
}

// HardwareIdentifier Optional: This is the computer hardware identifier. The intention of this
// is that this will be implemented by the Client program developer on a
// case-by-case basis for specific Data/Trading service providers. It will
// be a reasonable implementation to uniquely identify a system and will
// not be publicly disclosed. It will never contain personally identifiable
// information.
func (m LogonRequest) HardwareIdentifier() string {
	return m.p.StringVLS(44)
}

// ClientName The Client name. This is a free-form text string.
func (m LogonRequest) ClientName() string {
	return m.p.StringVLS(48)
}

// MarketDataTransmissionInterval This is an optional field to be used by the Server which specifies in
// milliseconds, the delay with transmitting market data to the Client.
//
// For reasons of efficiency, the server may buffer data over this timeframe,
// and send data after this time frame expires.
func (m LogonRequest) MarketDataTransmissionInterval() int32 {
	return m.p.Int32LE(52)
}

// Size The standard message size field. Automatically set by constructor.
func (m LogonRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
//
// To determine the field number for JSON, refer to this message type constant
// in the DTCProtocol.h file.
func (m LogonRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// ProtocolVersion The protocol version supported by the Client. Automatically set by constructor.
// The protocol version supported by the Client. Automatically set by constructor.
func (m LogonRequestFixed) ProtocolVersion() int32 {
	return m.p.Int32LE(4)
}

// Username Optional username for the server to authenticate the Client.
func (m LogonRequestFixed) Username() string {
	return m.p.StringFixed(8, 32)
}

// Password Optional password for the server to authenticate the Client.
func (m LogonRequestFixed) Password() string {
	return m.p.StringFixed(40, 32)
}

// GeneralTextData Optional general-purpose text string. For example, this could be used
// to pass a license key that the Server may require.
func (m LogonRequestFixed) GeneralTextData() string {
	return m.p.StringFixed(72, 64)
}

// Integer_1 Optional. General-purpose integer.
func (m LogonRequestFixed) Integer_1() int32 {
	return m.p.Int32LE(136)
}

// Integer_2 Optional. General-purpose integer.
func (m LogonRequestFixed) Integer_2() int32 {
	return m.p.Int32LE(140)
}

// HeartbeatIntervalInSeconds The interval in seconds that each side, the Client and the Server, needs
// to use to send Heartbeat messages to the other side.
//
// This should be a value from anywhere from 5 to 60 seconds.
//
// This field is required.
func (m LogonRequestFixed) HeartbeatIntervalInSeconds() int32 {
	return m.p.Int32LE(144)
}

// Unused1
func (m LogonRequestFixed) Unused1() int32 {
	return m.p.Int32LE(148)
}

// TradeAccount This is an optional field and this should only be set to a Trade Account
// identifier if that is required to logon by the Server. this would only
// be implemented in rare cases. Usually this would be the case if the logon
// is bound to a particular Trade Account and not changeable after the log
// in.
//
// The server is still required to implement the TradeAccountsRequest and
// TradeAccountResponsemessages.
func (m LogonRequestFixed) TradeAccount() string {
	return m.p.StringFixed(152, 32)
}

// HardwareIdentifier Optional: This is the computer hardware identifier. The intention of this
// is that this will be implemented by the Client program developer on a
// case-by-case basis for specific Data/Trading service providers. It will
// be a reasonable implementation to uniquely identify a system and will
// not be publicly disclosed. It will never contain personally identifiable
// information.
func (m LogonRequestFixed) HardwareIdentifier() string {
	return m.p.StringFixed(184, 64)
}

// ClientName The Client name. This is a free-form text string.
func (m LogonRequestFixed) ClientName() string {
	return m.p.StringFixed(248, 32)
}

// MarketDataTransmissionInterval This is an optional field to be used by the Server which specifies in
// milliseconds, the delay with transmitting market data to the Client.
//
// For reasons of efficiency, the server may buffer data over this timeframe,
// and send data after this time frame expires.
func (m LogonRequestFixed) MarketDataTransmissionInterval() int32 {
	return m.p.Int32LE(280)
}

// SetProtocolVersion The protocol version supported by the Client. Automatically set by constructor.
// The protocol version supported by the Client. Automatically set by constructor.
func (m *LogonRequest) SetProtocolVersion(value int32) *LogonRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetUsername Optional username for the server to authenticate the Client.
func (m *LogonRequest) SetUsername(value string) *LogonRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetPassword Optional password for the server to authenticate the Client.
func (m *LogonRequest) SetPassword(value string) *LogonRequest {
	m.p.SetStringVLS(16, value)
	return m
}

// SetGeneralTextData Optional general-purpose text string. For example, this could be used
// to pass a license key that the Server may require.
func (m *LogonRequest) SetGeneralTextData(value string) *LogonRequest {
	m.p.SetStringVLS(20, value)
	return m
}

// SetInteger_1 Optional. General-purpose integer.
func (m *LogonRequest) SetInteger_1(value int32) *LogonRequest {
	m.p.SetInt32LE(24, value)
	return m
}

// SetInteger_2 Optional. General-purpose integer.
func (m *LogonRequest) SetInteger_2(value int32) *LogonRequest {
	m.p.SetInt32LE(28, value)
	return m
}

// SetHeartbeatIntervalInSeconds The interval in seconds that each side, the Client and the Server, needs
// to use to send Heartbeat messages to the other side.
//
// This should be a value from anywhere from 5 to 60 seconds.
//
// This field is required.
func (m *LogonRequest) SetHeartbeatIntervalInSeconds(value int32) *LogonRequest {
	m.p.SetInt32LE(32, value)
	return m
}

// SetUnused1
func (m *LogonRequest) SetUnused1(value int32) *LogonRequest {
	m.p.SetInt32LE(36, value)
	return m
}

// SetTradeAccount This is an optional field and this should only be set to a Trade Account
// identifier if that is required to logon by the Server. this would only
// be implemented in rare cases. Usually this would be the case if the logon
// is bound to a particular Trade Account and not changeable after the log
// in.
//
// The server is still required to implement the TradeAccountsRequest and
// TradeAccountResponsemessages.
func (m *LogonRequest) SetTradeAccount(value string) *LogonRequest {
	m.p.SetStringVLS(40, value)
	return m
}

// SetHardwareIdentifier Optional: This is the computer hardware identifier. The intention of this
// is that this will be implemented by the Client program developer on a
// case-by-case basis for specific Data/Trading service providers. It will
// be a reasonable implementation to uniquely identify a system and will
// not be publicly disclosed. It will never contain personally identifiable
// information.
func (m *LogonRequest) SetHardwareIdentifier(value string) *LogonRequest {
	m.p.SetStringVLS(44, value)
	return m
}

// SetClientName The Client name. This is a free-form text string.
func (m *LogonRequest) SetClientName(value string) *LogonRequest {
	m.p.SetStringVLS(48, value)
	return m
}

// SetMarketDataTransmissionInterval This is an optional field to be used by the Server which specifies in
// milliseconds, the delay with transmitting market data to the Client.
//
// For reasons of efficiency, the server may buffer data over this timeframe,
// and send data after this time frame expires.
func (m *LogonRequest) SetMarketDataTransmissionInterval(value int32) *LogonRequest {
	m.p.SetInt32LE(52, value)
	return m
}

// SetProtocolVersion The protocol version supported by the Client. Automatically set by constructor.
// The protocol version supported by the Client. Automatically set by constructor.
func (m *LogonRequestFixed) SetProtocolVersion(value int32) *LogonRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetUsername Optional username for the server to authenticate the Client.
func (m *LogonRequestFixed) SetUsername(value string) *LogonRequestFixed {
	m.p.SetStringFixed(8, 32, value)
	return m
}

// SetPassword Optional password for the server to authenticate the Client.
func (m *LogonRequestFixed) SetPassword(value string) *LogonRequestFixed {
	m.p.SetStringFixed(40, 32, value)
	return m
}

// SetGeneralTextData Optional general-purpose text string. For example, this could be used
// to pass a license key that the Server may require.
func (m *LogonRequestFixed) SetGeneralTextData(value string) *LogonRequestFixed {
	m.p.SetStringFixed(72, 64, value)
	return m
}

// SetInteger_1 Optional. General-purpose integer.
func (m *LogonRequestFixed) SetInteger_1(value int32) *LogonRequestFixed {
	m.p.SetInt32LE(136, value)
	return m
}

// SetInteger_2 Optional. General-purpose integer.
func (m *LogonRequestFixed) SetInteger_2(value int32) *LogonRequestFixed {
	m.p.SetInt32LE(140, value)
	return m
}

// SetHeartbeatIntervalInSeconds The interval in seconds that each side, the Client and the Server, needs
// to use to send Heartbeat messages to the other side.
//
// This should be a value from anywhere from 5 to 60 seconds.
//
// This field is required.
func (m *LogonRequestFixed) SetHeartbeatIntervalInSeconds(value int32) *LogonRequestFixed {
	m.p.SetInt32LE(144, value)
	return m
}

// SetUnused1
func (m *LogonRequestFixed) SetUnused1(value int32) *LogonRequestFixed {
	m.p.SetInt32LE(148, value)
	return m
}

// SetTradeAccount This is an optional field and this should only be set to a Trade Account
// identifier if that is required to logon by the Server. this would only
// be implemented in rare cases. Usually this would be the case if the logon
// is bound to a particular Trade Account and not changeable after the log
// in.
//
// The server is still required to implement the TradeAccountsRequest and
// TradeAccountResponsemessages.
func (m *LogonRequestFixed) SetTradeAccount(value string) *LogonRequestFixed {
	m.p.SetStringFixed(152, 32, value)
	return m
}

// SetHardwareIdentifier Optional: This is the computer hardware identifier. The intention of this
// is that this will be implemented by the Client program developer on a
// case-by-case basis for specific Data/Trading service providers. It will
// be a reasonable implementation to uniquely identify a system and will
// not be publicly disclosed. It will never contain personally identifiable
// information.
func (m *LogonRequestFixed) SetHardwareIdentifier(value string) *LogonRequestFixed {
	m.p.SetStringFixed(184, 64, value)
	return m
}

// SetClientName The Client name. This is a free-form text string.
func (m *LogonRequestFixed) SetClientName(value string) *LogonRequestFixed {
	m.p.SetStringFixed(248, 32, value)
	return m
}

// SetMarketDataTransmissionInterval This is an optional field to be used by the Server which specifies in
// milliseconds, the delay with transmitting market data to the Client.
//
// For reasons of efficiency, the server may buffer data over this timeframe,
// and send data after this time frame expires.
func (m *LogonRequestFixed) SetMarketDataTransmissionInterval(value int32) *LogonRequestFixed {
	m.p.SetInt32LE(280, value)
	return m
}

func (m *LogonRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *LogonRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *LogonRequest) Clone() *LogonRequest {
	return &LogonRequest{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *LogonRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *LogonRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *LogonRequestFixed) Clone() *LogonRequestFixed {
	return &LogonRequestFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m LogonRequest) Copy(to LogonRequest) {
	to.SetProtocolVersion(m.ProtocolVersion())
	to.SetUsername(m.Username())
	to.SetPassword(m.Password())
	to.SetGeneralTextData(m.GeneralTextData())
	to.SetInteger_1(m.Integer_1())
	to.SetInteger_2(m.Integer_2())
	to.SetHeartbeatIntervalInSeconds(m.HeartbeatIntervalInSeconds())
	to.SetUnused1(m.Unused1())
	to.SetTradeAccount(m.TradeAccount())
	to.SetHardwareIdentifier(m.HardwareIdentifier())
	to.SetClientName(m.ClientName())
	to.SetMarketDataTransmissionInterval(m.MarketDataTransmissionInterval())
}

// CopyTo
func (m LogonRequest) CopyTo(to LogonRequestFixed) {
	to.SetProtocolVersion(m.ProtocolVersion())
	to.SetUsername(m.Username())
	to.SetPassword(m.Password())
	to.SetGeneralTextData(m.GeneralTextData())
	to.SetInteger_1(m.Integer_1())
	to.SetInteger_2(m.Integer_2())
	to.SetHeartbeatIntervalInSeconds(m.HeartbeatIntervalInSeconds())
	to.SetUnused1(m.Unused1())
	to.SetTradeAccount(m.TradeAccount())
	to.SetHardwareIdentifier(m.HardwareIdentifier())
	to.SetClientName(m.ClientName())
	to.SetMarketDataTransmissionInterval(m.MarketDataTransmissionInterval())
}

// Copy
func (m LogonRequestFixed) Copy(to LogonRequestFixed) {
	to.SetProtocolVersion(m.ProtocolVersion())
	to.SetUsername(m.Username())
	to.SetPassword(m.Password())
	to.SetGeneralTextData(m.GeneralTextData())
	to.SetInteger_1(m.Integer_1())
	to.SetInteger_2(m.Integer_2())
	to.SetHeartbeatIntervalInSeconds(m.HeartbeatIntervalInSeconds())
	to.SetUnused1(m.Unused1())
	to.SetTradeAccount(m.TradeAccount())
	to.SetHardwareIdentifier(m.HardwareIdentifier())
	to.SetClientName(m.ClientName())
	to.SetMarketDataTransmissionInterval(m.MarketDataTransmissionInterval())
}

// CopyTo
func (m LogonRequestFixed) CopyTo(to LogonRequest) {
	to.SetProtocolVersion(m.ProtocolVersion())
	to.SetUsername(m.Username())
	to.SetPassword(m.Password())
	to.SetGeneralTextData(m.GeneralTextData())
	to.SetInteger_1(m.Integer_1())
	to.SetInteger_2(m.Integer_2())
	to.SetHeartbeatIntervalInSeconds(m.HeartbeatIntervalInSeconds())
	to.SetUnused1(m.Unused1())
	to.SetTradeAccount(m.TradeAccount())
	to.SetHardwareIdentifier(m.HardwareIdentifier())
	to.SetClientName(m.ClientName())
	to.SetMarketDataTransmissionInterval(m.MarketDataTransmissionInterval())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *LogonRequest) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *LogonRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 1)
	w.Int32Field("ProtocolVersion", m.ProtocolVersion())
	w.StringField("Username", m.Username())
	w.StringField("Password", m.Password())
	w.StringField("GeneralTextData", m.GeneralTextData())
	w.Int32Field("Integer_1", m.Integer_1())
	w.Int32Field("Integer_2", m.Integer_2())
	w.Int32Field("HeartbeatIntervalInSeconds", m.HeartbeatIntervalInSeconds())
	w.Int32Field("Unused1", m.Unused1())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("HardwareIdentifier", m.HardwareIdentifier())
	w.StringField("ClientName", m.ClientName())
	w.Int32Field("MarketDataTransmissionInterval", m.MarketDataTransmissionInterval())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *LogonRequest) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *LogonRequest) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 1 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ProtocolVersion":
			m.SetProtocolVersion(r.Int32())
		case "Username":
			m.SetUsername(r.String())
		case "Password":
			m.SetPassword(r.String())
		case "GeneralTextData":
			m.SetGeneralTextData(r.String())
		case "Integer_1":
			m.SetInteger_1(r.Int32())
		case "Integer_2":
			m.SetInteger_2(r.Int32())
		case "HeartbeatIntervalInSeconds":
			m.SetHeartbeatIntervalInSeconds(r.Int32())
		case "Unused1":
			m.SetUnused1(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "HardwareIdentifier":
			m.SetHardwareIdentifier(r.String())
		case "ClientName":
			m.SetClientName(r.String())
		case "MarketDataTransmissionInterval":
			m.SetMarketDataTransmissionInterval(r.Int32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *LogonRequestFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *LogonRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 1)
	w.Int32Field("ProtocolVersion", m.ProtocolVersion())
	w.StringField("Username", m.Username())
	w.StringField("Password", m.Password())
	w.StringField("GeneralTextData", m.GeneralTextData())
	w.Int32Field("Integer_1", m.Integer_1())
	w.Int32Field("Integer_2", m.Integer_2())
	w.Int32Field("HeartbeatIntervalInSeconds", m.HeartbeatIntervalInSeconds())
	w.Int32Field("Unused1", m.Unused1())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("HardwareIdentifier", m.HardwareIdentifier())
	w.StringField("ClientName", m.ClientName())
	w.Int32Field("MarketDataTransmissionInterval", m.MarketDataTransmissionInterval())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *LogonRequestFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *LogonRequestFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 1 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "ProtocolVersion":
			m.SetProtocolVersion(r.Int32())
		case "Username":
			m.SetUsername(r.String())
		case "Password":
			m.SetPassword(r.String())
		case "GeneralTextData":
			m.SetGeneralTextData(r.String())
		case "Integer_1":
			m.SetInteger_1(r.Int32())
		case "Integer_2":
			m.SetInteger_2(r.Int32())
		case "HeartbeatIntervalInSeconds":
			m.SetHeartbeatIntervalInSeconds(r.Int32())
		case "Unused1":
			m.SetUnused1(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "HardwareIdentifier":
			m.SetHardwareIdentifier(r.String())
		case "ClientName":
			m.SetClientName(r.String())
		case "MarketDataTransmissionInterval":
			m.SetMarketDataTransmissionInterval(r.Int32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
