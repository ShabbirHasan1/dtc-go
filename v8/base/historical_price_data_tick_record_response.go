// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalPriceDataTickRecordResponseSize = 48

//     Size           uint16                    = HistoricalPriceDataTickRecordResponseSize  (48)
//     Type           uint16                    = HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE  (804)
//     RequestID      int32                     = 0
//     DateTime       DateTimeWithMilliseconds  = 0.000000
//     AtBidOrAsk     AtBidOrAskEnum            = BID_ASK_UNSET  (0)
//     Price          float64                   = 0.000000
//     Volume         float64                   = 0.000000
//     IsFinalRecord  bool                      = false
var _HistoricalPriceDataTickRecordResponseDefault = []byte{48, 0, 36, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// HistoricalPriceDataTickRecordResponse This is the response message when the RecordInterval field in a historical
// data request message is set to INTERVAL_TICK.
//
// If the Server does not support 1 Tick historical data or does not have
// 1 Tick historical data for the specified time period, it can respond with
// HistoricalPriceDataRecordResponse messages instead. The Server must only
// respond with messages of one type in response to a particular historical
// price data request.
//
// This message can be part of a compressed series of messages of this same
// type, if the Client requested compression be used.
type HistoricalPriceDataTickRecordResponse struct {
	p message.Fixed
}

func NewHistoricalPriceDataTickRecordResponseFrom(b []byte) HistoricalPriceDataTickRecordResponse {
	return HistoricalPriceDataTickRecordResponse{p: message.NewFixed(b)}
}

func WrapHistoricalPriceDataTickRecordResponse(b []byte) HistoricalPriceDataTickRecordResponse {
	return HistoricalPriceDataTickRecordResponse{p: message.WrapFixed(b)}
}

func NewHistoricalPriceDataTickRecordResponse() *HistoricalPriceDataTickRecordResponse {
	return &HistoricalPriceDataTickRecordResponse{p: message.NewFixed(_HistoricalPriceDataTickRecordResponseDefault)}
}

func ParseHistoricalPriceDataTickRecordResponse(b []byte) (HistoricalPriceDataTickRecordResponse, error) {
	if len(b) < 4 {
		return HistoricalPriceDataTickRecordResponse{}, message.ErrShortBuffer
	}
	m := WrapHistoricalPriceDataTickRecordResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalPriceDataTickRecordResponse{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalPriceDataTickRecordResponse{}, message.ErrBaseSizeOverflow
	}
	if size < 48 {
		clone := *NewHistoricalPriceDataTickRecordResponse()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalPriceDataTickRecordResponseDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalPriceDataTickRecordResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalPriceDataTickRecordResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m HistoricalPriceDataTickRecordResponse) RequestID() int32 {
	return m.p.Int32LE(4)
}

// DateTime The Date-Time of the trade.
func (m HistoricalPriceDataTickRecordResponse) DateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(8))
}

// AtBidOrAsk This indicates whether the trade occurred at the Bid price or lower or
// at the Ask price or higher.
func (m HistoricalPriceDataTickRecordResponse) AtBidOrAsk() AtBidOrAskEnum {
	return AtBidOrAskEnum(m.p.Uint16LE(16))
}

// Price The price of the trade.
func (m HistoricalPriceDataTickRecordResponse) Price() float64 {
	return m.p.Float64LE(24)
}

// Volume The volume of the trade.
func (m HistoricalPriceDataTickRecordResponse) Volume() float64 {
	return m.p.Float64LE(32)
}

// IsFinalRecord Set to 1 to indicate final record in response to the historical price
// data request.
//
// The default is 0 meaning there are more records to follow.
func (m HistoricalPriceDataTickRecordResponse) IsFinalRecord() bool {
	return m.p.Bool(40)
}

// SetRequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m *HistoricalPriceDataTickRecordResponse) SetRequestID(value int32) *HistoricalPriceDataTickRecordResponse {
	m.p.SetInt32LE(4, value)
	return m
}

// SetDateTime The Date-Time of the trade.
func (m *HistoricalPriceDataTickRecordResponse) SetDateTime(value DateTimeWithMilliseconds) *HistoricalPriceDataTickRecordResponse {
	m.p.SetFloat64LE(8, float64(value))
	return m
}

// SetAtBidOrAsk This indicates whether the trade occurred at the Bid price or lower or
// at the Ask price or higher.
func (m *HistoricalPriceDataTickRecordResponse) SetAtBidOrAsk(value AtBidOrAskEnum) *HistoricalPriceDataTickRecordResponse {
	m.p.SetUint16LE(16, uint16(value))
	return m
}

// SetPrice The price of the trade.
func (m *HistoricalPriceDataTickRecordResponse) SetPrice(value float64) *HistoricalPriceDataTickRecordResponse {
	m.p.SetFloat64LE(24, value)
	return m
}

// SetVolume The volume of the trade.
func (m *HistoricalPriceDataTickRecordResponse) SetVolume(value float64) *HistoricalPriceDataTickRecordResponse {
	m.p.SetFloat64LE(32, value)
	return m
}

// SetIsFinalRecord Set to 1 to indicate final record in response to the historical price
// data request.
//
// The default is 0 meaning there are more records to follow.
func (m *HistoricalPriceDataTickRecordResponse) SetIsFinalRecord(value bool) *HistoricalPriceDataTickRecordResponse {
	m.p.SetBool(40, value)
	return m
}

func (m *HistoricalPriceDataTickRecordResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalPriceDataTickRecordResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalPriceDataTickRecordResponse) Clone() *HistoricalPriceDataTickRecordResponse {
	return &HistoricalPriceDataTickRecordResponse{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m HistoricalPriceDataTickRecordResponse) Copy(to HistoricalPriceDataTickRecordResponse) {
	to.SetRequestID(m.RequestID())
	to.SetDateTime(m.DateTime())
	to.SetAtBidOrAsk(m.AtBidOrAsk())
	to.SetPrice(m.Price())
	to.SetVolume(m.Volume())
	to.SetIsFinalRecord(m.IsFinalRecord())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataTickRecordResponse) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalPriceDataTickRecordResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 804)
	w.Int32Field("RequestID", m.RequestID())
	w.Float64Field("DateTime", float64(m.DateTime()))
	w.Uint16Field("AtBidOrAsk", uint16(m.AtBidOrAsk()))
	w.Float64Field("Price", m.Price())
	w.Float64Field("Volume", m.Volume())
	w.BoolField("IsFinalRecord", m.IsFinalRecord())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataTickRecordResponse) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalPriceDataTickRecordResponse) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 804 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "DateTime":
			m.SetDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "AtBidOrAsk":
			m.SetAtBidOrAsk(AtBidOrAskEnum(r.Uint16()))
		case "Price":
			m.SetPrice(r.Float64())
		case "Volume":
			m.SetVolume(r.Float64())
		case "IsFinalRecord":
			m.SetIsFinalRecord(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
