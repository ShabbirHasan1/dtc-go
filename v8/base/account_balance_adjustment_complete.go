// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const AccountBalanceAdjustmentCompleteSize = 16

//     Size           uint16  = AccountBalanceAdjustmentCompleteSize  (16)
//     Type           uint16  = ACCOUNT_BALANCE_ADJUSTMENT_COMPLETE  (609)
//     RequestID      int32   = 0
//     TransactionID  int64   = 0
var _AccountBalanceAdjustmentCompleteDefault = []byte{16, 0, 97, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type AccountBalanceAdjustmentComplete struct {
	p message.Fixed
}

func NewAccountBalanceAdjustmentCompleteFrom(b []byte) AccountBalanceAdjustmentComplete {
	return AccountBalanceAdjustmentComplete{p: message.NewFixed(b)}
}

func WrapAccountBalanceAdjustmentComplete(b []byte) AccountBalanceAdjustmentComplete {
	return AccountBalanceAdjustmentComplete{p: message.WrapFixed(b)}
}

func NewAccountBalanceAdjustmentComplete() *AccountBalanceAdjustmentComplete {
	return &AccountBalanceAdjustmentComplete{p: message.NewFixed(_AccountBalanceAdjustmentCompleteDefault)}
}

func ParseAccountBalanceAdjustmentComplete(b []byte) (AccountBalanceAdjustmentComplete, error) {
	if len(b) < 4 {
		return AccountBalanceAdjustmentComplete{}, message.ErrShortBuffer
	}
	m := WrapAccountBalanceAdjustmentComplete(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AccountBalanceAdjustmentComplete{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return AccountBalanceAdjustmentComplete{}, message.ErrBaseSizeOverflow
	}
	if size < 16 {
		clone := *NewAccountBalanceAdjustmentComplete()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _AccountBalanceAdjustmentCompleteDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m AccountBalanceAdjustmentComplete) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m AccountBalanceAdjustmentComplete) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m AccountBalanceAdjustmentComplete) RequestID() int32 {
	return m.p.Int32LE(4)
}

// TransactionID
func (m AccountBalanceAdjustmentComplete) TransactionID() int64 {
	return m.p.Int64LE(8)
}

// SetRequestID
func (m *AccountBalanceAdjustmentComplete) SetRequestID(value int32) *AccountBalanceAdjustmentComplete {
	m.p.SetInt32LE(4, value)
	return m
}

// SetTransactionID
func (m *AccountBalanceAdjustmentComplete) SetTransactionID(value int64) *AccountBalanceAdjustmentComplete {
	m.p.SetInt64LE(8, value)
	return m
}

func (m *AccountBalanceAdjustmentComplete) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *AccountBalanceAdjustmentComplete) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *AccountBalanceAdjustmentComplete) Clone() *AccountBalanceAdjustmentComplete {
	return &AccountBalanceAdjustmentComplete{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m AccountBalanceAdjustmentComplete) Copy(to AccountBalanceAdjustmentComplete) {
	to.SetRequestID(m.RequestID())
	to.SetTransactionID(m.TransactionID())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceAdjustmentComplete) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *AccountBalanceAdjustmentComplete) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 609)
	w.Int32Field("RequestID", m.RequestID())
	w.Int64Field("TransactionID", m.TransactionID())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AccountBalanceAdjustmentComplete) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *AccountBalanceAdjustmentComplete) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 609 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "TransactionID":
			m.SetTransactionID(r.Int64())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
