// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const AddCorrectingOrderFillSize = 56

const AddCorrectingOrderFillFixedSize = 216

//     Size           uint16       = AddCorrectingOrderFillSize  (56)
//     Type           uint16       = ADD_CORRECTING_ORDER_FILL  (309)
//     BaseSize       uint16       = AddCorrectingOrderFillSize  (56)
//     Symbol         string       = ""
//     Exchange       string       = ""
//     TradeAccount   string       = ""
//     ClientOrderID  string       = ""
//     BuySell        BuySellEnum  = BUY_SELL_UNSET  (0)
//     FillPrice      float64      = 0.000000
//     FillQuantity   float64      = 0.000000
//     FreeFormText   string       = ""
var _AddCorrectingOrderFillDefault = []byte{56, 0, 53, 1, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size           uint16       = AddCorrectingOrderFillFixedSize  (216)
//     Type           uint16       = ADD_CORRECTING_ORDER_FILL  (309)
//     Symbol         string[64]   = ""
//     Exchange       string[16]   = ""
//     TradeAccount   string[32]   = ""
//     ClientOrderID  string[32]   = ""
//     BuySell        BuySellEnum  = BUY_SELL_UNSET  (0)
//     FillPrice      float64      = 0.000000
//     FillQuantity   float64      = 0.000000
//     FreeFormText   string[48]   = ""
var _AddCorrectingOrderFillFixedDefault = []byte{216, 0, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type AddCorrectingOrderFill struct {
	p message.VLS
}

type AddCorrectingOrderFillFixed struct {
	p message.Fixed
}

func NewAddCorrectingOrderFillFrom(b []byte) AddCorrectingOrderFill {
	return AddCorrectingOrderFill{p: message.NewVLS(b)}
}

func WrapAddCorrectingOrderFill(b []byte) AddCorrectingOrderFill {
	return AddCorrectingOrderFill{p: message.WrapVLS(b)}
}

func NewAddCorrectingOrderFill() *AddCorrectingOrderFill {
	return &AddCorrectingOrderFill{p: message.NewVLS(_AddCorrectingOrderFillDefault)}
}

func ParseAddCorrectingOrderFill(b []byte) (AddCorrectingOrderFill, error) {
	if len(b) < 6 {
		return AddCorrectingOrderFill{}, message.ErrShortBuffer
	}
	m := WrapAddCorrectingOrderFill(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AddCorrectingOrderFill{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return AddCorrectingOrderFill{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 56 {
		newSize := len(b) + (56 - baseSize)
		if newSize > message.MaxSize {
			return AddCorrectingOrderFill{}, message.ErrOverflow
		}
		clone := AddCorrectingOrderFill{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _AddCorrectingOrderFillDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(56 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
			offset = clone.p.Uint16LE(10)
			if offset > 0 {
				clone.p.SetUint16LE(10, offset+shift)
			}
			offset = clone.p.Uint16LE(14)
			if offset > 0 {
				clone.p.SetUint16LE(14, offset+shift)
			}
			offset = clone.p.Uint16LE(18)
			if offset > 0 {
				clone.p.SetUint16LE(18, offset+shift)
			}
			offset = clone.p.Uint16LE(48)
			if offset > 0 {
				clone.p.SetUint16LE(48, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewAddCorrectingOrderFillFixedFrom(b []byte) AddCorrectingOrderFillFixed {
	return AddCorrectingOrderFillFixed{p: message.NewFixed(b)}
}

func WrapAddCorrectingOrderFillFixed(b []byte) AddCorrectingOrderFillFixed {
	return AddCorrectingOrderFillFixed{p: message.WrapFixed(b)}
}

func NewAddCorrectingOrderFillFixed() *AddCorrectingOrderFillFixed {
	return &AddCorrectingOrderFillFixed{p: message.NewFixed(_AddCorrectingOrderFillFixedDefault)}
}

func ParseAddCorrectingOrderFillFixed(b []byte) (AddCorrectingOrderFillFixed, error) {
	if len(b) < 4 {
		return AddCorrectingOrderFillFixed{}, message.ErrShortBuffer
	}
	m := WrapAddCorrectingOrderFillFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return AddCorrectingOrderFillFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return AddCorrectingOrderFillFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 216 {
		clone := *NewAddCorrectingOrderFillFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _AddCorrectingOrderFillFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m AddCorrectingOrderFill) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m AddCorrectingOrderFill) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m AddCorrectingOrderFill) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// Symbol
func (m AddCorrectingOrderFill) Symbol() string {
	return m.p.StringVLS(6)
}

// Exchange
func (m AddCorrectingOrderFill) Exchange() string {
	return m.p.StringVLS(10)
}

// TradeAccount
func (m AddCorrectingOrderFill) TradeAccount() string {
	return m.p.StringVLS(14)
}

// ClientOrderID
func (m AddCorrectingOrderFill) ClientOrderID() string {
	return m.p.StringVLS(18)
}

// BuySell
func (m AddCorrectingOrderFill) BuySell() BuySellEnum {
	return BuySellEnum(m.p.Int32LE(24))
}

// FillPrice
func (m AddCorrectingOrderFill) FillPrice() float64 {
	return m.p.Float64LE(32)
}

// FillQuantity
func (m AddCorrectingOrderFill) FillQuantity() float64 {
	return m.p.Float64LE(40)
}

// FreeFormText
func (m AddCorrectingOrderFill) FreeFormText() string {
	return m.p.StringVLS(48)
}

// Size
func (m AddCorrectingOrderFillFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m AddCorrectingOrderFillFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// Symbol
func (m AddCorrectingOrderFillFixed) Symbol() string {
	return m.p.StringFixed(4, 64)
}

// Exchange
func (m AddCorrectingOrderFillFixed) Exchange() string {
	return m.p.StringFixed(68, 16)
}

// TradeAccount
func (m AddCorrectingOrderFillFixed) TradeAccount() string {
	return m.p.StringFixed(84, 32)
}

// ClientOrderID
func (m AddCorrectingOrderFillFixed) ClientOrderID() string {
	return m.p.StringFixed(116, 32)
}

// BuySell
func (m AddCorrectingOrderFillFixed) BuySell() BuySellEnum {
	return BuySellEnum(m.p.Int32LE(148))
}

// FillPrice
func (m AddCorrectingOrderFillFixed) FillPrice() float64 {
	return m.p.Float64LE(152)
}

// FillQuantity
func (m AddCorrectingOrderFillFixed) FillQuantity() float64 {
	return m.p.Float64LE(160)
}

// FreeFormText
func (m AddCorrectingOrderFillFixed) FreeFormText() string {
	return m.p.StringFixed(168, 48)
}

// SetSymbol
func (m *AddCorrectingOrderFill) SetSymbol(value string) *AddCorrectingOrderFill {
	m.p.SetStringVLS(6, value)
	return m
}

// SetExchange
func (m *AddCorrectingOrderFill) SetExchange(value string) *AddCorrectingOrderFill {
	m.p.SetStringVLS(10, value)
	return m
}

// SetTradeAccount
func (m *AddCorrectingOrderFill) SetTradeAccount(value string) *AddCorrectingOrderFill {
	m.p.SetStringVLS(14, value)
	return m
}

// SetClientOrderID
func (m *AddCorrectingOrderFill) SetClientOrderID(value string) *AddCorrectingOrderFill {
	m.p.SetStringVLS(18, value)
	return m
}

// SetBuySell
func (m *AddCorrectingOrderFill) SetBuySell(value BuySellEnum) *AddCorrectingOrderFill {
	m.p.SetInt32LE(24, int32(value))
	return m
}

// SetFillPrice
func (m *AddCorrectingOrderFill) SetFillPrice(value float64) *AddCorrectingOrderFill {
	m.p.SetFloat64LE(32, value)
	return m
}

// SetFillQuantity
func (m *AddCorrectingOrderFill) SetFillQuantity(value float64) *AddCorrectingOrderFill {
	m.p.SetFloat64LE(40, value)
	return m
}

// SetFreeFormText
func (m *AddCorrectingOrderFill) SetFreeFormText(value string) *AddCorrectingOrderFill {
	m.p.SetStringVLS(48, value)
	return m
}

// SetSymbol
func (m *AddCorrectingOrderFillFixed) SetSymbol(value string) *AddCorrectingOrderFillFixed {
	m.p.SetStringFixed(4, 64, value)
	return m
}

// SetExchange
func (m *AddCorrectingOrderFillFixed) SetExchange(value string) *AddCorrectingOrderFillFixed {
	m.p.SetStringFixed(68, 16, value)
	return m
}

// SetTradeAccount
func (m *AddCorrectingOrderFillFixed) SetTradeAccount(value string) *AddCorrectingOrderFillFixed {
	m.p.SetStringFixed(84, 32, value)
	return m
}

// SetClientOrderID
func (m *AddCorrectingOrderFillFixed) SetClientOrderID(value string) *AddCorrectingOrderFillFixed {
	m.p.SetStringFixed(116, 32, value)
	return m
}

// SetBuySell
func (m *AddCorrectingOrderFillFixed) SetBuySell(value BuySellEnum) *AddCorrectingOrderFillFixed {
	m.p.SetInt32LE(148, int32(value))
	return m
}

// SetFillPrice
func (m *AddCorrectingOrderFillFixed) SetFillPrice(value float64) *AddCorrectingOrderFillFixed {
	m.p.SetFloat64LE(152, value)
	return m
}

// SetFillQuantity
func (m *AddCorrectingOrderFillFixed) SetFillQuantity(value float64) *AddCorrectingOrderFillFixed {
	m.p.SetFloat64LE(160, value)
	return m
}

// SetFreeFormText
func (m *AddCorrectingOrderFillFixed) SetFreeFormText(value string) *AddCorrectingOrderFillFixed {
	m.p.SetStringFixed(168, 48, value)
	return m
}

func (m *AddCorrectingOrderFill) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *AddCorrectingOrderFill) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *AddCorrectingOrderFill) Clone() *AddCorrectingOrderFill {
	return &AddCorrectingOrderFill{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *AddCorrectingOrderFillFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *AddCorrectingOrderFillFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *AddCorrectingOrderFillFixed) Clone() *AddCorrectingOrderFillFixed {
	return &AddCorrectingOrderFillFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m AddCorrectingOrderFill) Copy(to AddCorrectingOrderFill) {
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetTradeAccount(m.TradeAccount())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetBuySell(m.BuySell())
	to.SetFillPrice(m.FillPrice())
	to.SetFillQuantity(m.FillQuantity())
	to.SetFreeFormText(m.FreeFormText())
}

// CopyTo
func (m AddCorrectingOrderFill) CopyTo(to AddCorrectingOrderFillFixed) {
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetTradeAccount(m.TradeAccount())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetBuySell(m.BuySell())
	to.SetFillPrice(m.FillPrice())
	to.SetFillQuantity(m.FillQuantity())
	to.SetFreeFormText(m.FreeFormText())
}

// Copy
func (m AddCorrectingOrderFillFixed) Copy(to AddCorrectingOrderFillFixed) {
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetTradeAccount(m.TradeAccount())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetBuySell(m.BuySell())
	to.SetFillPrice(m.FillPrice())
	to.SetFillQuantity(m.FillQuantity())
	to.SetFreeFormText(m.FreeFormText())
}

// CopyTo
func (m AddCorrectingOrderFillFixed) CopyTo(to AddCorrectingOrderFill) {
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetTradeAccount(m.TradeAccount())
	to.SetClientOrderID(m.ClientOrderID())
	to.SetBuySell(m.BuySell())
	to.SetFillPrice(m.FillPrice())
	to.SetFillQuantity(m.FillQuantity())
	to.SetFreeFormText(m.FreeFormText())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AddCorrectingOrderFill) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *AddCorrectingOrderFill) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 309)
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("ClientOrderID", m.ClientOrderID())
	w.Int32Field("BuySell", int32(m.BuySell()))
	w.Float64Field("FillPrice", m.FillPrice())
	w.Float64Field("FillQuantity", m.FillQuantity())
	w.StringField("FreeFormText", m.FreeFormText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AddCorrectingOrderFill) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *AddCorrectingOrderFill) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 309 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "ClientOrderID":
			m.SetClientOrderID(r.String())
		case "BuySell":
			m.SetBuySell(BuySellEnum(r.Int32()))
		case "FillPrice":
			m.SetFillPrice(r.Float64())
		case "FillQuantity":
			m.SetFillQuantity(r.Float64())
		case "FreeFormText":
			m.SetFreeFormText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AddCorrectingOrderFillFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *AddCorrectingOrderFillFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 309)
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.StringField("TradeAccount", m.TradeAccount())
	w.StringField("ClientOrderID", m.ClientOrderID())
	w.Int32Field("BuySell", int32(m.BuySell()))
	w.Float64Field("FillPrice", m.FillPrice())
	w.Float64Field("FillQuantity", m.FillQuantity())
	w.StringField("FreeFormText", m.FreeFormText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *AddCorrectingOrderFillFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *AddCorrectingOrderFillFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 309 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "ClientOrderID":
			m.SetClientOrderID(r.String())
		case "BuySell":
			m.SetBuySell(BuySellEnum(r.Int32()))
		case "FillPrice":
			m.SetFillPrice(r.Float64())
		case "FillQuantity":
			m.SetFillQuantity(r.Float64())
		case "FreeFormText":
			m.SetFreeFormText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
