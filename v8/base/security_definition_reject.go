// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const SecurityDefinitionRejectSize = 16

const SecurityDefinitionRejectFixedSize = 104

//     Size        uint16  = SecurityDefinitionRejectSize  (16)
//     Type        uint16  = SECURITY_DEFINITION_REJECT  (509)
//     BaseSize    uint16  = SecurityDefinitionRejectSize  (16)
//     RequestID   int32   = 0
//     RejectText  string  = ""
var _SecurityDefinitionRejectDefault = []byte{16, 0, 253, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size        uint16      = SecurityDefinitionRejectFixedSize  (104)
//     Type        uint16      = SECURITY_DEFINITION_REJECT  (509)
//     RequestID   int32       = 0
//     RejectText  string[96]  = ""
var _SecurityDefinitionRejectFixedDefault = []byte{104, 0, 253, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// SecurityDefinitionReject This is a message from the Server to the Client indicating the Server
// is rejecting one of the following messages: SymbolsForExchangeRequest,
// UnderlyingSymbolsForExchangeRequest, SymbolsForUnderlyingRequest, SecurityDefinitionForSymbolRequest,
// SymbolSearchRequest.
//
// If there are no symbols to send in response to one of these messages above,
// then the Server should not send a SecurityDefinitionReject message and
// instead send a SecurityDefinitionResponse with only the RequestID and
// IsFinalMessage fields set. This will be a clear indication to the Client
// that the request returned no Symbols.
type SecurityDefinitionReject struct {
	p message.VLS
}

// SecurityDefinitionRejectFixed This is a message from the Server to the Client indicating the Server
// is rejecting one of the following messages: SymbolsForExchangeRequest,
// UnderlyingSymbolsForExchangeRequest, SymbolsForUnderlyingRequest, SecurityDefinitionForSymbolRequest,
// SymbolSearchRequest.
//
// If there are no symbols to send in response to one of these messages above,
// then the Server should not send a SecurityDefinitionReject message and
// instead send a SecurityDefinitionResponse with only the RequestID and
// IsFinalMessage fields set. This will be a clear indication to the Client
// that the request returned no Symbols.
type SecurityDefinitionRejectFixed struct {
	p message.Fixed
}

func NewSecurityDefinitionRejectFrom(b []byte) SecurityDefinitionReject {
	return SecurityDefinitionReject{p: message.NewVLS(b)}
}

func WrapSecurityDefinitionReject(b []byte) SecurityDefinitionReject {
	return SecurityDefinitionReject{p: message.WrapVLS(b)}
}

func NewSecurityDefinitionReject() *SecurityDefinitionReject {
	return &SecurityDefinitionReject{p: message.NewVLS(_SecurityDefinitionRejectDefault)}
}

func ParseSecurityDefinitionReject(b []byte) (SecurityDefinitionReject, error) {
	if len(b) < 6 {
		return SecurityDefinitionReject{}, message.ErrShortBuffer
	}
	m := WrapSecurityDefinitionReject(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return SecurityDefinitionReject{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return SecurityDefinitionReject{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 16 {
		newSize := len(b) + (16 - baseSize)
		if newSize > message.MaxSize {
			return SecurityDefinitionReject{}, message.ErrOverflow
		}
		clone := SecurityDefinitionReject{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _SecurityDefinitionRejectDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(16 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewSecurityDefinitionRejectFixedFrom(b []byte) SecurityDefinitionRejectFixed {
	return SecurityDefinitionRejectFixed{p: message.NewFixed(b)}
}

func WrapSecurityDefinitionRejectFixed(b []byte) SecurityDefinitionRejectFixed {
	return SecurityDefinitionRejectFixed{p: message.WrapFixed(b)}
}

func NewSecurityDefinitionRejectFixed() *SecurityDefinitionRejectFixed {
	return &SecurityDefinitionRejectFixed{p: message.NewFixed(_SecurityDefinitionRejectFixedDefault)}
}

func ParseSecurityDefinitionRejectFixed(b []byte) (SecurityDefinitionRejectFixed, error) {
	if len(b) < 4 {
		return SecurityDefinitionRejectFixed{}, message.ErrShortBuffer
	}
	m := WrapSecurityDefinitionRejectFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return SecurityDefinitionRejectFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return SecurityDefinitionRejectFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 104 {
		clone := *NewSecurityDefinitionRejectFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _SecurityDefinitionRejectFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m SecurityDefinitionReject) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m SecurityDefinitionReject) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m SecurityDefinitionReject) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID This is the same RequestID that this message is in response to and was
// given in the original request message.
func (m SecurityDefinitionReject) RequestID() int32 {
	return m.p.Int32LE(8)
}

// RejectText Text reason for rejection.
func (m SecurityDefinitionReject) RejectText() string {
	return m.p.StringVLS(12)
}

// Size The standard message size field. Automatically set by constructor.
func (m SecurityDefinitionRejectFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m SecurityDefinitionRejectFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID This is the same RequestID that this message is in response to and was
// given in the original request message.
func (m SecurityDefinitionRejectFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// RejectText Text reason for rejection.
func (m SecurityDefinitionRejectFixed) RejectText() string {
	return m.p.StringFixed(8, 96)
}

// SetRequestID This is the same RequestID that this message is in response to and was
// given in the original request message.
func (m *SecurityDefinitionReject) SetRequestID(value int32) *SecurityDefinitionReject {
	m.p.SetInt32LE(8, value)
	return m
}

// SetRejectText Text reason for rejection.
func (m *SecurityDefinitionReject) SetRejectText(value string) *SecurityDefinitionReject {
	m.p.SetStringVLS(12, value)
	return m
}

// SetRequestID This is the same RequestID that this message is in response to and was
// given in the original request message.
func (m *SecurityDefinitionRejectFixed) SetRequestID(value int32) *SecurityDefinitionRejectFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetRejectText Text reason for rejection.
func (m *SecurityDefinitionRejectFixed) SetRejectText(value string) *SecurityDefinitionRejectFixed {
	m.p.SetStringFixed(8, 96, value)
	return m
}

func (m *SecurityDefinitionReject) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *SecurityDefinitionReject) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *SecurityDefinitionReject) Clone() *SecurityDefinitionReject {
	return &SecurityDefinitionReject{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *SecurityDefinitionRejectFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *SecurityDefinitionRejectFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *SecurityDefinitionRejectFixed) Clone() *SecurityDefinitionRejectFixed {
	return &SecurityDefinitionRejectFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m SecurityDefinitionReject) Copy(to SecurityDefinitionReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m SecurityDefinitionReject) CopyTo(to SecurityDefinitionRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// Copy
func (m SecurityDefinitionRejectFixed) Copy(to SecurityDefinitionRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m SecurityDefinitionRejectFixed) CopyTo(to SecurityDefinitionReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionReject) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *SecurityDefinitionReject) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 509)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionReject) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *SecurityDefinitionReject) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 509 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionRejectFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *SecurityDefinitionRejectFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 509)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *SecurityDefinitionRejectFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *SecurityDefinitionRejectFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 509 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
