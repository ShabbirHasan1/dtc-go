// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const ExchangeListResponseSize = 24

const ExchangeListResponseFixedSize = 76

//     Size            uint16  = ExchangeListResponseSize  (24)
//     Type            uint16  = EXCHANGE_LIST_RESPONSE  (501)
//     BaseSize        uint16  = ExchangeListResponseSize  (24)
//     RequestID       int32   = 0
//     Exchange        string  = ""
//     IsFinalMessage  bool    = false
//     Description     string  = ""
var _ExchangeListResponseDefault = []byte{24, 0, 245, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size            uint16      = ExchangeListResponseFixedSize  (76)
//     Type            uint16      = EXCHANGE_LIST_RESPONSE  (501)
//     RequestID       int32       = 0
//     Exchange        string[16]  = ""
//     IsFinalMessage  bool        = false
//     Description     string[48]  = ""
var _ExchangeListResponseFixedDefault = []byte{76, 0, 245, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// ExchangeListResponse The server will return this message for each supported exchange.
//
// If there are no exchanges to return in response to a request, send through
// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
// all other members in the default state and the Client will recognize there
// are no Exchanges.
type ExchangeListResponse struct {
	p message.VLS
}

// ExchangeListResponseFixed The server will return this message for each supported exchange.
//
// If there are no exchanges to return in response to a request, send through
// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
// all other members in the default state and the Client will recognize there
// are no Exchanges.
type ExchangeListResponseFixed struct {
	p message.Fixed
}

func NewExchangeListResponseFrom(b []byte) ExchangeListResponse {
	return ExchangeListResponse{p: message.NewVLS(b)}
}

func WrapExchangeListResponse(b []byte) ExchangeListResponse {
	return ExchangeListResponse{p: message.WrapVLS(b)}
}

func NewExchangeListResponse() *ExchangeListResponse {
	return &ExchangeListResponse{p: message.NewVLS(_ExchangeListResponseDefault)}
}

func ParseExchangeListResponse(b []byte) (ExchangeListResponse, error) {
	if len(b) < 6 {
		return ExchangeListResponse{}, message.ErrShortBuffer
	}
	m := WrapExchangeListResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ExchangeListResponse{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return ExchangeListResponse{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 24 {
		newSize := len(b) + (24 - baseSize)
		if newSize > message.MaxSize {
			return ExchangeListResponse{}, message.ErrOverflow
		}
		clone := ExchangeListResponse{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _ExchangeListResponseDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(24 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
			offset = clone.p.Uint16LE(18)
			if offset > 0 {
				clone.p.SetUint16LE(18, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewExchangeListResponseFixedFrom(b []byte) ExchangeListResponseFixed {
	return ExchangeListResponseFixed{p: message.NewFixed(b)}
}

func WrapExchangeListResponseFixed(b []byte) ExchangeListResponseFixed {
	return ExchangeListResponseFixed{p: message.WrapFixed(b)}
}

func NewExchangeListResponseFixed() *ExchangeListResponseFixed {
	return &ExchangeListResponseFixed{p: message.NewFixed(_ExchangeListResponseFixedDefault)}
}

func ParseExchangeListResponseFixed(b []byte) (ExchangeListResponseFixed, error) {
	if len(b) < 4 {
		return ExchangeListResponseFixed{}, message.ErrShortBuffer
	}
	m := WrapExchangeListResponseFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return ExchangeListResponseFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return ExchangeListResponseFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 76 {
		clone := *NewExchangeListResponseFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _ExchangeListResponseFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m ExchangeListResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m ExchangeListResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m ExchangeListResponse) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The RequestID sent in the request by the Client.
func (m ExchangeListResponse) RequestID() int32 {
	return m.p.Int32LE(8)
}

// Exchange The exchange identifier that the Server uses to identify a particular
// exchange.
func (m ExchangeListResponse) Exchange() string {
	return m.p.StringVLS(12)
}

// IsFinalMessage 1 = final message in batch.
func (m ExchangeListResponse) IsFinalMessage() bool {
	return m.p.Bool(16)
}

// Description The complete exchange description.
func (m ExchangeListResponse) Description() string {
	return m.p.StringVLS(18)
}

// Size The standard message size field. Automatically set by constructor.
func (m ExchangeListResponseFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m ExchangeListResponseFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The RequestID sent in the request by the Client.
func (m ExchangeListResponseFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// Exchange The exchange identifier that the Server uses to identify a particular
// exchange.
func (m ExchangeListResponseFixed) Exchange() string {
	return m.p.StringFixed(8, 16)
}

// IsFinalMessage 1 = final message in batch.
func (m ExchangeListResponseFixed) IsFinalMessage() bool {
	return m.p.Bool(24)
}

// Description The complete exchange description.
func (m ExchangeListResponseFixed) Description() string {
	return m.p.StringFixed(25, 48)
}

// SetRequestID The RequestID sent in the request by the Client.
func (m *ExchangeListResponse) SetRequestID(value int32) *ExchangeListResponse {
	m.p.SetInt32LE(8, value)
	return m
}

// SetExchange The exchange identifier that the Server uses to identify a particular
// exchange.
func (m *ExchangeListResponse) SetExchange(value string) *ExchangeListResponse {
	m.p.SetStringVLS(12, value)
	return m
}

// SetIsFinalMessage 1 = final message in batch.
func (m *ExchangeListResponse) SetIsFinalMessage(value bool) *ExchangeListResponse {
	m.p.SetBool(16, value)
	return m
}

// SetDescription The complete exchange description.
func (m *ExchangeListResponse) SetDescription(value string) *ExchangeListResponse {
	m.p.SetStringVLS(18, value)
	return m
}

// SetRequestID The RequestID sent in the request by the Client.
func (m *ExchangeListResponseFixed) SetRequestID(value int32) *ExchangeListResponseFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetExchange The exchange identifier that the Server uses to identify a particular
// exchange.
func (m *ExchangeListResponseFixed) SetExchange(value string) *ExchangeListResponseFixed {
	m.p.SetStringFixed(8, 16, value)
	return m
}

// SetIsFinalMessage 1 = final message in batch.
func (m *ExchangeListResponseFixed) SetIsFinalMessage(value bool) *ExchangeListResponseFixed {
	m.p.SetBool(24, value)
	return m
}

// SetDescription The complete exchange description.
func (m *ExchangeListResponseFixed) SetDescription(value string) *ExchangeListResponseFixed {
	m.p.SetStringFixed(25, 48, value)
	return m
}

func (m *ExchangeListResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *ExchangeListResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *ExchangeListResponse) Clone() *ExchangeListResponse {
	return &ExchangeListResponse{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *ExchangeListResponseFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *ExchangeListResponseFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *ExchangeListResponseFixed) Clone() *ExchangeListResponseFixed {
	return &ExchangeListResponseFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m ExchangeListResponse) Copy(to ExchangeListResponse) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetDescription(m.Description())
}

// CopyTo
func (m ExchangeListResponse) CopyTo(to ExchangeListResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetDescription(m.Description())
}

// Copy
func (m ExchangeListResponseFixed) Copy(to ExchangeListResponseFixed) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetDescription(m.Description())
}

// CopyTo
func (m ExchangeListResponseFixed) CopyTo(to ExchangeListResponse) {
	to.SetRequestID(m.RequestID())
	to.SetExchange(m.Exchange())
	to.SetIsFinalMessage(m.IsFinalMessage())
	to.SetDescription(m.Description())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ExchangeListResponse) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *ExchangeListResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 501)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Exchange", m.Exchange())
	w.BoolField("IsFinalMessage", m.IsFinalMessage())
	w.StringField("Description", m.Description())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ExchangeListResponse) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *ExchangeListResponse) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 501 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Exchange":
			m.SetExchange(r.String())
		case "IsFinalMessage":
			m.SetIsFinalMessage(r.Bool())
		case "Description":
			m.SetDescription(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ExchangeListResponseFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *ExchangeListResponseFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 501)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("Exchange", m.Exchange())
	w.BoolField("IsFinalMessage", m.IsFinalMessage())
	w.StringField("Description", m.Description())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *ExchangeListResponseFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *ExchangeListResponseFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 501 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "Exchange":
			m.SetExchange(r.String())
		case "IsFinalMessage":
			m.SetIsFinalMessage(r.Bool())
		case "Description":
			m.SetDescription(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
