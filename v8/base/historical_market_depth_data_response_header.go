// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalMarketDepthDataResponseHeaderSize = 12

//     Size                uint16  = HistoricalMarketDepthDataResponseHeaderSize  (12)
//     Type                uint16  = HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER  (901)
//     RequestID           int32   = 0
//     UseZLibCompression  bool    = false
//     NoRecordsToReturn   uint8   = 0
var _HistoricalMarketDepthDataResponseHeaderDefault = []byte{12, 0, 133, 3, 0, 0, 0, 0, 0, 0, 0, 0}

type HistoricalMarketDepthDataResponseHeader struct {
	p message.Fixed
}

func NewHistoricalMarketDepthDataResponseHeaderFrom(b []byte) HistoricalMarketDepthDataResponseHeader {
	return HistoricalMarketDepthDataResponseHeader{p: message.NewFixed(b)}
}

func WrapHistoricalMarketDepthDataResponseHeader(b []byte) HistoricalMarketDepthDataResponseHeader {
	return HistoricalMarketDepthDataResponseHeader{p: message.WrapFixed(b)}
}

func NewHistoricalMarketDepthDataResponseHeader() *HistoricalMarketDepthDataResponseHeader {
	return &HistoricalMarketDepthDataResponseHeader{p: message.NewFixed(_HistoricalMarketDepthDataResponseHeaderDefault)}
}

func ParseHistoricalMarketDepthDataResponseHeader(b []byte) (HistoricalMarketDepthDataResponseHeader, error) {
	if len(b) < 4 {
		return HistoricalMarketDepthDataResponseHeader{}, message.ErrShortBuffer
	}
	m := WrapHistoricalMarketDepthDataResponseHeader(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalMarketDepthDataResponseHeader{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalMarketDepthDataResponseHeader{}, message.ErrBaseSizeOverflow
	}
	if size < 12 {
		clone := *NewHistoricalMarketDepthDataResponseHeader()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalMarketDepthDataResponseHeaderDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m HistoricalMarketDepthDataResponseHeader) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalMarketDepthDataResponseHeader) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m HistoricalMarketDepthDataResponseHeader) RequestID() int32 {
	return m.p.Int32LE(4)
}

// UseZLibCompression
func (m HistoricalMarketDepthDataResponseHeader) UseZLibCompression() bool {
	return m.p.Bool(8)
}

// NoRecordsToReturn
func (m HistoricalMarketDepthDataResponseHeader) NoRecordsToReturn() uint8 {
	return m.p.Uint8(9)
}

// SetRequestID
func (m *HistoricalMarketDepthDataResponseHeader) SetRequestID(value int32) *HistoricalMarketDepthDataResponseHeader {
	m.p.SetInt32LE(4, value)
	return m
}

// SetUseZLibCompression
func (m *HistoricalMarketDepthDataResponseHeader) SetUseZLibCompression(value bool) *HistoricalMarketDepthDataResponseHeader {
	m.p.SetBool(8, value)
	return m
}

// SetNoRecordsToReturn
func (m *HistoricalMarketDepthDataResponseHeader) SetNoRecordsToReturn(value uint8) *HistoricalMarketDepthDataResponseHeader {
	m.p.SetUint8(9, value)
	return m
}

func (m *HistoricalMarketDepthDataResponseHeader) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalMarketDepthDataResponseHeader) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalMarketDepthDataResponseHeader) Clone() *HistoricalMarketDepthDataResponseHeader {
	return &HistoricalMarketDepthDataResponseHeader{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m HistoricalMarketDepthDataResponseHeader) Copy(to HistoricalMarketDepthDataResponseHeader) {
	to.SetRequestID(m.RequestID())
	to.SetUseZLibCompression(m.UseZLibCompression())
	to.SetNoRecordsToReturn(m.NoRecordsToReturn())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataResponseHeader) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalMarketDepthDataResponseHeader) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 901)
	w.Int32Field("RequestID", m.RequestID())
	w.BoolField("UseZLibCompression", m.UseZLibCompression())
	w.Uint8Field("NoRecordsToReturn", m.NoRecordsToReturn())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataResponseHeader) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalMarketDepthDataResponseHeader) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 901 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "UseZLibCompression":
			m.SetUseZLibCompression(r.Bool())
		case "NoRecordsToReturn":
			m.SetNoRecordsToReturn(r.Uint8())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
