// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalOrderFillsRejectSize = 16

const HistoricalOrderFillsRejectFixedSize = 104

//     Size        uint16  = HistoricalOrderFillsRejectSize  (16)
//     Type        uint16  = HISTORICAL_ORDER_FILLS_REJECT  (308)
//     BaseSize    uint16  = HistoricalOrderFillsRejectSize  (16)
//     RequestID   int32   = 0
//     RejectText  string  = ""
var _HistoricalOrderFillsRejectDefault = []byte{16, 0, 52, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size        uint16      = HistoricalOrderFillsRejectFixedSize  (104)
//     Type        uint16      = HISTORICAL_ORDER_FILLS_REJECT  (308)
//     RequestID   int32       = 0
//     RejectText  string[96]  = ""
var _HistoricalOrderFillsRejectFixedDefault = []byte{104, 0, 52, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// HistoricalOrderFillsReject If the Server is unable to serve the request for a HistoricalOrderFillsRequest
// message received, for a reason other than there not being any historical
// order fills, then send this message to the Client.
type HistoricalOrderFillsReject struct {
	p message.VLS
}

// HistoricalOrderFillsRejectFixed If the Server is unable to serve the request for a HistoricalOrderFillsRequest
// message received, for a reason other than there not being any historical
// order fills, then send this message to the Client.
type HistoricalOrderFillsRejectFixed struct {
	p message.Fixed
}

func NewHistoricalOrderFillsRejectFrom(b []byte) HistoricalOrderFillsReject {
	return HistoricalOrderFillsReject{p: message.NewVLS(b)}
}

func WrapHistoricalOrderFillsReject(b []byte) HistoricalOrderFillsReject {
	return HistoricalOrderFillsReject{p: message.WrapVLS(b)}
}

func NewHistoricalOrderFillsReject() *HistoricalOrderFillsReject {
	return &HistoricalOrderFillsReject{p: message.NewVLS(_HistoricalOrderFillsRejectDefault)}
}

func ParseHistoricalOrderFillsReject(b []byte) (HistoricalOrderFillsReject, error) {
	if len(b) < 6 {
		return HistoricalOrderFillsReject{}, message.ErrShortBuffer
	}
	m := WrapHistoricalOrderFillsReject(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalOrderFillsReject{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalOrderFillsReject{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 16 {
		newSize := len(b) + (16 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalOrderFillsReject{}, message.ErrOverflow
		}
		clone := HistoricalOrderFillsReject{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalOrderFillsRejectDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(16 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalOrderFillsRejectFixedFrom(b []byte) HistoricalOrderFillsRejectFixed {
	return HistoricalOrderFillsRejectFixed{p: message.NewFixed(b)}
}

func WrapHistoricalOrderFillsRejectFixed(b []byte) HistoricalOrderFillsRejectFixed {
	return HistoricalOrderFillsRejectFixed{p: message.WrapFixed(b)}
}

func NewHistoricalOrderFillsRejectFixed() *HistoricalOrderFillsRejectFixed {
	return &HistoricalOrderFillsRejectFixed{p: message.NewFixed(_HistoricalOrderFillsRejectFixedDefault)}
}

func ParseHistoricalOrderFillsRejectFixed(b []byte) (HistoricalOrderFillsRejectFixed, error) {
	if len(b) < 4 {
		return HistoricalOrderFillsRejectFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalOrderFillsRejectFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalOrderFillsRejectFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalOrderFillsRejectFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 104 {
		clone := *NewHistoricalOrderFillsRejectFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalOrderFillsRejectFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalOrderFillsReject) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalOrderFillsReject) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalOrderFillsReject) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID This is set to the RequestID field sent in the HistoricalOrderFillsRequest
// message.
func (m HistoricalOrderFillsReject) RequestID() int32 {
	return m.p.Int32LE(8)
}

// RejectText Free-form text indicating the reason for rejection.
func (m HistoricalOrderFillsReject) RejectText() string {
	return m.p.StringVLS(12)
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalOrderFillsRejectFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalOrderFillsRejectFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID This is set to the RequestID field sent in the HistoricalOrderFillsRequest
// message.
func (m HistoricalOrderFillsRejectFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// RejectText Free-form text indicating the reason for rejection.
func (m HistoricalOrderFillsRejectFixed) RejectText() string {
	return m.p.StringFixed(8, 96)
}

// SetRequestID This is set to the RequestID field sent in the HistoricalOrderFillsRequest
// message.
func (m *HistoricalOrderFillsReject) SetRequestID(value int32) *HistoricalOrderFillsReject {
	m.p.SetInt32LE(8, value)
	return m
}

// SetRejectText Free-form text indicating the reason for rejection.
func (m *HistoricalOrderFillsReject) SetRejectText(value string) *HistoricalOrderFillsReject {
	m.p.SetStringVLS(12, value)
	return m
}

// SetRequestID This is set to the RequestID field sent in the HistoricalOrderFillsRequest
// message.
func (m *HistoricalOrderFillsRejectFixed) SetRequestID(value int32) *HistoricalOrderFillsRejectFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetRejectText Free-form text indicating the reason for rejection.
func (m *HistoricalOrderFillsRejectFixed) SetRejectText(value string) *HistoricalOrderFillsRejectFixed {
	m.p.SetStringFixed(8, 96, value)
	return m
}

func (m *HistoricalOrderFillsReject) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalOrderFillsReject) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalOrderFillsReject) Clone() *HistoricalOrderFillsReject {
	return &HistoricalOrderFillsReject{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *HistoricalOrderFillsRejectFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalOrderFillsRejectFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalOrderFillsRejectFixed) Clone() *HistoricalOrderFillsRejectFixed {
	return &HistoricalOrderFillsRejectFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m HistoricalOrderFillsReject) Copy(to HistoricalOrderFillsReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m HistoricalOrderFillsReject) CopyTo(to HistoricalOrderFillsRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// Copy
func (m HistoricalOrderFillsRejectFixed) Copy(to HistoricalOrderFillsRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m HistoricalOrderFillsRejectFixed) CopyTo(to HistoricalOrderFillsReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsReject) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalOrderFillsReject) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 308)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsReject) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalOrderFillsReject) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 308 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsRejectFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalOrderFillsRejectFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 308)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsRejectFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalOrderFillsRejectFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 308 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
