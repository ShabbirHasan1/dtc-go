// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const JournalEntryAddSize = 24

const JournalEntryAddFixedSize = 272

//     Size          uint16    = JournalEntryAddSize  (24)
//     Type          uint16    = JOURNAL_ENTRY_ADD  (703)
//     BaseSize      uint16    = JournalEntryAddSize  (24)
//     JournalEntry  string    = ""
//     DateTime      DateTime  = 0
var _JournalEntryAddDefault = []byte{24, 0, 191, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size          uint16       = JournalEntryAddFixedSize  (272)
//     Type          uint16       = JOURNAL_ENTRY_ADD  (703)
//     JournalEntry  string[256]  = ""
//     DateTime      DateTime     = 0
var _JournalEntryAddFixedDefault = []byte{16, 1, 191, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type JournalEntryAdd struct {
	p message.VLS
}

type JournalEntryAddFixed struct {
	p message.Fixed
}

func NewJournalEntryAddFrom(b []byte) JournalEntryAdd {
	return JournalEntryAdd{p: message.NewVLS(b)}
}

func WrapJournalEntryAdd(b []byte) JournalEntryAdd {
	return JournalEntryAdd{p: message.WrapVLS(b)}
}

func NewJournalEntryAdd() *JournalEntryAdd {
	return &JournalEntryAdd{p: message.NewVLS(_JournalEntryAddDefault)}
}

func ParseJournalEntryAdd(b []byte) (JournalEntryAdd, error) {
	if len(b) < 6 {
		return JournalEntryAdd{}, message.ErrShortBuffer
	}
	m := WrapJournalEntryAdd(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return JournalEntryAdd{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return JournalEntryAdd{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 24 {
		newSize := len(b) + (24 - baseSize)
		if newSize > message.MaxSize {
			return JournalEntryAdd{}, message.ErrOverflow
		}
		clone := JournalEntryAdd{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _JournalEntryAddDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(24 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(6)
			if offset > 0 {
				clone.p.SetUint16LE(6, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewJournalEntryAddFixedFrom(b []byte) JournalEntryAddFixed {
	return JournalEntryAddFixed{p: message.NewFixed(b)}
}

func WrapJournalEntryAddFixed(b []byte) JournalEntryAddFixed {
	return JournalEntryAddFixed{p: message.WrapFixed(b)}
}

func NewJournalEntryAddFixed() *JournalEntryAddFixed {
	return &JournalEntryAddFixed{p: message.NewFixed(_JournalEntryAddFixedDefault)}
}

func ParseJournalEntryAddFixed(b []byte) (JournalEntryAddFixed, error) {
	if len(b) < 4 {
		return JournalEntryAddFixed{}, message.ErrShortBuffer
	}
	m := WrapJournalEntryAddFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return JournalEntryAddFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return JournalEntryAddFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 272 {
		clone := *NewJournalEntryAddFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _JournalEntryAddFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m JournalEntryAdd) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m JournalEntryAdd) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m JournalEntryAdd) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// JournalEntry
func (m JournalEntryAdd) JournalEntry() string {
	return m.p.StringVLS(6)
}

// DateTime
func (m JournalEntryAdd) DateTime() DateTime {
	return DateTime(m.p.Int64LE(16))
}

// Size
func (m JournalEntryAddFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m JournalEntryAddFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// JournalEntry
func (m JournalEntryAddFixed) JournalEntry() string {
	return m.p.StringFixed(4, 256)
}

// DateTime
func (m JournalEntryAddFixed) DateTime() DateTime {
	return DateTime(m.p.Int64LE(264))
}

// SetJournalEntry
func (m *JournalEntryAdd) SetJournalEntry(value string) *JournalEntryAdd {
	m.p.SetStringVLS(6, value)
	return m
}

// SetDateTime
func (m *JournalEntryAdd) SetDateTime(value DateTime) *JournalEntryAdd {
	m.p.SetInt64LE(16, int64(value))
	return m
}

// SetJournalEntry
func (m *JournalEntryAddFixed) SetJournalEntry(value string) *JournalEntryAddFixed {
	m.p.SetStringFixed(4, 256, value)
	return m
}

// SetDateTime
func (m *JournalEntryAddFixed) SetDateTime(value DateTime) *JournalEntryAddFixed {
	m.p.SetInt64LE(264, int64(value))
	return m
}

func (m *JournalEntryAdd) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *JournalEntryAdd) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *JournalEntryAdd) Clone() *JournalEntryAdd {
	return &JournalEntryAdd{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *JournalEntryAddFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *JournalEntryAddFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *JournalEntryAddFixed) Clone() *JournalEntryAddFixed {
	return &JournalEntryAddFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m JournalEntryAdd) Copy(to JournalEntryAdd) {
	to.SetJournalEntry(m.JournalEntry())
	to.SetDateTime(m.DateTime())
}

// CopyTo
func (m JournalEntryAdd) CopyTo(to JournalEntryAddFixed) {
	to.SetJournalEntry(m.JournalEntry())
	to.SetDateTime(m.DateTime())
}

// Copy
func (m JournalEntryAddFixed) Copy(to JournalEntryAddFixed) {
	to.SetJournalEntry(m.JournalEntry())
	to.SetDateTime(m.DateTime())
}

// CopyTo
func (m JournalEntryAddFixed) CopyTo(to JournalEntryAdd) {
	to.SetJournalEntry(m.JournalEntry())
	to.SetDateTime(m.DateTime())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *JournalEntryAdd) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *JournalEntryAdd) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 703)
	w.StringField("JournalEntry", m.JournalEntry())
	w.Int64Field("DateTime", int64(m.DateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *JournalEntryAdd) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *JournalEntryAdd) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 703 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "JournalEntry":
			m.SetJournalEntry(r.String())
		case "DateTime":
			m.SetDateTime(DateTime(r.Int64()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *JournalEntryAddFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *JournalEntryAddFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 703)
	w.StringField("JournalEntry", m.JournalEntry())
	w.Int64Field("DateTime", int64(m.DateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *JournalEntryAddFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *JournalEntryAddFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 703 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "JournalEntry":
			m.SetJournalEntry(r.String())
		case "DateTime":
			m.SetDateTime(DateTime(r.Int64()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
