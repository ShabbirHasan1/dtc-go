// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDepthUpdateLevelFloatWithMillisecondsSize = 29

//     Size                uint16                       = MarketDepthUpdateLevelFloatWithMillisecondsSize  (29)
//     Type                uint16                       = MARKET_DEPTH_UPDATE_LEVEL_FLOAT_WITH_MILLISECONDS  (140)
//     SymbolID            uint32                       = 0
//     DateTime            DateTimeWithMillisecondsInt  = 0
//     Price               float32                      = 0.000000
//     Quantity            float32                      = 0.000000
//     Side                AtBidOrAskEnum8              = BID_ASK_UNSET_8  (0)
//     UpdateType          MarketDepthUpdateTypeEnum    = MARKET_DEPTH_UNSET  (0)
//     NumOrders           uint16                       = 0
//     FinalUpdateInBatch  FinalUpdateInBatchEnum       = FINAL_UPDATE_UNSET  (0)
var _MarketDepthUpdateLevelFloatWithMillisecondsDefault = []byte{29, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDepthUpdateLevelFloatWithMilliseconds Sent by the Server to the Client to Update/Insert or Delete a particular
// market depth price level in the market depth book maintained by the Client.
// market depth price level in the market depth book maintained by the Client.
//
// This message is a more compact version of the MarketDepthUpdateLevel message.
// For the Price and Quantity fields, it uses a 4 byte float for compactness.
// It also supports millisecond precision for the timestamp.
type MarketDepthUpdateLevelFloatWithMilliseconds struct {
	p message.Fixed
}

func NewMarketDepthUpdateLevelFloatWithMillisecondsFrom(b []byte) MarketDepthUpdateLevelFloatWithMilliseconds {
	return MarketDepthUpdateLevelFloatWithMilliseconds{p: message.NewFixed(b)}
}

func WrapMarketDepthUpdateLevelFloatWithMilliseconds(b []byte) MarketDepthUpdateLevelFloatWithMilliseconds {
	return MarketDepthUpdateLevelFloatWithMilliseconds{p: message.WrapFixed(b)}
}

func NewMarketDepthUpdateLevelFloatWithMilliseconds() *MarketDepthUpdateLevelFloatWithMilliseconds {
	return &MarketDepthUpdateLevelFloatWithMilliseconds{p: message.NewFixed(_MarketDepthUpdateLevelFloatWithMillisecondsDefault)}
}

func ParseMarketDepthUpdateLevelFloatWithMilliseconds(b []byte) (MarketDepthUpdateLevelFloatWithMilliseconds, error) {
	if len(b) < 4 {
		return MarketDepthUpdateLevelFloatWithMilliseconds{}, message.ErrShortBuffer
	}
	m := WrapMarketDepthUpdateLevelFloatWithMilliseconds(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDepthUpdateLevelFloatWithMilliseconds{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDepthUpdateLevelFloatWithMilliseconds{}, message.ErrBaseSizeOverflow
	}
	if size < 29 {
		clone := *NewMarketDepthUpdateLevelFloatWithMilliseconds()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDepthUpdateLevelFloatWithMillisecondsDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// DateTime The Date-Time of the market depth update with millisecond precision.
//
// This is an integer representing the number of milliseconds since the UNIX
// Epoch.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) DateTime() DateTimeWithMillisecondsInt {
	return DateTimeWithMillisecondsInt(m.p.Int64LE(8))
}

// Price The price level to insert, update or delete.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) Price() float32 {
	return m.p.Float32LE(16)
}

// Quantity The number of shares/contracts at the Price level. This will be 0 in the
// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) Quantity() float32 {
	return m.p.Float32LE(20)
}

// Side Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
func (m MarketDepthUpdateLevelFloatWithMilliseconds) Side() AtBidOrAskEnum8 {
	return AtBidOrAskEnum8(m.p.Uint8(24))
}

// UpdateType Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
// or a MARKET_DEPTH_DELETE_LEVEL operation.
//
// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
// book on the specified side, the particular Price and Volume specified.
// It is an insert operation of the price level does not exist. It is an
// update operation if the price level already exists. In the case of insert,
// the other levels in the market depth book need to be shifted to make room
// for the new level.
//
// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
// side, the specified Price level. The other levels need to be shifted to
// fill in the missing level. In this particular case the Quantity is ignored
// and will be 0.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) UpdateType() MarketDepthUpdateTypeEnum {
	return MarketDepthUpdateTypeEnum(m.p.Uint8(25))
}

// NumOrders The number of orders at the Price.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) NumOrders() uint16 {
	return m.p.Uint16LE(26)
}

// FinalUpdateInBatch An indicator whether this is the final message or not in a batch of updates.
// An indicator whether this is the final message or not in a batch of updates.
func (m MarketDepthUpdateLevelFloatWithMilliseconds) FinalUpdateInBatch() FinalUpdateInBatchEnum {
	return FinalUpdateInBatchEnum(m.p.Uint8(28))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetSymbolID(value uint32) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetUint32LE(4, value)
	return m
}

// SetDateTime The Date-Time of the market depth update with millisecond precision.
//
// This is an integer representing the number of milliseconds since the UNIX
// Epoch.
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetDateTime(value DateTimeWithMillisecondsInt) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetInt64LE(8, int64(value))
	return m
}

// SetPrice The price level to insert, update or delete.
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetPrice(value float32) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetFloat32LE(16, value)
	return m
}

// SetQuantity The number of shares/contracts at the Price level. This will be 0 in the
// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetQuantity(value float32) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetFloat32LE(20, value)
	return m
}

// SetSide Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetSide(value AtBidOrAskEnum8) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetUint8(24, uint8(value))
	return m
}

// SetUpdateType Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
// or a MARKET_DEPTH_DELETE_LEVEL operation.
//
// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
// book on the specified side, the particular Price and Volume specified.
// It is an insert operation of the price level does not exist. It is an
// update operation if the price level already exists. In the case of insert,
// the other levels in the market depth book need to be shifted to make room
// for the new level.
//
// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
// side, the specified Price level. The other levels need to be shifted to
// fill in the missing level. In this particular case the Quantity is ignored
// and will be 0.
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetUpdateType(value MarketDepthUpdateTypeEnum) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetUint8(25, uint8(value))
	return m
}

// SetNumOrders The number of orders at the Price.
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetNumOrders(value uint16) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetUint16LE(26, value)
	return m
}

// SetFinalUpdateInBatch An indicator whether this is the final message or not in a batch of updates.
// An indicator whether this is the final message or not in a batch of updates.
func (m *MarketDepthUpdateLevelFloatWithMilliseconds) SetFinalUpdateInBatch(value FinalUpdateInBatchEnum) *MarketDepthUpdateLevelFloatWithMilliseconds {
	m.p.SetUint8(28, uint8(value))
	return m
}

func (m *MarketDepthUpdateLevelFloatWithMilliseconds) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDepthUpdateLevelFloatWithMilliseconds) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDepthUpdateLevelFloatWithMilliseconds) Clone() *MarketDepthUpdateLevelFloatWithMilliseconds {
	return &MarketDepthUpdateLevelFloatWithMilliseconds{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDepthUpdateLevelFloatWithMilliseconds) Copy(to MarketDepthUpdateLevelFloatWithMilliseconds) {
	to.SetSymbolID(m.SymbolID())
	to.SetDateTime(m.DateTime())
	to.SetPrice(m.Price())
	to.SetQuantity(m.Quantity())
	to.SetSide(m.Side())
	to.SetUpdateType(m.UpdateType())
	to.SetNumOrders(m.NumOrders())
	to.SetFinalUpdateInBatch(m.FinalUpdateInBatch())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthUpdateLevelFloatWithMilliseconds) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDepthUpdateLevelFloatWithMilliseconds) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 140)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Int64Field("DateTime", int64(m.DateTime()))
	w.Float32Field("Price", m.Price())
	w.Float32Field("Quantity", m.Quantity())
	w.Uint8Field("Side", uint8(m.Side()))
	w.Uint8Field("UpdateType", uint8(m.UpdateType()))
	w.Uint16Field("NumOrders", m.NumOrders())
	w.Uint8Field("FinalUpdateInBatch", uint8(m.FinalUpdateInBatch()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthUpdateLevelFloatWithMilliseconds) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDepthUpdateLevelFloatWithMilliseconds) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 140 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "DateTime":
			m.SetDateTime(DateTimeWithMillisecondsInt(r.Int64()))
		case "Price":
			m.SetPrice(r.Float32())
		case "Quantity":
			m.SetQuantity(r.Float32())
		case "Side":
			m.SetSide(AtBidOrAskEnum8(r.Uint8()))
		case "UpdateType":
			m.SetUpdateType(MarketDepthUpdateTypeEnum(r.Uint8()))
		case "NumOrders":
			m.SetNumOrders(r.Uint16())
		case "FinalUpdateInBatch":
			m.SetFinalUpdateInBatch(FinalUpdateInBatchEnum(r.Uint8()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
