// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateSessionVolumeSize = 24

//     Size                  uint16         = MarketDataUpdateSessionVolumeSize  (24)
//     Type                  uint16         = MARKET_DATA_UPDATE_SESSION_VOLUME  (113)
//     SymbolID              uint32         = 0
//     Volume                float64        = 0.000000
//     TradingSessionDate    DateTime4Byte  = 0
//     IsFinalSessionVolume  bool           = false
var _MarketDataUpdateSessionVolumeDefault = []byte{24, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateSessionVolume Sent by the Server to the Client when the session trade Volume needs to
// be updated.
//
// The recommended rule for the Server to notify the Client of a change with
// the session trade volume to maintain bandwidth efficiency, is as follows:
// When a trade occurs for a symbol subscribed to, the Server will send a
// MarketDataUpdateTrade message to the Client. The Client should then increment
// its session trade volume value for the symbol by the value in the Volume
// field in this message.
//
// The Server will assume the Client is doing this. Therefore, when a trade
// occurs and the session trade volume does not equal the prior session trade
// volume plus the Volume for the most recent trade sent to the Client, then
// the Server must send out a MarketDataUpdateSessionVolume message to the
// client since the client calculation of the session trade volume is no
// longer correct.
//
// It is assumed that the reason for this inconsistency is due to trades
// included within the session trade volume which have not been sent out
// as normal trades.
//
// The Server should also send this message out at the frequency that the
// Server determines, such as every minute if there also has been a trade
// at that time.
type MarketDataUpdateSessionVolume struct {
	p message.Fixed
}

func NewMarketDataUpdateSessionVolumeFrom(b []byte) MarketDataUpdateSessionVolume {
	return MarketDataUpdateSessionVolume{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateSessionVolume(b []byte) MarketDataUpdateSessionVolume {
	return MarketDataUpdateSessionVolume{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateSessionVolume() *MarketDataUpdateSessionVolume {
	return &MarketDataUpdateSessionVolume{p: message.NewFixed(_MarketDataUpdateSessionVolumeDefault)}
}

func ParseMarketDataUpdateSessionVolume(b []byte) (MarketDataUpdateSessionVolume, error) {
	if len(b) < 4 {
		return MarketDataUpdateSessionVolume{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateSessionVolume(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateSessionVolume{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateSessionVolume{}, message.ErrBaseSizeOverflow
	}
	if size < 24 {
		clone := *NewMarketDataUpdateSessionVolume()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateSessionVolumeDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateSessionVolume) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateSessionVolume) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateSessionVolume) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Volume The total Volume for the session.
func (m MarketDataUpdateSessionVolume) Volume() float64 {
	return m.p.Float64LE(8)
}

// TradingSessionDate
func (m MarketDataUpdateSessionVolume) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(16))
}

// IsFinalSessionVolume
func (m MarketDataUpdateSessionVolume) IsFinalSessionVolume() bool {
	return m.p.Bool(20)
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateSessionVolume) SetSymbolID(value uint32) *MarketDataUpdateSessionVolume {
	m.p.SetUint32LE(4, value)
	return m
}

// SetVolume The total Volume for the session.
func (m *MarketDataUpdateSessionVolume) SetVolume(value float64) *MarketDataUpdateSessionVolume {
	m.p.SetFloat64LE(8, value)
	return m
}

// SetTradingSessionDate
func (m *MarketDataUpdateSessionVolume) SetTradingSessionDate(value DateTime4Byte) *MarketDataUpdateSessionVolume {
	m.p.SetUint32LE(16, uint32(value))
	return m
}

// SetIsFinalSessionVolume
func (m *MarketDataUpdateSessionVolume) SetIsFinalSessionVolume(value bool) *MarketDataUpdateSessionVolume {
	m.p.SetBool(20, value)
	return m
}

func (m *MarketDataUpdateSessionVolume) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDataUpdateSessionVolume) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDataUpdateSessionVolume) Clone() *MarketDataUpdateSessionVolume {
	return &MarketDataUpdateSessionVolume{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDataUpdateSessionVolume) Copy(to MarketDataUpdateSessionVolume) {
	to.SetSymbolID(m.SymbolID())
	to.SetVolume(m.Volume())
	to.SetTradingSessionDate(m.TradingSessionDate())
	to.SetIsFinalSessionVolume(m.IsFinalSessionVolume())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateSessionVolume) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDataUpdateSessionVolume) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 113)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Float64Field("Volume", m.Volume())
	w.Uint32Field("TradingSessionDate", uint32(m.TradingSessionDate()))
	w.BoolField("IsFinalSessionVolume", m.IsFinalSessionVolume())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateSessionVolume) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDataUpdateSessionVolume) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 113 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Volume":
			m.SetVolume(r.Float64())
		case "TradingSessionDate":
			m.SetTradingSessionDate(DateTime4Byte(r.Uint32()))
		case "IsFinalSessionVolume":
			m.SetIsFinalSessionVolume(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
