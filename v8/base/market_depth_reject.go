// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDepthRejectSize = 16

const MarketDepthRejectFixedSize = 104

//     Size        uint16  = MarketDepthRejectSize  (16)
//     Type        uint16  = MARKET_DEPTH_REJECT  (121)
//     BaseSize    uint16  = MarketDepthRejectSize  (16)
//     SymbolID    uint32  = 0
//     RejectText  string  = ""
var _MarketDepthRejectDefault = []byte{16, 0, 121, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size        uint16      = MarketDepthRejectFixedSize  (104)
//     Type        uint16      = MARKET_DEPTH_REJECT  (121)
//     SymbolID    uint32      = 0
//     RejectText  string[96]  = ""
var _MarketDepthRejectFixedDefault = []byte{104, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDepthReject The MarketDepthReject message is sent by the Server to the Client to reject
// a MarketDepthRequest message for any reason.
type MarketDepthReject struct {
	p message.VLS
}

// MarketDepthRejectFixed The MarketDepthReject message is sent by the Server to the Client to reject
// a MarketDepthRequest message for any reason.
type MarketDepthRejectFixed struct {
	p message.Fixed
}

func NewMarketDepthRejectFrom(b []byte) MarketDepthReject {
	return MarketDepthReject{p: message.NewVLS(b)}
}

func WrapMarketDepthReject(b []byte) MarketDepthReject {
	return MarketDepthReject{p: message.WrapVLS(b)}
}

func NewMarketDepthReject() *MarketDepthReject {
	return &MarketDepthReject{p: message.NewVLS(_MarketDepthRejectDefault)}
}

func ParseMarketDepthReject(b []byte) (MarketDepthReject, error) {
	if len(b) < 6 {
		return MarketDepthReject{}, message.ErrShortBuffer
	}
	m := WrapMarketDepthReject(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDepthReject{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return MarketDepthReject{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 16 {
		newSize := len(b) + (16 - baseSize)
		if newSize > message.MaxSize {
			return MarketDepthReject{}, message.ErrOverflow
		}
		clone := MarketDepthReject{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _MarketDepthRejectDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(16 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewMarketDepthRejectFixedFrom(b []byte) MarketDepthRejectFixed {
	return MarketDepthRejectFixed{p: message.NewFixed(b)}
}

func WrapMarketDepthRejectFixed(b []byte) MarketDepthRejectFixed {
	return MarketDepthRejectFixed{p: message.WrapFixed(b)}
}

func NewMarketDepthRejectFixed() *MarketDepthRejectFixed {
	return &MarketDepthRejectFixed{p: message.NewFixed(_MarketDepthRejectFixedDefault)}
}

func ParseMarketDepthRejectFixed(b []byte) (MarketDepthRejectFixed, error) {
	if len(b) < 4 {
		return MarketDepthRejectFixed{}, message.ErrShortBuffer
	}
	m := WrapMarketDepthRejectFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDepthRejectFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDepthRejectFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 104 {
		clone := *NewMarketDepthRejectFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDepthRejectFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDepthReject) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDepthReject) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m MarketDepthReject) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDepthReject) SymbolID() uint32 {
	return m.p.Uint32LE(8)
}

// RejectText Free-form text explaining the reason for the reject.
func (m MarketDepthReject) RejectText() string {
	return m.p.StringVLS(12)
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDepthRejectFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDepthRejectFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDepthRejectFixed) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// RejectText Free-form text explaining the reason for the reject.
func (m MarketDepthRejectFixed) RejectText() string {
	return m.p.StringFixed(8, 96)
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDepthReject) SetSymbolID(value uint32) *MarketDepthReject {
	m.p.SetUint32LE(8, value)
	return m
}

// SetRejectText Free-form text explaining the reason for the reject.
func (m *MarketDepthReject) SetRejectText(value string) *MarketDepthReject {
	m.p.SetStringVLS(12, value)
	return m
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDepthRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDepthRejectFixed) SetSymbolID(value uint32) *MarketDepthRejectFixed {
	m.p.SetUint32LE(4, value)
	return m
}

// SetRejectText Free-form text explaining the reason for the reject.
func (m *MarketDepthRejectFixed) SetRejectText(value string) *MarketDepthRejectFixed {
	m.p.SetStringFixed(8, 96, value)
	return m
}

func (m *MarketDepthReject) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDepthReject) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDepthReject) Clone() *MarketDepthReject {
	return &MarketDepthReject{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *MarketDepthRejectFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDepthRejectFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDepthRejectFixed) Clone() *MarketDepthRejectFixed {
	return &MarketDepthRejectFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDepthReject) Copy(to MarketDepthReject) {
	to.SetSymbolID(m.SymbolID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m MarketDepthReject) CopyTo(to MarketDepthRejectFixed) {
	to.SetSymbolID(m.SymbolID())
	to.SetRejectText(m.RejectText())
}

// Copy
func (m MarketDepthRejectFixed) Copy(to MarketDepthRejectFixed) {
	to.SetSymbolID(m.SymbolID())
	to.SetRejectText(m.RejectText())
}

// CopyTo
func (m MarketDepthRejectFixed) CopyTo(to MarketDepthReject) {
	to.SetSymbolID(m.SymbolID())
	to.SetRejectText(m.RejectText())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthReject) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDepthReject) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 121)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthReject) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDepthReject) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 121 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthRejectFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDepthRejectFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 121)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.StringField("RejectText", m.RejectText())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDepthRejectFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDepthRejectFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 121 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
