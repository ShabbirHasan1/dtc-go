// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateTradeWithUnbundledIndicator2Size = 27

//     Size                     uint16                       = MarketDataUpdateTradeWithUnbundledIndicator2Size  (27)
//     Type                     uint16                       = MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2  (146)
//     SymbolID                 uint32                       = 0
//     Price                    float32                      = 0.000000
//     Volume                   uint32                       = 0
//     DateTime                 DateTimeWithMicrosecondsInt  = 0
//     AtBidOrAsk               AtBidOrAskEnum8              = BID_ASK_UNSET_8  (0)
//     UnbundledTradeIndicator  UnbundledTradeIndicatorEnum  = UNBUNDLED_TRADE_NONE  (0)
//     TradeCondition           TradeConditionEnum           = TRADE_CONDITION_NONE  (0)
var _MarketDataUpdateTradeWithUnbundledIndicator2Default = []byte{27, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateTradeWithUnbundledIndicator2 Sent by the Server to the Client when a trade occurs. This message has
// additional fields as compared to the MarketDataUpdateTrade message and
// also supports microsecond time stamping.
type MarketDataUpdateTradeWithUnbundledIndicator2 struct {
	p message.Fixed
}

func NewMarketDataUpdateTradeWithUnbundledIndicator2From(b []byte) MarketDataUpdateTradeWithUnbundledIndicator2 {
	return MarketDataUpdateTradeWithUnbundledIndicator2{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateTradeWithUnbundledIndicator2(b []byte) MarketDataUpdateTradeWithUnbundledIndicator2 {
	return MarketDataUpdateTradeWithUnbundledIndicator2{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateTradeWithUnbundledIndicator2() *MarketDataUpdateTradeWithUnbundledIndicator2 {
	return &MarketDataUpdateTradeWithUnbundledIndicator2{p: message.NewFixed(_MarketDataUpdateTradeWithUnbundledIndicator2Default)}
}

func ParseMarketDataUpdateTradeWithUnbundledIndicator2(b []byte) (MarketDataUpdateTradeWithUnbundledIndicator2, error) {
	if len(b) < 4 {
		return MarketDataUpdateTradeWithUnbundledIndicator2{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateTradeWithUnbundledIndicator2(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateTradeWithUnbundledIndicator2{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateTradeWithUnbundledIndicator2{}, message.ErrBaseSizeOverflow
	}
	if size < 27 {
		clone := *NewMarketDataUpdateTradeWithUnbundledIndicator2()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateTradeWithUnbundledIndicator2Default[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateTradeWithUnbundledIndicator2) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateTradeWithUnbundledIndicator2) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateTradeWithUnbundledIndicator2) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Price The price of the trade.
func (m MarketDataUpdateTradeWithUnbundledIndicator2) Price() float32 {
	return m.p.Float32LE(8)
}

// Volume The volume of the trade.
func (m MarketDataUpdateTradeWithUnbundledIndicator2) Volume() uint32 {
	return m.p.Uint32LE(12)
}

// DateTime The timestamp of the trade in UNIX microseconds time format.
func (m MarketDataUpdateTradeWithUnbundledIndicator2) DateTime() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(16))
}

// AtBidOrAsk Indicator whether the trade occurred at the Bid or Ask price.
func (m MarketDataUpdateTradeWithUnbundledIndicator2) AtBidOrAsk() AtBidOrAskEnum8 {
	return AtBidOrAskEnum8(m.p.Uint8(24))
}

// UnbundledTradeIndicator This is an optional field.
//
// For symbols on exchanges which support reporting individual trades which
// are part of a larger summary trade, this message field is used. It indicates
// whether the trade is part of a larger summary trrade and reported as an
// unbundled individual trade.
//
// The possible values are listed below.
//
// UNBUNDLED_TRADE_NONE = 0
// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
func (m MarketDataUpdateTradeWithUnbundledIndicator2) UnbundledTradeIndicator() UnbundledTradeIndicatorEnum {
	return UnbundledTradeIndicatorEnum(m.p.Int8(25))
}

// TradeCondition This is an optional field. It usually applies to stock symbols.
//
// This field indicates a special condition which applies to the trade. The
// possible values are listed below.
//
// TRADE_CONDITION_NONE = 0
// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
func (m MarketDataUpdateTradeWithUnbundledIndicator2) TradeCondition() TradeConditionEnum {
	return TradeConditionEnum(m.p.Int8(26))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateTradeWithUnbundledIndicator2) SetSymbolID(value uint32) *MarketDataUpdateTradeWithUnbundledIndicator2 {
	m.p.SetUint32LE(4, value)
	return m
}

// SetPrice The price of the trade.
func (m *MarketDataUpdateTradeWithUnbundledIndicator2) SetPrice(value float32) *MarketDataUpdateTradeWithUnbundledIndicator2 {
	m.p.SetFloat32LE(8, value)
	return m
}

// SetVolume The volume of the trade.
func (m *MarketDataUpdateTradeWithUnbundledIndicator2) SetVolume(value uint32) *MarketDataUpdateTradeWithUnbundledIndicator2 {
	m.p.SetUint32LE(12, value)
	return m
}

// SetDateTime The timestamp of the trade in UNIX microseconds time format.
func (m *MarketDataUpdateTradeWithUnbundledIndicator2) SetDateTime(value DateTimeWithMicrosecondsInt) *MarketDataUpdateTradeWithUnbundledIndicator2 {
	m.p.SetInt64LE(16, int64(value))
	return m
}

// SetAtBidOrAsk Indicator whether the trade occurred at the Bid or Ask price.
func (m *MarketDataUpdateTradeWithUnbundledIndicator2) SetAtBidOrAsk(value AtBidOrAskEnum8) *MarketDataUpdateTradeWithUnbundledIndicator2 {
	m.p.SetUint8(24, uint8(value))
	return m
}

// SetUnbundledTradeIndicator This is an optional field.
//
// For symbols on exchanges which support reporting individual trades which
// are part of a larger summary trade, this message field is used. It indicates
// whether the trade is part of a larger summary trrade and reported as an
// unbundled individual trade.
//
// The possible values are listed below.
//
// UNBUNDLED_TRADE_NONE = 0
// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
func (m *MarketDataUpdateTradeWithUnbundledIndicator2) SetUnbundledTradeIndicator(value UnbundledTradeIndicatorEnum) *MarketDataUpdateTradeWithUnbundledIndicator2 {
	m.p.SetInt8(25, int8(value))
	return m
}

// SetTradeCondition This is an optional field. It usually applies to stock symbols.
//
// This field indicates a special condition which applies to the trade. The
// possible values are listed below.
//
// TRADE_CONDITION_NONE = 0
// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
func (m *MarketDataUpdateTradeWithUnbundledIndicator2) SetTradeCondition(value TradeConditionEnum) *MarketDataUpdateTradeWithUnbundledIndicator2 {
	m.p.SetInt8(26, int8(value))
	return m
}

func (m *MarketDataUpdateTradeWithUnbundledIndicator2) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDataUpdateTradeWithUnbundledIndicator2) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDataUpdateTradeWithUnbundledIndicator2) Clone() *MarketDataUpdateTradeWithUnbundledIndicator2 {
	return &MarketDataUpdateTradeWithUnbundledIndicator2{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDataUpdateTradeWithUnbundledIndicator2) Copy(to MarketDataUpdateTradeWithUnbundledIndicator2) {
	to.SetSymbolID(m.SymbolID())
	to.SetPrice(m.Price())
	to.SetVolume(m.Volume())
	to.SetDateTime(m.DateTime())
	to.SetAtBidOrAsk(m.AtBidOrAsk())
	to.SetUnbundledTradeIndicator(m.UnbundledTradeIndicator())
	to.SetTradeCondition(m.TradeCondition())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateTradeWithUnbundledIndicator2) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDataUpdateTradeWithUnbundledIndicator2) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 146)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Float32Field("Price", m.Price())
	w.Uint32Field("Volume", m.Volume())
	w.Int64Field("DateTime", int64(m.DateTime()))
	w.Uint8Field("AtBidOrAsk", uint8(m.AtBidOrAsk()))
	w.Int8Field("UnbundledTradeIndicator", int8(m.UnbundledTradeIndicator()))
	w.Int8Field("TradeCondition", int8(m.TradeCondition()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateTradeWithUnbundledIndicator2) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDataUpdateTradeWithUnbundledIndicator2) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 146 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Price":
			m.SetPrice(r.Float32())
		case "Volume":
			m.SetVolume(r.Uint32())
		case "DateTime":
			m.SetDateTime(DateTimeWithMicrosecondsInt(r.Int64()))
		case "AtBidOrAsk":
			m.SetAtBidOrAsk(AtBidOrAskEnum8(r.Uint8()))
		case "UnbundledTradeIndicator":
			m.SetUnbundledTradeIndicator(UnbundledTradeIndicatorEnum(r.Int8()))
		case "TradeCondition":
			m.SetTradeCondition(TradeConditionEnum(r.Int8()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
