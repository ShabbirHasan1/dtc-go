// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataUpdateTradingSessionDateSize = 12

//     Size      uint16         = MarketDataUpdateTradingSessionDateSize  (12)
//     Type      uint16         = MARKET_DATA_UPDATE_TRADING_SESSION_DATE  (136)
//     SymbolID  uint32         = 0
//     Date      DateTime4Byte  = 0
var _MarketDataUpdateTradingSessionDateDefault = []byte{12, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateTradingSessionDate Sent by the Server to the Client to update the trading session Date.
type MarketDataUpdateTradingSessionDate struct {
	p message.Fixed
}

func NewMarketDataUpdateTradingSessionDateFrom(b []byte) MarketDataUpdateTradingSessionDate {
	return MarketDataUpdateTradingSessionDate{p: message.NewFixed(b)}
}

func WrapMarketDataUpdateTradingSessionDate(b []byte) MarketDataUpdateTradingSessionDate {
	return MarketDataUpdateTradingSessionDate{p: message.WrapFixed(b)}
}

func NewMarketDataUpdateTradingSessionDate() *MarketDataUpdateTradingSessionDate {
	return &MarketDataUpdateTradingSessionDate{p: message.NewFixed(_MarketDataUpdateTradingSessionDateDefault)}
}

func ParseMarketDataUpdateTradingSessionDate(b []byte) (MarketDataUpdateTradingSessionDate, error) {
	if len(b) < 4 {
		return MarketDataUpdateTradingSessionDate{}, message.ErrShortBuffer
	}
	m := WrapMarketDataUpdateTradingSessionDate(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataUpdateTradingSessionDate{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataUpdateTradingSessionDate{}, message.ErrBaseSizeOverflow
	}
	if size < 12 {
		clone := *NewMarketDataUpdateTradingSessionDate()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataUpdateTradingSessionDateDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataUpdateTradingSessionDate) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataUpdateTradingSessionDate) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateTradingSessionDate) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// Date The date of the current trading session. The time component is not normally
// considered relevant in this case.
func (m MarketDataUpdateTradingSessionDate) Date() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(8))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataUpdateTradingSessionDate) SetSymbolID(value uint32) *MarketDataUpdateTradingSessionDate {
	m.p.SetUint32LE(4, value)
	return m
}

// SetDate The date of the current trading session. The time component is not normally
// considered relevant in this case.
func (m *MarketDataUpdateTradingSessionDate) SetDate(value DateTime4Byte) *MarketDataUpdateTradingSessionDate {
	m.p.SetUint32LE(8, uint32(value))
	return m
}

func (m *MarketDataUpdateTradingSessionDate) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDataUpdateTradingSessionDate) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDataUpdateTradingSessionDate) Clone() *MarketDataUpdateTradingSessionDate {
	return &MarketDataUpdateTradingSessionDate{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDataUpdateTradingSessionDate) Copy(to MarketDataUpdateTradingSessionDate) {
	to.SetSymbolID(m.SymbolID())
	to.SetDate(m.Date())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateTradingSessionDate) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDataUpdateTradingSessionDate) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 136)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Uint32Field("Date", uint32(m.Date()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataUpdateTradingSessionDate) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDataUpdateTradingSessionDate) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 136 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Date":
			m.SetDate(DateTime4Byte(r.Uint32()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
