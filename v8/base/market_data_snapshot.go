// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataSnapshotSize = 144

//     Size                       uint16                    = MarketDataSnapshotSize  (144)
//     Type                       uint16                    = MARKET_DATA_SNAPSHOT  (104)
//     SymbolID                   uint32                    = 0
//     SessionSettlementPrice     float64                   = math.MaxFloat64
//     SessionOpenPrice           float64                   = math.MaxFloat64
//     SessionHighPrice           float64                   = math.MaxFloat64
//     SessionLowPrice            float64                   = math.MaxFloat64
//     SessionVolume              float64                   = math.MaxFloat64
//     SessionNumTrades           uint32                    = 0
//     OpenInterest               uint32                    = 0
//     BidPrice                   float64                   = math.MaxFloat64
//     AskPrice                   float64                   = math.MaxFloat64
//     AskQuantity                float64                   = math.MaxFloat64
//     BidQuantity                float64                   = math.MaxFloat64
//     LastTradePrice             float64                   = math.MaxFloat64
//     LastTradeVolume            float64                   = math.MaxFloat64
//     LastTradeDateTime          DateTimeWithMilliseconds  = 0.000000
//     BidAskDateTime             DateTimeWithMilliseconds  = 0.000000
//     SessionSettlementDateTime  DateTime4Byte             = 0
//     TradingSessionDate         DateTime4Byte             = 0
//     TradingStatus              TradingStatusEnum         = TRADING_STATUS_UNKNOWN  (0)
//     MarketDepthUpdateDateTime  DateTimeWithMilliseconds  = 0.000000
var _MarketDataSnapshotDefault = []byte{144, 0, 104, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataSnapshot The Server sends the MarketDataSnapshot message to the Client immediately
// after a successful MarketDataRequest message has been received from the
// Client and it has indicated to subscribe to the symbol or requested the
// snapshot of data.
//
// Any changes to the data fields within the MarketDataSnapshot message during
// the trading session will be sent by the Server to the Client through the
// corresponding MARKET_DATA_UPDATE_* messages.
//
// It is recommended that the MarketDataSnapshot be sent by the Server at
// the start of a new trading session.
//
// This message can be sent more often, however it is not intended to be
// sent frequently.
//
// This message type does not signify a trade has occurred. It should never
// be interpreted by the Client in that way.
//
// There is no need to send this when there is a new High or Low during the
// trading session. The Server should use the MarketDataUpdateSessionHigh
// or MarketDataUpdateSessionLow messages instead.
type MarketDataSnapshot struct {
	p message.Fixed
}

func NewMarketDataSnapshotFrom(b []byte) MarketDataSnapshot {
	return MarketDataSnapshot{p: message.NewFixed(b)}
}

func WrapMarketDataSnapshot(b []byte) MarketDataSnapshot {
	return MarketDataSnapshot{p: message.WrapFixed(b)}
}

func NewMarketDataSnapshot() *MarketDataSnapshot {
	return &MarketDataSnapshot{p: message.NewFixed(_MarketDataSnapshotDefault)}
}

func ParseMarketDataSnapshot(b []byte) (MarketDataSnapshot, error) {
	if len(b) < 4 {
		return MarketDataSnapshot{}, message.ErrShortBuffer
	}
	m := WrapMarketDataSnapshot(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataSnapshot{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataSnapshot{}, message.ErrBaseSizeOverflow
	}
	if size < 144 {
		clone := *NewMarketDataSnapshot()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataSnapshotDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataSnapshot) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataSnapshot) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataSnapshot) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// SessionSettlementPrice The previous Settlement price when this message is sent before the market
// closes for the trading session. After the market has closed, this is the
// most recent Settlement price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) SessionSettlementPrice() float64 {
	return m.p.Float64LE(8)
}

// SessionOpenPrice The Opening price for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) SessionOpenPrice() float64 {
	return m.p.Float64LE(16)
}

// SessionHighPrice The the High price for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) SessionHighPrice() float64 {
	return m.p.Float64LE(24)
}

// SessionLowPrice The Low price for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) SessionLowPrice() float64 {
	return m.p.Float64LE(32)
}

// SessionVolume The total Volume for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) SessionVolume() float64 {
	return m.p.Float64LE(40)
}

// SessionNumTrades The number of Trades for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) SessionNumTrades() uint32 {
	return m.p.Uint32LE(48)
}

// OpenInterest Contains the Open Interest for futures and options.
//
// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) OpenInterest() uint32 {
	return m.p.Uint32LE(52)
}

// BidPrice The latest best Bid price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) BidPrice() float64 {
	return m.p.Float64LE(56)
}

// AskPrice The latest best Ask price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) AskPrice() float64 {
	return m.p.Float64LE(64)
}

// AskQuantity The quantity of the orders at the Ask price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) AskQuantity() float64 {
	return m.p.Float64LE(72)
}

// BidQuantity The quantity of the orders at the Bid price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) BidQuantity() float64 {
	return m.p.Float64LE(80)
}

// LastTradePrice The most recent last trade price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) LastTradePrice() float64 {
	return m.p.Float64LE(88)
}

// LastTradeVolume The quantity/volume of the most recent last trade.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m MarketDataSnapshot) LastTradeVolume() float64 {
	return m.p.Float64LE(96)
}

// LastTradeDateTime The Date-Time of the last trade.
func (m MarketDataSnapshot) LastTradeDateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(104))
}

// BidAskDateTime The Date-Time of the last Bid and Ask quote data update.
func (m MarketDataSnapshot) BidAskDateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(112))
}

// SessionSettlementDateTime The trading date the Settlement price is for. The time component is not
// normally considered relevant for this field.
//
// This field will be 0 if this field is not available from the data feed.
// This field will be 0 if this field is not available from the data feed.
func (m MarketDataSnapshot) SessionSettlementDateTime() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(120))
}

// TradingSessionDate This is the Date of the trading session that the data contained in this
// snapshot message is for.
//
// The time component is not normally considered relevant for this field.
func (m MarketDataSnapshot) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(m.p.Uint32LE(124))
}

// TradingStatus
func (m MarketDataSnapshot) TradingStatus() TradingStatusEnum {
	return TradingStatusEnum(m.p.Int8(128))
}

// MarketDepthUpdateDateTime
func (m MarketDataSnapshot) MarketDepthUpdateDateTime() DateTimeWithMilliseconds {
	return DateTimeWithMilliseconds(m.p.Float64LE(136))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m *MarketDataSnapshot) SetSymbolID(value uint32) *MarketDataSnapshot {
	m.p.SetUint32LE(4, value)
	return m
}

// SetSessionSettlementPrice The previous Settlement price when this message is sent before the market
// closes for the trading session. After the market has closed, this is the
// most recent Settlement price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetSessionSettlementPrice(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(8, value)
	return m
}

// SetSessionOpenPrice The Opening price for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetSessionOpenPrice(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(16, value)
	return m
}

// SetSessionHighPrice The the High price for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetSessionHighPrice(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(24, value)
	return m
}

// SetSessionLowPrice The Low price for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetSessionLowPrice(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(32, value)
	return m
}

// SetSessionVolume The total Volume for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetSessionVolume(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(40, value)
	return m
}

// SetSessionNumTrades The number of Trades for the trading session.
//
// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetSessionNumTrades(value uint32) *MarketDataSnapshot {
	m.p.SetUint32LE(48, value)
	return m
}

// SetOpenInterest Contains the Open Interest for futures and options.
//
// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetOpenInterest(value uint32) *MarketDataSnapshot {
	m.p.SetUint32LE(52, value)
	return m
}

// SetBidPrice The latest best Bid price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetBidPrice(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(56, value)
	return m
}

// SetAskPrice The latest best Ask price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetAskPrice(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(64, value)
	return m
}

// SetAskQuantity The quantity of the orders at the Ask price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetAskQuantity(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(72, value)
	return m
}

// SetBidQuantity The quantity of the orders at the Bid price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetBidQuantity(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(80, value)
	return m
}

// SetLastTradePrice The most recent last trade price.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetLastTradePrice(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(88, value)
	return m
}

// SetLastTradeVolume The quantity/volume of the most recent last trade.
//
// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
// Refer to Unset Message Fields.
func (m *MarketDataSnapshot) SetLastTradeVolume(value float64) *MarketDataSnapshot {
	m.p.SetFloat64LE(96, value)
	return m
}

// SetLastTradeDateTime The Date-Time of the last trade.
func (m *MarketDataSnapshot) SetLastTradeDateTime(value DateTimeWithMilliseconds) *MarketDataSnapshot {
	m.p.SetFloat64LE(104, float64(value))
	return m
}

// SetBidAskDateTime The Date-Time of the last Bid and Ask quote data update.
func (m *MarketDataSnapshot) SetBidAskDateTime(value DateTimeWithMilliseconds) *MarketDataSnapshot {
	m.p.SetFloat64LE(112, float64(value))
	return m
}

// SetSessionSettlementDateTime The trading date the Settlement price is for. The time component is not
// normally considered relevant for this field.
//
// This field will be 0 if this field is not available from the data feed.
// This field will be 0 if this field is not available from the data feed.
func (m *MarketDataSnapshot) SetSessionSettlementDateTime(value DateTime4Byte) *MarketDataSnapshot {
	m.p.SetUint32LE(120, uint32(value))
	return m
}

// SetTradingSessionDate This is the Date of the trading session that the data contained in this
// snapshot message is for.
//
// The time component is not normally considered relevant for this field.
func (m *MarketDataSnapshot) SetTradingSessionDate(value DateTime4Byte) *MarketDataSnapshot {
	m.p.SetUint32LE(124, uint32(value))
	return m
}

// SetTradingStatus
func (m *MarketDataSnapshot) SetTradingStatus(value TradingStatusEnum) *MarketDataSnapshot {
	m.p.SetInt8(128, int8(value))
	return m
}

// SetMarketDepthUpdateDateTime
func (m *MarketDataSnapshot) SetMarketDepthUpdateDateTime(value DateTimeWithMilliseconds) *MarketDataSnapshot {
	m.p.SetFloat64LE(136, float64(value))
	return m
}

func (m *MarketDataSnapshot) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDataSnapshot) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDataSnapshot) Clone() *MarketDataSnapshot {
	return &MarketDataSnapshot{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDataSnapshot) Copy(to MarketDataSnapshot) {
	to.SetSymbolID(m.SymbolID())
	to.SetSessionSettlementPrice(m.SessionSettlementPrice())
	to.SetSessionOpenPrice(m.SessionOpenPrice())
	to.SetSessionHighPrice(m.SessionHighPrice())
	to.SetSessionLowPrice(m.SessionLowPrice())
	to.SetSessionVolume(m.SessionVolume())
	to.SetSessionNumTrades(m.SessionNumTrades())
	to.SetOpenInterest(m.OpenInterest())
	to.SetBidPrice(m.BidPrice())
	to.SetAskPrice(m.AskPrice())
	to.SetAskQuantity(m.AskQuantity())
	to.SetBidQuantity(m.BidQuantity())
	to.SetLastTradePrice(m.LastTradePrice())
	to.SetLastTradeVolume(m.LastTradeVolume())
	to.SetLastTradeDateTime(m.LastTradeDateTime())
	to.SetBidAskDateTime(m.BidAskDateTime())
	to.SetSessionSettlementDateTime(m.SessionSettlementDateTime())
	to.SetTradingSessionDate(m.TradingSessionDate())
	to.SetTradingStatus(m.TradingStatus())
	to.SetMarketDepthUpdateDateTime(m.MarketDepthUpdateDateTime())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataSnapshot) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDataSnapshot) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 104)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Float64Field("SessionSettlementPrice", m.SessionSettlementPrice())
	w.Float64Field("SessionOpenPrice", m.SessionOpenPrice())
	w.Float64Field("SessionHighPrice", m.SessionHighPrice())
	w.Float64Field("SessionLowPrice", m.SessionLowPrice())
	w.Float64Field("SessionVolume", m.SessionVolume())
	w.Uint32Field("SessionNumTrades", m.SessionNumTrades())
	w.Uint32Field("OpenInterest", m.OpenInterest())
	w.Float64Field("BidPrice", m.BidPrice())
	w.Float64Field("AskPrice", m.AskPrice())
	w.Float64Field("AskQuantity", m.AskQuantity())
	w.Float64Field("BidQuantity", m.BidQuantity())
	w.Float64Field("LastTradePrice", m.LastTradePrice())
	w.Float64Field("LastTradeVolume", m.LastTradeVolume())
	w.Float64Field("LastTradeDateTime", float64(m.LastTradeDateTime()))
	w.Float64Field("BidAskDateTime", float64(m.BidAskDateTime()))
	w.Uint32Field("SessionSettlementDateTime", uint32(m.SessionSettlementDateTime()))
	w.Uint32Field("TradingSessionDate", uint32(m.TradingSessionDate()))
	w.Int8Field("TradingStatus", int8(m.TradingStatus()))
	w.Float64Field("MarketDepthUpdateDateTime", float64(m.MarketDepthUpdateDateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataSnapshot) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDataSnapshot) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 104 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "SessionSettlementPrice":
			m.SetSessionSettlementPrice(r.Float64())
		case "SessionOpenPrice":
			m.SetSessionOpenPrice(r.Float64())
		case "SessionHighPrice":
			m.SetSessionHighPrice(r.Float64())
		case "SessionLowPrice":
			m.SetSessionLowPrice(r.Float64())
		case "SessionVolume":
			m.SetSessionVolume(r.Float64())
		case "SessionNumTrades":
			m.SetSessionNumTrades(r.Uint32())
		case "OpenInterest":
			m.SetOpenInterest(r.Uint32())
		case "BidPrice":
			m.SetBidPrice(r.Float64())
		case "AskPrice":
			m.SetAskPrice(r.Float64())
		case "AskQuantity":
			m.SetAskQuantity(r.Float64())
		case "BidQuantity":
			m.SetBidQuantity(r.Float64())
		case "LastTradePrice":
			m.SetLastTradePrice(r.Float64())
		case "LastTradeVolume":
			m.SetLastTradeVolume(r.Float64())
		case "LastTradeDateTime":
			m.SetLastTradeDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "BidAskDateTime":
			m.SetBidAskDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "SessionSettlementDateTime":
			m.SetSessionSettlementDateTime(DateTime4Byte(r.Uint32()))
		case "TradingSessionDate":
			m.SetTradingSessionDate(DateTime4Byte(r.Uint32()))
		case "TradingStatus":
			m.SetTradingStatus(TradingStatusEnum(r.Int8()))
		case "MarketDepthUpdateDateTime":
			m.SetMarketDepthUpdateDateTime(DateTimeWithMilliseconds(r.Float64()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
