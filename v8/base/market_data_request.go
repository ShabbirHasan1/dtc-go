// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketDataRequestSize = 28

const MarketDataRequestFixedSize = 96

//     Size                                      uint16             = MarketDataRequestSize  (28)
//     Type                                      uint16             = MARKET_DATA_REQUEST  (101)
//     BaseSize                                  uint16             = MarketDataRequestSize  (28)
//     RequestAction                             RequestActionEnum  = SUBSCRIBE  (1)
//     SymbolID                                  uint32             = 0
//     Symbol                                    string             = ""
//     Exchange                                  string             = ""
//     IntervalForSnapshotUpdatesInMilliseconds  uint32             = 0
var _MarketDataRequestDefault = []byte{28, 0, 101, 0, 28, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                                      uint16             = MarketDataRequestFixedSize  (96)
//     Type                                      uint16             = MARKET_DATA_REQUEST  (101)
//     RequestAction                             RequestActionEnum  = SUBSCRIBE  (1)
//     SymbolID                                  uint32             = 0
//     Symbol                                    string[64]         = ""
//     Exchange                                  string[16]         = ""
//     IntervalForSnapshotUpdatesInMilliseconds  uint32             = 0
var _MarketDataRequestFixedDefault = []byte{96, 0, 101, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataRequest The MarketDataRequest message will subscribe to market data for a particular
// Symbol or request a market data snapshot.
//
// The Server can also send market depth data in response to this message
// and not require a MarketDepthRequest.
type MarketDataRequest struct {
	p message.VLS
}

// MarketDataRequestFixed The MarketDataRequest message will subscribe to market data for a particular
// Symbol or request a market data snapshot.
//
// The Server can also send market depth data in response to this message
// and not require a MarketDepthRequest.
type MarketDataRequestFixed struct {
	p message.Fixed
}

func NewMarketDataRequestFrom(b []byte) MarketDataRequest {
	return MarketDataRequest{p: message.NewVLS(b)}
}

func WrapMarketDataRequest(b []byte) MarketDataRequest {
	return MarketDataRequest{p: message.WrapVLS(b)}
}

func NewMarketDataRequest() *MarketDataRequest {
	return &MarketDataRequest{p: message.NewVLS(_MarketDataRequestDefault)}
}

func ParseMarketDataRequest(b []byte) (MarketDataRequest, error) {
	if len(b) < 6 {
		return MarketDataRequest{}, message.ErrShortBuffer
	}
	m := WrapMarketDataRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return MarketDataRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 28 {
		newSize := len(b) + (28 - baseSize)
		if newSize > message.MaxSize {
			return MarketDataRequest{}, message.ErrOverflow
		}
		clone := MarketDataRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _MarketDataRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(28 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(16)
			if offset > 0 {
				clone.p.SetUint16LE(16, offset+shift)
			}
			offset = clone.p.Uint16LE(20)
			if offset > 0 {
				clone.p.SetUint16LE(20, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewMarketDataRequestFixedFrom(b []byte) MarketDataRequestFixed {
	return MarketDataRequestFixed{p: message.NewFixed(b)}
}

func WrapMarketDataRequestFixed(b []byte) MarketDataRequestFixed {
	return MarketDataRequestFixed{p: message.WrapFixed(b)}
}

func NewMarketDataRequestFixed() *MarketDataRequestFixed {
	return &MarketDataRequestFixed{p: message.NewFixed(_MarketDataRequestFixedDefault)}
}

func ParseMarketDataRequestFixed(b []byte) (MarketDataRequestFixed, error) {
	if len(b) < 4 {
		return MarketDataRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapMarketDataRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketDataRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketDataRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 96 {
		clone := *NewMarketDataRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketDataRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m MarketDataRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestAction This needs to be set to SUBSCRIBE to subscribe to market data for the
// Symbol from the Server. The Server will respond with an initial MarketDataSnapshot
// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
//
// To unsubscribe, use UNSUBSCRIBE.
//
// To request only a MarketDataSnapshot message, set this to SNAPSHOT.
func (m MarketDataRequest) RequestAction() RequestActionEnum {
	return RequestActionEnum(m.p.Int32LE(8))
}

// SymbolID This is the identifier which will be used in all of the market data response
// messages. This identifier is used so that the Symbol and Exchange do not
// have to be passed back in response messages from the Server. This makes
// the market data feed bandwidth efficient.
//
// If the Server receives a MarketDataRequest for a Symbol and Exchange to
// subscribe to data for, that is currently subscribed to and this SymbolID
// is different, then the Server needs to reject it.
func (m MarketDataRequest) SymbolID() uint32 {
	return m.p.Uint32LE(12)
}

// Symbol The Symbol that market data is requested for. Not set when unsubscribing.
// The Symbol that market data is requested for. Not set when unsubscribing.
func (m MarketDataRequest) Symbol() string {
	return m.p.StringVLS(16)
}

// Exchange Optional Exchange. Not set when unsubscribing.
func (m MarketDataRequest) Exchange() string {
	return m.p.StringVLS(20)
}

// IntervalForSnapshotUpdatesInMilliseconds
func (m MarketDataRequest) IntervalForSnapshotUpdatesInMilliseconds() uint32 {
	return m.p.Uint32LE(24)
}

// Size The standard message size field. Automatically set by constructor.
func (m MarketDataRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m MarketDataRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestAction This needs to be set to SUBSCRIBE to subscribe to market data for the
// Symbol from the Server. The Server will respond with an initial MarketDataSnapshot
// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
//
// To unsubscribe, use UNSUBSCRIBE.
//
// To request only a MarketDataSnapshot message, set this to SNAPSHOT.
func (m MarketDataRequestFixed) RequestAction() RequestActionEnum {
	return RequestActionEnum(m.p.Int32LE(4))
}

// SymbolID This is the identifier which will be used in all of the market data response
// messages. This identifier is used so that the Symbol and Exchange do not
// have to be passed back in response messages from the Server. This makes
// the market data feed bandwidth efficient.
//
// If the Server receives a MarketDataRequest for a Symbol and Exchange to
// subscribe to data for, that is currently subscribed to and this SymbolID
// is different, then the Server needs to reject it.
func (m MarketDataRequestFixed) SymbolID() uint32 {
	return m.p.Uint32LE(8)
}

// Symbol The Symbol that market data is requested for. Not set when unsubscribing.
// The Symbol that market data is requested for. Not set when unsubscribing.
func (m MarketDataRequestFixed) Symbol() string {
	return m.p.StringFixed(12, 64)
}

// Exchange Optional Exchange. Not set when unsubscribing.
func (m MarketDataRequestFixed) Exchange() string {
	return m.p.StringFixed(76, 16)
}

// IntervalForSnapshotUpdatesInMilliseconds
func (m MarketDataRequestFixed) IntervalForSnapshotUpdatesInMilliseconds() uint32 {
	return m.p.Uint32LE(92)
}

// SetRequestAction This needs to be set to SUBSCRIBE to subscribe to market data for the
// Symbol from the Server. The Server will respond with an initial MarketDataSnapshot
// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
//
// To unsubscribe, use UNSUBSCRIBE.
//
// To request only a MarketDataSnapshot message, set this to SNAPSHOT.
func (m *MarketDataRequest) SetRequestAction(value RequestActionEnum) *MarketDataRequest {
	m.p.SetInt32LE(8, int32(value))
	return m
}

// SetSymbolID This is the identifier which will be used in all of the market data response
// messages. This identifier is used so that the Symbol and Exchange do not
// have to be passed back in response messages from the Server. This makes
// the market data feed bandwidth efficient.
//
// If the Server receives a MarketDataRequest for a Symbol and Exchange to
// subscribe to data for, that is currently subscribed to and this SymbolID
// is different, then the Server needs to reject it.
func (m *MarketDataRequest) SetSymbolID(value uint32) *MarketDataRequest {
	m.p.SetUint32LE(12, value)
	return m
}

// SetSymbol The Symbol that market data is requested for. Not set when unsubscribing.
// The Symbol that market data is requested for. Not set when unsubscribing.
func (m *MarketDataRequest) SetSymbol(value string) *MarketDataRequest {
	m.p.SetStringVLS(16, value)
	return m
}

// SetExchange Optional Exchange. Not set when unsubscribing.
func (m *MarketDataRequest) SetExchange(value string) *MarketDataRequest {
	m.p.SetStringVLS(20, value)
	return m
}

// SetIntervalForSnapshotUpdatesInMilliseconds
func (m *MarketDataRequest) SetIntervalForSnapshotUpdatesInMilliseconds(value uint32) *MarketDataRequest {
	m.p.SetUint32LE(24, value)
	return m
}

// SetRequestAction This needs to be set to SUBSCRIBE to subscribe to market data for the
// Symbol from the Server. The Server will respond with an initial MarketDataSnapshot
// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
//
// To unsubscribe, use UNSUBSCRIBE.
//
// To request only a MarketDataSnapshot message, set this to SNAPSHOT.
func (m *MarketDataRequestFixed) SetRequestAction(value RequestActionEnum) *MarketDataRequestFixed {
	m.p.SetInt32LE(4, int32(value))
	return m
}

// SetSymbolID This is the identifier which will be used in all of the market data response
// messages. This identifier is used so that the Symbol and Exchange do not
// have to be passed back in response messages from the Server. This makes
// the market data feed bandwidth efficient.
//
// If the Server receives a MarketDataRequest for a Symbol and Exchange to
// subscribe to data for, that is currently subscribed to and this SymbolID
// is different, then the Server needs to reject it.
func (m *MarketDataRequestFixed) SetSymbolID(value uint32) *MarketDataRequestFixed {
	m.p.SetUint32LE(8, value)
	return m
}

// SetSymbol The Symbol that market data is requested for. Not set when unsubscribing.
// The Symbol that market data is requested for. Not set when unsubscribing.
func (m *MarketDataRequestFixed) SetSymbol(value string) *MarketDataRequestFixed {
	m.p.SetStringFixed(12, 64, value)
	return m
}

// SetExchange Optional Exchange. Not set when unsubscribing.
func (m *MarketDataRequestFixed) SetExchange(value string) *MarketDataRequestFixed {
	m.p.SetStringFixed(76, 16, value)
	return m
}

// SetIntervalForSnapshotUpdatesInMilliseconds
func (m *MarketDataRequestFixed) SetIntervalForSnapshotUpdatesInMilliseconds(value uint32) *MarketDataRequestFixed {
	m.p.SetUint32LE(92, value)
	return m
}

func (m *MarketDataRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDataRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDataRequest) Clone() *MarketDataRequest {
	return &MarketDataRequest{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *MarketDataRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketDataRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketDataRequestFixed) Clone() *MarketDataRequestFixed {
	return &MarketDataRequestFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketDataRequest) Copy(to MarketDataRequest) {
	to.SetRequestAction(m.RequestAction())
	to.SetSymbolID(m.SymbolID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetIntervalForSnapshotUpdatesInMilliseconds(m.IntervalForSnapshotUpdatesInMilliseconds())
}

// CopyTo
func (m MarketDataRequest) CopyTo(to MarketDataRequestFixed) {
	to.SetRequestAction(m.RequestAction())
	to.SetSymbolID(m.SymbolID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetIntervalForSnapshotUpdatesInMilliseconds(m.IntervalForSnapshotUpdatesInMilliseconds())
}

// Copy
func (m MarketDataRequestFixed) Copy(to MarketDataRequestFixed) {
	to.SetRequestAction(m.RequestAction())
	to.SetSymbolID(m.SymbolID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetIntervalForSnapshotUpdatesInMilliseconds(m.IntervalForSnapshotUpdatesInMilliseconds())
}

// CopyTo
func (m MarketDataRequestFixed) CopyTo(to MarketDataRequest) {
	to.SetRequestAction(m.RequestAction())
	to.SetSymbolID(m.SymbolID())
	to.SetSymbol(m.Symbol())
	to.SetExchange(m.Exchange())
	to.SetIntervalForSnapshotUpdatesInMilliseconds(m.IntervalForSnapshotUpdatesInMilliseconds())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataRequest) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDataRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 101)
	w.Int32Field("RequestAction", int32(m.RequestAction()))
	w.Uint32Field("SymbolID", m.SymbolID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.Uint32Field("IntervalForSnapshotUpdatesInMilliseconds", m.IntervalForSnapshotUpdatesInMilliseconds())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataRequest) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDataRequest) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 101 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestAction":
			m.SetRequestAction(RequestActionEnum(r.Int32()))
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "IntervalForSnapshotUpdatesInMilliseconds":
			m.SetIntervalForSnapshotUpdatesInMilliseconds(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataRequestFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketDataRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 101)
	w.Int32Field("RequestAction", int32(m.RequestAction()))
	w.Uint32Field("SymbolID", m.SymbolID())
	w.StringField("Symbol", m.Symbol())
	w.StringField("Exchange", m.Exchange())
	w.Uint32Field("IntervalForSnapshotUpdatesInMilliseconds", m.IntervalForSnapshotUpdatesInMilliseconds())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketDataRequestFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketDataRequestFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 101 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestAction":
			m.SetRequestAction(RequestActionEnum(r.Int32()))
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "Symbol":
			m.SetSymbol(r.String())
		case "Exchange":
			m.SetExchange(r.String())
		case "IntervalForSnapshotUpdatesInMilliseconds":
			m.SetIntervalForSnapshotUpdatesInMilliseconds(r.Uint32())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
