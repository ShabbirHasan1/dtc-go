// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalOrderFillsRequestSize = 32

const HistoricalOrderFillsRequestFixedSize = 88

//     Size           uint16    = HistoricalOrderFillsRequestSize  (32)
//     Type           uint16    = HISTORICAL_ORDER_FILLS_REQUEST  (303)
//     BaseSize       uint16    = HistoricalOrderFillsRequestSize  (32)
//     RequestID      int32     = 0
//     ServerOrderID  string    = ""
//     NumberOfDays   int32     = 0
//     TradeAccount   string    = ""
//     StartDateTime  DateTime  = 0
var _HistoricalOrderFillsRequestDefault = []byte{32, 0, 47, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size           uint16      = HistoricalOrderFillsRequestFixedSize  (88)
//     Type           uint16      = HISTORICAL_ORDER_FILLS_REQUEST  (303)
//     RequestID      int32       = 0
//     ServerOrderID  string[32]  = ""
//     NumberOfDays   int32       = 0
//     TradeAccount   string[32]  = ""
//     StartDateTime  DateTime    = 0
var _HistoricalOrderFillsRequestFixedDefault = []byte{88, 0, 47, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// HistoricalOrderFillsRequest This is a message from the Client to the Server to request order fills/executions
// for an order or orders.
type HistoricalOrderFillsRequest struct {
	p message.VLS
}

// HistoricalOrderFillsRequestFixed This is a message from the Client to the Server to request order fills/executions
// for an order or orders.
type HistoricalOrderFillsRequestFixed struct {
	p message.Fixed
}

func NewHistoricalOrderFillsRequestFrom(b []byte) HistoricalOrderFillsRequest {
	return HistoricalOrderFillsRequest{p: message.NewVLS(b)}
}

func WrapHistoricalOrderFillsRequest(b []byte) HistoricalOrderFillsRequest {
	return HistoricalOrderFillsRequest{p: message.WrapVLS(b)}
}

func NewHistoricalOrderFillsRequest() *HistoricalOrderFillsRequest {
	return &HistoricalOrderFillsRequest{p: message.NewVLS(_HistoricalOrderFillsRequestDefault)}
}

func ParseHistoricalOrderFillsRequest(b []byte) (HistoricalOrderFillsRequest, error) {
	if len(b) < 6 {
		return HistoricalOrderFillsRequest{}, message.ErrShortBuffer
	}
	m := WrapHistoricalOrderFillsRequest(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalOrderFillsRequest{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalOrderFillsRequest{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 32 {
		newSize := len(b) + (32 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalOrderFillsRequest{}, message.ErrOverflow
		}
		clone := HistoricalOrderFillsRequest{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalOrderFillsRequestDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(32 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
			offset = clone.p.Uint16LE(20)
			if offset > 0 {
				clone.p.SetUint16LE(20, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalOrderFillsRequestFixedFrom(b []byte) HistoricalOrderFillsRequestFixed {
	return HistoricalOrderFillsRequestFixed{p: message.NewFixed(b)}
}

func WrapHistoricalOrderFillsRequestFixed(b []byte) HistoricalOrderFillsRequestFixed {
	return HistoricalOrderFillsRequestFixed{p: message.WrapFixed(b)}
}

func NewHistoricalOrderFillsRequestFixed() *HistoricalOrderFillsRequestFixed {
	return &HistoricalOrderFillsRequestFixed{p: message.NewFixed(_HistoricalOrderFillsRequestFixedDefault)}
}

func ParseHistoricalOrderFillsRequestFixed(b []byte) (HistoricalOrderFillsRequestFixed, error) {
	if len(b) < 4 {
		return HistoricalOrderFillsRequestFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalOrderFillsRequestFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalOrderFillsRequestFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalOrderFillsRequestFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 88 {
		clone := *NewHistoricalOrderFillsRequestFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalOrderFillsRequestFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalOrderFillsRequest) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalOrderFillsRequest) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalOrderFillsRequest) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID A unique request identifier. The Server will return the same identifier
// in the response.
func (m HistoricalOrderFillsRequest) RequestID() int32 {
	return m.p.Int32LE(8)
}

// ServerOrderID Leave empty if want all order fills. Otherwise, request order fills for
// given Server Order identifier.
func (m HistoricalOrderFillsRequest) ServerOrderID() string {
	return m.p.StringVLS(12)
}

// NumberOfDays The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The NumberOfDays field specifies to the Server to return order fills counting
// from the current day back by the specified number of days.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m HistoricalOrderFillsRequest) NumberOfDays() int32 {
	return m.p.Int32LE(16)
}

// TradeAccount This specifies the particular Trade Account to request order fills for.
// This specifies the particular Trade Account to request order fills for.
func (m HistoricalOrderFillsRequest) TradeAccount() string {
	return m.p.StringVLS(20)
}

// StartDateTime The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The StartDateTime field specifies to the Server to return order fills
// starting with date time specified.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m HistoricalOrderFillsRequest) StartDateTime() DateTime {
	return DateTime(m.p.Int64LE(24))
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalOrderFillsRequestFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalOrderFillsRequestFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID A unique request identifier. The Server will return the same identifier
// in the response.
func (m HistoricalOrderFillsRequestFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// ServerOrderID Leave empty if want all order fills. Otherwise, request order fills for
// given Server Order identifier.
func (m HistoricalOrderFillsRequestFixed) ServerOrderID() string {
	return m.p.StringFixed(8, 32)
}

// NumberOfDays The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The NumberOfDays field specifies to the Server to return order fills counting
// from the current day back by the specified number of days.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m HistoricalOrderFillsRequestFixed) NumberOfDays() int32 {
	return m.p.Int32LE(40)
}

// TradeAccount This specifies the particular Trade Account to request order fills for.
// This specifies the particular Trade Account to request order fills for.
func (m HistoricalOrderFillsRequestFixed) TradeAccount() string {
	return m.p.StringFixed(44, 32)
}

// StartDateTime The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The StartDateTime field specifies to the Server to return order fills
// starting with date time specified.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m HistoricalOrderFillsRequestFixed) StartDateTime() DateTime {
	return DateTime(m.p.Int64LE(80))
}

// SetRequestID A unique request identifier. The Server will return the same identifier
// in the response.
func (m *HistoricalOrderFillsRequest) SetRequestID(value int32) *HistoricalOrderFillsRequest {
	m.p.SetInt32LE(8, value)
	return m
}

// SetServerOrderID Leave empty if want all order fills. Otherwise, request order fills for
// given Server Order identifier.
func (m *HistoricalOrderFillsRequest) SetServerOrderID(value string) *HistoricalOrderFillsRequest {
	m.p.SetStringVLS(12, value)
	return m
}

// SetNumberOfDays The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The NumberOfDays field specifies to the Server to return order fills counting
// from the current day back by the specified number of days.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m *HistoricalOrderFillsRequest) SetNumberOfDays(value int32) *HistoricalOrderFillsRequest {
	m.p.SetInt32LE(16, value)
	return m
}

// SetTradeAccount This specifies the particular Trade Account to request order fills for.
// This specifies the particular Trade Account to request order fills for.
func (m *HistoricalOrderFillsRequest) SetTradeAccount(value string) *HistoricalOrderFillsRequest {
	m.p.SetStringVLS(20, value)
	return m
}

// SetStartDateTime The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The StartDateTime field specifies to the Server to return order fills
// starting with date time specified.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m *HistoricalOrderFillsRequest) SetStartDateTime(value DateTime) *HistoricalOrderFillsRequest {
	m.p.SetInt64LE(24, int64(value))
	return m
}

// SetRequestID A unique request identifier. The Server will return the same identifier
// in the response.
func (m *HistoricalOrderFillsRequestFixed) SetRequestID(value int32) *HistoricalOrderFillsRequestFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetServerOrderID Leave empty if want all order fills. Otherwise, request order fills for
// given Server Order identifier.
func (m *HistoricalOrderFillsRequestFixed) SetServerOrderID(value string) *HistoricalOrderFillsRequestFixed {
	m.p.SetStringFixed(8, 32, value)
	return m
}

// SetNumberOfDays The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The NumberOfDays field specifies to the Server to return order fills counting
// from the current day back by the specified number of days.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m *HistoricalOrderFillsRequestFixed) SetNumberOfDays(value int32) *HistoricalOrderFillsRequestFixed {
	m.p.SetInt32LE(40, value)
	return m
}

// SetTradeAccount This specifies the particular Trade Account to request order fills for.
// This specifies the particular Trade Account to request order fills for.
func (m *HistoricalOrderFillsRequestFixed) SetTradeAccount(value string) *HistoricalOrderFillsRequestFixed {
	m.p.SetStringFixed(44, 32, value)
	return m
}

// SetStartDateTime The NumberOfDays field is ignored by the Server when StartDateTime is
// set.
//
// The StartDateTime field specifies to the Server to return order fills
// starting with date time specified.
//
// If NumberOfDays and StartDateTime are both not set or 0, the Server will
// return all historical order fills available.
func (m *HistoricalOrderFillsRequestFixed) SetStartDateTime(value DateTime) *HistoricalOrderFillsRequestFixed {
	m.p.SetInt64LE(80, int64(value))
	return m
}

func (m *HistoricalOrderFillsRequest) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalOrderFillsRequest) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalOrderFillsRequest) Clone() *HistoricalOrderFillsRequest {
	return &HistoricalOrderFillsRequest{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *HistoricalOrderFillsRequestFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalOrderFillsRequestFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalOrderFillsRequestFixed) Clone() *HistoricalOrderFillsRequestFixed {
	return &HistoricalOrderFillsRequestFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m HistoricalOrderFillsRequest) Copy(to HistoricalOrderFillsRequest) {
	to.SetRequestID(m.RequestID())
	to.SetServerOrderID(m.ServerOrderID())
	to.SetNumberOfDays(m.NumberOfDays())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
}

// CopyTo
func (m HistoricalOrderFillsRequest) CopyTo(to HistoricalOrderFillsRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetServerOrderID(m.ServerOrderID())
	to.SetNumberOfDays(m.NumberOfDays())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
}

// Copy
func (m HistoricalOrderFillsRequestFixed) Copy(to HistoricalOrderFillsRequestFixed) {
	to.SetRequestID(m.RequestID())
	to.SetServerOrderID(m.ServerOrderID())
	to.SetNumberOfDays(m.NumberOfDays())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
}

// CopyTo
func (m HistoricalOrderFillsRequestFixed) CopyTo(to HistoricalOrderFillsRequest) {
	to.SetRequestID(m.RequestID())
	to.SetServerOrderID(m.ServerOrderID())
	to.SetNumberOfDays(m.NumberOfDays())
	to.SetTradeAccount(m.TradeAccount())
	to.SetStartDateTime(m.StartDateTime())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsRequest) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalOrderFillsRequest) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 303)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("ServerOrderID", m.ServerOrderID())
	w.Int32Field("NumberOfDays", m.NumberOfDays())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsRequest) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalOrderFillsRequest) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 303 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "ServerOrderID":
			m.SetServerOrderID(r.String())
		case "NumberOfDays":
			m.SetNumberOfDays(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "StartDateTime":
			m.SetStartDateTime(DateTime(r.Int64()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsRequestFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalOrderFillsRequestFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 303)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("ServerOrderID", m.ServerOrderID())
	w.Int32Field("NumberOfDays", m.NumberOfDays())
	w.StringField("TradeAccount", m.TradeAccount())
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalOrderFillsRequestFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalOrderFillsRequestFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 303 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "ServerOrderID":
			m.SetServerOrderID(r.String())
		case "NumberOfDays":
			m.SetNumberOfDays(r.Int32())
		case "TradeAccount":
			m.SetTradeAccount(r.String())
		case "StartDateTime":
			m.SetStartDateTime(DateTime(r.Int64()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
