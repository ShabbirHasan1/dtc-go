// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalPriceDataRecordResponseSize = 88

//     Size           uint16                       = HistoricalPriceDataRecordResponseSize  (88)
//     Type           uint16                       = HISTORICAL_PRICE_DATA_RECORD_RESPONSE  (803)
//     RequestID      int32                        = 0
//     StartDateTime  DateTimeWithMicrosecondsInt  = 0
//     OpenPrice      float64                      = 0.000000
//     HighPrice      float64                      = 0.000000
//     LowPrice       float64                      = 0.000000
//     LastPrice      float64                      = 0.000000
//     Volume         float64                      = 0.000000
//     BidVolume      float64                      = 0.000000
//     AskVolume      float64                      = 0.000000
//     IsFinalRecord  bool                         = false
var _HistoricalPriceDataRecordResponseDefault = []byte{88, 0, 35, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// HistoricalPriceDataRecordResponse The HistoricalPriceDataTickRecordResponse message is used when the RecordInterval
// field in a historical data request message is set to a value greater than
// INTERVAL_TICK. For example, if the RecordInterval is INTERVAL_1_MINUTE,
// then a message of this type will contain data for a 1 minute timeframe
// with a start time specified by the StartDateTime field.
//
// Even when RecordInterval is INTERVAL_TICK, the HistoricalPriceDataTickRecordResponse
// message can still be used instead of HistoricalPriceDataTickRecordResponse.
// message can still be used instead of HistoricalPriceDataTickRecordResponse.
//
// This message can be part of a compressed series of messages of this same
// type, if the Client requested compression be used.
type HistoricalPriceDataRecordResponse struct {
	p message.Fixed
}

func NewHistoricalPriceDataRecordResponseFrom(b []byte) HistoricalPriceDataRecordResponse {
	return HistoricalPriceDataRecordResponse{p: message.NewFixed(b)}
}

func WrapHistoricalPriceDataRecordResponse(b []byte) HistoricalPriceDataRecordResponse {
	return HistoricalPriceDataRecordResponse{p: message.WrapFixed(b)}
}

func NewHistoricalPriceDataRecordResponse() *HistoricalPriceDataRecordResponse {
	return &HistoricalPriceDataRecordResponse{p: message.NewFixed(_HistoricalPriceDataRecordResponseDefault)}
}

func ParseHistoricalPriceDataRecordResponse(b []byte) (HistoricalPriceDataRecordResponse, error) {
	if len(b) < 4 {
		return HistoricalPriceDataRecordResponse{}, message.ErrShortBuffer
	}
	m := WrapHistoricalPriceDataRecordResponse(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalPriceDataRecordResponse{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalPriceDataRecordResponse{}, message.ErrBaseSizeOverflow
	}
	if size < 88 {
		clone := *NewHistoricalPriceDataRecordResponse()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalPriceDataRecordResponseDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalPriceDataRecordResponse) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalPriceDataRecordResponse) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m HistoricalPriceDataRecordResponse) RequestID() int32 {
	return m.p.Int32LE(4)
}

// StartDateTime The starting Date-Time in UTC of the data record in this message.
//
// It is part of the DTC Protocol specification that this must be the starting
// Date-Time of the data record.
func (m HistoricalPriceDataRecordResponse) StartDateTime() DateTimeWithMicrosecondsInt {
	return DateTimeWithMicrosecondsInt(m.p.Int64LE(8))
}

// OpenPrice The Open price of the data record in this message.
func (m HistoricalPriceDataRecordResponse) OpenPrice() float64 {
	return m.p.Float64LE(16)
}

// HighPrice The High price of the data record in this message.
//
// In the case where NumTrades is 1, the HighPrice field can be the Ask/Offer
// price at the time of the trade. In this case the OpenPrice field needs
// to be 0 in this case.
func (m HistoricalPriceDataRecordResponse) HighPrice() float64 {
	return m.p.Float64LE(24)
}

// LowPrice The Low price of the data record in this message.
//
// In the case where NumTrades is 1, the LowPrice field can be the Bid price
// at the time of the trade. In this case the OpenPrice field needs to be
// 0 in this case.
func (m HistoricalPriceDataRecordResponse) LowPrice() float64 {
	return m.p.Float64LE(32)
}

// LastPrice The Last price of the data record in this message.
func (m HistoricalPriceDataRecordResponse) LastPrice() float64 {
	return m.p.Float64LE(40)
}

// Volume The Volume of this data record of this message.
//
// (union)
func (m HistoricalPriceDataRecordResponse) Volume() float64 {
	return m.p.Float64LE(48)
}

func (m HistoricalPriceDataRecordResponse) OpenInterest() uint32 {
	return m.p.Uint32LE(56)
}

// NumTrades The Open Interest or Number of Trades of this data record in this message.
// The Open Interest or Number of Trades of this data record in this message.
func (m HistoricalPriceDataRecordResponse) NumTrades() uint32 {
	return m.p.Uint32LE(56)
}

// BidVolume The volume of trades at the bid price or lower of the data record in this
// message.
//
// In the case where this message consists of a single trade, if the trade
// was at the Ask, then BidVolume must be zero.
func (m HistoricalPriceDataRecordResponse) BidVolume() float64 {
	return m.p.Float64LE(64)
}

// AskVolume The volume of trades at the ask price or higher of the data record in
// this message.
//
// In the case where this message consists of a single trade, if the trade
// was at the Bid, then AskVolume must be zero.
func (m HistoricalPriceDataRecordResponse) AskVolume() float64 {
	return m.p.Float64LE(72)
}

// IsFinalRecord Set to 1 to indicate final record in response to the historical price
// data request.
//
// The default is 0 meaning there are more records to follow.
func (m HistoricalPriceDataRecordResponse) IsFinalRecord() bool {
	return m.p.Bool(80)
}

// SetRequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m *HistoricalPriceDataRecordResponse) SetRequestID(value int32) *HistoricalPriceDataRecordResponse {
	m.p.SetInt32LE(4, value)
	return m
}

// SetStartDateTime The starting Date-Time in UTC of the data record in this message.
//
// It is part of the DTC Protocol specification that this must be the starting
// Date-Time of the data record.
func (m *HistoricalPriceDataRecordResponse) SetStartDateTime(value DateTimeWithMicrosecondsInt) *HistoricalPriceDataRecordResponse {
	m.p.SetInt64LE(8, int64(value))
	return m
}

// SetOpenPrice The Open price of the data record in this message.
func (m *HistoricalPriceDataRecordResponse) SetOpenPrice(value float64) *HistoricalPriceDataRecordResponse {
	m.p.SetFloat64LE(16, value)
	return m
}

// SetHighPrice The High price of the data record in this message.
//
// In the case where NumTrades is 1, the HighPrice field can be the Ask/Offer
// price at the time of the trade. In this case the OpenPrice field needs
// to be 0 in this case.
func (m *HistoricalPriceDataRecordResponse) SetHighPrice(value float64) *HistoricalPriceDataRecordResponse {
	m.p.SetFloat64LE(24, value)
	return m
}

// SetLowPrice The Low price of the data record in this message.
//
// In the case where NumTrades is 1, the LowPrice field can be the Bid price
// at the time of the trade. In this case the OpenPrice field needs to be
// 0 in this case.
func (m *HistoricalPriceDataRecordResponse) SetLowPrice(value float64) *HistoricalPriceDataRecordResponse {
	m.p.SetFloat64LE(32, value)
	return m
}

// SetLastPrice The Last price of the data record in this message.
func (m *HistoricalPriceDataRecordResponse) SetLastPrice(value float64) *HistoricalPriceDataRecordResponse {
	m.p.SetFloat64LE(40, value)
	return m
}

// SetVolume The Volume of this data record of this message.
//
// (union)
func (m *HistoricalPriceDataRecordResponse) SetVolume(value float64) *HistoricalPriceDataRecordResponse {
	m.p.SetFloat64LE(48, value)
	return m
}

func (m *HistoricalPriceDataRecordResponse) SetOpenInterest(value uint32) *HistoricalPriceDataRecordResponse {
	m.p.SetUint32LE(56, value)
	return m
}

// SetNumTrades The Open Interest or Number of Trades of this data record in this message.
// The Open Interest or Number of Trades of this data record in this message.
func (m *HistoricalPriceDataRecordResponse) SetNumTrades(value uint32) *HistoricalPriceDataRecordResponse {
	m.p.SetUint32LE(56, value)
	return m
}

// SetBidVolume The volume of trades at the bid price or lower of the data record in this
// message.
//
// In the case where this message consists of a single trade, if the trade
// was at the Ask, then BidVolume must be zero.
func (m *HistoricalPriceDataRecordResponse) SetBidVolume(value float64) *HistoricalPriceDataRecordResponse {
	m.p.SetFloat64LE(64, value)
	return m
}

// SetAskVolume The volume of trades at the ask price or higher of the data record in
// this message.
//
// In the case where this message consists of a single trade, if the trade
// was at the Bid, then AskVolume must be zero.
func (m *HistoricalPriceDataRecordResponse) SetAskVolume(value float64) *HistoricalPriceDataRecordResponse {
	m.p.SetFloat64LE(72, value)
	return m
}

// SetIsFinalRecord Set to 1 to indicate final record in response to the historical price
// data request.
//
// The default is 0 meaning there are more records to follow.
func (m *HistoricalPriceDataRecordResponse) SetIsFinalRecord(value bool) *HistoricalPriceDataRecordResponse {
	m.p.SetBool(80, value)
	return m
}

func (m *HistoricalPriceDataRecordResponse) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalPriceDataRecordResponse) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalPriceDataRecordResponse) Clone() *HistoricalPriceDataRecordResponse {
	return &HistoricalPriceDataRecordResponse{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m HistoricalPriceDataRecordResponse) Copy(to HistoricalPriceDataRecordResponse) {
	to.SetRequestID(m.RequestID())
	to.SetStartDateTime(m.StartDateTime())
	to.SetOpenPrice(m.OpenPrice())
	to.SetHighPrice(m.HighPrice())
	to.SetLowPrice(m.LowPrice())
	to.SetLastPrice(m.LastPrice())
	to.SetVolume(m.Volume())
	to.SetOpenInterest(m.OpenInterest())
	to.SetNumTrades(m.NumTrades())
	to.SetBidVolume(m.BidVolume())
	to.SetAskVolume(m.AskVolume())
	to.SetIsFinalRecord(m.IsFinalRecord())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRecordResponse) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalPriceDataRecordResponse) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 803)
	w.Int32Field("RequestID", m.RequestID())
	w.Int64Field("StartDateTime", int64(m.StartDateTime()))
	w.Float64Field("OpenPrice", m.OpenPrice())
	w.Float64Field("HighPrice", m.HighPrice())
	w.Float64Field("LowPrice", m.LowPrice())
	w.Float64Field("LastPrice", m.LastPrice())
	w.Float64Field("Volume", m.Volume())
	w.Uint32Field("OpenInterest", m.OpenInterest())
	w.Uint32Field("NumTrades", m.NumTrades())
	w.Float64Field("BidVolume", m.BidVolume())
	w.Float64Field("AskVolume", m.AskVolume())
	w.BoolField("IsFinalRecord", m.IsFinalRecord())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRecordResponse) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalPriceDataRecordResponse) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 803 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "StartDateTime":
			m.SetStartDateTime(DateTimeWithMicrosecondsInt(r.Int64()))
		case "OpenPrice":
			m.SetOpenPrice(r.Float64())
		case "HighPrice":
			m.SetHighPrice(r.Float64())
		case "LowPrice":
			m.SetLowPrice(r.Float64())
		case "LastPrice":
			m.SetLastPrice(r.Float64())
		case "Volume":
			m.SetVolume(r.Float64())
		case "OpenInterest":
			m.SetOpenInterest(r.Uint32())
		case "NumTrades":
			m.SetNumTrades(r.Uint32())
		case "BidVolume":
			m.SetBidVolume(r.Float64())
		case "AskVolume":
			m.SetAskVolume(r.Float64())
		case "IsFinalRecord":
			m.SetIsFinalRecord(r.Bool())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
