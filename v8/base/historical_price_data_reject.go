// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalPriceDataRejectSize = 20

const HistoricalPriceDataRejectFixedSize = 108

//     Size                uint16                                   = HistoricalPriceDataRejectSize  (20)
//     Type                uint16                                   = HISTORICAL_PRICE_DATA_REJECT  (802)
//     BaseSize            uint16                                   = HistoricalPriceDataRejectSize  (20)
//     RequestID           int32                                    = 0
//     RejectText          string                                   = ""
//     RejectReasonCode    HistoricalPriceDataRejectReasonCodeEnum  = HPDR_UNSET  (0)
//     RetryTimeInSeconds  uint16                                   = 0
var _HistoricalPriceDataRejectDefault = []byte{20, 0, 34, 3, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size                uint16                                   = HistoricalPriceDataRejectFixedSize  (108)
//     Type                uint16                                   = HISTORICAL_PRICE_DATA_REJECT  (802)
//     RequestID           int32                                    = 0
//     RejectText          string[96]                               = ""
//     RejectReasonCode    HistoricalPriceDataRejectReasonCodeEnum  = HPDR_UNSET  (0)
//     RetryTimeInSeconds  uint16                                   = 0
var _HistoricalPriceDataRejectFixedDefault = []byte{108, 0, 34, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// HistoricalPriceDataReject When the Server rejects a historical price data request from the Client,
// a HistoricalPriceDataReject message will be sent.
//
// This message is never compressed.
type HistoricalPriceDataReject struct {
	p message.VLS
}

// HistoricalPriceDataRejectFixed When the Server rejects a historical price data request from the Client,
// a HistoricalPriceDataReject message will be sent.
//
// This message is never compressed.
type HistoricalPriceDataRejectFixed struct {
	p message.Fixed
}

func NewHistoricalPriceDataRejectFrom(b []byte) HistoricalPriceDataReject {
	return HistoricalPriceDataReject{p: message.NewVLS(b)}
}

func WrapHistoricalPriceDataReject(b []byte) HistoricalPriceDataReject {
	return HistoricalPriceDataReject{p: message.WrapVLS(b)}
}

func NewHistoricalPriceDataReject() *HistoricalPriceDataReject {
	return &HistoricalPriceDataReject{p: message.NewVLS(_HistoricalPriceDataRejectDefault)}
}

func ParseHistoricalPriceDataReject(b []byte) (HistoricalPriceDataReject, error) {
	if len(b) < 6 {
		return HistoricalPriceDataReject{}, message.ErrShortBuffer
	}
	m := WrapHistoricalPriceDataReject(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalPriceDataReject{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalPriceDataReject{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 20 {
		newSize := len(b) + (20 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalPriceDataReject{}, message.ErrOverflow
		}
		clone := HistoricalPriceDataReject{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalPriceDataRejectDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(20 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalPriceDataRejectFixedFrom(b []byte) HistoricalPriceDataRejectFixed {
	return HistoricalPriceDataRejectFixed{p: message.NewFixed(b)}
}

func WrapHistoricalPriceDataRejectFixed(b []byte) HistoricalPriceDataRejectFixed {
	return HistoricalPriceDataRejectFixed{p: message.WrapFixed(b)}
}

func NewHistoricalPriceDataRejectFixed() *HistoricalPriceDataRejectFixed {
	return &HistoricalPriceDataRejectFixed{p: message.NewFixed(_HistoricalPriceDataRejectFixedDefault)}
}

func ParseHistoricalPriceDataRejectFixed(b []byte) (HistoricalPriceDataRejectFixed, error) {
	if len(b) < 4 {
		return HistoricalPriceDataRejectFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalPriceDataRejectFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalPriceDataRejectFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalPriceDataRejectFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 108 {
		clone := *NewHistoricalPriceDataRejectFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalPriceDataRejectFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalPriceDataReject) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalPriceDataReject) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalPriceDataReject) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m HistoricalPriceDataReject) RequestID() int32 {
	return m.p.Int32LE(8)
}

// RejectText Text reason for rejection.
func (m HistoricalPriceDataReject) RejectText() string {
	return m.p.StringVLS(12)
}

// RejectReasonCode Integer identifier identifying the reason for the rejection. For the text
// reason, refer to the RejectText field.
func (m HistoricalPriceDataReject) RejectReasonCode() HistoricalPriceDataRejectReasonCodeEnum {
	return HistoricalPriceDataRejectReasonCodeEnum(m.p.Int16LE(16))
}

// RetryTimeInSeconds This is an optional field from the Server. This field will normally be
// zero.
//
// If a retry is intended to be performed, the server may give an indication
// of how long to wait in seconds. This field indicates that.
//
// This field is not recommended to be used. If it is used, it is really
// an indication of a substandard Server.
func (m HistoricalPriceDataReject) RetryTimeInSeconds() uint16 {
	return m.p.Uint16LE(18)
}

// Size The standard message size field. Automatically set by constructor.
func (m HistoricalPriceDataRejectFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type The standard message type field. Automatically set by constructor.
func (m HistoricalPriceDataRejectFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m HistoricalPriceDataRejectFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// RejectText Text reason for rejection.
func (m HistoricalPriceDataRejectFixed) RejectText() string {
	return m.p.StringFixed(8, 96)
}

// RejectReasonCode Integer identifier identifying the reason for the rejection. For the text
// reason, refer to the RejectText field.
func (m HistoricalPriceDataRejectFixed) RejectReasonCode() HistoricalPriceDataRejectReasonCodeEnum {
	return HistoricalPriceDataRejectReasonCodeEnum(m.p.Int16LE(104))
}

// RetryTimeInSeconds This is an optional field from the Server. This field will normally be
// zero.
//
// If a retry is intended to be performed, the server may give an indication
// of how long to wait in seconds. This field indicates that.
//
// This field is not recommended to be used. If it is used, it is really
// an indication of a substandard Server.
func (m HistoricalPriceDataRejectFixed) RetryTimeInSeconds() uint16 {
	return m.p.Uint16LE(106)
}

// SetRequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m *HistoricalPriceDataReject) SetRequestID(value int32) *HistoricalPriceDataReject {
	m.p.SetInt32LE(8, value)
	return m
}

// SetRejectText Text reason for rejection.
func (m *HistoricalPriceDataReject) SetRejectText(value string) *HistoricalPriceDataReject {
	m.p.SetStringVLS(12, value)
	return m
}

// SetRejectReasonCode Integer identifier identifying the reason for the rejection. For the text
// reason, refer to the RejectText field.
func (m *HistoricalPriceDataReject) SetRejectReasonCode(value HistoricalPriceDataRejectReasonCodeEnum) *HistoricalPriceDataReject {
	m.p.SetInt16LE(16, int16(value))
	return m
}

// SetRetryTimeInSeconds This is an optional field from the Server. This field will normally be
// zero.
//
// If a retry is intended to be performed, the server may give an indication
// of how long to wait in seconds. This field indicates that.
//
// This field is not recommended to be used. If it is used, it is really
// an indication of a substandard Server.
func (m *HistoricalPriceDataReject) SetRetryTimeInSeconds(value uint16) *HistoricalPriceDataReject {
	m.p.SetUint16LE(18, value)
	return m
}

// SetRequestID The numeric identifier from the historical price data request that this
// response is in response to.
func (m *HistoricalPriceDataRejectFixed) SetRequestID(value int32) *HistoricalPriceDataRejectFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetRejectText Text reason for rejection.
func (m *HistoricalPriceDataRejectFixed) SetRejectText(value string) *HistoricalPriceDataRejectFixed {
	m.p.SetStringFixed(8, 96, value)
	return m
}

// SetRejectReasonCode Integer identifier identifying the reason for the rejection. For the text
// reason, refer to the RejectText field.
func (m *HistoricalPriceDataRejectFixed) SetRejectReasonCode(value HistoricalPriceDataRejectReasonCodeEnum) *HistoricalPriceDataRejectFixed {
	m.p.SetInt16LE(104, int16(value))
	return m
}

// SetRetryTimeInSeconds This is an optional field from the Server. This field will normally be
// zero.
//
// If a retry is intended to be performed, the server may give an indication
// of how long to wait in seconds. This field indicates that.
//
// This field is not recommended to be used. If it is used, it is really
// an indication of a substandard Server.
func (m *HistoricalPriceDataRejectFixed) SetRetryTimeInSeconds(value uint16) *HistoricalPriceDataRejectFixed {
	m.p.SetUint16LE(106, value)
	return m
}

func (m *HistoricalPriceDataReject) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalPriceDataReject) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalPriceDataReject) Clone() *HistoricalPriceDataReject {
	return &HistoricalPriceDataReject{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *HistoricalPriceDataRejectFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalPriceDataRejectFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalPriceDataRejectFixed) Clone() *HistoricalPriceDataRejectFixed {
	return &HistoricalPriceDataRejectFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m HistoricalPriceDataReject) Copy(to HistoricalPriceDataReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
	to.SetRetryTimeInSeconds(m.RetryTimeInSeconds())
}

// CopyTo
func (m HistoricalPriceDataReject) CopyTo(to HistoricalPriceDataRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
	to.SetRetryTimeInSeconds(m.RetryTimeInSeconds())
}

// Copy
func (m HistoricalPriceDataRejectFixed) Copy(to HistoricalPriceDataRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
	to.SetRetryTimeInSeconds(m.RetryTimeInSeconds())
}

// CopyTo
func (m HistoricalPriceDataRejectFixed) CopyTo(to HistoricalPriceDataReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
	to.SetRetryTimeInSeconds(m.RetryTimeInSeconds())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataReject) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalPriceDataReject) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 802)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	w.Int16Field("RejectReasonCode", int16(m.RejectReasonCode()))
	w.Uint16Field("RetryTimeInSeconds", m.RetryTimeInSeconds())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataReject) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalPriceDataReject) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 802 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "RejectReasonCode":
			m.SetRejectReasonCode(HistoricalPriceDataRejectReasonCodeEnum(r.Int16()))
		case "RetryTimeInSeconds":
			m.SetRetryTimeInSeconds(r.Uint16())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRejectFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalPriceDataRejectFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 802)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	w.Int16Field("RejectReasonCode", int16(m.RejectReasonCode()))
	w.Uint16Field("RetryTimeInSeconds", m.RetryTimeInSeconds())
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalPriceDataRejectFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalPriceDataRejectFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 802 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "RejectReasonCode":
			m.SetRejectReasonCode(HistoricalPriceDataRejectReasonCodeEnum(r.Int16()))
		case "RetryTimeInSeconds":
			m.SetRetryTimeInSeconds(r.Uint16())
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
