// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const HistoricalMarketDepthDataRejectSize = 20

const HistoricalMarketDepthDataRejectFixedSize = 108

//     Size              uint16                                   = HistoricalMarketDepthDataRejectSize  (20)
//     Type              uint16                                   = HISTORICAL_MARKET_DEPTH_DATA_REJECT  (902)
//     BaseSize          uint16                                   = HistoricalMarketDepthDataRejectSize  (20)
//     RequestID         int32                                    = 0
//     RejectText        string                                   = ""
//     RejectReasonCode  HistoricalPriceDataRejectReasonCodeEnum  = HPDR_UNSET  (0)
var _HistoricalMarketDepthDataRejectDefault = []byte{20, 0, 134, 3, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size              uint16                                   = HistoricalMarketDepthDataRejectFixedSize  (108)
//     Type              uint16                                   = HISTORICAL_MARKET_DEPTH_DATA_REJECT  (902)
//     RequestID         int32                                    = 0
//     RejectText        string[96]                               = ""
//     RejectReasonCode  HistoricalPriceDataRejectReasonCodeEnum  = HPDR_UNSET  (0)
var _HistoricalMarketDepthDataRejectFixedDefault = []byte{108, 0, 134, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

type HistoricalMarketDepthDataReject struct {
	p message.VLS
}

type HistoricalMarketDepthDataRejectFixed struct {
	p message.Fixed
}

func NewHistoricalMarketDepthDataRejectFrom(b []byte) HistoricalMarketDepthDataReject {
	return HistoricalMarketDepthDataReject{p: message.NewVLS(b)}
}

func WrapHistoricalMarketDepthDataReject(b []byte) HistoricalMarketDepthDataReject {
	return HistoricalMarketDepthDataReject{p: message.WrapVLS(b)}
}

func NewHistoricalMarketDepthDataReject() *HistoricalMarketDepthDataReject {
	return &HistoricalMarketDepthDataReject{p: message.NewVLS(_HistoricalMarketDepthDataRejectDefault)}
}

func ParseHistoricalMarketDepthDataReject(b []byte) (HistoricalMarketDepthDataReject, error) {
	if len(b) < 6 {
		return HistoricalMarketDepthDataReject{}, message.ErrShortBuffer
	}
	m := WrapHistoricalMarketDepthDataReject(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalMarketDepthDataReject{}, message.ErrOverflow
	}
	baseSize := int(m.p.Uint16LE(4))
	if baseSize > len(b) {
		return HistoricalMarketDepthDataReject{}, message.ErrBaseSizeOverflow
	}
	if baseSize < 20 {
		newSize := len(b) + (20 - baseSize)
		if newSize > message.MaxSize {
			return HistoricalMarketDepthDataReject{}, message.ErrOverflow
		}
		clone := HistoricalMarketDepthDataReject{message.WrapVLSUnsafe(message.Alloc(uintptr(newSize)), len(b))}
		clone.p.SetBytes(0, b[0:baseSize])
		clone.p.SetBytes(baseSize, _HistoricalMarketDepthDataRejectDefault[baseSize:])
		if len(b) > baseSize {
			shift := uint16(20 - baseSize)
			var offset uint16
			offset = clone.p.Uint16LE(12)
			if offset > 0 {
				clone.p.SetUint16LE(12, offset+shift)
			}
		}
		return clone, nil
	}
	return m, nil
}

func NewHistoricalMarketDepthDataRejectFixedFrom(b []byte) HistoricalMarketDepthDataRejectFixed {
	return HistoricalMarketDepthDataRejectFixed{p: message.NewFixed(b)}
}

func WrapHistoricalMarketDepthDataRejectFixed(b []byte) HistoricalMarketDepthDataRejectFixed {
	return HistoricalMarketDepthDataRejectFixed{p: message.WrapFixed(b)}
}

func NewHistoricalMarketDepthDataRejectFixed() *HistoricalMarketDepthDataRejectFixed {
	return &HistoricalMarketDepthDataRejectFixed{p: message.NewFixed(_HistoricalMarketDepthDataRejectFixedDefault)}
}

func ParseHistoricalMarketDepthDataRejectFixed(b []byte) (HistoricalMarketDepthDataRejectFixed, error) {
	if len(b) < 4 {
		return HistoricalMarketDepthDataRejectFixed{}, message.ErrShortBuffer
	}
	m := WrapHistoricalMarketDepthDataRejectFixed(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return HistoricalMarketDepthDataRejectFixed{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return HistoricalMarketDepthDataRejectFixed{}, message.ErrBaseSizeOverflow
	}
	if size < 108 {
		clone := *NewHistoricalMarketDepthDataRejectFixed()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _HistoricalMarketDepthDataRejectFixedDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m HistoricalMarketDepthDataReject) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalMarketDepthDataReject) Type() uint16 {
	return m.p.Uint16LE(2)
}

// BaseSize
func (m HistoricalMarketDepthDataReject) BaseSize() uint16 {
	return m.p.Uint16LE(4)
}

// RequestID
func (m HistoricalMarketDepthDataReject) RequestID() int32 {
	return m.p.Int32LE(8)
}

// RejectText
func (m HistoricalMarketDepthDataReject) RejectText() string {
	return m.p.StringVLS(12)
}

// RejectReasonCode
func (m HistoricalMarketDepthDataReject) RejectReasonCode() HistoricalPriceDataRejectReasonCodeEnum {
	return HistoricalPriceDataRejectReasonCodeEnum(m.p.Int16LE(16))
}

// Size
func (m HistoricalMarketDepthDataRejectFixed) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m HistoricalMarketDepthDataRejectFixed) Type() uint16 {
	return m.p.Uint16LE(2)
}

// RequestID
func (m HistoricalMarketDepthDataRejectFixed) RequestID() int32 {
	return m.p.Int32LE(4)
}

// RejectText
func (m HistoricalMarketDepthDataRejectFixed) RejectText() string {
	return m.p.StringFixed(8, 96)
}

// RejectReasonCode
func (m HistoricalMarketDepthDataRejectFixed) RejectReasonCode() HistoricalPriceDataRejectReasonCodeEnum {
	return HistoricalPriceDataRejectReasonCodeEnum(m.p.Int16LE(104))
}

// SetRequestID
func (m *HistoricalMarketDepthDataReject) SetRequestID(value int32) *HistoricalMarketDepthDataReject {
	m.p.SetInt32LE(8, value)
	return m
}

// SetRejectText
func (m *HistoricalMarketDepthDataReject) SetRejectText(value string) *HistoricalMarketDepthDataReject {
	m.p.SetStringVLS(12, value)
	return m
}

// SetRejectReasonCode
func (m *HistoricalMarketDepthDataReject) SetRejectReasonCode(value HistoricalPriceDataRejectReasonCodeEnum) *HistoricalMarketDepthDataReject {
	m.p.SetInt16LE(16, int16(value))
	return m
}

// SetRequestID
func (m *HistoricalMarketDepthDataRejectFixed) SetRequestID(value int32) *HistoricalMarketDepthDataRejectFixed {
	m.p.SetInt32LE(4, value)
	return m
}

// SetRejectText
func (m *HistoricalMarketDepthDataRejectFixed) SetRejectText(value string) *HistoricalMarketDepthDataRejectFixed {
	m.p.SetStringFixed(8, 96, value)
	return m
}

// SetRejectReasonCode
func (m *HistoricalMarketDepthDataRejectFixed) SetRejectReasonCode(value HistoricalPriceDataRejectReasonCodeEnum) *HistoricalMarketDepthDataRejectFixed {
	m.p.SetInt16LE(104, int16(value))
	return m
}

func (m *HistoricalMarketDepthDataReject) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalMarketDepthDataReject) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalMarketDepthDataReject) Clone() *HistoricalMarketDepthDataReject {
	return &HistoricalMarketDepthDataReject{message.WrapVLSPointer(m.p.Clone(uintptr(m.Size())), int(m.Size()))}
}

func (m *HistoricalMarketDepthDataRejectFixed) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *HistoricalMarketDepthDataRejectFixed) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *HistoricalMarketDepthDataRejectFixed) Clone() *HistoricalMarketDepthDataRejectFixed {
	return &HistoricalMarketDepthDataRejectFixed{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m HistoricalMarketDepthDataReject) Copy(to HistoricalMarketDepthDataReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
}

// CopyTo
func (m HistoricalMarketDepthDataReject) CopyTo(to HistoricalMarketDepthDataRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
}

// Copy
func (m HistoricalMarketDepthDataRejectFixed) Copy(to HistoricalMarketDepthDataRejectFixed) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
}

// CopyTo
func (m HistoricalMarketDepthDataRejectFixed) CopyTo(to HistoricalMarketDepthDataReject) {
	to.SetRequestID(m.RequestID())
	to.SetRejectText(m.RejectText())
	to.SetRejectReasonCode(m.RejectReasonCode())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataReject) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalMarketDepthDataReject) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 902)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	w.Int16Field("RejectReasonCode", int16(m.RejectReasonCode()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataReject) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalMarketDepthDataReject) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 902 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "RejectReasonCode":
			m.SetRejectReasonCode(HistoricalPriceDataRejectReasonCodeEnum(r.Int16()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataRejectFixed) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *HistoricalMarketDepthDataRejectFixed) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 902)
	w.Int32Field("RequestID", m.RequestID())
	w.StringField("RejectText", m.RejectText())
	w.Int16Field("RejectReasonCode", int16(m.RejectReasonCode()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *HistoricalMarketDepthDataRejectFixed) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *HistoricalMarketDepthDataRejectFixed) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 902 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "RequestID":
			m.SetRequestID(r.Int32())
		case "RejectText":
			m.SetRejectText(r.String())
		case "RejectReasonCode":
			m.SetRejectReasonCode(HistoricalPriceDataRejectReasonCodeEnum(r.Int16()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
