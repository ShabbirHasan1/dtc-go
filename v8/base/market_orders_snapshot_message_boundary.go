// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-31 22:08:18.145964 +0800 WITA m=+0.011497918

package v8

import (
	"github.com/moontrade/dtc-go/message"
	"github.com/moontrade/dtc-go/message/json"
	"io"
)

const MarketOrdersSnapshotMessageBoundarySize = 9

//     Size             uint16                  = MarketOrdersSnapshotMessageBoundarySize  (9)
//     Type             uint16                  = MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY  (155)
//     SymbolID         uint32                  = 0
//     MessageBoundary  MessageSetBoundaryEnum  = MESSAGE_SET_BOUNDARY_UNSET  (0)
var _MarketOrdersSnapshotMessageBoundaryDefault = []byte{9, 0, 155, 0, 0, 0, 0, 0, 0}

type MarketOrdersSnapshotMessageBoundary struct {
	p message.Fixed
}

func NewMarketOrdersSnapshotMessageBoundaryFrom(b []byte) MarketOrdersSnapshotMessageBoundary {
	return MarketOrdersSnapshotMessageBoundary{p: message.NewFixed(b)}
}

func WrapMarketOrdersSnapshotMessageBoundary(b []byte) MarketOrdersSnapshotMessageBoundary {
	return MarketOrdersSnapshotMessageBoundary{p: message.WrapFixed(b)}
}

func NewMarketOrdersSnapshotMessageBoundary() *MarketOrdersSnapshotMessageBoundary {
	return &MarketOrdersSnapshotMessageBoundary{p: message.NewFixed(_MarketOrdersSnapshotMessageBoundaryDefault)}
}

func ParseMarketOrdersSnapshotMessageBoundary(b []byte) (MarketOrdersSnapshotMessageBoundary, error) {
	if len(b) < 4 {
		return MarketOrdersSnapshotMessageBoundary{}, message.ErrShortBuffer
	}
	m := WrapMarketOrdersSnapshotMessageBoundary(b)
	if int(m.p.AsUint16LE()) != len(b) {
		return MarketOrdersSnapshotMessageBoundary{}, message.ErrOverflow
	}
	size := int(m.p.AsUint16LE())
	if size > len(b) {
		return MarketOrdersSnapshotMessageBoundary{}, message.ErrBaseSizeOverflow
	}
	if size < 9 {
		clone := *NewMarketOrdersSnapshotMessageBoundary()
		clone.p.SetBytes(0, b[0:size])
		clone.p.SetBytes(size, _MarketOrdersSnapshotMessageBoundaryDefault[size:])
		return clone, nil
	}
	return m, nil
}

// Size
func (m MarketOrdersSnapshotMessageBoundary) Size() uint16 {
	return m.p.Uint16LE(0)
}

// Type
func (m MarketOrdersSnapshotMessageBoundary) Type() uint16 {
	return m.p.Uint16LE(2)
}

// SymbolID
func (m MarketOrdersSnapshotMessageBoundary) SymbolID() uint32 {
	return m.p.Uint32LE(4)
}

// MessageBoundary
func (m MarketOrdersSnapshotMessageBoundary) MessageBoundary() MessageSetBoundaryEnum {
	return MessageSetBoundaryEnum(m.p.Uint8(8))
}

// SetSymbolID
func (m *MarketOrdersSnapshotMessageBoundary) SetSymbolID(value uint32) *MarketOrdersSnapshotMessageBoundary {
	m.p.SetUint32LE(4, value)
	return m
}

// SetMessageBoundary
func (m *MarketOrdersSnapshotMessageBoundary) SetMessageBoundary(value MessageSetBoundaryEnum) *MarketOrdersSnapshotMessageBoundary {
	m.p.SetUint8(8, uint8(value))
	return m
}

func (m *MarketOrdersSnapshotMessageBoundary) WriteTo(w io.Writer) (int64, error) {
	s := int(m.Size())
	n, err := w.Write(m.p.AsBytes(s))
	return int64(n), err
}

func (m *MarketOrdersSnapshotMessageBoundary) MarshalBinary() ([]byte, error) {
	return m.p.AsBytes(int(m.Size())), nil
}

func (m *MarketOrdersSnapshotMessageBoundary) Clone() *MarketOrdersSnapshotMessageBoundary {
	return &MarketOrdersSnapshotMessageBoundary{message.WrapFixedPointer(m.p.Clone(uintptr(m.Size())))}
}

// Copy
func (m MarketOrdersSnapshotMessageBoundary) Copy(to MarketOrdersSnapshotMessageBoundary) {
	to.SetSymbolID(m.SymbolID())
	to.SetMessageBoundary(m.MessageBoundary())
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Marshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketOrdersSnapshotMessageBoundary) MarshalJSON() ([]byte, error) {
	return m.MarshalJSONTo(nil)
}

func (m *MarketOrdersSnapshotMessageBoundary) MarshalJSONTo(b []byte) ([]byte, error) {
	w := json.NewWriter(b, 155)
	w.Uint32Field("SymbolID", m.SymbolID())
	w.Uint8Field("MessageBoundary", uint8(m.MessageBoundary()))
	return w.Finish(), nil
}

//////////////////////////////////////////////////////////////////////////////////////////
// JSON Unmarshal
//////////////////////////////////////////////////////////////////////////////////////////

func (m *MarketOrdersSnapshotMessageBoundary) UnmarshalJSON(b []byte) error {
	r, err := json.OpenReader(b)
	if err != nil {
		return err
	}
	return m.UnmarshalJSONFromReader(&r)
}

func (m *MarketOrdersSnapshotMessageBoundary) UnmarshalJSONFromReader(r *json.Reader) error {
	if r.Type != 155 {
		return message.ErrWrongType
	}
	in := &r.Lexer
LOOP:
	for !in.IsDelim('}') {
		key, err := r.FieldName()
		if err != nil {
			return err
		}
		switch key {
		case "SymbolID":
			m.SetSymbolID(r.Uint32())
		case "MessageBoundary":
			m.SetMessageBoundary(MessageSetBoundaryEnum(r.Uint8()))
		case "f", "F":
			return message.ErrJSONCompactDetected
		case "":
			break LOOP
		default:
			in.SkipRecursive()
		}
		if r.IsError() {
			return r.Error()
		}
		in.WantComma()
	}
	return nil
}
