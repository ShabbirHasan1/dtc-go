// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-16 08:00:54.519198 +0800 WITA m=+0.055446543

package v8

import (
	"github.com/moontrade/dtc-go/message"
)

const UserMessageSize = 12

const UserMessageFixedSize = 262

//     Size            uint16  = UserMessageSize  (12)
//     Type            uint16  = USER_MESSAGE  (700)
//     BaseSize        uint16  = UserMessageSize  (12)
//     UserMessage     string  = ""
//     IsPopupMessage  bool    = true
var _UserMessageDefault = []byte{12, 0, 188, 2, 12, 0, 0, 0, 0, 0, 0, 0}

//     Size            uint16       = UserMessageFixedSize  (262)
//     Type            uint16       = USER_MESSAGE  (700)
//     UserMessage     string[256]  = ""
//     IsPopupMessage  bool         = true
var _UserMessageFixedDefault = []byte{6, 1, 188, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// UserMessage This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessage struct {
	message.VLS
}

// UserMessageBuilder This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessageBuilder struct {
	message.VLSBuilder
}

// UserMessageFixed This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessageFixed struct {
	message.Fixed
}

// UserMessageFixedBuilder This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessageFixedBuilder struct {
	message.Fixed
}

// UserMessagePointer This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessagePointer struct {
	message.VLSPointer
}

// UserMessagePointerBuilder This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessagePointerBuilder struct {
	message.VLSPointerBuilder
}

// UserMessageFixedPointer This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessageFixedPointer struct {
	message.FixedPointer
}

// UserMessageFixedPointerBuilder This message from the Server to the Client is for providing a message
// to the user.
//
// This message can be sent even before a LogonResponse.
type UserMessageFixedPointerBuilder struct {
	message.FixedPointer
}

func NewUserMessageFrom(b []byte) UserMessage {
	return UserMessage{VLS: message.NewVLS(b)}
}

func WrapUserMessage(b []byte) UserMessage {
	return UserMessage{VLS: message.WrapVLS(b)}
}

func NewUserMessage() UserMessageBuilder {
	return UserMessageBuilder{message.NewVLSBuilder(_UserMessageDefault)}
}

func NewUserMessageFixedFrom(b []byte) UserMessageFixed {
	return UserMessageFixed{Fixed: message.NewFixed(b)}
}

func WrapUserMessageFixed(b []byte) UserMessageFixed {
	return UserMessageFixed{Fixed: message.WrapFixed(b)}
}

func NewUserMessageFixed() UserMessageFixedBuilder {
	return UserMessageFixedBuilder{message.NewFixed(_UserMessageFixedDefault)}
}

func AllocUserMessage() UserMessagePointerBuilder {
	return UserMessagePointerBuilder{message.AllocVLSBuilder(_UserMessageDefault)}
}

func AllocUserMessageFrom(b []byte) UserMessagePointer {
	return UserMessagePointer{VLSPointer: message.AllocVLS(b)}
}

func AllocUserMessageFixed() UserMessageFixedPointerBuilder {
	return UserMessageFixedPointerBuilder{message.AllocFixed(_UserMessageFixedDefault)}
}

func AllocUserMessageFixedFrom(b []byte) UserMessageFixedPointer {
	return UserMessageFixedPointer{FixedPointer: message.AllocFixed(b)}
}

// Clear
//     Size            uint16  = UserMessageSize  (12)
//     Type            uint16  = USER_MESSAGE  (700)
//     BaseSize        uint16  = UserMessageSize  (12)
//     UserMessage     string  = ""
//     IsPopupMessage  bool    = true
func (m UserMessageBuilder) Clear() {
	m.Unsafe().SetBytes(0, _UserMessageDefault)
}

// Clear
//     Size            uint16       = UserMessageFixedSize  (262)
//     Type            uint16       = USER_MESSAGE  (700)
//     UserMessage     string[256]  = ""
//     IsPopupMessage  bool         = true
func (m UserMessageFixedBuilder) Clear() {
	m.Unsafe().SetBytes(0, _UserMessageFixedDefault)
}

// Clear
//     Size            uint16  = UserMessageSize  (12)
//     Type            uint16  = USER_MESSAGE  (700)
//     BaseSize        uint16  = UserMessageSize  (12)
//     UserMessage     string  = ""
//     IsPopupMessage  bool    = true
func (m UserMessagePointerBuilder) Clear() {
	m.Ptr.SetBytes(0, _UserMessageDefault)
}

// Clear
//     Size            uint16       = UserMessageFixedSize  (262)
//     Type            uint16       = USER_MESSAGE  (700)
//     UserMessage     string[256]  = ""
//     IsPopupMessage  bool         = true
func (m UserMessageFixedPointerBuilder) Clear() {
	m.Ptr.SetBytes(0, _UserMessageFixedDefault)
}

// ToBuilder
func (m UserMessage) ToBuilder() UserMessageBuilder {
	return UserMessageBuilder{m.VLS.ToBuilder()}
}

// ToBuilder
func (m UserMessageFixed) ToBuilder() UserMessageFixedBuilder {
	return UserMessageFixedBuilder{m.Fixed}
}

// ToBuilder
func (m UserMessagePointer) ToBuilder() UserMessagePointerBuilder {
	return UserMessagePointerBuilder{m.VLSPointer.ToBuilder()}
}

// ToBuilder
func (m UserMessageFixedPointer) ToBuilder() UserMessageFixedPointerBuilder {
	return UserMessageFixedPointerBuilder{m.FixedPointer}
}

// Finish
func (m UserMessageBuilder) Finish() UserMessage {
	return UserMessage{m.VLSBuilder.Finish()}
}

// Finish
func (m UserMessageFixedBuilder) Finish() UserMessageFixed {
	return UserMessageFixed{m.Fixed}
}

// Finish
func (m *UserMessagePointerBuilder) Finish() UserMessagePointer {
	return UserMessagePointer{m.VLSPointerBuilder.Finish()}
}

// Finish
func (m *UserMessageFixedPointerBuilder) Finish() UserMessageFixedPointer {
	return UserMessageFixedPointer{m.FixedPointer}
}

// UserMessage General message to present to user in the Client.
func (m UserMessage) UserMessage() string {
	return message.StringVLS(m.Unsafe(), 10, 6)
}

// UserMessage General message to present to user in the Client.
func (m UserMessageBuilder) UserMessage() string {
	return message.StringVLS(m.Unsafe(), 10, 6)
}

// UserMessage General message to present to user in the Client.
func (m UserMessagePointer) UserMessage() string {
	return message.StringVLS(m.Ptr, 10, 6)
}

// UserMessage General message to present to user in the Client.
func (m UserMessagePointerBuilder) UserMessage() string {
	return message.StringVLS(m.Ptr, 10, 6)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessage) IsPopupMessage() bool {
	return message.BoolVLS(m.Unsafe(), 11, 10)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageBuilder) IsPopupMessage() bool {
	return message.BoolVLS(m.Unsafe(), 11, 10)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessagePointer) IsPopupMessage() bool {
	return message.BoolVLS(m.Ptr, 11, 10)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessagePointerBuilder) IsPopupMessage() bool {
	return message.BoolVLS(m.Ptr, 11, 10)
}

// UserMessage General message to present to user in the Client.
func (m UserMessageFixed) UserMessage() string {
	return message.StringFixed(m.Unsafe(), 260, 4)
}

// UserMessage General message to present to user in the Client.
func (m UserMessageFixedBuilder) UserMessage() string {
	return message.StringFixed(m.Unsafe(), 260, 4)
}

// UserMessage General message to present to user in the Client.
func (m UserMessageFixedPointer) UserMessage() string {
	return message.StringFixed(m.Ptr, 260, 4)
}

// UserMessage General message to present to user in the Client.
func (m UserMessageFixedPointerBuilder) UserMessage() string {
	return message.StringFixed(m.Ptr, 260, 4)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageFixed) IsPopupMessage() bool {
	return message.BoolFixed(m.Unsafe(), 261, 260)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageFixedBuilder) IsPopupMessage() bool {
	return message.BoolFixed(m.Unsafe(), 261, 260)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageFixedPointer) IsPopupMessage() bool {
	return message.BoolFixed(m.Ptr, 261, 260)
}

// IsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageFixedPointerBuilder) IsPopupMessage() bool {
	return message.BoolFixed(m.Ptr, 261, 260)
}

// SetUserMessage General message to present to user in the Client.
func (m *UserMessageBuilder) SetUserMessage(value string) {
	message.SetStringVLS(&m.VLSBuilder, 10, 6, value)
}

// SetUserMessage General message to present to user in the Client.
func (m *UserMessagePointerBuilder) SetUserMessage(value string) {
	message.SetStringVLSPointer(&m.VLSPointerBuilder, 10, 6, value)
}

// SetIsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageBuilder) SetIsPopupMessage(value bool) {
	message.SetBoolVLS(m.Unsafe(), 11, 10, value)
}

// SetIsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessagePointerBuilder) SetIsPopupMessage(value bool) {
	message.SetBoolVLS(m.Ptr, 11, 10, value)
}

// SetUserMessage General message to present to user in the Client.
func (m UserMessageFixedBuilder) SetUserMessage(value string) {
	message.SetStringFixed(m.Unsafe(), 260, 4, value)
}

// SetUserMessage General message to present to user in the Client.
func (m UserMessageFixedPointerBuilder) SetUserMessage(value string) {
	message.SetStringFixed(m.Ptr, 260, 4, value)
}

// SetIsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageFixedBuilder) SetIsPopupMessage(value bool) {
	message.SetBoolFixed(m.Unsafe(), 261, 260, value)
}

// SetIsPopupMessage The default for this is 1 which signifies that the Server would like the
// Client to present the message to the user in a way which will get their
// attention. Otherwise, set this to 0 to give the message lower priority
// (just add to a log).
func (m UserMessageFixedPointerBuilder) SetIsPopupMessage(value bool) {
	message.SetBoolFixed(m.Ptr, 261, 260, value)
}
