// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-16 08:00:54.519198 +0800 WITA m=+0.055446543

package v8

import (
	"github.com/moontrade/dtc-go/message"
)

const UnderlyingSymbolsForExchangeRequestSize = 20

const UnderlyingSymbolsForExchangeRequestFixedSize = 28

//     Size          uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     BaseSize      uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     RequestID     int32             = 0
//     Exchange      string            = ""
//     SecurityType  SECURITY_TYPE_UNSET= SecurityTypeEnum    (0)
var _UnderlyingSymbolsForExchangeRequestDefault = []byte{20, 0, 247, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

//     Size          uint16            = UnderlyingSymbolsForExchangeRequestFixedSize  (28)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     RequestID     int32             = 0
//     Exchange      string[16]        = ""
//     SecurityType  SECURITY_TYPE_UNSET= SecurityTypeEnum    (0)
var _UnderlyingSymbolsForExchangeRequestFixedDefault = []byte{28, 0, 247, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// UnderlyingSymbolsForExchangeRequest This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequest struct {
	message.VLS
}

// UnderlyingSymbolsForExchangeRequestBuilder This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestBuilder struct {
	message.VLSBuilder
}

// UnderlyingSymbolsForExchangeRequestFixed This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestFixed struct {
	message.Fixed
}

// UnderlyingSymbolsForExchangeRequestFixedBuilder This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestFixedBuilder struct {
	message.Fixed
}

// UnderlyingSymbolsForExchangeRequestPointer This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestPointer struct {
	message.VLSPointer
}

// UnderlyingSymbolsForExchangeRequestPointerBuilder This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestPointerBuilder struct {
	message.VLSPointerBuilder
}

// UnderlyingSymbolsForExchangeRequestFixedPointer This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestFixedPointer struct {
	message.FixedPointer
}

// UnderlyingSymbolsForExchangeRequestFixedPointerBuilder This is a message from the Client to the Server to request all of the
// underlying symbols on a particular Exchange. For example, all of the underlying
// futures symbols on a particular Exchange.
//
// The server will return a SecurityDefinitionResponse message to the Client
// for each Symbol returned.
//
// If the Server is rejecting this request, then it needs to send a SecurityDefinitionReject
// message to the Client.
type UnderlyingSymbolsForExchangeRequestFixedPointerBuilder struct {
	message.FixedPointer
}

func NewUnderlyingSymbolsForExchangeRequestFrom(b []byte) UnderlyingSymbolsForExchangeRequest {
	return UnderlyingSymbolsForExchangeRequest{VLS: message.NewVLS(b)}
}

func WrapUnderlyingSymbolsForExchangeRequest(b []byte) UnderlyingSymbolsForExchangeRequest {
	return UnderlyingSymbolsForExchangeRequest{VLS: message.WrapVLS(b)}
}

func NewUnderlyingSymbolsForExchangeRequest() UnderlyingSymbolsForExchangeRequestBuilder {
	return UnderlyingSymbolsForExchangeRequestBuilder{message.NewVLSBuilder(_UnderlyingSymbolsForExchangeRequestDefault)}
}

func NewUnderlyingSymbolsForExchangeRequestFixedFrom(b []byte) UnderlyingSymbolsForExchangeRequestFixed {
	return UnderlyingSymbolsForExchangeRequestFixed{Fixed: message.NewFixed(b)}
}

func WrapUnderlyingSymbolsForExchangeRequestFixed(b []byte) UnderlyingSymbolsForExchangeRequestFixed {
	return UnderlyingSymbolsForExchangeRequestFixed{Fixed: message.WrapFixed(b)}
}

func NewUnderlyingSymbolsForExchangeRequestFixed() UnderlyingSymbolsForExchangeRequestFixedBuilder {
	return UnderlyingSymbolsForExchangeRequestFixedBuilder{message.NewFixed(_UnderlyingSymbolsForExchangeRequestFixedDefault)}
}

func AllocUnderlyingSymbolsForExchangeRequest() UnderlyingSymbolsForExchangeRequestPointerBuilder {
	return UnderlyingSymbolsForExchangeRequestPointerBuilder{message.AllocVLSBuilder(_UnderlyingSymbolsForExchangeRequestDefault)}
}

func AllocUnderlyingSymbolsForExchangeRequestFrom(b []byte) UnderlyingSymbolsForExchangeRequestPointer {
	return UnderlyingSymbolsForExchangeRequestPointer{VLSPointer: message.AllocVLS(b)}
}

func AllocUnderlyingSymbolsForExchangeRequestFixed() UnderlyingSymbolsForExchangeRequestFixedPointerBuilder {
	return UnderlyingSymbolsForExchangeRequestFixedPointerBuilder{message.AllocFixed(_UnderlyingSymbolsForExchangeRequestFixedDefault)}
}

func AllocUnderlyingSymbolsForExchangeRequestFixedFrom(b []byte) UnderlyingSymbolsForExchangeRequestFixedPointer {
	return UnderlyingSymbolsForExchangeRequestFixedPointer{FixedPointer: message.AllocFixed(b)}
}

// Clear
//     Size          uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     BaseSize      uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     RequestID     int32             = 0
//     Exchange      string            = ""
//     SecurityType  SECURITY_TYPE_UNSET= SecurityTypeEnum    (0)
func (m UnderlyingSymbolsForExchangeRequestBuilder) Clear() {
	m.Unsafe().SetBytes(0, _UnderlyingSymbolsForExchangeRequestDefault)
}

// Clear
//     Size          uint16            = UnderlyingSymbolsForExchangeRequestFixedSize  (28)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     RequestID     int32             = 0
//     Exchange      string[16]        = ""
//     SecurityType  SECURITY_TYPE_UNSET= SecurityTypeEnum    (0)
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) Clear() {
	m.Unsafe().SetBytes(0, _UnderlyingSymbolsForExchangeRequestFixedDefault)
}

// Clear
//     Size          uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     BaseSize      uint16            = UnderlyingSymbolsForExchangeRequestSize  (20)
//     RequestID     int32             = 0
//     Exchange      string            = ""
//     SecurityType  SECURITY_TYPE_UNSET= SecurityTypeEnum    (0)
func (m UnderlyingSymbolsForExchangeRequestPointerBuilder) Clear() {
	m.Ptr.SetBytes(0, _UnderlyingSymbolsForExchangeRequestDefault)
}

// Clear
//     Size          uint16            = UnderlyingSymbolsForExchangeRequestFixedSize  (28)
//     Type          uint16            = UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST  (503)
//     RequestID     int32             = 0
//     Exchange      string[16]        = ""
//     SecurityType  SECURITY_TYPE_UNSET= SecurityTypeEnum    (0)
func (m UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) Clear() {
	m.Ptr.SetBytes(0, _UnderlyingSymbolsForExchangeRequestFixedDefault)
}

// ToBuilder
func (m UnderlyingSymbolsForExchangeRequest) ToBuilder() UnderlyingSymbolsForExchangeRequestBuilder {
	return UnderlyingSymbolsForExchangeRequestBuilder{m.VLS.ToBuilder()}
}

// ToBuilder
func (m UnderlyingSymbolsForExchangeRequestFixed) ToBuilder() UnderlyingSymbolsForExchangeRequestFixedBuilder {
	return UnderlyingSymbolsForExchangeRequestFixedBuilder{m.Fixed}
}

// ToBuilder
func (m UnderlyingSymbolsForExchangeRequestPointer) ToBuilder() UnderlyingSymbolsForExchangeRequestPointerBuilder {
	return UnderlyingSymbolsForExchangeRequestPointerBuilder{m.VLSPointer.ToBuilder()}
}

// ToBuilder
func (m UnderlyingSymbolsForExchangeRequestFixedPointer) ToBuilder() UnderlyingSymbolsForExchangeRequestFixedPointerBuilder {
	return UnderlyingSymbolsForExchangeRequestFixedPointerBuilder{m.FixedPointer}
}

// Finish
func (m UnderlyingSymbolsForExchangeRequestBuilder) Finish() UnderlyingSymbolsForExchangeRequest {
	return UnderlyingSymbolsForExchangeRequest{m.VLSBuilder.Finish()}
}

// Finish
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) Finish() UnderlyingSymbolsForExchangeRequestFixed {
	return UnderlyingSymbolsForExchangeRequestFixed{m.Fixed}
}

// Finish
func (m *UnderlyingSymbolsForExchangeRequestPointerBuilder) Finish() UnderlyingSymbolsForExchangeRequestPointer {
	return UnderlyingSymbolsForExchangeRequestPointer{m.VLSPointerBuilder.Finish()}
}

// Finish
func (m *UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) Finish() UnderlyingSymbolsForExchangeRequestFixedPointer {
	return UnderlyingSymbolsForExchangeRequestFixedPointer{m.FixedPointer}
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequest) RequestID() int32 {
	return message.Int32VLS(m.Unsafe(), 12, 8)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestBuilder) RequestID() int32 {
	return message.Int32VLS(m.Unsafe(), 12, 8)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestPointer) RequestID() int32 {
	return message.Int32VLS(m.Ptr, 12, 8)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestPointerBuilder) RequestID() int32 {
	return message.Int32VLS(m.Ptr, 12, 8)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequest) Exchange() string {
	return message.StringVLS(m.Unsafe(), 16, 12)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestBuilder) Exchange() string {
	return message.StringVLS(m.Unsafe(), 16, 12)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestPointer) Exchange() string {
	return message.StringVLS(m.Ptr, 16, 12)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestPointerBuilder) Exchange() string {
	return message.StringVLS(m.Ptr, 16, 12)
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequest) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32VLS(m.Unsafe(), 20, 16))
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestBuilder) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32VLS(m.Unsafe(), 20, 16))
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestPointer) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32VLS(m.Ptr, 20, 16))
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestPointerBuilder) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32VLS(m.Ptr, 20, 16))
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestFixed) RequestID() int32 {
	return message.Int32Fixed(m.Unsafe(), 8, 4)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) RequestID() int32 {
	return message.Int32Fixed(m.Unsafe(), 8, 4)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestFixedPointer) RequestID() int32 {
	return message.Int32Fixed(m.Ptr, 8, 4)
}

// RequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) RequestID() int32 {
	return message.Int32Fixed(m.Ptr, 8, 4)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestFixed) Exchange() string {
	return message.StringFixed(m.Unsafe(), 24, 8)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) Exchange() string {
	return message.StringFixed(m.Unsafe(), 24, 8)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestFixedPointer) Exchange() string {
	return message.StringFixed(m.Ptr, 24, 8)
}

// Exchange .
func (m UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) Exchange() string {
	return message.StringFixed(m.Ptr, 24, 8)
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestFixed) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32Fixed(m.Unsafe(), 28, 24))
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32Fixed(m.Unsafe(), 28, 24))
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestFixedPointer) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32Fixed(m.Ptr, 28, 24))
}

// SecurityType .
func (m UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) SecurityType() SecurityTypeEnum {
	return SecurityTypeEnum(message.Int32Fixed(m.Ptr, 28, 24))
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestBuilder) SetRequestID(value int32) {
	message.SetInt32VLS(m.Unsafe(), 12, 8, value)
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestPointerBuilder) SetRequestID(value int32) {
	message.SetInt32VLS(m.Ptr, 12, 8, value)
}

// SetExchange .
func (m *UnderlyingSymbolsForExchangeRequestBuilder) SetExchange(value string) {
	message.SetStringVLS(&m.VLSBuilder, 16, 12, value)
}

// SetExchange .
func (m *UnderlyingSymbolsForExchangeRequestPointerBuilder) SetExchange(value string) {
	message.SetStringVLSPointer(&m.VLSPointerBuilder, 16, 12, value)
}

// SetSecurityType .
func (m UnderlyingSymbolsForExchangeRequestBuilder) SetSecurityType(value SecurityTypeEnum) {
	message.SetInt32VLS(m.Unsafe(), 20, 16, int32(value))
}

// SetSecurityType .
func (m UnderlyingSymbolsForExchangeRequestPointerBuilder) SetSecurityType(value SecurityTypeEnum) {
	message.SetInt32VLS(m.Ptr, 20, 16, int32(value))
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) SetRequestID(value int32) {
	message.SetInt32Fixed(m.Unsafe(), 8, 4, value)
}

// SetRequestID The unique identifier for this request. This same identifier will be returned
// in the SecurityDefinitionResponse message.
func (m UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) SetRequestID(value int32) {
	message.SetInt32Fixed(m.Ptr, 8, 4, value)
}

// SetExchange .
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) SetExchange(value string) {
	message.SetStringFixed(m.Unsafe(), 24, 8, value)
}

// SetExchange .
func (m UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) SetExchange(value string) {
	message.SetStringFixed(m.Ptr, 24, 8, value)
}

// SetSecurityType .
func (m UnderlyingSymbolsForExchangeRequestFixedBuilder) SetSecurityType(value SecurityTypeEnum) {
	message.SetInt32Fixed(m.Unsafe(), 28, 24, int32(value))
}

// SetSecurityType .
func (m UnderlyingSymbolsForExchangeRequestFixedPointerBuilder) SetSecurityType(value SecurityTypeEnum) {
	message.SetInt32Fixed(m.Ptr, 28, 24, int32(value))
}
