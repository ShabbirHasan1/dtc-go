// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-16 08:00:54.519198 +0800 WITA m=+0.055446543

package v8

import (
	"github.com/moontrade/dtc-go/message"
)

const MarketDataUpdateOpenInterestSize = 16

//     Size                uint16         = MarketDataUpdateOpenInterestSize  (16)
//     Type                uint16         = MARKET_DATA_UPDATE_OPEN_INTEREST  (124)
//     SymbolID            uint32         = 0
//     OpenInterest        uint32         = 0
//     TradingSessionDate  DateTime4Byte  = 0
var _MarketDataUpdateOpenInterestDefault = []byte{16, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

// MarketDataUpdateOpenInterest The MarketDataUpdateOpenInterest message is sent by the Server to the
// Client to update the OpenInterest field previously sent through the MarketDataSnapshot
// message.
type MarketDataUpdateOpenInterest struct {
	message.Fixed
}

// MarketDataUpdateOpenInterestBuilder The MarketDataUpdateOpenInterest message is sent by the Server to the
// Client to update the OpenInterest field previously sent through the MarketDataSnapshot
// message.
type MarketDataUpdateOpenInterestBuilder struct {
	message.Fixed
}

// MarketDataUpdateOpenInterestPointer The MarketDataUpdateOpenInterest message is sent by the Server to the
// Client to update the OpenInterest field previously sent through the MarketDataSnapshot
// message.
type MarketDataUpdateOpenInterestPointer struct {
	message.FixedPointer
}

// MarketDataUpdateOpenInterestPointerBuilder The MarketDataUpdateOpenInterest message is sent by the Server to the
// Client to update the OpenInterest field previously sent through the MarketDataSnapshot
// message.
type MarketDataUpdateOpenInterestPointerBuilder struct {
	message.FixedPointer
}

func NewMarketDataUpdateOpenInterestFrom(b []byte) MarketDataUpdateOpenInterest {
	return MarketDataUpdateOpenInterest{Fixed: message.NewFixed(b)}
}

func WrapMarketDataUpdateOpenInterest(b []byte) MarketDataUpdateOpenInterest {
	return MarketDataUpdateOpenInterest{Fixed: message.WrapFixed(b)}
}

func NewMarketDataUpdateOpenInterest() MarketDataUpdateOpenInterestBuilder {
	return MarketDataUpdateOpenInterestBuilder{message.NewFixed(_MarketDataUpdateOpenInterestDefault)}
}

func AllocMarketDataUpdateOpenInterest() MarketDataUpdateOpenInterestPointerBuilder {
	return MarketDataUpdateOpenInterestPointerBuilder{message.AllocFixed(_MarketDataUpdateOpenInterestDefault)}
}

func AllocMarketDataUpdateOpenInterestFrom(b []byte) MarketDataUpdateOpenInterestPointer {
	return MarketDataUpdateOpenInterestPointer{FixedPointer: message.AllocFixed(b)}
}

// Clear
//     Size                uint16         = MarketDataUpdateOpenInterestSize  (16)
//     Type                uint16         = MARKET_DATA_UPDATE_OPEN_INTEREST  (124)
//     SymbolID            uint32         = 0
//     OpenInterest        uint32         = 0
//     TradingSessionDate  DateTime4Byte  = 0
func (m MarketDataUpdateOpenInterestBuilder) Clear() {
	m.Unsafe().SetBytes(0, _MarketDataUpdateOpenInterestDefault)
}

// Clear
//     Size                uint16         = MarketDataUpdateOpenInterestSize  (16)
//     Type                uint16         = MARKET_DATA_UPDATE_OPEN_INTEREST  (124)
//     SymbolID            uint32         = 0
//     OpenInterest        uint32         = 0
//     TradingSessionDate  DateTime4Byte  = 0
func (m MarketDataUpdateOpenInterestPointerBuilder) Clear() {
	m.Ptr.SetBytes(0, _MarketDataUpdateOpenInterestDefault)
}

// ToBuilder
func (m MarketDataUpdateOpenInterest) ToBuilder() MarketDataUpdateOpenInterestBuilder {
	return MarketDataUpdateOpenInterestBuilder{m.Fixed}
}

// ToBuilder
func (m MarketDataUpdateOpenInterestPointer) ToBuilder() MarketDataUpdateOpenInterestPointerBuilder {
	return MarketDataUpdateOpenInterestPointerBuilder{m.FixedPointer}
}

// Finish
func (m MarketDataUpdateOpenInterestBuilder) Finish() MarketDataUpdateOpenInterest {
	return MarketDataUpdateOpenInterest{m.Fixed}
}

// Finish
func (m *MarketDataUpdateOpenInterestPointerBuilder) Finish() MarketDataUpdateOpenInterestPointer {
	return MarketDataUpdateOpenInterestPointer{m.FixedPointer}
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateOpenInterest) SymbolID() uint32 {
	return message.Uint32Fixed(m.Unsafe(), 8, 4)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateOpenInterestBuilder) SymbolID() uint32 {
	return message.Uint32Fixed(m.Unsafe(), 8, 4)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateOpenInterestPointer) SymbolID() uint32 {
	return message.Uint32Fixed(m.Ptr, 8, 4)
}

// SymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateOpenInterestPointerBuilder) SymbolID() uint32 {
	return message.Uint32Fixed(m.Ptr, 8, 4)
}

// OpenInterest The open interest for the symbol.
func (m MarketDataUpdateOpenInterest) OpenInterest() uint32 {
	return message.Uint32Fixed(m.Unsafe(), 12, 8)
}

// OpenInterest The open interest for the symbol.
func (m MarketDataUpdateOpenInterestBuilder) OpenInterest() uint32 {
	return message.Uint32Fixed(m.Unsafe(), 12, 8)
}

// OpenInterest The open interest for the symbol.
func (m MarketDataUpdateOpenInterestPointer) OpenInterest() uint32 {
	return message.Uint32Fixed(m.Ptr, 12, 8)
}

// OpenInterest The open interest for the symbol.
func (m MarketDataUpdateOpenInterestPointerBuilder) OpenInterest() uint32 {
	return message.Uint32Fixed(m.Ptr, 12, 8)
}

// TradingSessionDate
func (m MarketDataUpdateOpenInterest) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(message.Uint32Fixed(m.Unsafe(), 16, 12))
}

// TradingSessionDate
func (m MarketDataUpdateOpenInterestBuilder) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(message.Uint32Fixed(m.Unsafe(), 16, 12))
}

// TradingSessionDate
func (m MarketDataUpdateOpenInterestPointer) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(message.Uint32Fixed(m.Ptr, 16, 12))
}

// TradingSessionDate
func (m MarketDataUpdateOpenInterestPointerBuilder) TradingSessionDate() DateTime4Byte {
	return DateTime4Byte(message.Uint32Fixed(m.Ptr, 16, 12))
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateOpenInterestBuilder) SetSymbolID(value uint32) {
	message.SetUint32Fixed(m.Unsafe(), 8, 4, value)
}

// SetSymbolID This is the same SymbolID sent by the Client in the MarketDataRequest
// message which corresponds to the Symbol that the data in this message
// is for.
func (m MarketDataUpdateOpenInterestPointerBuilder) SetSymbolID(value uint32) {
	message.SetUint32Fixed(m.Ptr, 8, 4, value)
}

// SetOpenInterest The open interest for the symbol.
func (m MarketDataUpdateOpenInterestBuilder) SetOpenInterest(value uint32) {
	message.SetUint32Fixed(m.Unsafe(), 12, 8, value)
}

// SetOpenInterest The open interest for the symbol.
func (m MarketDataUpdateOpenInterestPointerBuilder) SetOpenInterest(value uint32) {
	message.SetUint32Fixed(m.Ptr, 12, 8, value)
}

// SetTradingSessionDate
func (m MarketDataUpdateOpenInterestBuilder) SetTradingSessionDate(value DateTime4Byte) {
	message.SetUint32Fixed(m.Unsafe(), 16, 12, uint32(value))
}

// SetTradingSessionDate
func (m MarketDataUpdateOpenInterestPointerBuilder) SetTradingSessionDate(value DateTime4Byte) {
	message.SetUint32Fixed(m.Ptr, 16, 12, uint32(value))
}
