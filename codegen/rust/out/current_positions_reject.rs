// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const CURRENT_POSITIONS_REJECT_VLS_SIZE: usize = 16;

const CURRENT_POSITIONS_REJECT_FIXED_SIZE: usize = 104;

/// size         u16     = CurrentPositionsRejectVLSSize  (16)
/// r#type       u16     = CURRENT_POSITIONS_REJECT  (307)
/// base_size    u16     = CurrentPositionsRejectVLSSize  (16)
/// request_id   i32     = 0
/// reject_text  string  = ""
const CURRENT_POSITIONS_REJECT_VLS_DEFAULT: [u8; 16] = [16, 0, 51, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size         u16       = CurrentPositionsRejectFixedSize  (104)
/// r#type       u16       = CURRENT_POSITIONS_REJECT  (307)
/// request_id   i32       = 0
/// reject_text  string96  = ""
const CURRENT_POSITIONS_REJECT_FIXED_DEFAULT: [u8; 104] = [104, 0, 51, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// If the Server is unable to serve the request for an CurrentPositionsRequestVLS
/// message received, for a reason other than there not being any current
/// Trade positions, then send this message to the Client.
///
/// This must never be sent when there are actually no Trade Positions in
/// the account or accounts requested.
pub trait CurrentPositionsReject {
    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn request_id(&self) -> i32;

    /// Free-form text indicating the reason for the rejection.
    ///
    fn reject_text(&self) -> &str;

    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// Free-form text indicating the reason for the rejection.
    ///
    fn set_reject_text(&mut self, value: &str) -> &mut Self;

    fn copy_to(&self, to: &mut impl CurrentPositionsReject) {
        to.set_request_id(self.request_id());
        to.set_reject_text(self.reject_text());
    }
}

/// If the Server is unable to serve the request for an CurrentPositionsRequestVLS
/// message received, for a reason other than there not being any current
/// Trade positions, then send this message to the Client.
///
/// This must never be sent when there are actually no Trade Positions in
/// the account or accounts requested.
pub struct CurrentPositionsRejectVLS {
    data: *const CurrentPositionsRejectVLSData,
    capacity: usize
}

pub struct CurrentPositionsRejectVLSUnsafe {
    data: *const CurrentPositionsRejectVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct CurrentPositionsRejectVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    reject_text: VLS,
}

/// If the Server is unable to serve the request for an CurrentPositionsRequestVLS
/// message received, for a reason other than there not being any current
/// Trade positions, then send this message to the Client.
///
/// This must never be sent when there are actually no Trade Positions in
/// the account or accounts requested.
pub struct CurrentPositionsRejectFixed {
    data: *const CurrentPositionsRejectFixedData
}

pub struct CurrentPositionsRejectFixedUnsafe {
    data: *const CurrentPositionsRejectFixedData
}

#[repr(packed, C)]
pub struct CurrentPositionsRejectFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    reject_text: [u8; 96],
}

impl CurrentPositionsRejectVLSData {
    pub fn new() -> Self {
        Self {
            size: 16u16.to_le(),
            r#type: CURRENT_POSITIONS_REJECT.to_le(),
            base_size: 16u16.to_le(),
            request_id: 0,
            reject_text: crate::message::VLS::new(),
        }
    }
}

impl CurrentPositionsRejectFixedData {
    pub fn new() -> Self {
        Self {
            size: 104u16.to_le(),
            r#type: CURRENT_POSITIONS_REJECT.to_le(),
            request_id: 0,
            reject_text: [0; 96],
        }
    }
}

unsafe impl Send for CurrentPositionsRejectFixed {}
unsafe impl Send for CurrentPositionsRejectFixedUnsafe {}
unsafe impl Send for CurrentPositionsRejectFixedData {}
unsafe impl Send for CurrentPositionsRejectVLS {}
unsafe impl Send for CurrentPositionsRejectVLSUnsafe {}
unsafe impl Send for CurrentPositionsRejectVLSData {}

impl Drop for CurrentPositionsRejectFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CurrentPositionsRejectFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CurrentPositionsRejectVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CurrentPositionsRejectVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for CurrentPositionsRejectFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CurrentPositionsRejectFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CurrentPositionsRejectVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CurrentPositionsRejectVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for CurrentPositionsRejectFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CurrentPositionsRejectFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CurrentPositionsRejectVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CurrentPositionsRejectVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for CurrentPositionsRejectFixed {
    type Target = CurrentPositionsRejectFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRejectFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CurrentPositionsRejectFixedUnsafe {
    type Target = CurrentPositionsRejectFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRejectFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CurrentPositionsRejectVLS {
    type Target = CurrentPositionsRejectVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRejectVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CurrentPositionsRejectVLSUnsafe {
    type Target = CurrentPositionsRejectVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRejectVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for CurrentPositionsRejectFixed {
    type Safe = CurrentPositionsRejectFixed;
    type Unsafe = CurrentPositionsRejectFixedUnsafe;
    type Data = CurrentPositionsRejectFixedData;
    const BASE_SIZE: usize = 104;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRejectFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRejectFixedData
        }
    }

}

impl crate::Message for CurrentPositionsRejectFixedUnsafe {
    type Safe = CurrentPositionsRejectFixed;
    type Unsafe = CurrentPositionsRejectFixedUnsafe;
    type Data = CurrentPositionsRejectFixedData;
    const BASE_SIZE: usize = 104;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRejectFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRejectFixedData
        }
    }

}

impl crate::Message for CurrentPositionsRejectVLS {
    type Safe = CurrentPositionsRejectVLS;
    type Unsafe = CurrentPositionsRejectVLSUnsafe;
    type Data = CurrentPositionsRejectVLSData;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRejectVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRejectVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for CurrentPositionsRejectVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CurrentPositionsRejectVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for CurrentPositionsRejectVLSUnsafe {
    type Safe = CurrentPositionsRejectVLS;
    type Unsafe = CurrentPositionsRejectVLSUnsafe;
    type Data = CurrentPositionsRejectVLSData;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRejectVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRejectVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for CurrentPositionsRejectVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CurrentPositionsRejectVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// If the Server is unable to serve the request for an CurrentPositionsRequestVLS
/// message received, for a reason other than there not being any current
/// Trade positions, then send this message to the Client.
///
/// This must never be sent when there are actually no Trade Positions in
/// the account or accounts requested.
impl CurrentPositionsReject for CurrentPositionsRejectVLS {
    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// Free-form text indicating the reason for the rejection.
    ///
    fn reject_text(&self) -> &str {
        crate::get_vls(self, self.reject_text)
    }

    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// Free-form text indicating the reason for the rejection.
    ///
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        self.reject_text = crate::set_vls(self, self.reject_text, value);
        self
    }

}

/// If the Server is unable to serve the request for an CurrentPositionsRequestVLS
/// message received, for a reason other than there not being any current
/// Trade positions, then send this message to the Client.
///
/// This must never be sent when there are actually no Trade Positions in
/// the account or accounts requested.
impl CurrentPositionsReject for CurrentPositionsRejectVLSUnsafe {
    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// Free-form text indicating the reason for the rejection.
    ///
    fn reject_text(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            crate::get_vls(self, self.reject_text)
        }
    }

    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }


    /// Free-form text indicating the reason for the rejection.
    ///
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.reject_text = crate::set_vls(self, self.reject_text, value);
        }
        self
    }

}

/// If the Server is unable to serve the request for an CurrentPositionsRequestVLS
/// message received, for a reason other than there not being any current
/// Trade positions, then send this message to the Client.
///
/// This must never be sent when there are actually no Trade Positions in
/// the account or accounts requested.
impl CurrentPositionsReject for CurrentPositionsRejectFixed {
    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// Free-form text indicating the reason for the rejection.
    ///
    fn reject_text(&self) -> &str {
        crate::get_fixed(&self.reject_text[..])
    }

    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// Free-form text indicating the reason for the rejection.
    ///
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.reject_text[..], value);
        self
    }

}

/// If the Server is unable to serve the request for an CurrentPositionsRequestVLS
/// message received, for a reason other than there not being any current
/// Trade positions, then send this message to the Client.
///
/// This must never be sent when there are actually no Trade Positions in
/// the account or accounts requested.
impl CurrentPositionsReject for CurrentPositionsRejectFixedUnsafe {
    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// Free-form text indicating the reason for the rejection.
    ///
    fn reject_text(&self) -> &str {
        if self.is_out_of_bounds(104) {
            ""
        } else {
            crate::get_fixed(&self.reject_text[..])
        }
    }

    /// This is set to the RequestID field sent in the CurrentPositionsRequestVLS
    /// message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// Free-form text indicating the reason for the rejection.
    ///
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            crate::set_fixed(&mut self.reject_text[..], value);
        }
        self
    }

}

