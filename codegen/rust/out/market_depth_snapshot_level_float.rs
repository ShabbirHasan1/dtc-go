// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const MARKET_DEPTH_SNAPSHOT_LEVEL_FLOAT_FIXED_SIZE: usize = 24;

/// size                   u16                     = MarketDepthSnapshotLevelFloatFixedSize  (24)
/// r#type                 u16                     = MARKET_DEPTH_SNAPSHOT_LEVEL_FLOAT  (145)
/// symbol_id              u32                     = 0
/// price                  f32                     = 0
/// quantity               f32                     = 0
/// num_orders             u32                     = 0
/// level                  u16                     = 0
/// side                   AtBidOrAskEnum8         = BID_ASK_UNSET_8  (0)
/// final_update_in_batch  FinalUpdateInBatchEnum  = FINAL_UPDATE_UNSET  (0)
const MARKET_DEPTH_SNAPSHOT_LEVEL_FLOAT_FIXED_DEFAULT: [u8; 24] = [24, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// This is a message sent by Server to provide the initial market depth data
/// entries to the Client after the Client subscribes to market data or separately
/// subscribes to market depth data. The Client will need to separately subscribe
/// to market depth data if the Server requires it.
///
/// Each message provides a single entry of depth data. Therefore, the Server
/// will send multiple MarketDepthSnapshotLevelFixedFloat messages in a series
/// in order for the Client to build up its initial market depth book.
///
/// The first message will be identified by the IsFirstMessageInBatch field
/// being set to 1. The last message will be identified by the IsLastMessageInBatch
/// field being set to 1.
///
/// In the case where the market depth book is empty, the Server still needs
/// to send through one single message with the SymbolID set, IsFirstMessageInBatch
/// equal to 1 and IsLastMessageInBatch equal to 1. All other members will
/// be at the default values. The Client will understand this as an empty
/// book.
pub trait MarketDepthSnapshotLevelFloat {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS/MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// This is the price of the market depth entry.
    fn price(&self) -> f32;

    /// This is the quantity of orders at the Price.
    fn quantity(&self) -> f32;

    /// The number of orders at the Price.
    fn num_orders(&self) -> u32;

    /// This indicates the level of the price within the market depth book. The
    /// minimum value is 1. There is no maximum value. A value of 1 is considered
    /// the best bid or ask data.
    fn level(&self) -> u16;

    /// Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
    /// = 2, if this is an ask side market depth entry.
    fn side(&self) -> AtBidOrAskEnum8;

    /// An indicator whether this is the final message or not in a batch of updates.
    /// An indicator whether this is the final message or not in a batch of updates.
    fn final_update_in_batch(&self) -> FinalUpdateInBatchEnum;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS/MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// This is the price of the market depth entry.
    fn set_price(&mut self, value: f32) -> &mut Self;

    /// This is the quantity of orders at the Price.
    fn set_quantity(&mut self, value: f32) -> &mut Self;

    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u32) -> &mut Self;

    /// This indicates the level of the price within the market depth book. The
    /// minimum value is 1. There is no maximum value. A value of 1 is considered
    /// the best bid or ask data.
    fn set_level(&mut self, value: u16) -> &mut Self;

    /// Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
    /// = 2, if this is an ask side market depth entry.
    fn set_side(&mut self, value: AtBidOrAskEnum8) -> &mut Self;

    /// An indicator whether this is the final message or not in a batch of updates.
    /// An indicator whether this is the final message or not in a batch of updates.
    fn set_final_update_in_batch(&mut self, value: FinalUpdateInBatchEnum) -> &mut Self;

    fn copy_to(&self, to: &mut impl MarketDepthSnapshotLevelFloat) {
        to.set_symbol_id(self.symbol_id());
        to.set_price(self.price());
        to.set_quantity(self.quantity());
        to.set_num_orders(self.num_orders());
        to.set_level(self.level());
        to.set_side(self.side());
        to.set_final_update_in_batch(self.final_update_in_batch());
    }
}

/// This is a message sent by Server to provide the initial market depth data
/// entries to the Client after the Client subscribes to market data or separately
/// subscribes to market depth data. The Client will need to separately subscribe
/// to market depth data if the Server requires it.
///
/// Each message provides a single entry of depth data. Therefore, the Server
/// will send multiple MarketDepthSnapshotLevelFixedFloat messages in a series
/// in order for the Client to build up its initial market depth book.
///
/// The first message will be identified by the IsFirstMessageInBatch field
/// being set to 1. The last message will be identified by the IsLastMessageInBatch
/// field being set to 1.
///
/// In the case where the market depth book is empty, the Server still needs
/// to send through one single message with the SymbolID set, IsFirstMessageInBatch
/// equal to 1 and IsLastMessageInBatch equal to 1. All other members will
/// be at the default values. The Client will understand this as an empty
/// book.
pub struct MarketDepthSnapshotLevelFloatFixed {
    data: *const MarketDepthSnapshotLevelFloatFixedData
}

pub struct MarketDepthSnapshotLevelFloatFixedUnsafe {
    data: *const MarketDepthSnapshotLevelFloatFixedData
}

#[repr(packed, C)]
pub struct MarketDepthSnapshotLevelFloatFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    price: f32,
    quantity: f32,
    num_orders: u32,
    level: u16,
    side: AtBidOrAskEnum8,
    final_update_in_batch: FinalUpdateInBatchEnum,
}

impl MarketDepthSnapshotLevelFloatFixedData {
    pub fn new() -> Self {
        Self {
            size: 24u16.to_le(),
            r#type: MARKET_DEPTH_SNAPSHOT_LEVEL_FLOAT.to_le(),
            symbol_id: 0,
            price: 0.0f32,
            quantity: 0.0f32,
            num_orders: 0,
            level: 0,
            side: AtBidOrAskEnum8::BidAskUnset8.to_le(),
            final_update_in_batch: FinalUpdateInBatchEnum::FinalUpdateUnset.to_le(),
        }
    }
}

unsafe impl Send for MarketDepthSnapshotLevelFloatFixed {}
unsafe impl Send for MarketDepthSnapshotLevelFloatFixedUnsafe {}
unsafe impl Send for MarketDepthSnapshotLevelFloatFixedData {}

impl Drop for MarketDepthSnapshotLevelFloatFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthSnapshotLevelFloatFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDepthSnapshotLevelFloatFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthSnapshotLevelFloatFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDepthSnapshotLevelFloatFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthSnapshotLevelFloatFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDepthSnapshotLevelFloatFixed {
    type Target = MarketDepthSnapshotLevelFloatFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthSnapshotLevelFloatFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthSnapshotLevelFloatFixedUnsafe {
    type Target = MarketDepthSnapshotLevelFloatFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthSnapshotLevelFloatFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDepthSnapshotLevelFloatFixed {
    type Safe = MarketDepthSnapshotLevelFloatFixed;
    type Unsafe = MarketDepthSnapshotLevelFloatFixedUnsafe;
    type Data = MarketDepthSnapshotLevelFloatFixedData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthSnapshotLevelFloatFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthSnapshotLevelFloatFixedData
        }
    }

}

impl crate::Message for MarketDepthSnapshotLevelFloatFixedUnsafe {
    type Safe = MarketDepthSnapshotLevelFloatFixed;
    type Unsafe = MarketDepthSnapshotLevelFloatFixedUnsafe;
    type Data = MarketDepthSnapshotLevelFloatFixedData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthSnapshotLevelFloatFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthSnapshotLevelFloatFixedData
        }
    }

}

/// This is a message sent by Server to provide the initial market depth data
/// entries to the Client after the Client subscribes to market data or separately
/// subscribes to market depth data. The Client will need to separately subscribe
/// to market depth data if the Server requires it.
///
/// Each message provides a single entry of depth data. Therefore, the Server
/// will send multiple MarketDepthSnapshotLevelFixedFloat messages in a series
/// in order for the Client to build up its initial market depth book.
///
/// The first message will be identified by the IsFirstMessageInBatch field
/// being set to 1. The last message will be identified by the IsLastMessageInBatch
/// field being set to 1.
///
/// In the case where the market depth book is empty, the Server still needs
/// to send through one single message with the SymbolID set, IsFirstMessageInBatch
/// equal to 1 and IsLastMessageInBatch equal to 1. All other members will
/// be at the default values. The Client will understand this as an empty
/// book.
impl MarketDepthSnapshotLevelFloat for MarketDepthSnapshotLevelFloatFixed {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS/MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// This is the price of the market depth entry.
    fn price(&self) -> f32 {
        crate::f32_le(self.price)
    }

    /// This is the quantity of orders at the Price.
    fn quantity(&self) -> f32 {
        crate::f32_le(self.quantity)
    }

    /// The number of orders at the Price.
    fn num_orders(&self) -> u32 {
        u32::from_le(self.num_orders)
    }

    /// This indicates the level of the price within the market depth book. The
    /// minimum value is 1. There is no maximum value. A value of 1 is considered
    /// the best bid or ask data.
    fn level(&self) -> u16 {
        u16::from_le(self.level)
    }

    /// Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
    /// = 2, if this is an ask side market depth entry.
    fn side(&self) -> AtBidOrAskEnum8 {
        AtBidOrAskEnum8::from_le(self.side)
    }

    /// An indicator whether this is the final message or not in a batch of updates.
    /// An indicator whether this is the final message or not in a batch of updates.
    fn final_update_in_batch(&self) -> FinalUpdateInBatchEnum {
        FinalUpdateInBatchEnum::from_le(self.final_update_in_batch)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS/MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    /// This is the price of the market depth entry.
    fn set_price(&mut self, value: f32) -> &mut Self {
        self.price = f32_le(value);
        self
    }


    /// This is the quantity of orders at the Price.
    fn set_quantity(&mut self, value: f32) -> &mut Self {
        self.quantity = f32_le(value);
        self
    }


    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u32) -> &mut Self {
        self.num_orders = value.to_le();
        self
    }


    /// This indicates the level of the price within the market depth book. The
    /// minimum value is 1. There is no maximum value. A value of 1 is considered
    /// the best bid or ask data.
    fn set_level(&mut self, value: u16) -> &mut Self {
        self.level = value.to_le();
        self
    }


    /// Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
    /// = 2, if this is an ask side market depth entry.
    fn set_side(&mut self, value: AtBidOrAskEnum8) -> &mut Self {
        self.side = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }


    /// An indicator whether this is the final message or not in a batch of updates.
    /// An indicator whether this is the final message or not in a batch of updates.
    fn set_final_update_in_batch(&mut self, value: FinalUpdateInBatchEnum) -> &mut Self {
        self.final_update_in_batch = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

}

/// This is a message sent by Server to provide the initial market depth data
/// entries to the Client after the Client subscribes to market data or separately
/// subscribes to market depth data. The Client will need to separately subscribe
/// to market depth data if the Server requires it.
///
/// Each message provides a single entry of depth data. Therefore, the Server
/// will send multiple MarketDepthSnapshotLevelFixedFloat messages in a series
/// in order for the Client to build up its initial market depth book.
///
/// The first message will be identified by the IsFirstMessageInBatch field
/// being set to 1. The last message will be identified by the IsLastMessageInBatch
/// field being set to 1.
///
/// In the case where the market depth book is empty, the Server still needs
/// to send through one single message with the SymbolID set, IsFirstMessageInBatch
/// equal to 1 and IsLastMessageInBatch equal to 1. All other members will
/// be at the default values. The Client will understand this as an empty
/// book.
impl MarketDepthSnapshotLevelFloat for MarketDepthSnapshotLevelFloatFixedUnsafe {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS/MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// This is the price of the market depth entry.
    fn price(&self) -> f32 {
        if self.is_out_of_bounds(12) {
            0.0f32
        } else {
            crate::f32_le(self.price)
        }
    }

    /// This is the quantity of orders at the Price.
    fn quantity(&self) -> f32 {
        if self.is_out_of_bounds(16) {
            0.0f32
        } else {
            crate::f32_le(self.quantity)
        }
    }

    /// The number of orders at the Price.
    fn num_orders(&self) -> u32 {
        if self.is_out_of_bounds(20) {
            0
        } else {
            u32::from_le(self.num_orders)
        }
    }

    /// This indicates the level of the price within the market depth book. The
    /// minimum value is 1. There is no maximum value. A value of 1 is considered
    /// the best bid or ask data.
    fn level(&self) -> u16 {
        if self.is_out_of_bounds(22) {
            0
        } else {
            u16::from_le(self.level)
        }
    }

    /// Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
    /// = 2, if this is an ask side market depth entry.
    fn side(&self) -> AtBidOrAskEnum8 {
        if self.is_out_of_bounds(23) {
            AtBidOrAskEnum8::BidAskUnset8.to_le()
        } else {
            AtBidOrAskEnum8::from_le(self.side)
        }
    }

    /// An indicator whether this is the final message or not in a batch of updates.
    /// An indicator whether this is the final message or not in a batch of updates.
    fn final_update_in_batch(&self) -> FinalUpdateInBatchEnum {
        if self.is_out_of_bounds(24) {
            FinalUpdateInBatchEnum::FinalUpdateUnset.to_le()
        } else {
            FinalUpdateInBatchEnum::from_le(self.final_update_in_batch)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS/MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }


    /// This is the price of the market depth entry.
    fn set_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.price = f32_le(value);
        }
        self
    }


    /// This is the quantity of orders at the Price.
    fn set_quantity(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.quantity = f32_le(value);
        }
        self
    }


    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.num_orders = value.to_le();
        }
        self
    }


    /// This indicates the level of the price within the market depth book. The
    /// minimum value is 1. There is no maximum value. A value of 1 is considered
    /// the best bid or ask data.
    fn set_level(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(22) {
            self.level = value.to_le();
        }
        self
    }


    /// Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK
    /// = 2, if this is an ask side market depth entry.
    fn set_side(&mut self, value: AtBidOrAskEnum8) -> &mut Self {
        if !self.is_out_of_bounds(23) {
            self.side = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }


    /// An indicator whether this is the final message or not in a batch of updates.
    /// An indicator whether this is the final message or not in a batch of updates.
    fn set_final_update_in_batch(&mut self, value: FinalUpdateInBatchEnum) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.final_update_in_batch = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

}

