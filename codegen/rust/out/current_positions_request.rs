// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const CURRENT_POSITIONS_REQUEST_VLS_SIZE: usize = 16;

const CURRENT_POSITIONS_REQUEST_FIXED_SIZE: usize = 40;

/// size           u16     = CurrentPositionsRequestVLSSize  (16)
/// r#type         u16     = CURRENT_POSITIONS_REQUEST  (305)
/// base_size      u16     = CurrentPositionsRequestVLSSize  (16)
/// request_id     i32     = 0
/// trade_account  string  = ""
const CURRENT_POSITIONS_REQUEST_VLS_DEFAULT: [u8; 16] = [16, 0, 49, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size           u16       = CurrentPositionsRequestFixedSize  (40)
/// r#type         u16       = CURRENT_POSITIONS_REQUEST  (305)
/// request_id     i32       = 0
/// trade_account  string32  = ""
const CURRENT_POSITIONS_REQUEST_FIXED_DEFAULT: [u8; 40] = [40, 0, 49, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// This is a message from the Client to the Server to request the current
/// open Trade Positions.
pub trait CurrentPositionsRequest {
    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn request_id(&self) -> i32;

    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn trade_account(&self) -> &str;

    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn copy_to(&self, to: &mut impl CurrentPositionsRequest) {
        to.set_request_id(self.request_id());
        to.set_trade_account(self.trade_account());
    }
}

/// This is a message from the Client to the Server to request the current
/// open Trade Positions.
pub struct CurrentPositionsRequestVLS {
    data: *const CurrentPositionsRequestVLSData,
    capacity: usize
}

pub struct CurrentPositionsRequestVLSUnsafe {
    data: *const CurrentPositionsRequestVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct CurrentPositionsRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    trade_account: VLS,
}

/// This is a message from the Client to the Server to request the current
/// open Trade Positions.
pub struct CurrentPositionsRequestFixed {
    data: *const CurrentPositionsRequestFixedData
}

pub struct CurrentPositionsRequestFixedUnsafe {
    data: *const CurrentPositionsRequestFixedData
}

#[repr(packed, C)]
pub struct CurrentPositionsRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    trade_account: [u8; 32],
}

impl CurrentPositionsRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 16u16.to_le(),
            r#type: CURRENT_POSITIONS_REQUEST.to_le(),
            base_size: 16u16.to_le(),
            request_id: 0,
            trade_account: crate::message::VLS::new(),
        }
    }
}

impl CurrentPositionsRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 40u16.to_le(),
            r#type: CURRENT_POSITIONS_REQUEST.to_le(),
            request_id: 0,
            trade_account: [0; 32],
        }
    }
}

unsafe impl Send for CurrentPositionsRequestFixed {}
unsafe impl Send for CurrentPositionsRequestFixedUnsafe {}
unsafe impl Send for CurrentPositionsRequestFixedData {}
unsafe impl Send for CurrentPositionsRequestVLS {}
unsafe impl Send for CurrentPositionsRequestVLSUnsafe {}
unsafe impl Send for CurrentPositionsRequestVLSData {}

impl Drop for CurrentPositionsRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CurrentPositionsRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CurrentPositionsRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CurrentPositionsRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for CurrentPositionsRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CurrentPositionsRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CurrentPositionsRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CurrentPositionsRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for CurrentPositionsRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CurrentPositionsRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CurrentPositionsRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CurrentPositionsRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for CurrentPositionsRequestFixed {
    type Target = CurrentPositionsRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CurrentPositionsRequestFixedUnsafe {
    type Target = CurrentPositionsRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CurrentPositionsRequestVLS {
    type Target = CurrentPositionsRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CurrentPositionsRequestVLSUnsafe {
    type Target = CurrentPositionsRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CurrentPositionsRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for CurrentPositionsRequestFixed {
    type Safe = CurrentPositionsRequestFixed;
    type Unsafe = CurrentPositionsRequestFixedUnsafe;
    type Data = CurrentPositionsRequestFixedData;
    const BASE_SIZE: usize = 40;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRequestFixedData
        }
    }

}

impl crate::Message for CurrentPositionsRequestFixedUnsafe {
    type Safe = CurrentPositionsRequestFixed;
    type Unsafe = CurrentPositionsRequestFixedUnsafe;
    type Data = CurrentPositionsRequestFixedData;
    const BASE_SIZE: usize = 40;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRequestFixedData
        }
    }

}

impl crate::Message for CurrentPositionsRequestVLS {
    type Safe = CurrentPositionsRequestVLS;
    type Unsafe = CurrentPositionsRequestVLSUnsafe;
    type Data = CurrentPositionsRequestVLSData;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for CurrentPositionsRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CurrentPositionsRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for CurrentPositionsRequestVLSUnsafe {
    type Safe = CurrentPositionsRequestVLS;
    type Unsafe = CurrentPositionsRequestVLSUnsafe;
    type Data = CurrentPositionsRequestVLSData;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CurrentPositionsRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CurrentPositionsRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for CurrentPositionsRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CurrentPositionsRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// This is a message from the Client to the Server to request the current
/// open Trade Positions.
impl CurrentPositionsRequest for CurrentPositionsRequestVLS {
    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn trade_account(&self) -> &str {
        crate::get_vls(self, self.trade_account)
    }

    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = crate::set_vls(self, self.trade_account, value);
        self
    }

}

/// This is a message from the Client to the Server to request the current
/// open Trade Positions.
impl CurrentPositionsRequest for CurrentPositionsRequestVLSUnsafe {
    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            crate::get_vls(self, self.trade_account)
        }
    }

    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }


    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.trade_account = crate::set_vls(self, self.trade_account, value);
        }
        self
    }

}

/// This is a message from the Client to the Server to request the current
/// open Trade Positions.
impl CurrentPositionsRequest for CurrentPositionsRequestFixed {
    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn trade_account(&self) -> &str {
        crate::get_fixed(&self.trade_account[..])
    }

    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.trade_account[..], value);
        self
    }

}

/// This is a message from the Client to the Server to request the current
/// open Trade Positions.
impl CurrentPositionsRequest for CurrentPositionsRequestFixedUnsafe {
    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(40) {
            ""
        } else {
            crate::get_fixed(&self.trade_account[..])
        }
    }

    /// The request identifier. The Server will send this back in the PositionUpdateVLS
    /// response messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// This is an optional field. Leave this empty to request the Server to return
    /// all current open Trade Positions for all trade accounts on the logged
    /// in Username. Otherwise, specify a particular trade account to request
    /// Trade Positions for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            crate::set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

}

