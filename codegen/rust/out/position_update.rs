// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const POSITION_UPDATE_VLS_SIZE: usize = 120;

const POSITION_UPDATE_FIXED_SIZE: usize = 240;

/// size                            u16            = PositionUpdateVLSSize  (120)
/// r#type                          u16            = POSITION_UPDATE  (306)
/// base_size                       u16            = PositionUpdateVLSSize  (120)
/// request_id                      i32            = 0
/// total_number_messages           i32            = 0
/// message_number                  i32            = 0
/// symbol                          string         = ""
/// exchange                        string         = ""
/// quantity                        f64            = 0
/// average_price                   f64            = 0
/// position_identifier             string         = ""
/// trade_account                   string         = ""
/// no_positions                    u8             = 0
/// unsolicited                     u8             = 0
/// margin_requirement              f64            = 0
/// entry_date_time                 DateTime4Byte  = 0
/// open_profit_loss                f64            = 0
/// high_price_during_position      f64            = 0
/// low_price_during_position       f64            = 0
/// quantity_limit                  f64            = 0
/// max_potential_postion_quantity  f64            = 0
const POSITION_UPDATE_VLS_DEFAULT: [u8; 120] = [120, 0, 50, 1, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size                            u16            = PositionUpdateFixedSize  (240)
/// r#type                          u16            = POSITION_UPDATE  (306)
/// request_id                      i32            = 0
/// total_number_messages           i32            = 0
/// message_number                  i32            = 0
/// symbol                          string64       = ""
/// exchange                        string16       = ""
/// quantity                        f64            = 0
/// average_price                   f64            = 0
/// position_identifier             string32       = ""
/// trade_account                   string32       = ""
/// no_positions                    u8             = 0
/// unsolicited                     u8             = 0
/// margin_requirement              f64            = 0
/// entry_date_time                 DateTime4Byte  = 0
/// open_profit_loss                f64            = 0
/// high_price_during_position      f64            = 0
/// low_price_during_position       f64            = 0
/// quantity_limit                  f64            = 0
/// max_potential_postion_quantity  f64            = 0
const POSITION_UPDATE_FIXED_DEFAULT: [u8; 240] = [240, 0, 50, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// This is a message from the Server to the Client to report a Trade Position
/// for a symbol in any Trade Account for the logged in Username.
///
/// The Position Update message can either be solicited, in response to CurrentPositionsRequestVLS.
/// Or unsolicited as a Trade Position for a symbol changes during the connection
/// to the Server. Each Trade Position is contained within a single message.
/// to the Server. Each Trade Position is contained within a single message.
///
/// When the server is responding with one or more PositionUpdateVLS messages
/// in response to a CurrentPositionsRequestVLS message, it must not send
/// any unsolicited PositionUpdateVLS messages interleaved with the solicited
/// PositionUpdateVLS messages in response to the CurrentPositionsRequestVLS
/// message.
pub trait PositionUpdate {
    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn request_id(&self) -> i32;

    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn total_number_messages(&self) -> i32;

    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn message_number(&self) -> i32;

    /// The symbol for the Position.
    fn symbol(&self) -> &str;

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str;

    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn quantity(&self) -> f64;

    /// The average position price.
    fn average_price(&self) -> f64;

    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn position_identifier(&self) -> &str;

    /// The trade account the Trade Position is in for the Symbol.
    fn trade_account(&self) -> &str;

    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn no_positions(&self) -> u8;

    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn unsolicited(&self) -> u8;

    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn margin_requirement(&self) -> f64;

    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn entry_date_time(&self) -> DateTime4Byte;

    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn open_profit_loss(&self) -> f64;

    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn high_price_during_position(&self) -> f64;

    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn low_price_during_position(&self) -> f64;

    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn quantity_limit(&self) -> f64;

    fn max_potential_postion_quantity(&self) -> f64;

    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self;

    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_message_number(&mut self, value: i32) -> &mut Self;

    /// The symbol for the Position.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn set_quantity(&mut self, value: f64) -> &mut Self;

    /// The average position price.
    fn set_average_price(&mut self, value: f64) -> &mut Self;

    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn set_position_identifier(&mut self, value: &str) -> &mut Self;

    /// The trade account the Trade Position is in for the Symbol.
    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn set_no_positions(&mut self, value: u8) -> &mut Self;

    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn set_unsolicited(&mut self, value: u8) -> &mut Self;

    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn set_margin_requirement(&mut self, value: f64) -> &mut Self;

    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn set_entry_date_time(&mut self, value: DateTime4Byte) -> &mut Self;

    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self;

    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self;

    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self;

    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn set_quantity_limit(&mut self, value: f64) -> &mut Self;

    fn set_max_potential_postion_quantity(&mut self, value: f64) -> &mut Self;

    fn copy_to(&self, to: &mut impl PositionUpdate) {
        to.set_request_id(self.request_id());
        to.set_total_number_messages(self.total_number_messages());
        to.set_message_number(self.message_number());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_quantity(self.quantity());
        to.set_average_price(self.average_price());
        to.set_position_identifier(self.position_identifier());
        to.set_trade_account(self.trade_account());
        to.set_no_positions(self.no_positions());
        to.set_unsolicited(self.unsolicited());
        to.set_margin_requirement(self.margin_requirement());
        to.set_entry_date_time(self.entry_date_time());
        to.set_open_profit_loss(self.open_profit_loss());
        to.set_high_price_during_position(self.high_price_during_position());
        to.set_low_price_during_position(self.low_price_during_position());
        to.set_quantity_limit(self.quantity_limit());
        to.set_max_potential_postion_quantity(self.max_potential_postion_quantity());
    }
}

/// This is a message from the Server to the Client to report a Trade Position
/// for a symbol in any Trade Account for the logged in Username.
///
/// The Position Update message can either be solicited, in response to CurrentPositionsRequestVLS.
/// Or unsolicited as a Trade Position for a symbol changes during the connection
/// to the Server. Each Trade Position is contained within a single message.
/// to the Server. Each Trade Position is contained within a single message.
///
/// When the server is responding with one or more PositionUpdateVLS messages
/// in response to a CurrentPositionsRequestVLS message, it must not send
/// any unsolicited PositionUpdateVLS messages interleaved with the solicited
/// PositionUpdateVLS messages in response to the CurrentPositionsRequestVLS
/// message.
pub struct PositionUpdateVLS {
    data: *const PositionUpdateVLSData,
    capacity: usize
}

pub struct PositionUpdateVLSUnsafe {
    data: *const PositionUpdateVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct PositionUpdateVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    total_number_messages: i32,
    message_number: i32,
    symbol: VLS,
    exchange: VLS,
    quantity: f64,
    average_price: f64,
    position_identifier: VLS,
    trade_account: VLS,
    no_positions: u8,
    unsolicited: u8,
    margin_requirement: f64,
    entry_date_time: DateTime4Byte,
    open_profit_loss: f64,
    high_price_during_position: f64,
    low_price_during_position: f64,
    quantity_limit: f64,
    max_potential_postion_quantity: f64,
}

/// This is a message from the Server to the Client to report a Trade Position
/// for a symbol in any Trade Account for the logged in Username.
///
/// The Position Update message can either be solicited, in response to CurrentPositionsRequestVLS.
/// Or unsolicited as a Trade Position for a symbol changes during the connection
/// to the Server. Each Trade Position is contained within a single message.
/// to the Server. Each Trade Position is contained within a single message.
///
/// When the server is responding with one or more PositionUpdateVLS messages
/// in response to a CurrentPositionsRequestVLS message, it must not send
/// any unsolicited PositionUpdateVLS messages interleaved with the solicited
/// PositionUpdateVLS messages in response to the CurrentPositionsRequestVLS
/// message.
pub struct PositionUpdateFixed {
    data: *const PositionUpdateFixedData
}

pub struct PositionUpdateFixedUnsafe {
    data: *const PositionUpdateFixedData
}

#[repr(packed, C)]
pub struct PositionUpdateFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    total_number_messages: i32,
    message_number: i32,
    symbol: [u8; 64],
    exchange: [u8; 16],
    quantity: f64,
    average_price: f64,
    position_identifier: [u8; 32],
    trade_account: [u8; 32],
    no_positions: u8,
    unsolicited: u8,
    margin_requirement: f64,
    entry_date_time: DateTime4Byte,
    open_profit_loss: f64,
    high_price_during_position: f64,
    low_price_during_position: f64,
    quantity_limit: f64,
    max_potential_postion_quantity: f64,
}

impl PositionUpdateVLSData {
    pub fn new() -> Self {
        Self {
            size: 120u16.to_le(),
            r#type: POSITION_UPDATE.to_le(),
            base_size: 120u16.to_le(),
            request_id: 0i32.to_le(),
            total_number_messages: 0i32.to_le(),
            message_number: 0i32.to_le(),
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            quantity: 0,
            average_price: 0,
            position_identifier: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
            no_positions: 0,
            unsolicited: 0,
            margin_requirement: 0,
            entry_date_time: 0,
            open_profit_loss: 0,
            high_price_during_position: 0,
            low_price_during_position: 0,
            quantity_limit: 0,
            max_potential_postion_quantity: 0,
        }
    }
}

impl PositionUpdateFixedData {
    pub fn new() -> Self {
        Self {
            size: 240u16.to_le(),
            r#type: POSITION_UPDATE.to_le(),
            request_id: 0,
            total_number_messages: 0,
            message_number: 0,
            symbol: [0; 64],
            exchange: [0; 16],
            quantity: 0.0f64,
            average_price: 0.0f64,
            position_identifier: [0; 32],
            trade_account: [0; 32],
            no_positions: 0,
            unsolicited: 0,
            margin_requirement: 0.0f64,
            entry_date_time: 0,
            open_profit_loss: 0.0f64,
            high_price_during_position: 0.0f64,
            low_price_during_position: 0.0f64,
            quantity_limit: 0.0f64,
            max_potential_postion_quantity: 0.0f64,
        }
    }
}

unsafe impl Send for PositionUpdateFixed {}
unsafe impl Send for PositionUpdateFixedUnsafe {}
unsafe impl Send for PositionUpdateFixedData {}
unsafe impl Send for PositionUpdateVLS {}
unsafe impl Send for PositionUpdateVLSUnsafe {}
unsafe impl Send for PositionUpdateVLSData {}

impl Drop for PositionUpdateFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for PositionUpdateFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for PositionUpdateVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for PositionUpdateVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for PositionUpdateFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for PositionUpdateFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for PositionUpdateVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for PositionUpdateVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for PositionUpdateFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for PositionUpdateFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for PositionUpdateVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for PositionUpdateVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for PositionUpdateFixed {
    type Target = PositionUpdateFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for PositionUpdateFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for PositionUpdateFixedUnsafe {
    type Target = PositionUpdateFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for PositionUpdateFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for PositionUpdateVLS {
    type Target = PositionUpdateVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for PositionUpdateVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for PositionUpdateVLSUnsafe {
    type Target = PositionUpdateVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for PositionUpdateVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for PositionUpdateFixed {
    type Safe = PositionUpdateFixed;
    type Unsafe = PositionUpdateFixedUnsafe;
    type Data = PositionUpdateFixedData;
    const BASE_SIZE: usize = 240;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, PositionUpdateFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const PositionUpdateFixedData
        }
    }

}

impl crate::Message for PositionUpdateFixedUnsafe {
    type Safe = PositionUpdateFixed;
    type Unsafe = PositionUpdateFixedUnsafe;
    type Data = PositionUpdateFixedData;
    const BASE_SIZE: usize = 240;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, PositionUpdateFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const PositionUpdateFixedData
        }
    }

}

impl crate::Message for PositionUpdateVLS {
    type Safe = PositionUpdateVLS;
    type Unsafe = PositionUpdateVLSUnsafe;
    type Data = PositionUpdateVLSData;
    const BASE_SIZE: usize = 120;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, PositionUpdateVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const PositionUpdateVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for PositionUpdateVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const PositionUpdateVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for PositionUpdateVLSUnsafe {
    type Safe = PositionUpdateVLS;
    type Unsafe = PositionUpdateVLSUnsafe;
    type Data = PositionUpdateVLSData;
    const BASE_SIZE: usize = 120;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, PositionUpdateVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const PositionUpdateVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for PositionUpdateVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const PositionUpdateVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// This is a message from the Server to the Client to report a Trade Position
/// for a symbol in any Trade Account for the logged in Username.
///
/// The Position Update message can either be solicited, in response to CurrentPositionsRequestVLS.
/// Or unsolicited as a Trade Position for a symbol changes during the connection
/// to the Server. Each Trade Position is contained within a single message.
/// to the Server. Each Trade Position is contained within a single message.
///
/// When the server is responding with one or more PositionUpdateVLS messages
/// in response to a CurrentPositionsRequestVLS message, it must not send
/// any unsolicited PositionUpdateVLS messages interleaved with the solicited
/// PositionUpdateVLS messages in response to the CurrentPositionsRequestVLS
/// message.
impl PositionUpdate for PositionUpdateVLS {
    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn total_number_messages(&self) -> i32 {
        i32::from_le(self.total_number_messages)
    }

    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn message_number(&self) -> i32 {
        i32::from_le(self.message_number)
    }

    /// The symbol for the Position.
    fn symbol(&self) -> &str {
        crate::get_vls(self, self.symbol)
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        crate::get_vls(self, self.exchange)
    }

    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn quantity(&self) -> f64 {
        crate::f64_le(self.quantity)
    }

    /// The average position price.
    fn average_price(&self) -> f64 {
        crate::f64_le(self.average_price)
    }

    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn position_identifier(&self) -> &str {
        crate::get_vls(self, self.position_identifier)
    }

    /// The trade account the Trade Position is in for the Symbol.
    fn trade_account(&self) -> &str {
        crate::get_vls(self, self.trade_account)
    }

    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn no_positions(&self) -> u8 {
        self.no_positions
    }

    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn unsolicited(&self) -> u8 {
        self.unsolicited
    }

    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn margin_requirement(&self) -> f64 {
        crate::f64_le(self.margin_requirement)
    }

    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn entry_date_time(&self) -> DateTime4Byte {
        u32::from_le(self.entry_date_time)
    }

    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn open_profit_loss(&self) -> f64 {
        crate::f64_le(self.open_profit_loss)
    }

    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn high_price_during_position(&self) -> f64 {
        crate::f64_le(self.high_price_during_position)
    }

    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn low_price_during_position(&self) -> f64 {
        crate::f64_le(self.low_price_during_position)
    }

    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn quantity_limit(&self) -> f64 {
        crate::f64_le(self.quantity_limit)
    }

    fn max_potential_postion_quantity(&self) -> f64 {
        crate::f64_le(self.max_potential_postion_quantity)
    }

    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        self.total_number_messages = value.to_le();
        self
    }


    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        self.message_number = value.to_le();
        self
    }


    /// The symbol for the Position.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = crate::set_vls(self, self.symbol, value);
        self
    }


    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = crate::set_vls(self, self.exchange, value);
        self
    }


    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }


    /// The average position price.
    fn set_average_price(&mut self, value: f64) -> &mut Self {
        self.average_price = f64_le(value);
        self
    }


    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn set_position_identifier(&mut self, value: &str) -> &mut Self {
        self.position_identifier = crate::set_vls(self, self.position_identifier, value);
        self
    }


    /// The trade account the Trade Position is in for the Symbol.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = crate::set_vls(self, self.trade_account, value);
        self
    }


    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn set_no_positions(&mut self, value: u8) -> &mut Self {
        self.no_positions = value;
        self
    }


    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn set_unsolicited(&mut self, value: u8) -> &mut Self {
        self.unsolicited = value;
        self
    }


    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn set_margin_requirement(&mut self, value: f64) -> &mut Self {
        self.margin_requirement = f64_le(value);
        self
    }


    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn set_entry_date_time(&mut self, value: DateTime4Byte) -> &mut Self {
        self.entry_date_time = value.to_le();
        self
    }


    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self {
        self.open_profit_loss = f64_le(value);
        self
    }


    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        self.high_price_during_position = f64_le(value);
        self
    }


    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        self.low_price_during_position = f64_le(value);
        self
    }


    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn set_quantity_limit(&mut self, value: f64) -> &mut Self {
        self.quantity_limit = f64_le(value);
        self
    }


    fn set_max_potential_postion_quantity(&mut self, value: f64) -> &mut Self {
        self.max_potential_postion_quantity = f64_le(value);
        self
    }

}

/// This is a message from the Server to the Client to report a Trade Position
/// for a symbol in any Trade Account for the logged in Username.
///
/// The Position Update message can either be solicited, in response to CurrentPositionsRequestVLS.
/// Or unsolicited as a Trade Position for a symbol changes during the connection
/// to the Server. Each Trade Position is contained within a single message.
/// to the Server. Each Trade Position is contained within a single message.
///
/// When the server is responding with one or more PositionUpdateVLS messages
/// in response to a CurrentPositionsRequestVLS message, it must not send
/// any unsolicited PositionUpdateVLS messages interleaved with the solicited
/// PositionUpdateVLS messages in response to the CurrentPositionsRequestVLS
/// message.
impl PositionUpdate for PositionUpdateVLSUnsafe {
    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32.to_le()
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn total_number_messages(&self) -> i32 {
        if self.is_out_of_bounds(16) {
            0i32.to_le()
        } else {
            i32::from_le(self.total_number_messages)
        }
    }

    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn message_number(&self) -> i32 {
        if self.is_out_of_bounds(20) {
            0i32.to_le()
        } else {
            i32::from_le(self.message_number)
        }
    }

    /// The symbol for the Position.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            crate::get_vls(self, self.symbol)
        }
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(28) {
            ""
        } else {
            crate::get_vls(self, self.exchange)
        }
    }

    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(40) {
            0
        } else {
            crate::f64_le(self.quantity)
        }
    }

    /// The average position price.
    fn average_price(&self) -> f64 {
        if self.is_out_of_bounds(48) {
            0
        } else {
            crate::f64_le(self.average_price)
        }
    }

    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn position_identifier(&self) -> &str {
        if self.is_out_of_bounds(52) {
            ""
        } else {
            crate::get_vls(self, self.position_identifier)
        }
    }

    /// The trade account the Trade Position is in for the Symbol.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(56) {
            ""
        } else {
            crate::get_vls(self, self.trade_account)
        }
    }

    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn no_positions(&self) -> u8 {
        if self.is_out_of_bounds(57) {
            0
        } else {
            self.no_positions
        }
    }

    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn unsolicited(&self) -> u8 {
        if self.is_out_of_bounds(58) {
            0
        } else {
            self.unsolicited
        }
    }

    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn margin_requirement(&self) -> f64 {
        if self.is_out_of_bounds(72) {
            0
        } else {
            crate::f64_le(self.margin_requirement)
        }
    }

    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn entry_date_time(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(76) {
            0
        } else {
            u32::from_le(self.entry_date_time)
        }
    }

    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn open_profit_loss(&self) -> f64 {
        if self.is_out_of_bounds(88) {
            0
        } else {
            crate::f64_le(self.open_profit_loss)
        }
    }

    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn high_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(96) {
            0
        } else {
            crate::f64_le(self.high_price_during_position)
        }
    }

    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn low_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(104) {
            0
        } else {
            crate::f64_le(self.low_price_during_position)
        }
    }

    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn quantity_limit(&self) -> f64 {
        if self.is_out_of_bounds(112) {
            0
        } else {
            crate::f64_le(self.quantity_limit)
        }
    }

    fn max_potential_postion_quantity(&self) -> f64 {
        if self.is_out_of_bounds(120) {
            0
        } else {
            crate::f64_le(self.max_potential_postion_quantity)
        }
    }

    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }


    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.total_number_messages = value.to_le();
        }
        self
    }


    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.message_number = value.to_le();
        }
        self
    }


    /// The symbol for the Position.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.symbol = crate::set_vls(self, self.symbol, value);
        }
        self
    }


    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.exchange = crate::set_vls(self, self.exchange, value);
        }
        self
    }


    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.quantity = f64_le(value);
        }
        self
    }


    /// The average position price.
    fn set_average_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.average_price = f64_le(value);
        }
        self
    }


    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn set_position_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.position_identifier = crate::set_vls(self, self.position_identifier, value);
        }
        self
    }


    /// The trade account the Trade Position is in for the Symbol.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.trade_account = crate::set_vls(self, self.trade_account, value);
        }
        self
    }


    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn set_no_positions(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(57) {
            self.no_positions = value;
        }
        self
    }


    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn set_unsolicited(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(58) {
            self.unsolicited = value;
        }
        self
    }


    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn set_margin_requirement(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            self.margin_requirement = f64_le(value);
        }
        self
    }


    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn set_entry_date_time(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(76) {
            self.entry_date_time = value.to_le();
        }
        self
    }


    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            self.open_profit_loss = f64_le(value);
        }
        self
    }


    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.high_price_during_position = f64_le(value);
        }
        self
    }


    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.low_price_during_position = f64_le(value);
        }
        self
    }


    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn set_quantity_limit(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.quantity_limit = f64_le(value);
        }
        self
    }


    fn set_max_potential_postion_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.max_potential_postion_quantity = f64_le(value);
        }
        self
    }

}

/// This is a message from the Server to the Client to report a Trade Position
/// for a symbol in any Trade Account for the logged in Username.
///
/// The Position Update message can either be solicited, in response to CurrentPositionsRequestVLS.
/// Or unsolicited as a Trade Position for a symbol changes during the connection
/// to the Server. Each Trade Position is contained within a single message.
/// to the Server. Each Trade Position is contained within a single message.
///
/// When the server is responding with one or more PositionUpdateVLS messages
/// in response to a CurrentPositionsRequestVLS message, it must not send
/// any unsolicited PositionUpdateVLS messages interleaved with the solicited
/// PositionUpdateVLS messages in response to the CurrentPositionsRequestVLS
/// message.
impl PositionUpdate for PositionUpdateFixed {
    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn total_number_messages(&self) -> i32 {
        i32::from_le(self.total_number_messages)
    }

    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn message_number(&self) -> i32 {
        i32::from_le(self.message_number)
    }

    /// The symbol for the Position.
    fn symbol(&self) -> &str {
        crate::get_fixed(&self.symbol[..])
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        crate::get_fixed(&self.exchange[..])
    }

    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn quantity(&self) -> f64 {
        crate::f64_le(self.quantity)
    }

    /// The average position price.
    fn average_price(&self) -> f64 {
        crate::f64_le(self.average_price)
    }

    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn position_identifier(&self) -> &str {
        crate::get_fixed(&self.position_identifier[..])
    }

    /// The trade account the Trade Position is in for the Symbol.
    fn trade_account(&self) -> &str {
        crate::get_fixed(&self.trade_account[..])
    }

    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn no_positions(&self) -> u8 {
        self.no_positions
    }

    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn unsolicited(&self) -> u8 {
        self.unsolicited
    }

    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn margin_requirement(&self) -> f64 {
        crate::f64_le(self.margin_requirement)
    }

    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn entry_date_time(&self) -> DateTime4Byte {
        u32::from_le(self.entry_date_time)
    }

    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn open_profit_loss(&self) -> f64 {
        crate::f64_le(self.open_profit_loss)
    }

    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn high_price_during_position(&self) -> f64 {
        crate::f64_le(self.high_price_during_position)
    }

    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn low_price_during_position(&self) -> f64 {
        crate::f64_le(self.low_price_during_position)
    }

    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn quantity_limit(&self) -> f64 {
        crate::f64_le(self.quantity_limit)
    }

    fn max_potential_postion_quantity(&self) -> f64 {
        crate::f64_le(self.max_potential_postion_quantity)
    }

    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        self.total_number_messages = value.to_le();
        self
    }


    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        self.message_number = value.to_le();
        self
    }


    /// The symbol for the Position.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.symbol[..], value);
        self
    }


    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.exchange[..], value);
        self
    }


    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }


    /// The average position price.
    fn set_average_price(&mut self, value: f64) -> &mut Self {
        self.average_price = f64_le(value);
        self
    }


    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn set_position_identifier(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.position_identifier[..], value);
        self
    }


    /// The trade account the Trade Position is in for the Symbol.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.trade_account[..], value);
        self
    }


    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn set_no_positions(&mut self, value: u8) -> &mut Self {
        self.no_positions = value;
        self
    }


    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn set_unsolicited(&mut self, value: u8) -> &mut Self {
        self.unsolicited = value;
        self
    }


    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn set_margin_requirement(&mut self, value: f64) -> &mut Self {
        self.margin_requirement = f64_le(value);
        self
    }


    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn set_entry_date_time(&mut self, value: DateTime4Byte) -> &mut Self {
        self.entry_date_time = value.to_le();
        self
    }


    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self {
        self.open_profit_loss = f64_le(value);
        self
    }


    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        self.high_price_during_position = f64_le(value);
        self
    }


    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        self.low_price_during_position = f64_le(value);
        self
    }


    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn set_quantity_limit(&mut self, value: f64) -> &mut Self {
        self.quantity_limit = f64_le(value);
        self
    }


    fn set_max_potential_postion_quantity(&mut self, value: f64) -> &mut Self {
        self.max_potential_postion_quantity = f64_le(value);
        self
    }

}

/// This is a message from the Server to the Client to report a Trade Position
/// for a symbol in any Trade Account for the logged in Username.
///
/// The Position Update message can either be solicited, in response to CurrentPositionsRequestVLS.
/// Or unsolicited as a Trade Position for a symbol changes during the connection
/// to the Server. Each Trade Position is contained within a single message.
/// to the Server. Each Trade Position is contained within a single message.
///
/// When the server is responding with one or more PositionUpdateVLS messages
/// in response to a CurrentPositionsRequestVLS message, it must not send
/// any unsolicited PositionUpdateVLS messages interleaved with the solicited
/// PositionUpdateVLS messages in response to the CurrentPositionsRequestVLS
/// message.
impl PositionUpdate for PositionUpdateFixedUnsafe {
    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn total_number_messages(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0
        } else {
            i32::from_le(self.total_number_messages)
        }
    }

    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn message_number(&self) -> i32 {
        if self.is_out_of_bounds(16) {
            0
        } else {
            i32::from_le(self.message_number)
        }
    }

    /// The symbol for the Position.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(80) {
            ""
        } else {
            crate::get_fixed(&self.symbol[..])
        }
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(96) {
            ""
        } else {
            crate::get_fixed(&self.exchange[..])
        }
    }

    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(104) {
            0.0f64
        } else {
            crate::f64_le(self.quantity)
        }
    }

    /// The average position price.
    fn average_price(&self) -> f64 {
        if self.is_out_of_bounds(112) {
            0.0f64
        } else {
            crate::f64_le(self.average_price)
        }
    }

    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn position_identifier(&self) -> &str {
        if self.is_out_of_bounds(144) {
            ""
        } else {
            crate::get_fixed(&self.position_identifier[..])
        }
    }

    /// The trade account the Trade Position is in for the Symbol.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(176) {
            ""
        } else {
            crate::get_fixed(&self.trade_account[..])
        }
    }

    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn no_positions(&self) -> u8 {
        if self.is_out_of_bounds(177) {
            0
        } else {
            self.no_positions
        }
    }

    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn unsolicited(&self) -> u8 {
        if self.is_out_of_bounds(178) {
            0
        } else {
            self.unsolicited
        }
    }

    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn margin_requirement(&self) -> f64 {
        if self.is_out_of_bounds(192) {
            0.0f64
        } else {
            crate::f64_le(self.margin_requirement)
        }
    }

    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn entry_date_time(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(196) {
            0
        } else {
            u32::from_le(self.entry_date_time)
        }
    }

    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn open_profit_loss(&self) -> f64 {
        if self.is_out_of_bounds(208) {
            0.0f64
        } else {
            crate::f64_le(self.open_profit_loss)
        }
    }

    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn high_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(216) {
            0.0f64
        } else {
            crate::f64_le(self.high_price_during_position)
        }
    }

    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn low_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(224) {
            0.0f64
        } else {
            crate::f64_le(self.low_price_during_position)
        }
    }

    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn quantity_limit(&self) -> f64 {
        if self.is_out_of_bounds(232) {
            0.0f64
        } else {
            crate::f64_le(self.quantity_limit)
        }
    }

    fn max_potential_postion_quantity(&self) -> f64 {
        if self.is_out_of_bounds(240) {
            0.0f64
        } else {
            crate::f64_le(self.max_potential_postion_quantity)
        }
    }

    /// The Server sets this to 0, the default, if this is a real-time Trade Position
    /// update.
    ///
    /// Otherwise, when the Server is sending Trade Positions in response to a
    /// CurrentPositionsRequestVLS message, it must set this to the RequestID
    /// given in the CurrentPositionsRequestVLS message
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// This indicates the total number of Position Update messages when a batch
    /// of messages is being sent. If there is only one Position Update message
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    /// being sent, this will be 1. Use a value of 1 for an unsolicited message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.total_number_messages = value.to_le();
        }
        self
    }


    /// This indicates the 1-based index of the Position Update message when a
    /// batch of messages is being sent. If there is only one Position Update
    /// message being sent, this will be 1. Use a value of 1 for an unsolicited
    /// message.
    ///
    /// A Client should not rely on this field for an unsolicited message. This
    /// is required to be set.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.message_number = value.to_le();
        }
        self
    }


    /// The symbol for the Position.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(80) {
            crate::set_fixed(&mut self.symbol[..], value);
        }
        self
    }


    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            crate::set_fixed(&mut self.exchange[..], value);
        }
        self
    }


    /// The quantity of the current Position for the symbol. A positive number
    /// is for a long Position and a negative number is for a short Position.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.quantity = f64_le(value);
        }
        self
    }


    /// The average position price.
    fn set_average_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.average_price = f64_le(value);
        }
        self
    }


    /// When the Server sets LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// to 1, then it must set PositionIdentifier to a unique identifier to identify
    /// the Trade Position for the particular Symbol and Trade Account for which
    /// it is for.
    ///
    /// Otherwise, this field is optional and it is recommended for a Server not
    /// to use it if it does not provide multiple positions for a Symbol and Trade
    /// Account.
    ///
    /// This field identifies an individual Trade Position in the case of where
    /// there are multiple Positions for a particular Symbol and Trade Account.
    /// there are multiple Positions for a particular Symbol and Trade Account.
    ///
    /// A Client must implement support for PositionIdentifier when LogonResponseVLS::UsesMultiplePositionsPerSymbolAndTradeAccount
    /// is set to 1.
    fn set_position_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(144) {
            crate::set_fixed(&mut self.position_identifier[..], value);
        }
        self
    }


    /// The trade account the Trade Position is in for the Symbol.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(176) {
            crate::set_fixed(&mut self.trade_account[..], value);
        }
        self
    }


    /// Set to an integer value of 1 to indicate there are no Trade Positions
    /// in response to a CurrentPositionsRequestVLS message.
    ///
    /// Otherwise, the Server must leave this at the default of 0. The Server
    /// is always expected to respond with a single PositionUpdateVLS message
    /// when there are no Trade Positions for any Symbol when current Trade Positions
    /// have been requested by the Client with CurrentPositionsRequestVLS.
    ///
    /// When the Server is sending a PositionUpdateVLS message to the Client and
    /// it is indicating that the Quantity field is 0, then the NoPositions field
    /// must be left at the default of 0. It is not used to indicate a Quantity
    /// of 0 for a particular Symbol and TradeAccount.
    ///
    /// This is always set to the default of 0 for an unsolicited Trade Position
    /// Update.
    fn set_no_positions(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(177) {
            self.no_positions = value;
        }
        self
    }


    /// Set to 1 to indicate this is an unsolicited Position Update message. In
    /// other words, it is a real-time Trade Position Update message which is
    /// not an initial response to a CurrentPositionsRequestVLS message.
    fn set_unsolicited(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(178) {
            self.unsolicited = value;
        }
        self
    }


    /// MarginRequirement is the required margin as a currency value for the current
    /// trade Position Quantity and any working orders for the Trade Account.
    ///
    /// This is an optional field for the Server to provide.
    fn set_margin_requirement(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(192) {
            self.margin_requirement = f64_le(value);
        }
        self
    }


    /// EntryDateTime is the Date-Time of the initial entry of the Trade Position.
    /// It is in the UTC time zone.
    ///
    /// This is an optional field for the Server to provide.
    fn set_entry_date_time(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(196) {
            self.entry_date_time = value.to_le();
        }
        self
    }


    /// OpenProfitLoss is the current open Trade Position profit or loss as a
    /// currency value.
    ///
    /// This is an optional field for the Server to provide.
    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(208) {
            self.open_profit_loss = f64_le(value);
        }
        self
    }


    /// HighPriceDuringPosition is the highest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(216) {
            self.high_price_during_position = f64_le(value);
        }
        self
    }


    /// LowPriceDuringPosition is the lowest price the symbol traded at during
    /// the life of the Trade Position. This value can be reset by the Server
    /// when there is a change in Trade Position Quantity.
    ///
    /// This is an optional field for the Server to provide.
    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(224) {
            self.low_price_during_position = f64_le(value);
        }
        self
    }


    /// This is the limit or maximum Trade Position Quantity possible for a Trade
    /// Position for the Trade Account and Symbol. This applies equally to a long
    /// or short position.
    ///
    /// This is only an informational value provided from the risk management
    /// system.
    ///
    /// This is an optional field for the Server to provide.
    fn set_quantity_limit(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(232) {
            self.quantity_limit = f64_le(value);
        }
        self
    }


    fn set_max_potential_postion_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(240) {
            self.max_potential_postion_quantity = f64_le(value);
        }
        self
    }

}

