// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY_FIXED_SIZE: usize = 9;

/// size              u16                     = MarketOrdersSnapshotMessageBoundaryFixedSize  (9)
/// r#type            u16                     = MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY  (155)
/// symbol_id         u32                     = 0
/// message_boundary  MessageSetBoundaryEnum  = MESSAGE_SET_BOUNDARY_UNSET  (0)
const MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY_FIXED_DEFAULT: [u8; 9] = [9, 0, 155, 0, 0, 0, 0, 0, 0];

pub trait MarketOrdersSnapshotMessageBoundary {
    fn symbol_id(&self) -> u32;

    fn message_boundary(&self) -> MessageSetBoundaryEnum;

    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    fn set_message_boundary(&mut self, value: MessageSetBoundaryEnum) -> &mut Self;

    fn copy_to(&self, to: &mut impl MarketOrdersSnapshotMessageBoundary) {
        to.set_symbol_id(self.symbol_id());
        to.set_message_boundary(self.message_boundary());
    }
}

pub struct MarketOrdersSnapshotMessageBoundaryFixed {
    data: *const MarketOrdersSnapshotMessageBoundaryFixedData
}

pub struct MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    data: *const MarketOrdersSnapshotMessageBoundaryFixedData
}

#[repr(packed, C)]
pub struct MarketOrdersSnapshotMessageBoundaryFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    message_boundary: MessageSetBoundaryEnum,
}

impl MarketOrdersSnapshotMessageBoundaryFixedData {
    pub fn new() -> Self {
        Self {
            size: 9u16.to_le(),
            r#type: MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY.to_le(),
            symbol_id: 0u32.to_le(),
            message_boundary: MessageSetBoundaryEnum::MessageSetBoundaryUnset.to_le(),
        }
    }
}

unsafe impl Send for MarketOrdersSnapshotMessageBoundaryFixed {}
unsafe impl Send for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {}
unsafe impl Send for MarketOrdersSnapshotMessageBoundaryFixedData {}

impl Drop for MarketOrdersSnapshotMessageBoundaryFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketOrdersSnapshotMessageBoundaryFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketOrdersSnapshotMessageBoundaryFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketOrdersSnapshotMessageBoundaryFixed {
    type Target = MarketOrdersSnapshotMessageBoundaryFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketOrdersSnapshotMessageBoundaryFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    type Target = MarketOrdersSnapshotMessageBoundaryFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketOrdersSnapshotMessageBoundaryFixed {
    type Safe = MarketOrdersSnapshotMessageBoundaryFixed;
    type Unsafe = MarketOrdersSnapshotMessageBoundaryFixedUnsafe;
    type Data = MarketOrdersSnapshotMessageBoundaryFixedData;
    const BASE_SIZE: usize = 9;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketOrdersSnapshotMessageBoundaryFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketOrdersSnapshotMessageBoundaryFixedData
        }
    }

}

impl crate::Message for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    type Safe = MarketOrdersSnapshotMessageBoundaryFixed;
    type Unsafe = MarketOrdersSnapshotMessageBoundaryFixedUnsafe;
    type Data = MarketOrdersSnapshotMessageBoundaryFixedData;
    const BASE_SIZE: usize = 9;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketOrdersSnapshotMessageBoundaryFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketOrdersSnapshotMessageBoundaryFixedData
        }
    }

}

impl MarketOrdersSnapshotMessageBoundary for MarketOrdersSnapshotMessageBoundaryFixed {
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    fn message_boundary(&self) -> MessageSetBoundaryEnum {
        MessageSetBoundaryEnum::from_le(self.message_boundary)
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    fn set_message_boundary(&mut self, value: MessageSetBoundaryEnum) -> &mut Self {
        self.message_boundary = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

}

impl MarketOrdersSnapshotMessageBoundary for MarketOrdersSnapshotMessageBoundaryFixedUnsafe {
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32.to_le()
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    fn message_boundary(&self) -> MessageSetBoundaryEnum {
        if self.is_out_of_bounds(9) {
            MessageSetBoundaryEnum::MessageSetBoundaryUnset.to_le()
        } else {
            MessageSetBoundaryEnum::from_le(self.message_boundary)
        }
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }


    fn set_message_boundary(&mut self, value: MessageSetBoundaryEnum) -> &mut Self {
        if !self.is_out_of_bounds(9) {
            self.message_boundary = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

}

