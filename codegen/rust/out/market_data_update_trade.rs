// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const MARKET_DATA_UPDATE_TRADE_FIXED_SIZE: usize = 40;

/// size           u16                       = MarketDataUpdateTradeFixedSize  (40)
/// r#type         u16                       = MARKET_DATA_UPDATE_TRADE  (107)
/// symbol_id      u32                       = 0
/// at_bid_or_ask  AtBidOrAskEnum            = BID_ASK_UNSET  (0)
/// price          f64                       = 0
/// volume         f64                       = 0
/// date_time      DateTimeWithMilliseconds  = 0
const MARKET_DATA_UPDATE_TRADE_FIXED_DEFAULT: [u8; 40] = [40, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// The Server sends this market data feed message to the Client when a trade
/// occurs.
pub trait MarketDataUpdateTrade {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// Indicator whether the trade occurred at the bid or ask.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum;

    /// The price of the trade.
    fn price(&self) -> f64;

    /// The volume of the trade.
    fn volume(&self) -> f64;

    /// The Date-Time of the trade.
    fn date_time(&self) -> DateTimeWithMilliseconds;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// Indicator whether the trade occurred at the bid or ask.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum) -> &mut Self;

    /// The price of the trade.
    fn set_price(&mut self, value: f64) -> &mut Self;

    /// The volume of the trade.
    fn set_volume(&mut self, value: f64) -> &mut Self;

    /// The Date-Time of the trade.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    fn copy_to(&self, to: &mut impl MarketDataUpdateTrade) {
        to.set_symbol_id(self.symbol_id());
        to.set_at_bid_or_ask(self.at_bid_or_ask());
        to.set_price(self.price());
        to.set_volume(self.volume());
        to.set_date_time(self.date_time());
    }
}

/// The Server sends this market data feed message to the Client when a trade
/// occurs.
pub struct MarketDataUpdateTradeFixed {
    data: *const MarketDataUpdateTradeFixedData
}

pub struct MarketDataUpdateTradeFixedUnsafe {
    data: *const MarketDataUpdateTradeFixedData
}

#[repr(packed, C)]
pub struct MarketDataUpdateTradeFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    at_bid_or_ask: AtBidOrAskEnum,
    price: f64,
    volume: f64,
    date_time: DateTimeWithMilliseconds,
}

impl MarketDataUpdateTradeFixedData {
    pub fn new() -> Self {
        Self {
            size: 40u16.to_le(),
            r#type: MARKET_DATA_UPDATE_TRADE.to_le(),
            symbol_id: 0,
            at_bid_or_ask: AtBidOrAskEnum::BidAskUnset.to_le(),
            price: 0.0f64,
            volume: 0.0f64,
            date_time: 0.0f64,
        }
    }
}

unsafe impl Send for MarketDataUpdateTradeFixed {}
unsafe impl Send for MarketDataUpdateTradeFixedUnsafe {}
unsafe impl Send for MarketDataUpdateTradeFixedData {}

impl Drop for MarketDataUpdateTradeFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataUpdateTradeFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataUpdateTradeFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataUpdateTradeFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataUpdateTradeFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataUpdateTradeFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataUpdateTradeFixed {
    type Target = MarketDataUpdateTradeFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateTradeFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataUpdateTradeFixedUnsafe {
    type Target = MarketDataUpdateTradeFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateTradeFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataUpdateTradeFixed {
    type Safe = MarketDataUpdateTradeFixed;
    type Unsafe = MarketDataUpdateTradeFixedUnsafe;
    type Data = MarketDataUpdateTradeFixedData;
    const BASE_SIZE: usize = 40;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataUpdateTradeFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateTradeFixedData
        }
    }

}

impl crate::Message for MarketDataUpdateTradeFixedUnsafe {
    type Safe = MarketDataUpdateTradeFixed;
    type Unsafe = MarketDataUpdateTradeFixedUnsafe;
    type Data = MarketDataUpdateTradeFixedData;
    const BASE_SIZE: usize = 40;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataUpdateTradeFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateTradeFixedData
        }
    }

}

/// The Server sends this market data feed message to the Client when a trade
/// occurs.
impl MarketDataUpdateTrade for MarketDataUpdateTradeFixed {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// Indicator whether the trade occurred at the bid or ask.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum {
        AtBidOrAskEnum::from_le(self.at_bid_or_ask)
    }

    /// The price of the trade.
    fn price(&self) -> f64 {
        crate::f64_le(self.price)
    }

    /// The volume of the trade.
    fn volume(&self) -> f64 {
        crate::f64_le(self.volume)
    }

    /// The Date-Time of the trade.
    fn date_time(&self) -> DateTimeWithMilliseconds {
        crate::f64_le(self.date_time)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    /// Indicator whether the trade occurred at the bid or ask.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum) -> &mut Self {
        self.at_bid_or_ask = unsafe { core::mem::transmute((value as u16).to_le()) };
        self
    }


    /// The price of the trade.
    fn set_price(&mut self, value: f64) -> &mut Self {
        self.price = f64_le(value);
        self
    }


    /// The volume of the trade.
    fn set_volume(&mut self, value: f64) -> &mut Self {
        self.volume = f64_le(value);
        self
    }


    /// The Date-Time of the trade.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.date_time = f64_le(value);
        self
    }

}

/// The Server sends this market data feed message to the Client when a trade
/// occurs.
impl MarketDataUpdateTrade for MarketDataUpdateTradeFixedUnsafe {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// Indicator whether the trade occurred at the bid or ask.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum {
        if self.is_out_of_bounds(10) {
            AtBidOrAskEnum::BidAskUnset.to_le()
        } else {
            AtBidOrAskEnum::from_le(self.at_bid_or_ask)
        }
    }

    /// The price of the trade.
    fn price(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            0.0f64
        } else {
            crate::f64_le(self.price)
        }
    }

    /// The volume of the trade.
    fn volume(&self) -> f64 {
        if self.is_out_of_bounds(32) {
            0.0f64
        } else {
            crate::f64_le(self.volume)
        }
    }

    /// The Date-Time of the trade.
    fn date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(40) {
            0.0f64
        } else {
            crate::f64_le(self.date_time)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }


    /// Indicator whether the trade occurred at the bid or ask.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.at_bid_or_ask = unsafe { core::mem::transmute((value as u16).to_le()) };
        }
        self
    }


    /// The price of the trade.
    fn set_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.price = f64_le(value);
        }
        self
    }


    /// The volume of the trade.
    fn set_volume(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.volume = f64_le(value);
        }
        self
    }


    /// The Date-Time of the trade.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.date_time = f64_le(value);
        }
        self
    }

}

