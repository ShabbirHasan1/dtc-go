// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const HISTORICAL_PRICE_DATA_RESPONSE_HEADER_FIXED_SIZE: usize = 20;

/// size                        u16                         = HistoricalPriceDataResponseHeaderFixedSize  (20)
/// r#type                      u16                         = HISTORICAL_PRICE_DATA_RESPONSE_HEADER  (801)
/// request_id                  i32                         = 0
/// record_interval             HistoricalDataIntervalEnum  = INTERVAL_TICK  (0)
/// use_z_lib_compression       bool                        = false
/// no_records_to_return        u8                          = 0
/// int_to_float_price_divisor  f32                         = 0
const HISTORICAL_PRICE_DATA_RESPONSE_HEADER_FIXED_DEFAULT: [u8; 20] = [20, 0, 33, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// When a historical price data request is not rejected, this message header
/// will begin the historical price data response from the Server. There will
/// be one HistoricalPriceDataResponseHeaderFixed message sent ahead of the
/// HistoricalPriceDataRecordResponseFixed / HistoricalPriceDataTickRecordResponseFixed
/// messages. If the NoRecordsToReturn field is nonzero, then there are no
/// further records that will be sent by the Server in response to the request
/// by the Client.
///
/// This message is never compressed.
pub trait HistoricalPriceDataResponseHeader {
    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn request_id(&self) -> i32;

    /// The data interval of type HistoricalDataIntervalEnum requested by the
    /// Client.
    fn record_interval(&self) -> HistoricalDataIntervalEnum;

    /// 1 = All subsequent messages are using standard ZLib compression. 0 = no
    /// compression.
    fn use_z_lib_compression(&self) -> bool;

    /// If there are no records to return in response to the request and there
    /// was no error, this will be set to 1.
    fn no_records_to_return(&self) -> u8;

    /// This field is no longer used.
    fn int_to_float_price_divisor(&self) -> f32;

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// The data interval of type HistoricalDataIntervalEnum requested by the
    /// Client.
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self;

    /// 1 = All subsequent messages are using standard ZLib compression. 0 = no
    /// compression.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self;

    /// If there are no records to return in response to the request and there
    /// was no error, this will be set to 1.
    fn set_no_records_to_return(&mut self, value: u8) -> &mut Self;

    /// This field is no longer used.
    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self;

    fn copy_to(&self, to: &mut impl HistoricalPriceDataResponseHeader) {
        to.set_request_id(self.request_id());
        to.set_record_interval(self.record_interval());
        to.set_use_z_lib_compression(self.use_z_lib_compression());
        to.set_no_records_to_return(self.no_records_to_return());
        to.set_int_to_float_price_divisor(self.int_to_float_price_divisor());
    }
}

/// When a historical price data request is not rejected, this message header
/// will begin the historical price data response from the Server. There will
/// be one HistoricalPriceDataResponseHeaderFixed message sent ahead of the
/// HistoricalPriceDataRecordResponseFixed / HistoricalPriceDataTickRecordResponseFixed
/// messages. If the NoRecordsToReturn field is nonzero, then there are no
/// further records that will be sent by the Server in response to the request
/// by the Client.
///
/// This message is never compressed.
pub struct HistoricalPriceDataResponseHeaderFixed {
    data: *const HistoricalPriceDataResponseHeaderFixedData
}

pub struct HistoricalPriceDataResponseHeaderFixedUnsafe {
    data: *const HistoricalPriceDataResponseHeaderFixedData
}

#[repr(packed, C)]
pub struct HistoricalPriceDataResponseHeaderFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    record_interval: HistoricalDataIntervalEnum,
    use_z_lib_compression: bool,
    no_records_to_return: u8,
    int_to_float_price_divisor: f32,
}

impl HistoricalPriceDataResponseHeaderFixedData {
    pub fn new() -> Self {
        Self {
            size: 20u16.to_le(),
            r#type: HISTORICAL_PRICE_DATA_RESPONSE_HEADER.to_le(),
            request_id: 0,
            record_interval: HistoricalDataIntervalEnum::IntervalTick.to_le(),
            use_z_lib_compression: false,
            no_records_to_return: 0,
            int_to_float_price_divisor: 0.0f32,
        }
    }
}

unsafe impl Send for HistoricalPriceDataResponseHeaderFixed {}
unsafe impl Send for HistoricalPriceDataResponseHeaderFixedUnsafe {}
unsafe impl Send for HistoricalPriceDataResponseHeaderFixedData {}

impl Drop for HistoricalPriceDataResponseHeaderFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalPriceDataResponseHeaderFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalPriceDataResponseHeaderFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalPriceDataResponseHeaderFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataResponseHeaderFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataResponseHeaderFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalPriceDataResponseHeaderFixed {
    type Target = HistoricalPriceDataResponseHeaderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataResponseHeaderFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalPriceDataResponseHeaderFixedUnsafe {
    type Target = HistoricalPriceDataResponseHeaderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataResponseHeaderFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalPriceDataResponseHeaderFixed {
    type Safe = HistoricalPriceDataResponseHeaderFixed;
    type Unsafe = HistoricalPriceDataResponseHeaderFixedUnsafe;
    type Data = HistoricalPriceDataResponseHeaderFixedData;
    const BASE_SIZE: usize = 20;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalPriceDataResponseHeaderFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataResponseHeaderFixedData
        }
    }

}

impl crate::Message for HistoricalPriceDataResponseHeaderFixedUnsafe {
    type Safe = HistoricalPriceDataResponseHeaderFixed;
    type Unsafe = HistoricalPriceDataResponseHeaderFixedUnsafe;
    type Data = HistoricalPriceDataResponseHeaderFixedData;
    const BASE_SIZE: usize = 20;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalPriceDataResponseHeaderFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataResponseHeaderFixedData
        }
    }

}

/// When a historical price data request is not rejected, this message header
/// will begin the historical price data response from the Server. There will
/// be one HistoricalPriceDataResponseHeaderFixed message sent ahead of the
/// HistoricalPriceDataRecordResponseFixed / HistoricalPriceDataTickRecordResponseFixed
/// messages. If the NoRecordsToReturn field is nonzero, then there are no
/// further records that will be sent by the Server in response to the request
/// by the Client.
///
/// This message is never compressed.
impl HistoricalPriceDataResponseHeader for HistoricalPriceDataResponseHeaderFixed {
    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The data interval of type HistoricalDataIntervalEnum requested by the
    /// Client.
    fn record_interval(&self) -> HistoricalDataIntervalEnum {
        HistoricalDataIntervalEnum::from_le(self.record_interval)
    }

    /// 1 = All subsequent messages are using standard ZLib compression. 0 = no
    /// compression.
    fn use_z_lib_compression(&self) -> bool {
        self.use_z_lib_compression
    }

    /// If there are no records to return in response to the request and there
    /// was no error, this will be set to 1.
    fn no_records_to_return(&self) -> u8 {
        self.no_records_to_return
    }

    /// This field is no longer used.
    fn int_to_float_price_divisor(&self) -> f32 {
        crate::f32_le(self.int_to_float_price_divisor)
    }

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// The data interval of type HistoricalDataIntervalEnum requested by the
    /// Client.
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self {
        self.record_interval = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }


    /// 1 = All subsequent messages are using standard ZLib compression. 0 = no
    /// compression.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        self.use_z_lib_compression = value;
        self
    }


    /// If there are no records to return in response to the request and there
    /// was no error, this will be set to 1.
    fn set_no_records_to_return(&mut self, value: u8) -> &mut Self {
        self.no_records_to_return = value;
        self
    }


    /// This field is no longer used.
    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self {
        self.int_to_float_price_divisor = f32_le(value);
        self
    }

}

/// When a historical price data request is not rejected, this message header
/// will begin the historical price data response from the Server. There will
/// be one HistoricalPriceDataResponseHeaderFixed message sent ahead of the
/// HistoricalPriceDataRecordResponseFixed / HistoricalPriceDataTickRecordResponseFixed
/// messages. If the NoRecordsToReturn field is nonzero, then there are no
/// further records that will be sent by the Server in response to the request
/// by the Client.
///
/// This message is never compressed.
impl HistoricalPriceDataResponseHeader for HistoricalPriceDataResponseHeaderFixedUnsafe {
    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The data interval of type HistoricalDataIntervalEnum requested by the
    /// Client.
    fn record_interval(&self) -> HistoricalDataIntervalEnum {
        if self.is_out_of_bounds(12) {
            HistoricalDataIntervalEnum::IntervalTick.to_le()
        } else {
            HistoricalDataIntervalEnum::from_le(self.record_interval)
        }
    }

    /// 1 = All subsequent messages are using standard ZLib compression. 0 = no
    /// compression.
    fn use_z_lib_compression(&self) -> bool {
        if self.is_out_of_bounds(13) {
            false
        } else {
            self.use_z_lib_compression
        }
    }

    /// If there are no records to return in response to the request and there
    /// was no error, this will be set to 1.
    fn no_records_to_return(&self) -> u8 {
        if self.is_out_of_bounds(14) {
            0
        } else {
            self.no_records_to_return
        }
    }

    /// This field is no longer used.
    fn int_to_float_price_divisor(&self) -> f32 {
        if self.is_out_of_bounds(20) {
            0.0f32
        } else {
            crate::f32_le(self.int_to_float_price_divisor)
        }
    }

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// The data interval of type HistoricalDataIntervalEnum requested by the
    /// Client.
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.record_interval = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }


    /// 1 = All subsequent messages are using standard ZLib compression. 0 = no
    /// compression.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(13) {
            self.use_z_lib_compression = value;
        }
        self
    }


    /// If there are no records to return in response to the request and there
    /// was no error, this will be set to 1.
    fn set_no_records_to_return(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.no_records_to_return = value;
        }
        self
    }


    /// This field is no longer used.
    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.int_to_float_price_divisor = f32_le(value);
        }
        self
    }

}

