// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const TRADING_SYMBOL_STATUS_FIXED_SIZE: usize = 12;

/// size       u16                = TradingSymbolStatusFixedSize  (12)
/// r#type     u16                = TRADING_SYMBOL_STATUS  (138)
/// symbol_id  u32                = 0
/// status     TradingStatusEnum  = TRADING_STATUS_UNKNOWN  (0)
const TRADING_SYMBOL_STATUS_FIXED_DEFAULT: [u8; 12] = [12, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// Sent by the Server to the Client to indicate the status of the symbol
/// in regards to whether trading is open or closed or some other intermediate
/// state.
pub trait TradingSymbolStatus {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the status in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The current trading status for the symbol. Can be one of the following.
    /// The current trading status for the symbol. Can be one of the following.
    ///
    /// TRADING_STATUS_UNKNOWN = 0
    /// TRADING_STATUS_PRE_OPEN = 1
    /// TRADING_STATUS_OPEN = 2
    /// TRADING_STATUS_CLOSE = 3
    /// TRADING_STATUS_TRADING_HALT = 4
    fn status(&self) -> TradingStatusEnum;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the status in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The current trading status for the symbol. Can be one of the following.
    /// The current trading status for the symbol. Can be one of the following.
    ///
    /// TRADING_STATUS_UNKNOWN = 0
    /// TRADING_STATUS_PRE_OPEN = 1
    /// TRADING_STATUS_OPEN = 2
    /// TRADING_STATUS_CLOSE = 3
    /// TRADING_STATUS_TRADING_HALT = 4
    fn set_status(&mut self, value: TradingStatusEnum) -> &mut Self;

    fn copy_to(&self, to: &mut impl TradingSymbolStatus) {
        to.set_symbol_id(self.symbol_id());
        to.set_status(self.status());
    }
}

/// Sent by the Server to the Client to indicate the status of the symbol
/// in regards to whether trading is open or closed or some other intermediate
/// state.
pub struct TradingSymbolStatusFixed {
    data: *const TradingSymbolStatusFixedData
}

pub struct TradingSymbolStatusFixedUnsafe {
    data: *const TradingSymbolStatusFixedData
}

#[repr(packed, C)]
pub struct TradingSymbolStatusFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    status: TradingStatusEnum,
}

impl TradingSymbolStatusFixedData {
    pub fn new() -> Self {
        Self {
            size: 12u16.to_le(),
            r#type: TRADING_SYMBOL_STATUS.to_le(),
            symbol_id: 0,
            status: TradingStatusEnum::TradingStatusUnknown.to_le(),
        }
    }
}

unsafe impl Send for TradingSymbolStatusFixed {}
unsafe impl Send for TradingSymbolStatusFixedUnsafe {}
unsafe impl Send for TradingSymbolStatusFixedData {}

impl Drop for TradingSymbolStatusFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for TradingSymbolStatusFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for TradingSymbolStatusFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for TradingSymbolStatusFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for TradingSymbolStatusFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for TradingSymbolStatusFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for TradingSymbolStatusFixed {
    type Target = TradingSymbolStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradingSymbolStatusFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for TradingSymbolStatusFixedUnsafe {
    type Target = TradingSymbolStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradingSymbolStatusFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for TradingSymbolStatusFixed {
    type Safe = TradingSymbolStatusFixed;
    type Unsafe = TradingSymbolStatusFixedUnsafe;
    type Data = TradingSymbolStatusFixedData;
    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradingSymbolStatusFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const TradingSymbolStatusFixedData
        }
    }

}

impl crate::Message for TradingSymbolStatusFixedUnsafe {
    type Safe = TradingSymbolStatusFixed;
    type Unsafe = TradingSymbolStatusFixedUnsafe;
    type Data = TradingSymbolStatusFixedData;
    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradingSymbolStatusFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const TradingSymbolStatusFixedData
        }
    }

}

/// Sent by the Server to the Client to indicate the status of the symbol
/// in regards to whether trading is open or closed or some other intermediate
/// state.
impl TradingSymbolStatus for TradingSymbolStatusFixed {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the status in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The current trading status for the symbol. Can be one of the following.
    /// The current trading status for the symbol. Can be one of the following.
    ///
    /// TRADING_STATUS_UNKNOWN = 0
    /// TRADING_STATUS_PRE_OPEN = 1
    /// TRADING_STATUS_OPEN = 2
    /// TRADING_STATUS_CLOSE = 3
    /// TRADING_STATUS_TRADING_HALT = 4
    fn status(&self) -> TradingStatusEnum {
        TradingStatusEnum::from_le(self.status)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the status in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    /// The current trading status for the symbol. Can be one of the following.
    /// The current trading status for the symbol. Can be one of the following.
    ///
    /// TRADING_STATUS_UNKNOWN = 0
    /// TRADING_STATUS_PRE_OPEN = 1
    /// TRADING_STATUS_OPEN = 2
    /// TRADING_STATUS_CLOSE = 3
    /// TRADING_STATUS_TRADING_HALT = 4
    fn set_status(&mut self, value: TradingStatusEnum) -> &mut Self {
        self.status = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

}

/// Sent by the Server to the Client to indicate the status of the symbol
/// in regards to whether trading is open or closed or some other intermediate
/// state.
impl TradingSymbolStatus for TradingSymbolStatusFixedUnsafe {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the status in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The current trading status for the symbol. Can be one of the following.
    /// The current trading status for the symbol. Can be one of the following.
    ///
    /// TRADING_STATUS_UNKNOWN = 0
    /// TRADING_STATUS_PRE_OPEN = 1
    /// TRADING_STATUS_OPEN = 2
    /// TRADING_STATUS_CLOSE = 3
    /// TRADING_STATUS_TRADING_HALT = 4
    fn status(&self) -> TradingStatusEnum {
        if self.is_out_of_bounds(9) {
            TradingStatusEnum::TradingStatusUnknown.to_le()
        } else {
            TradingStatusEnum::from_le(self.status)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the status in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }


    /// The current trading status for the symbol. Can be one of the following.
    /// The current trading status for the symbol. Can be one of the following.
    ///
    /// TRADING_STATUS_UNKNOWN = 0
    /// TRADING_STATUS_PRE_OPEN = 1
    /// TRADING_STATUS_OPEN = 2
    /// TRADING_STATUS_CLOSE = 3
    /// TRADING_STATUS_TRADING_HALT = 4
    fn set_status(&mut self, value: TradingStatusEnum) -> &mut Self {
        if !self.is_out_of_bounds(9) {
            self.status = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

}

