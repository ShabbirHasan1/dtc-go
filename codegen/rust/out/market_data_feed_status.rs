// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const MARKET_DATA_FEED_STATUS_FIXED_SIZE: usize = 8;

/// size    u16                       = MarketDataFeedStatusFixedSize  (8)
/// r#type  u16                       = MARKET_DATA_FEED_STATUS  (100)
/// status  MarketDataFeedStatusEnum  = MARKET_DATA_FEED_STATUS_UNSET  (0)
const MARKET_DATA_FEED_STATUS_FIXED_DEFAULT: [u8; 8] = [8, 0, 100, 0, 0, 0, 0, 0];

/// The s_MarketDataFeed_STATUS message is an optional message sent by the
/// Server to indicate the overall status of the market data feed. This status
/// applies to all symbols that have been subscribed to for market data.
pub trait MarketDataFeedStatus {
    /// This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
    /// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
    /// to indicate the market data feed has been restored.
    ///
    /// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
    /// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
    /// will the data feed be considered lost.
    fn status(&self) -> MarketDataFeedStatusEnum;

    /// This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
    /// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
    /// to indicate the market data feed has been restored.
    ///
    /// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
    /// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
    /// will the data feed be considered lost.
    fn set_status(&mut self, value: MarketDataFeedStatusEnum) -> &mut Self;

    fn copy_to(&self, to: &mut impl MarketDataFeedStatus) {
        to.set_status(self.status());
    }
}

/// The s_MarketDataFeed_STATUS message is an optional message sent by the
/// Server to indicate the overall status of the market data feed. This status
/// applies to all symbols that have been subscribed to for market data.
pub struct MarketDataFeedStatusFixed {
    data: *const MarketDataFeedStatusFixedData
}

pub struct MarketDataFeedStatusFixedUnsafe {
    data: *const MarketDataFeedStatusFixedData
}

#[repr(packed, C)]
pub struct MarketDataFeedStatusFixedData {
    size: u16,
    r#type: u16,
    status: MarketDataFeedStatusEnum,
}

impl MarketDataFeedStatusFixedData {
    pub fn new() -> Self {
        Self {
            size: 8u16.to_le(),
            r#type: MARKET_DATA_FEED_STATUS.to_le(),
            status: MarketDataFeedStatusEnum::MarketDataFeedStatusUnset.to_le(),
        }
    }
}

unsafe impl Send for MarketDataFeedStatusFixed {}
unsafe impl Send for MarketDataFeedStatusFixedUnsafe {}
unsafe impl Send for MarketDataFeedStatusFixedData {}

impl Drop for MarketDataFeedStatusFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataFeedStatusFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataFeedStatusFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataFeedStatusFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataFeedStatusFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataFeedStatusFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataFeedStatusFixed {
    type Target = MarketDataFeedStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataFeedStatusFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataFeedStatusFixedUnsafe {
    type Target = MarketDataFeedStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataFeedStatusFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataFeedStatusFixed {
    type Safe = MarketDataFeedStatusFixed;
    type Unsafe = MarketDataFeedStatusFixedUnsafe;
    type Data = MarketDataFeedStatusFixedData;
    const BASE_SIZE: usize = 8;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataFeedStatusFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataFeedStatusFixedData
        }
    }

}

impl crate::Message for MarketDataFeedStatusFixedUnsafe {
    type Safe = MarketDataFeedStatusFixed;
    type Unsafe = MarketDataFeedStatusFixedUnsafe;
    type Data = MarketDataFeedStatusFixedData;
    const BASE_SIZE: usize = 8;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataFeedStatusFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataFeedStatusFixedData
        }
    }

}

/// The s_MarketDataFeed_STATUS message is an optional message sent by the
/// Server to indicate the overall status of the market data feed. This status
/// applies to all symbols that have been subscribed to for market data.
impl MarketDataFeedStatus for MarketDataFeedStatusFixed {
    /// This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
    /// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
    /// to indicate the market data feed has been restored.
    ///
    /// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
    /// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
    /// will the data feed be considered lost.
    fn status(&self) -> MarketDataFeedStatusEnum {
        MarketDataFeedStatusEnum::from_le(self.status)
    }

    /// This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
    /// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
    /// to indicate the market data feed has been restored.
    ///
    /// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
    /// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
    /// will the data feed be considered lost.
    fn set_status(&mut self, value: MarketDataFeedStatusEnum) -> &mut Self {
        self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

}

/// The s_MarketDataFeed_STATUS message is an optional message sent by the
/// Server to indicate the overall status of the market data feed. This status
/// applies to all symbols that have been subscribed to for market data.
impl MarketDataFeedStatus for MarketDataFeedStatusFixedUnsafe {
    /// This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
    /// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
    /// to indicate the market data feed has been restored.
    ///
    /// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
    /// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
    /// will the data feed be considered lost.
    fn status(&self) -> MarketDataFeedStatusEnum {
        if self.is_out_of_bounds(8) {
            MarketDataFeedStatusEnum::MarketDataFeedStatusUnset.to_le()
        } else {
            MarketDataFeedStatusEnum::from_le(self.status)
        }
    }

    /// This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market
    /// data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE,
    /// to indicate the market data feed has been restored.
    ///
    /// Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed
    /// to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE,
    /// will the data feed be considered lost.
    fn set_status(&mut self, value: MarketDataFeedStatusEnum) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

}

