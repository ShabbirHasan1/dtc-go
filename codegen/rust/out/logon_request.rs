// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const LOGON_REQUEST_VLS_SIZE: usize = 56;

const LOGON_REQUEST_FIXED_SIZE: usize = 284;

/// size                               u16     = LogonRequestVLSSize  (56)
/// r#type                             u16     = LOGON_REQUEST  (1)
/// base_size                          u16     = LogonRequestVLSSize  (56)
/// protocol_version                   i32     = CURRENT_VERSION  (8)
/// username                           string  = ""
/// password                           string  = ""
/// general_text_data                  string  = ""
/// integer1                           i32     = 0
/// integer2                           i32     = 0
/// heartbeat_interval_in_seconds      i32     = 0
/// unused1                            i32     = 0
/// trade_account                      string  = ""
/// hardware_identifier                string  = ""
/// client_name                        string  = ""
/// market_data_transmission_interval  i32     = 0
const LOGON_REQUEST_VLS_DEFAULT: [u8; 56] = [56, 0, 1, 0, 56, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size                               u16       = LogonRequestFixedSize  (284)
/// r#type                             u16       = LOGON_REQUEST  (1)
/// protocol_version                   i32       = CURRENT_VERSION  (8)
/// username                           string32  = ""
/// password                           string32  = ""
/// general_text_data                  string64  = ""
/// integer1                           i32       = 0
/// integer2                           i32       = 0
/// heartbeat_interval_in_seconds      i32       = 0
/// unused1                            i32       = 0
/// trade_account                      string32  = ""
/// hardware_identifier                string64  = ""
/// client_name                        string32  = ""
/// market_data_transmission_interval  i32       = 0
const LOGON_REQUEST_FIXED_DEFAULT: [u8; 284] = [28, 1, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// The LogonRequestVLS message is sent from the Client to the Server requesting
/// to logon to the Server.
///
/// This is the very first message the Client sends to the Server before being
/// allowed to send any other message other than the EncodingRequestFixed.
pub trait LogonRequest {
    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn protocol_version(&self) -> i32;

    /// Optional username for the server to authenticate the Client.
    fn username(&self) -> &str;

    /// Optional password for the server to authenticate the Client.
    fn password(&self) -> &str;

    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn general_text_data(&self) -> &str;

    /// Optional. General-purpose integer.
    fn integer1(&self) -> i32;

    /// Optional. General-purpose integer.
    fn integer2(&self) -> i32;

    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn heartbeat_interval_in_seconds(&self) -> i32;

    fn unused1(&self) -> i32;

    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn trade_account(&self) -> &str;

    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn hardware_identifier(&self) -> &str;

    /// The Client name. This is a free-form text string.
    fn client_name(&self) -> &str;

    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn market_data_transmission_interval(&self) -> i32;

    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self;

    /// Optional username for the server to authenticate the Client.
    fn set_username(&mut self, value: &str) -> &mut Self;

    /// Optional password for the server to authenticate the Client.
    fn set_password(&mut self, value: &str) -> &mut Self;

    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn set_general_text_data(&mut self, value: &str) -> &mut Self;

    /// Optional. General-purpose integer.
    fn set_integer1(&mut self, value: i32) -> &mut Self;

    /// Optional. General-purpose integer.
    fn set_integer2(&mut self, value: i32) -> &mut Self;

    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn set_heartbeat_interval_in_seconds(&mut self, value: i32) -> &mut Self;

    fn set_unused1(&mut self, value: i32) -> &mut Self;

    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn set_hardware_identifier(&mut self, value: &str) -> &mut Self;

    /// The Client name. This is a free-form text string.
    fn set_client_name(&mut self, value: &str) -> &mut Self;

    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn set_market_data_transmission_interval(&mut self, value: i32) -> &mut Self;

    fn copy_to(&self, to: &mut impl LogonRequest) {
        to.set_protocol_version(self.protocol_version());
        to.set_username(self.username());
        to.set_password(self.password());
        to.set_general_text_data(self.general_text_data());
        to.set_integer1(self.integer1());
        to.set_integer2(self.integer2());
        to.set_heartbeat_interval_in_seconds(self.heartbeat_interval_in_seconds());
        to.set_unused1(self.unused1());
        to.set_trade_account(self.trade_account());
        to.set_hardware_identifier(self.hardware_identifier());
        to.set_client_name(self.client_name());
        to.set_market_data_transmission_interval(self.market_data_transmission_interval());
    }
}

/// The LogonRequestVLS message is sent from the Client to the Server requesting
/// to logon to the Server.
///
/// This is the very first message the Client sends to the Server before being
/// allowed to send any other message other than the EncodingRequestFixed.
pub struct LogonRequestVLS {
    data: *const LogonRequestVLSData,
    capacity: usize
}

pub struct LogonRequestVLSUnsafe {
    data: *const LogonRequestVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct LogonRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    protocol_version: i32,
    username: VLS,
    password: VLS,
    general_text_data: VLS,
    integer1: i32,
    integer2: i32,
    heartbeat_interval_in_seconds: i32,
    unused1: i32,
    trade_account: VLS,
    hardware_identifier: VLS,
    client_name: VLS,
    market_data_transmission_interval: i32,
}

/// The LogonRequestVLS message is sent from the Client to the Server requesting
/// to logon to the Server.
///
/// This is the very first message the Client sends to the Server before being
/// allowed to send any other message other than the EncodingRequestFixed.
pub struct LogonRequestFixed {
    data: *const LogonRequestFixedData
}

pub struct LogonRequestFixedUnsafe {
    data: *const LogonRequestFixedData
}

#[repr(packed, C)]
pub struct LogonRequestFixedData {
    size: u16,
    r#type: u16,
    protocol_version: i32,
    username: [u8; 32],
    password: [u8; 32],
    general_text_data: [u8; 64],
    integer1: i32,
    integer2: i32,
    heartbeat_interval_in_seconds: i32,
    unused1: i32,
    trade_account: [u8; 32],
    hardware_identifier: [u8; 64],
    client_name: [u8; 32],
    market_data_transmission_interval: i32,
}

impl LogonRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 56u16.to_le(),
            r#type: LOGON_REQUEST.to_le(),
            base_size: 56u16.to_le(),
            protocol_version: CURRENT_VERSION.to_le(),
            username: crate::message::VLS::new(),
            password: crate::message::VLS::new(),
            general_text_data: crate::message::VLS::new(),
            integer1: 0,
            integer2: 0,
            heartbeat_interval_in_seconds: 0,
            unused1: 0,
            trade_account: crate::message::VLS::new(),
            hardware_identifier: crate::message::VLS::new(),
            client_name: crate::message::VLS::new(),
            market_data_transmission_interval: 0,
        }
    }
}

impl LogonRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 284u16.to_le(),
            r#type: LOGON_REQUEST.to_le(),
            protocol_version: CURRENT_VERSION.to_le(),
            username: [0; 32],
            password: [0; 32],
            general_text_data: [0; 64],
            integer1: 0,
            integer2: 0,
            heartbeat_interval_in_seconds: 0,
            unused1: 0,
            trade_account: [0; 32],
            hardware_identifier: [0; 64],
            client_name: [0; 32],
            market_data_transmission_interval: 0,
        }
    }
}

unsafe impl Send for LogonRequestFixed {}
unsafe impl Send for LogonRequestFixedUnsafe {}
unsafe impl Send for LogonRequestFixedData {}
unsafe impl Send for LogonRequestVLS {}
unsafe impl Send for LogonRequestVLSUnsafe {}
unsafe impl Send for LogonRequestVLSData {}

impl Drop for LogonRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for LogonRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for LogonRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for LogonRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for LogonRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for LogonRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for LogonRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for LogonRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for LogonRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for LogonRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for LogonRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for LogonRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for LogonRequestFixed {
    type Target = LogonRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogonRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for LogonRequestFixedUnsafe {
    type Target = LogonRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogonRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for LogonRequestVLS {
    type Target = LogonRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogonRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for LogonRequestVLSUnsafe {
    type Target = LogonRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogonRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for LogonRequestFixed {
    type Safe = LogonRequestFixed;
    type Unsafe = LogonRequestFixedUnsafe;
    type Data = LogonRequestFixedData;
    const BASE_SIZE: usize = 284;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogonRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const LogonRequestFixedData
        }
    }

}

impl crate::Message for LogonRequestFixedUnsafe {
    type Safe = LogonRequestFixed;
    type Unsafe = LogonRequestFixedUnsafe;
    type Data = LogonRequestFixedData;
    const BASE_SIZE: usize = 284;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogonRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const LogonRequestFixedData
        }
    }

}

impl crate::Message for LogonRequestVLS {
    type Safe = LogonRequestVLS;
    type Unsafe = LogonRequestVLSUnsafe;
    type Data = LogonRequestVLSData;
    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogonRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const LogonRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for LogonRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const LogonRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for LogonRequestVLSUnsafe {
    type Safe = LogonRequestVLS;
    type Unsafe = LogonRequestVLSUnsafe;
    type Data = LogonRequestVLSData;
    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogonRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const LogonRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for LogonRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const LogonRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// The LogonRequestVLS message is sent from the Client to the Server requesting
/// to logon to the Server.
///
/// This is the very first message the Client sends to the Server before being
/// allowed to send any other message other than the EncodingRequestFixed.
impl LogonRequest for LogonRequestVLS {
    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn protocol_version(&self) -> i32 {
        i32::from_le(self.protocol_version)
    }

    /// Optional username for the server to authenticate the Client.
    fn username(&self) -> &str {
        crate::get_vls(self, self.username)
    }

    /// Optional password for the server to authenticate the Client.
    fn password(&self) -> &str {
        crate::get_vls(self, self.password)
    }

    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn general_text_data(&self) -> &str {
        crate::get_vls(self, self.general_text_data)
    }

    /// Optional. General-purpose integer.
    fn integer1(&self) -> i32 {
        i32::from_le(self.integer1)
    }

    /// Optional. General-purpose integer.
    fn integer2(&self) -> i32 {
        i32::from_le(self.integer2)
    }

    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn heartbeat_interval_in_seconds(&self) -> i32 {
        i32::from_le(self.heartbeat_interval_in_seconds)
    }

    fn unused1(&self) -> i32 {
        i32::from_le(self.unused1)
    }

    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn trade_account(&self) -> &str {
        crate::get_vls(self, self.trade_account)
    }

    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn hardware_identifier(&self) -> &str {
        crate::get_vls(self, self.hardware_identifier)
    }

    /// The Client name. This is a free-form text string.
    fn client_name(&self) -> &str {
        crate::get_vls(self, self.client_name)
    }

    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn market_data_transmission_interval(&self) -> i32 {
        i32::from_le(self.market_data_transmission_interval)
    }

    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self {
        self.protocol_version = value.to_le();
        self
    }


    /// Optional username for the server to authenticate the Client.
    fn set_username(&mut self, value: &str) -> &mut Self {
        self.username = crate::set_vls(self, self.username, value);
        self
    }


    /// Optional password for the server to authenticate the Client.
    fn set_password(&mut self, value: &str) -> &mut Self {
        self.password = crate::set_vls(self, self.password, value);
        self
    }


    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn set_general_text_data(&mut self, value: &str) -> &mut Self {
        self.general_text_data = crate::set_vls(self, self.general_text_data, value);
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer1(&mut self, value: i32) -> &mut Self {
        self.integer1 = value.to_le();
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer2(&mut self, value: i32) -> &mut Self {
        self.integer2 = value.to_le();
        self
    }


    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn set_heartbeat_interval_in_seconds(&mut self, value: i32) -> &mut Self {
        self.heartbeat_interval_in_seconds = value.to_le();
        self
    }


    fn set_unused1(&mut self, value: i32) -> &mut Self {
        self.unused1 = value.to_le();
        self
    }


    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = crate::set_vls(self, self.trade_account, value);
        self
    }


    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn set_hardware_identifier(&mut self, value: &str) -> &mut Self {
        self.hardware_identifier = crate::set_vls(self, self.hardware_identifier, value);
        self
    }


    /// The Client name. This is a free-form text string.
    fn set_client_name(&mut self, value: &str) -> &mut Self {
        self.client_name = crate::set_vls(self, self.client_name, value);
        self
    }


    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn set_market_data_transmission_interval(&mut self, value: i32) -> &mut Self {
        self.market_data_transmission_interval = value.to_le();
        self
    }

}

/// The LogonRequestVLS message is sent from the Client to the Server requesting
/// to logon to the Server.
///
/// This is the very first message the Client sends to the Server before being
/// allowed to send any other message other than the EncodingRequestFixed.
impl LogonRequest for LogonRequestVLSUnsafe {
    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn protocol_version(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            CURRENT_VERSION.to_le()
        } else {
            i32::from_le(self.protocol_version)
        }
    }

    /// Optional username for the server to authenticate the Client.
    fn username(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            crate::get_vls(self, self.username)
        }
    }

    /// Optional password for the server to authenticate the Client.
    fn password(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            crate::get_vls(self, self.password)
        }
    }

    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn general_text_data(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            crate::get_vls(self, self.general_text_data)
        }
    }

    /// Optional. General-purpose integer.
    fn integer1(&self) -> i32 {
        if self.is_out_of_bounds(28) {
            0
        } else {
            i32::from_le(self.integer1)
        }
    }

    /// Optional. General-purpose integer.
    fn integer2(&self) -> i32 {
        if self.is_out_of_bounds(32) {
            0
        } else {
            i32::from_le(self.integer2)
        }
    }

    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn heartbeat_interval_in_seconds(&self) -> i32 {
        if self.is_out_of_bounds(36) {
            0
        } else {
            i32::from_le(self.heartbeat_interval_in_seconds)
        }
    }

    fn unused1(&self) -> i32 {
        if self.is_out_of_bounds(40) {
            0
        } else {
            i32::from_le(self.unused1)
        }
    }

    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(44) {
            ""
        } else {
            crate::get_vls(self, self.trade_account)
        }
    }

    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn hardware_identifier(&self) -> &str {
        if self.is_out_of_bounds(48) {
            ""
        } else {
            crate::get_vls(self, self.hardware_identifier)
        }
    }

    /// The Client name. This is a free-form text string.
    fn client_name(&self) -> &str {
        if self.is_out_of_bounds(52) {
            ""
        } else {
            crate::get_vls(self, self.client_name)
        }
    }

    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn market_data_transmission_interval(&self) -> i32 {
        if self.is_out_of_bounds(56) {
            0
        } else {
            i32::from_le(self.market_data_transmission_interval)
        }
    }

    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.protocol_version = value.to_le();
        }
        self
    }


    /// Optional username for the server to authenticate the Client.
    fn set_username(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.username = crate::set_vls(self, self.username, value);
        }
        self
    }


    /// Optional password for the server to authenticate the Client.
    fn set_password(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.password = crate::set_vls(self, self.password, value);
        }
        self
    }


    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn set_general_text_data(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.general_text_data = crate::set_vls(self, self.general_text_data, value);
        }
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer1(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.integer1 = value.to_le();
        }
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer2(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.integer2 = value.to_le();
        }
        self
    }


    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn set_heartbeat_interval_in_seconds(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.heartbeat_interval_in_seconds = value.to_le();
        }
        self
    }


    fn set_unused1(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.unused1 = value.to_le();
        }
        self
    }


    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(44) {
            self.trade_account = crate::set_vls(self, self.trade_account, value);
        }
        self
    }


    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn set_hardware_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.hardware_identifier = crate::set_vls(self, self.hardware_identifier, value);
        }
        self
    }


    /// The Client name. This is a free-form text string.
    fn set_client_name(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.client_name = crate::set_vls(self, self.client_name, value);
        }
        self
    }


    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn set_market_data_transmission_interval(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.market_data_transmission_interval = value.to_le();
        }
        self
    }

}

/// The LogonRequestVLS message is sent from the Client to the Server requesting
/// to logon to the Server.
///
/// This is the very first message the Client sends to the Server before being
/// allowed to send any other message other than the EncodingRequestFixed.
impl LogonRequest for LogonRequestFixed {
    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn protocol_version(&self) -> i32 {
        i32::from_le(self.protocol_version)
    }

    /// Optional username for the server to authenticate the Client.
    fn username(&self) -> &str {
        crate::get_fixed(&self.username[..])
    }

    /// Optional password for the server to authenticate the Client.
    fn password(&self) -> &str {
        crate::get_fixed(&self.password[..])
    }

    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn general_text_data(&self) -> &str {
        crate::get_fixed(&self.general_text_data[..])
    }

    /// Optional. General-purpose integer.
    fn integer1(&self) -> i32 {
        i32::from_le(self.integer1)
    }

    /// Optional. General-purpose integer.
    fn integer2(&self) -> i32 {
        i32::from_le(self.integer2)
    }

    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn heartbeat_interval_in_seconds(&self) -> i32 {
        i32::from_le(self.heartbeat_interval_in_seconds)
    }

    fn unused1(&self) -> i32 {
        i32::from_le(self.unused1)
    }

    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn trade_account(&self) -> &str {
        crate::get_fixed(&self.trade_account[..])
    }

    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn hardware_identifier(&self) -> &str {
        crate::get_fixed(&self.hardware_identifier[..])
    }

    /// The Client name. This is a free-form text string.
    fn client_name(&self) -> &str {
        crate::get_fixed(&self.client_name[..])
    }

    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn market_data_transmission_interval(&self) -> i32 {
        i32::from_le(self.market_data_transmission_interval)
    }

    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self {
        self.protocol_version = value.to_le();
        self
    }


    /// Optional username for the server to authenticate the Client.
    fn set_username(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.username[..], value);
        self
    }


    /// Optional password for the server to authenticate the Client.
    fn set_password(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.password[..], value);
        self
    }


    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn set_general_text_data(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.general_text_data[..], value);
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer1(&mut self, value: i32) -> &mut Self {
        self.integer1 = value.to_le();
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer2(&mut self, value: i32) -> &mut Self {
        self.integer2 = value.to_le();
        self
    }


    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn set_heartbeat_interval_in_seconds(&mut self, value: i32) -> &mut Self {
        self.heartbeat_interval_in_seconds = value.to_le();
        self
    }


    fn set_unused1(&mut self, value: i32) -> &mut Self {
        self.unused1 = value.to_le();
        self
    }


    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.trade_account[..], value);
        self
    }


    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn set_hardware_identifier(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.hardware_identifier[..], value);
        self
    }


    /// The Client name. This is a free-form text string.
    fn set_client_name(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.client_name[..], value);
        self
    }


    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn set_market_data_transmission_interval(&mut self, value: i32) -> &mut Self {
        self.market_data_transmission_interval = value.to_le();
        self
    }

}

/// The LogonRequestVLS message is sent from the Client to the Server requesting
/// to logon to the Server.
///
/// This is the very first message the Client sends to the Server before being
/// allowed to send any other message other than the EncodingRequestFixed.
impl LogonRequest for LogonRequestFixedUnsafe {
    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn protocol_version(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            CURRENT_VERSION.to_le()
        } else {
            i32::from_le(self.protocol_version)
        }
    }

    /// Optional username for the server to authenticate the Client.
    fn username(&self) -> &str {
        if self.is_out_of_bounds(40) {
            ""
        } else {
            crate::get_fixed(&self.username[..])
        }
    }

    /// Optional password for the server to authenticate the Client.
    fn password(&self) -> &str {
        if self.is_out_of_bounds(72) {
            ""
        } else {
            crate::get_fixed(&self.password[..])
        }
    }

    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn general_text_data(&self) -> &str {
        if self.is_out_of_bounds(136) {
            ""
        } else {
            crate::get_fixed(&self.general_text_data[..])
        }
    }

    /// Optional. General-purpose integer.
    fn integer1(&self) -> i32 {
        if self.is_out_of_bounds(140) {
            0
        } else {
            i32::from_le(self.integer1)
        }
    }

    /// Optional. General-purpose integer.
    fn integer2(&self) -> i32 {
        if self.is_out_of_bounds(144) {
            0
        } else {
            i32::from_le(self.integer2)
        }
    }

    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn heartbeat_interval_in_seconds(&self) -> i32 {
        if self.is_out_of_bounds(148) {
            0
        } else {
            i32::from_le(self.heartbeat_interval_in_seconds)
        }
    }

    fn unused1(&self) -> i32 {
        if self.is_out_of_bounds(152) {
            0
        } else {
            i32::from_le(self.unused1)
        }
    }

    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(184) {
            ""
        } else {
            crate::get_fixed(&self.trade_account[..])
        }
    }

    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn hardware_identifier(&self) -> &str {
        if self.is_out_of_bounds(248) {
            ""
        } else {
            crate::get_fixed(&self.hardware_identifier[..])
        }
    }

    /// The Client name. This is a free-form text string.
    fn client_name(&self) -> &str {
        if self.is_out_of_bounds(280) {
            ""
        } else {
            crate::get_fixed(&self.client_name[..])
        }
    }

    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn market_data_transmission_interval(&self) -> i32 {
        if self.is_out_of_bounds(284) {
            0
        } else {
            i32::from_le(self.market_data_transmission_interval)
        }
    }

    /// The protocol version supported by the Client. Automatically set by constructor.
    /// The protocol version supported by the Client. Automatically set by constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.protocol_version = value.to_le();
        }
        self
    }


    /// Optional username for the server to authenticate the Client.
    fn set_username(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            crate::set_fixed(&mut self.username[..], value);
        }
        self
    }


    /// Optional password for the server to authenticate the Client.
    fn set_password(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            crate::set_fixed(&mut self.password[..], value);
        }
        self
    }


    /// Optional general-purpose text string. For example, this could be used
    /// to pass a license key that the Server may require.
    fn set_general_text_data(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(136) {
            crate::set_fixed(&mut self.general_text_data[..], value);
        }
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer1(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(140) {
            self.integer1 = value.to_le();
        }
        self
    }


    /// Optional. General-purpose integer.
    fn set_integer2(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(144) {
            self.integer2 = value.to_le();
        }
        self
    }


    /// The interval in seconds that each side, the Client and the Server, needs
    /// to use to send HeartbeatFixed messages to the other side.
    ///
    /// This should be a value from anywhere from 5 to 60 seconds.
    ///
    /// This field is required.
    fn set_heartbeat_interval_in_seconds(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(148) {
            self.heartbeat_interval_in_seconds = value.to_le();
        }
        self
    }


    fn set_unused1(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(152) {
            self.unused1 = value.to_le();
        }
        self
    }


    /// This is an optional field and this should only be set to a Trade Account
    /// identifier if that is required to logon by the Server. this would only
    /// be implemented in rare cases. Usually this would be the case if the logon
    /// is bound to a particular Trade Account and not changeable after the log
    /// in.
    ///
    /// The server is still required to implement the TradeAccountsRequestFixed
    /// and TradeAccountResponseVLSmessages.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(184) {
            crate::set_fixed(&mut self.trade_account[..], value);
        }
        self
    }


    /// Optional: This is the computer hardware identifier. The intention of this
    /// is that this will be implemented by the Client program developer on a
    /// case-by-case basis for specific Data/Trading service providers. It will
    /// be a reasonable implementation to uniquely identify a system and will
    /// not be publicly disclosed. It will never contain personally identifiable
    /// information.
    fn set_hardware_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(248) {
            crate::set_fixed(&mut self.hardware_identifier[..], value);
        }
        self
    }


    /// The Client name. This is a free-form text string.
    fn set_client_name(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(280) {
            crate::set_fixed(&mut self.client_name[..], value);
        }
        self
    }


    /// This is an optional field to be used by the Server which specifies in
    /// milliseconds, the delay with transmitting market data to the Client.
    ///
    /// For reasons of efficiency, the server may buffer data over this timeframe,
    /// and send data after this time frame expires.
    fn set_market_data_transmission_interval(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(284) {
            self.market_data_transmission_interval = value.to_le();
        }
        self
    }

}

