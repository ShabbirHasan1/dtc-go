// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER_FIXED_SIZE: usize = 12;

/// size                   u16   = HistoricalMarketDepthDataResponseHeaderFixedSize  (12)
/// r#type                 u16   = HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER  (901)
/// request_id             i32   = 0
/// use_z_lib_compression  bool  = false
/// no_records_to_return   u8    = 0
const HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER_FIXED_DEFAULT: [u8; 12] = [12, 0, 133, 3, 0, 0, 0, 0, 0, 0, 0, 0];

pub trait HistoricalMarketDepthDataResponseHeader {
    fn request_id(&self) -> i32;

    fn use_z_lib_compression(&self) -> bool;

    fn no_records_to_return(&self) -> u8;

    fn set_request_id(&mut self, value: i32) -> &mut Self;

    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self;

    fn set_no_records_to_return(&mut self, value: u8) -> &mut Self;

    fn copy_to(&self, to: &mut impl HistoricalMarketDepthDataResponseHeader) {
        to.set_request_id(self.request_id());
        to.set_use_z_lib_compression(self.use_z_lib_compression());
        to.set_no_records_to_return(self.no_records_to_return());
    }
}

pub struct HistoricalMarketDepthDataResponseHeaderFixed {
    data: *const HistoricalMarketDepthDataResponseHeaderFixedData
}

pub struct HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    data: *const HistoricalMarketDepthDataResponseHeaderFixedData
}

#[repr(packed, C)]
pub struct HistoricalMarketDepthDataResponseHeaderFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    use_z_lib_compression: bool,
    no_records_to_return: u8,
}

impl HistoricalMarketDepthDataResponseHeaderFixedData {
    pub fn new() -> Self {
        Self {
            size: 12u16.to_le(),
            r#type: HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER.to_le(),
            request_id: 0,
            use_z_lib_compression: false,
            no_records_to_return: 0,
        }
    }
}

unsafe impl Send for HistoricalMarketDepthDataResponseHeaderFixed {}
unsafe impl Send for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {}
unsafe impl Send for HistoricalMarketDepthDataResponseHeaderFixedData {}

impl Drop for HistoricalMarketDepthDataResponseHeaderFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalMarketDepthDataResponseHeaderFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataResponseHeaderFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataResponseHeaderFixed {
    type Target = HistoricalMarketDepthDataResponseHeaderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataResponseHeaderFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    type Target = HistoricalMarketDepthDataResponseHeaderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalMarketDepthDataResponseHeaderFixed {
    type Safe = HistoricalMarketDepthDataResponseHeaderFixed;
    type Unsafe = HistoricalMarketDepthDataResponseHeaderFixedUnsafe;
    type Data = HistoricalMarketDepthDataResponseHeaderFixedData;
    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalMarketDepthDataResponseHeaderFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataResponseHeaderFixedData
        }
    }

}

impl crate::Message for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    type Safe = HistoricalMarketDepthDataResponseHeaderFixed;
    type Unsafe = HistoricalMarketDepthDataResponseHeaderFixedUnsafe;
    type Data = HistoricalMarketDepthDataResponseHeaderFixedData;
    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalMarketDepthDataResponseHeaderFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataResponseHeaderFixedData
        }
    }

}

impl HistoricalMarketDepthDataResponseHeader for HistoricalMarketDepthDataResponseHeaderFixed {
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn use_z_lib_compression(&self) -> bool {
        self.use_z_lib_compression
    }

    fn no_records_to_return(&self) -> u8 {
        self.no_records_to_return
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        self.use_z_lib_compression = value;
        self
    }


    fn set_no_records_to_return(&mut self, value: u8) -> &mut Self {
        self.no_records_to_return = value;
        self
    }

}

impl HistoricalMarketDepthDataResponseHeader for HistoricalMarketDepthDataResponseHeaderFixedUnsafe {
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn use_z_lib_compression(&self) -> bool {
        if self.is_out_of_bounds(9) {
            false
        } else {
            self.use_z_lib_compression
        }
    }

    fn no_records_to_return(&self) -> u8 {
        if self.is_out_of_bounds(10) {
            0
        } else {
            self.no_records_to_return
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(9) {
            self.use_z_lib_compression = value;
        }
        self
    }


    fn set_no_records_to_return(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.no_records_to_return = value;
        }
        self
    }

}

