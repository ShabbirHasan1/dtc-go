// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const MARKET_DATA_UPDATE_SESSION_VOLUME_FIXED_SIZE: usize = 24;

/// size                     u16            = MarketDataUpdateSessionVolumeFixedSize  (24)
/// r#type                   u16            = MARKET_DATA_UPDATE_SESSION_VOLUME  (113)
/// symbol_id                u32            = 0
/// volume                   f64            = 0
/// trading_session_date     DateTime4Byte  = 0
/// is_final_session_volume  bool           = false
const MARKET_DATA_UPDATE_SESSION_VOLUME_FIXED_DEFAULT: [u8; 24] = [24, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// Sent by the Server to the Client when the session trade Volume needs to
/// be updated.
///
/// The recommended rule for the Server to notify the Client of a change with
/// the session trade volume to maintain bandwidth efficiency, is as follows:
/// When a trade occurs for a symbol subscribed to, the Server will send a
/// MarketDataUpdateTradeFixed message to the Client. The Client should then
/// increment its session trade volume value for the symbol by the value in
/// the Volume field in this message.
///
/// The Server will assume the Client is doing this. Therefore, when a trade
/// occurs and the session trade volume does not equal the prior session trade
/// volume plus the Volume for the most recent trade sent to the Client, then
/// the Server must send out a MarketDataUpdateSessionVolumeFixed message
/// to the client since the client calculation of the session trade volume
/// is no longer correct.
///
/// It is assumed that the reason for this inconsistency is due to trades
/// included within the session trade volume which have not been sent out
/// as normal trades.
///
/// The Server should also send this message out at the frequency that the
/// Server determines, such as every minute if there also has been a trade
/// at that time.
pub trait MarketDataUpdateSessionVolume {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The total Volume for the session.
    fn volume(&self) -> f64;

    fn trading_session_date(&self) -> DateTime4Byte;

    fn is_final_session_volume(&self) -> bool;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The total Volume for the session.
    fn set_volume(&mut self, value: f64) -> &mut Self;

    fn set_trading_session_date(&mut self, value: DateTime4Byte) -> &mut Self;

    fn set_is_final_session_volume(&mut self, value: bool) -> &mut Self;

    fn copy_to(&self, to: &mut impl MarketDataUpdateSessionVolume) {
        to.set_symbol_id(self.symbol_id());
        to.set_volume(self.volume());
        to.set_trading_session_date(self.trading_session_date());
        to.set_is_final_session_volume(self.is_final_session_volume());
    }
}

/// Sent by the Server to the Client when the session trade Volume needs to
/// be updated.
///
/// The recommended rule for the Server to notify the Client of a change with
/// the session trade volume to maintain bandwidth efficiency, is as follows:
/// When a trade occurs for a symbol subscribed to, the Server will send a
/// MarketDataUpdateTradeFixed message to the Client. The Client should then
/// increment its session trade volume value for the symbol by the value in
/// the Volume field in this message.
///
/// The Server will assume the Client is doing this. Therefore, when a trade
/// occurs and the session trade volume does not equal the prior session trade
/// volume plus the Volume for the most recent trade sent to the Client, then
/// the Server must send out a MarketDataUpdateSessionVolumeFixed message
/// to the client since the client calculation of the session trade volume
/// is no longer correct.
///
/// It is assumed that the reason for this inconsistency is due to trades
/// included within the session trade volume which have not been sent out
/// as normal trades.
///
/// The Server should also send this message out at the frequency that the
/// Server determines, such as every minute if there also has been a trade
/// at that time.
pub struct MarketDataUpdateSessionVolumeFixed {
    data: *const MarketDataUpdateSessionVolumeFixedData
}

pub struct MarketDataUpdateSessionVolumeFixedUnsafe {
    data: *const MarketDataUpdateSessionVolumeFixedData
}

#[repr(packed, C)]
pub struct MarketDataUpdateSessionVolumeFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    volume: f64,
    trading_session_date: DateTime4Byte,
    is_final_session_volume: bool,
}

impl MarketDataUpdateSessionVolumeFixedData {
    pub fn new() -> Self {
        Self {
            size: 24u16.to_le(),
            r#type: MARKET_DATA_UPDATE_SESSION_VOLUME.to_le(),
            symbol_id: 0,
            volume: 0.0f64,
            trading_session_date: 0,
            is_final_session_volume: false,
        }
    }
}

unsafe impl Send for MarketDataUpdateSessionVolumeFixed {}
unsafe impl Send for MarketDataUpdateSessionVolumeFixedUnsafe {}
unsafe impl Send for MarketDataUpdateSessionVolumeFixedData {}

impl Drop for MarketDataUpdateSessionVolumeFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataUpdateSessionVolumeFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataUpdateSessionVolumeFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataUpdateSessionVolumeFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataUpdateSessionVolumeFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataUpdateSessionVolumeFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataUpdateSessionVolumeFixed {
    type Target = MarketDataUpdateSessionVolumeFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateSessionVolumeFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataUpdateSessionVolumeFixedUnsafe {
    type Target = MarketDataUpdateSessionVolumeFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateSessionVolumeFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataUpdateSessionVolumeFixed {
    type Safe = MarketDataUpdateSessionVolumeFixed;
    type Unsafe = MarketDataUpdateSessionVolumeFixedUnsafe;
    type Data = MarketDataUpdateSessionVolumeFixedData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataUpdateSessionVolumeFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateSessionVolumeFixedData
        }
    }

}

impl crate::Message for MarketDataUpdateSessionVolumeFixedUnsafe {
    type Safe = MarketDataUpdateSessionVolumeFixed;
    type Unsafe = MarketDataUpdateSessionVolumeFixedUnsafe;
    type Data = MarketDataUpdateSessionVolumeFixedData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataUpdateSessionVolumeFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateSessionVolumeFixedData
        }
    }

}

/// Sent by the Server to the Client when the session trade Volume needs to
/// be updated.
///
/// The recommended rule for the Server to notify the Client of a change with
/// the session trade volume to maintain bandwidth efficiency, is as follows:
/// When a trade occurs for a symbol subscribed to, the Server will send a
/// MarketDataUpdateTradeFixed message to the Client. The Client should then
/// increment its session trade volume value for the symbol by the value in
/// the Volume field in this message.
///
/// The Server will assume the Client is doing this. Therefore, when a trade
/// occurs and the session trade volume does not equal the prior session trade
/// volume plus the Volume for the most recent trade sent to the Client, then
/// the Server must send out a MarketDataUpdateSessionVolumeFixed message
/// to the client since the client calculation of the session trade volume
/// is no longer correct.
///
/// It is assumed that the reason for this inconsistency is due to trades
/// included within the session trade volume which have not been sent out
/// as normal trades.
///
/// The Server should also send this message out at the frequency that the
/// Server determines, such as every minute if there also has been a trade
/// at that time.
impl MarketDataUpdateSessionVolume for MarketDataUpdateSessionVolumeFixed {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The total Volume for the session.
    fn volume(&self) -> f64 {
        crate::f64_le(self.volume)
    }

    fn trading_session_date(&self) -> DateTime4Byte {
        u32::from_le(self.trading_session_date)
    }

    fn is_final_session_volume(&self) -> bool {
        self.is_final_session_volume
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    /// The total Volume for the session.
    fn set_volume(&mut self, value: f64) -> &mut Self {
        self.volume = f64_le(value);
        self
    }


    fn set_trading_session_date(&mut self, value: DateTime4Byte) -> &mut Self {
        self.trading_session_date = value.to_le();
        self
    }


    fn set_is_final_session_volume(&mut self, value: bool) -> &mut Self {
        self.is_final_session_volume = value;
        self
    }

}

/// Sent by the Server to the Client when the session trade Volume needs to
/// be updated.
///
/// The recommended rule for the Server to notify the Client of a change with
/// the session trade volume to maintain bandwidth efficiency, is as follows:
/// When a trade occurs for a symbol subscribed to, the Server will send a
/// MarketDataUpdateTradeFixed message to the Client. The Client should then
/// increment its session trade volume value for the symbol by the value in
/// the Volume field in this message.
///
/// The Server will assume the Client is doing this. Therefore, when a trade
/// occurs and the session trade volume does not equal the prior session trade
/// volume plus the Volume for the most recent trade sent to the Client, then
/// the Server must send out a MarketDataUpdateSessionVolumeFixed message
/// to the client since the client calculation of the session trade volume
/// is no longer correct.
///
/// It is assumed that the reason for this inconsistency is due to trades
/// included within the session trade volume which have not been sent out
/// as normal trades.
///
/// The Server should also send this message out at the frequency that the
/// Server determines, such as every minute if there also has been a trade
/// at that time.
impl MarketDataUpdateSessionVolume for MarketDataUpdateSessionVolumeFixedUnsafe {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The total Volume for the session.
    fn volume(&self) -> f64 {
        if self.is_out_of_bounds(16) {
            0.0f64
        } else {
            crate::f64_le(self.volume)
        }
    }

    fn trading_session_date(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(20) {
            0
        } else {
            u32::from_le(self.trading_session_date)
        }
    }

    fn is_final_session_volume(&self) -> bool {
        if self.is_out_of_bounds(21) {
            false
        } else {
            self.is_final_session_volume
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }


    /// The total Volume for the session.
    fn set_volume(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.volume = f64_le(value);
        }
        self
    }


    fn set_trading_session_date(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.trading_session_date = value.to_le();
        }
        self
    }


    fn set_is_final_session_volume(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(21) {
            self.is_final_session_volume = value;
        }
        self
    }

}

