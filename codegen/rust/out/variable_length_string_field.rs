// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-23 21:07:20.84591 +0800 WITA m=+0.009860584
use super::constants::*;
use super::alias::*;
use super::enums::*;
use crate::message::*;

const VARIABLE_LENGTH_STRING_FIELD_VLS_SIZE: usize = 4;

/// offset  u16  = 0
/// length  u16  = 0
const VARIABLE_LENGTH_STRING_FIELD_VLS_DEFAULT: [u8; 4] = [0, 0, 0, 0];

pub trait VariableLengthStringField {
    fn offset(&self) -> u16;

    fn length(&self) -> u16;

    fn set_offset(&mut self, value: u16) -> &mut Self;

    fn set_length(&mut self, value: u16) -> &mut Self;

    fn copy_to(&self, to: &mut impl VariableLengthStringField) {
        to.set_offset(self.offset());
        to.set_length(self.length());
    }
}

pub struct VariableLengthStringFieldVLS {
    data: *const VariableLengthStringFieldVLSData,
    capacity: usize
}

pub struct VariableLengthStringFieldVLSUnsafe {
    data: *const VariableLengthStringFieldVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct VariableLengthStringFieldVLSData {
    offset: u16,
    length: u16,
}

impl VariableLengthStringFieldVLSData {
    pub fn new() -> Self {
        Self {
            offset: 0u16.to_le(),
            length: 0u16.to_le(),
        }
    }
}

unsafe impl Send for VariableLengthStringFieldVLS {}
unsafe impl Send for VariableLengthStringFieldVLSUnsafe {}
unsafe impl Send for VariableLengthStringFieldVLSData {}

impl Drop for VariableLengthStringFieldVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for VariableLengthStringFieldVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for VariableLengthStringFieldVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for VariableLengthStringFieldVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for VariableLengthStringFieldVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for VariableLengthStringFieldVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for VariableLengthStringFieldVLS {
    type Target = VariableLengthStringFieldVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for VariableLengthStringFieldVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for VariableLengthStringFieldVLSUnsafe {
    type Target = VariableLengthStringFieldVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for VariableLengthStringFieldVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for VariableLengthStringFieldVLS {
    type Safe = VariableLengthStringFieldVLS;
    type Unsafe = VariableLengthStringFieldVLSUnsafe;
    type Data = VariableLengthStringFieldVLSData;
    const BASE_SIZE: usize = 4;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, VariableLengthStringFieldVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const VariableLengthStringFieldVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for VariableLengthStringFieldVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const VariableLengthStringFieldVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for VariableLengthStringFieldVLSUnsafe {
    type Safe = VariableLengthStringFieldVLS;
    type Unsafe = VariableLengthStringFieldVLSUnsafe;
    type Data = VariableLengthStringFieldVLSData;
    const BASE_SIZE: usize = 4;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, VariableLengthStringFieldVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const VariableLengthStringFieldVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for VariableLengthStringFieldVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const VariableLengthStringFieldVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl VariableLengthStringField for VariableLengthStringFieldVLS {
    fn offset(&self) -> u16 {
        u16::from_le(self.offset)
    }

    fn length(&self) -> u16 {
        u16::from_le(self.length)
    }

    fn set_offset(&mut self, value: u16) -> &mut Self {
        self.offset = value.to_le();
        self
    }


    fn set_length(&mut self, value: u16) -> &mut Self {
        self.length = value.to_le();
        self
    }

}

impl VariableLengthStringField for VariableLengthStringFieldVLSUnsafe {
    fn offset(&self) -> u16 {
        if self.is_out_of_bounds(2) {
            0u16.to_le()
        } else {
            u16::from_le(self.offset)
        }
    }

    fn length(&self) -> u16 {
        if self.is_out_of_bounds(4) {
            0u16.to_le()
        } else {
            u16::from_le(self.length)
        }
    }

    fn set_offset(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(2) {
            self.offset = value.to_le();
        }
        self
    }


    fn set_length(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(4) {
            self.length = value.to_le();
        }
        self
    }

}

