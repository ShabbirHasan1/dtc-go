// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const MARKET_DEPTH_REQUEST_VLS_SIZE: usize = 28;

pub(crate) const MARKET_DEPTH_REQUEST_FIXED_SIZE: usize = 96;

/// size            u16                = MarketDepthRequestVLSSize  (28)
/// type            u16                = MARKET_DEPTH_REQUEST  (102)
/// base_size       u16                = MarketDepthRequestVLSSize  (28)
/// request_action  RequestActionEnum  = SUBSCRIBE  (1)
/// symbol_id       u32                = 0
/// symbol          string             = ""
/// exchange        string             = ""
/// num_levels      i32                = 10
pub(crate) const MARKET_DEPTH_REQUEST_VLS_DEFAULT: [u8; 28] = [
    28, 0, 102, 0, 28, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0,
];

/// size            u16                = MarketDepthRequestFixedSize  (96)
/// type            u16                = MARKET_DEPTH_REQUEST  (102)
/// request_action  RequestActionEnum  = SUBSCRIBE  (1)
/// symbol_id       u32                = 0
/// symbol          string64           = ""
/// exchange        string16           = ""
/// num_levels      i32                = 0
pub(crate) const MARKET_DEPTH_REQUEST_FIXED_DEFAULT: [u8; 96] = [
    96, 0, 102, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
];

pub trait MarketDepthRequest: Message {
    type Safe: MarketDepthRequest;
    type Unsafe: MarketDepthRequest;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn request_action(&self) -> RequestActionEnum;

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn symbol_id(&self) -> u32;

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn symbol(&self) -> &str;

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn exchange(&self) -> &str;

    /// Number of depth levels requested. Not set when unsubscribing.
    fn num_levels(&self) -> i32;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self;

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// Number of depth levels requested. Not set when unsubscribing.
    fn set_num_levels(&mut self, value: i32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDepthRequest) {
        to.set_request_action(self.request_action());
        to.set_symbol_id(self.symbol_id());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_num_levels(self.num_levels());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct MarketDepthRequestVLS {
    data: *const MarketDepthRequestVLSData,
    capacity: usize,
}

pub struct MarketDepthRequestVLSUnsafe {
    data: *const MarketDepthRequestVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct MarketDepthRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_action: RequestActionEnum,
    symbol_id: u32,
    symbol: VLS,
    exchange: VLS,
    num_levels: i32,
}

pub struct MarketDepthRequestFixed {
    data: *const MarketDepthRequestFixedData,
}

pub struct MarketDepthRequestFixedUnsafe {
    data: *const MarketDepthRequestFixedData,
}

#[repr(packed(8), C)]
pub struct MarketDepthRequestFixedData {
    size: u16,
    r#type: u16,
    request_action: RequestActionEnum,
    symbol_id: u32,
    symbol: [u8; 64],
    exchange: [u8; 16],
    num_levels: i32,
}

impl MarketDepthRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 28u16.to_le(),
            r#type: MARKET_DEPTH_REQUEST.to_le(),
            base_size: 28u16.to_le(),
            request_action: RequestActionEnum::Subscribe.to_le(),
            symbol_id: 0u32,
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            num_levels: 10i32.to_le(),
        }
    }
}

impl MarketDepthRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 96u16.to_le(),
            r#type: MARKET_DEPTH_REQUEST.to_le(),
            request_action: RequestActionEnum::Subscribe.to_le(),
            symbol_id: 0u32.to_le(),
            symbol: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
            ],
            exchange: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            num_levels: 0i32.to_le(),
        }
    }
}

unsafe impl Send for MarketDepthRequestFixed {}
unsafe impl Send for MarketDepthRequestFixedUnsafe {}
unsafe impl Send for MarketDepthRequestFixedData {}
unsafe impl Send for MarketDepthRequestVLS {}
unsafe impl Send for MarketDepthRequestVLSUnsafe {}
unsafe impl Send for MarketDepthRequestVLSData {}

impl Drop for MarketDepthRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDepthRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDepthRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDepthRequestFixed {
    type Target = MarketDepthRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthRequestFixedUnsafe {
    type Target = MarketDepthRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthRequestVLS {
    type Target = MarketDepthRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthRequestVLSUnsafe {
    type Target = MarketDepthRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for MarketDepthRequestFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestFixed(size: {}, type: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl core::fmt::Debug for MarketDepthRequestFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestFixed(size: {}, type: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl core::fmt::Display for MarketDepthRequestFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestFixedUnsafe(size: {}, type: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl core::fmt::Debug for MarketDepthRequestFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestFixedUnsafe(size: {}, type: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl core::fmt::Display for MarketDepthRequestVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestVLS(size: {}, type: {}, base_size: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.base_size(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl core::fmt::Debug for MarketDepthRequestVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestVLS(size: {}, type: {}, base_size: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.base_size(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl core::fmt::Display for MarketDepthRequestVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestVLSUnsafe(size: {}, type: {}, base_size: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.base_size(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl core::fmt::Debug for MarketDepthRequestVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthRequestVLSUnsafe(size: {}, type: {}, base_size: {}, request_action: {}, symbol_id: {}, symbol: \"{}\", exchange: \"{}\", num_levels: {})", self.size(), self.r#type(), self.base_size(), self.request_action(), self.symbol_id(), self.symbol(), self.exchange(), self.num_levels()).as_str())
    }
}

impl crate::Message for MarketDepthRequestFixed {
    type Data = MarketDepthRequestFixedData;

    const TYPE: u16 = MARKET_DEPTH_REQUEST;
    const BASE_SIZE: usize = 96;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthRequestFixedData,
        }
    }
}
impl crate::Message for MarketDepthRequestFixedUnsafe {
    type Data = MarketDepthRequestFixedData;

    const TYPE: u16 = MARKET_DEPTH_REQUEST;
    const BASE_SIZE: usize = 96;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthRequestFixedData,
        }
    }
}
impl crate::Message for MarketDepthRequestVLS {
    type Data = MarketDepthRequestVLSData;

    const TYPE: u16 = MARKET_DEPTH_REQUEST;
    const BASE_SIZE: usize = 28;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const MarketDepthRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for MarketDepthRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const MarketDepthRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for MarketDepthRequestVLSUnsafe {
    type Data = MarketDepthRequestVLSData;

    const TYPE: u16 = MARKET_DEPTH_REQUEST;
    const BASE_SIZE: usize = 28;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const MarketDepthRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for MarketDepthRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const MarketDepthRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl MarketDepthRequest for MarketDepthRequestVLS {
    type Safe = MarketDepthRequestVLS;
    type Unsafe = MarketDepthRequestVLSUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn request_action(&self) -> RequestActionEnum {
        RequestActionEnum::from_le(self.request_action)
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn num_levels(&self) -> i32 {
        i32::from_le(self.num_levels)
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn set_num_levels(&mut self, value: i32) -> &mut Self {
        self.num_levels = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl MarketDepthRequest for MarketDepthRequestVLSUnsafe {
    type Safe = MarketDepthRequestVLS;
    type Unsafe = MarketDepthRequestVLSUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn request_action(&self) -> RequestActionEnum {
        if self.is_out_of_bounds(12) {
            RequestActionEnum::Subscribe.to_le()
        } else {
            RequestActionEnum::from_le(self.request_action)
        }
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(16) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn num_levels(&self) -> i32 {
        if self.is_out_of_bounds(28) {
            10i32.to_le()
        } else {
            i32::from_le(self.num_levels)
        }
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn set_num_levels(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.num_levels = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl MarketDepthRequest for MarketDepthRequestFixed {
    type Safe = MarketDepthRequestFixed;
    type Unsafe = MarketDepthRequestFixedUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn request_action(&self) -> RequestActionEnum {
        RequestActionEnum::from_le(self.request_action)
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn num_levels(&self) -> i32 {
        i32::from_le(self.num_levels)
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn set_num_levels(&mut self, value: i32) -> &mut Self {
        self.num_levels = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl MarketDepthRequest for MarketDepthRequestFixedUnsafe {
    type Safe = MarketDepthRequestFixed;
    type Unsafe = MarketDepthRequestFixedUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn request_action(&self) -> RequestActionEnum {
        if self.is_out_of_bounds(8) {
            RequestActionEnum::Subscribe.to_le()
        } else {
            RequestActionEnum::from_le(self.request_action)
        }
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(12) {
            0u32.to_le()
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(76) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(92) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn num_levels(&self) -> i32 {
        if self.is_out_of_bounds(96) {
            0i32.to_le()
        } else {
            i32::from_le(self.num_levels)
        }
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    /// message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the identifier which will be used in all of the market depth data
    /// response messages.
    ///
    /// This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST
    /// message for the same Symbol and Exchange.
    ///
    /// This identifier is used so that the Symbol does not have to be passed
    /// back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST
    /// for a Symbol and Exchange to subscribe to market depth data for, that
    /// is currently subscribed to and this SymbolID is different, then the Server
    /// should reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The symbol for the market depth request. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(76) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    /// The optional exchange for the symbol. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(92) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    /// Number of depth levels requested. Not set when unsubscribing.
    fn set_num_levels(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.num_levels = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                96usize,
                core::mem::size_of::<MarketDepthRequestFixedData>(),
                "MarketDepthRequestFixedData sizeof expected {:} but was {:}",
                96usize,
                core::mem::size_of::<MarketDepthRequestFixedData>()
            );
            assert_eq!(
                96u16,
                MarketDepthRequestFixed::new().size(),
                "MarketDepthRequestFixed sizeof expected {:} but was {:}",
                96u16,
                MarketDepthRequestFixed::new().size(),
            );
            assert_eq!(
                MARKET_DEPTH_REQUEST,
                MarketDepthRequestFixed::new().r#type(),
                "MarketDepthRequestFixed type expected {:} but was {:}",
                MARKET_DEPTH_REQUEST,
                MarketDepthRequestFixed::new().r#type(),
            );
            assert_eq!(
                102u16,
                MarketDepthRequestFixed::new().r#type(),
                "MarketDepthRequestFixed type expected {:} but was {:}",
                102u16,
                MarketDepthRequestFixed::new().r#type(),
            );
            let d = MarketDepthRequestFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
                "request_action offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                76usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                76usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                92usize,
                (core::ptr::addr_of!(d.num_levels) as usize) - p,
                "num_levels offset expected {:} but was {:}",
                92usize,
                (core::ptr::addr_of!(d.num_levels) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                28usize,
                core::mem::size_of::<MarketDepthRequestVLSData>(),
                "MarketDepthRequestVLSData sizeof expected {:} but was {:}",
                28usize,
                core::mem::size_of::<MarketDepthRequestVLSData>()
            );
            assert_eq!(
                28u16,
                MarketDepthRequestVLS::new().size(),
                "MarketDepthRequestVLS sizeof expected {:} but was {:}",
                28u16,
                MarketDepthRequestVLS::new().size(),
            );
            assert_eq!(
                MARKET_DEPTH_REQUEST,
                MarketDepthRequestVLS::new().r#type(),
                "MarketDepthRequestVLS type expected {:} but was {:}",
                MARKET_DEPTH_REQUEST,
                MarketDepthRequestVLS::new().r#type(),
            );
            assert_eq!(
                102u16,
                MarketDepthRequestVLS::new().r#type(),
                "MarketDepthRequestVLS type expected {:} but was {:}",
                102u16,
                MarketDepthRequestVLS::new().r#type(),
            );
            let d = MarketDepthRequestVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
                "request_action offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.num_levels) as usize) - p,
                "num_levels offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.num_levels) as usize) - p,
            );
        }
    }
}
