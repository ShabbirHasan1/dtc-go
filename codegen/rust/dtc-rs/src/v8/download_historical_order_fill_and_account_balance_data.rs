// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const DOWNLOAD_HISTORICAL_ORDER_FILL_AND_ACCOUNT_BALANCE_DATA_VLS_SIZE: usize = 10;

/// size           u16     = DownloadHistoricalOrderFillAndAccountBalanceDataVLSSize  (10)
/// type           u16     = DOWNLOAD_HISTORICAL_ORDER_FILL_AND_ACCOUNT_BALANCE_DATA  (10138)
/// base_size      u16     = DownloadHistoricalOrderFillAndAccountBalanceDataVLSSize  (10)
/// trade_account  string  = ""
pub(crate) const DOWNLOAD_HISTORICAL_ORDER_FILL_AND_ACCOUNT_BALANCE_DATA_VLS_DEFAULT: [u8; 10] =
    [10, 0, 154, 39, 10, 0, 0, 0, 0, 0];

pub trait DownloadHistoricalOrderFillAndAccountBalanceData: Message {
    type Safe: DownloadHistoricalOrderFillAndAccountBalanceData;
    type Unsafe: DownloadHistoricalOrderFillAndAccountBalanceData;

    fn trade_account(&self) -> &str;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl DownloadHistoricalOrderFillAndAccountBalanceData) {
        to.set_trade_account(self.trade_account());
    }
}

pub struct DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    data: *const DownloadHistoricalOrderFillAndAccountBalanceDataVLSData,
    capacity: usize,
}

pub struct DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    data: *const DownloadHistoricalOrderFillAndAccountBalanceDataVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct DownloadHistoricalOrderFillAndAccountBalanceDataVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    trade_account: VLS,
}

impl DownloadHistoricalOrderFillAndAccountBalanceDataVLSData {
    pub fn new() -> Self {
        Self {
            size: 10u16.to_le(),
            r#type: DOWNLOAD_HISTORICAL_ORDER_FILL_AND_ACCOUNT_BALANCE_DATA.to_le(),
            base_size: 10u16.to_le(),
            trade_account: crate::message::VLS::new(),
        }
    }
}

unsafe impl Send for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {}
unsafe impl Send for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {}
unsafe impl Send for DownloadHistoricalOrderFillAndAccountBalanceDataVLSData {}

impl Drop for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    type Target = DownloadHistoricalOrderFillAndAccountBalanceDataVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    type Target = DownloadHistoricalOrderFillAndAccountBalanceDataVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    type Data = DownloadHistoricalOrderFillAndAccountBalanceDataVLSData;

    const BASE_SIZE: usize = 10;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const DownloadHistoricalOrderFillAndAccountBalanceDataVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for DownloadHistoricalOrderFillAndAccountBalanceDataVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const DownloadHistoricalOrderFillAndAccountBalanceDataVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    type Data = DownloadHistoricalOrderFillAndAccountBalanceDataVLSData;

    const BASE_SIZE: usize = 10;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const DownloadHistoricalOrderFillAndAccountBalanceDataVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const DownloadHistoricalOrderFillAndAccountBalanceDataVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl DownloadHistoricalOrderFillAndAccountBalanceData
    for DownloadHistoricalOrderFillAndAccountBalanceDataVLS
{
    type Safe = DownloadHistoricalOrderFillAndAccountBalanceDataVLS;
    type Unsafe = DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe;

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl DownloadHistoricalOrderFillAndAccountBalanceData
    for DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe
{
    type Safe = DownloadHistoricalOrderFillAndAccountBalanceDataVLS;
    type Unsafe = DownloadHistoricalOrderFillAndAccountBalanceDataVLSUnsafe;

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                10usize,
                core::mem::size_of::<DownloadHistoricalOrderFillAndAccountBalanceDataVLSData>(),
                "DownloadHistoricalOrderFillAndAccountBalanceDataVLSData sizeof expected {:} but was {:}",
                10usize,
                core::mem::size_of::<DownloadHistoricalOrderFillAndAccountBalanceDataVLSData>()
            );
            assert_eq!(
                10u16,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLS::new().size(),
                "DownloadHistoricalOrderFillAndAccountBalanceDataVLS sizeof expected {:} but was {:}",
                10u16,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLS::new().size(),
            );
            assert_eq!(
                DOWNLOAD_HISTORICAL_ORDER_FILL_AND_ACCOUNT_BALANCE_DATA,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLS::new().r#type(),
                "DownloadHistoricalOrderFillAndAccountBalanceDataVLS type expected {:} but was {:}",
                DOWNLOAD_HISTORICAL_ORDER_FILL_AND_ACCOUNT_BALANCE_DATA,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLS::new().r#type(),
            );
            assert_eq!(
                10138u16,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLS::new().r#type(),
                "DownloadHistoricalOrderFillAndAccountBalanceDataVLS type expected {:} but was {:}",
                10138u16,
                DownloadHistoricalOrderFillAndAccountBalanceDataVLS::new().r#type(),
            );
            let d = DownloadHistoricalOrderFillAndAccountBalanceDataVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
        }
    }
}
