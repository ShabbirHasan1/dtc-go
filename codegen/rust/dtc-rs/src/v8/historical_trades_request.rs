// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const HISTORICAL_TRADES_REQUEST_VLS_SIZE: usize = 31;

pub(crate) const HISTORICAL_TRADES_REQUEST_FIXED_SIZE: usize = 117;

/// size                        u16       = HistoricalTradesRequestVLSSize  (31)
/// type                        u16       = HISTORICAL_TRADES_REQUEST  (10100)
/// base_size                   u16       = HistoricalTradesRequestVLSSize  (31)
/// request_id                  i32       = 0
/// symbol                      string    = ""
/// trade_account               string    = ""
/// start_date_time             DateTime  = 0
/// sub_account_identifier      u32       = 0
/// create_flat_to_flat_trades  u8        = 0
pub(crate) const HISTORICAL_TRADES_REQUEST_VLS_DEFAULT: [u8; 31] = [
    31, 0, 116, 39, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
];

/// size                        u16       = HistoricalTradesRequestFixedSize  (117)
/// type                        u16       = HISTORICAL_TRADES_REQUEST  (10100)
/// request_id                  i32       = 0
/// symbol                      string64  = ""
/// trade_account               string32  = ""
/// start_date_time             DateTime  = 0
/// sub_account_identifier      u32       = 0
/// create_flat_to_flat_trades  u8        = 0
pub(crate) const HISTORICAL_TRADES_REQUEST_FIXED_DEFAULT: [u8; 117] = [
    117, 0, 116, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait HistoricalTradesRequest: Message {
    type Safe: HistoricalTradesRequest;
    type Unsafe: HistoricalTradesRequest;

    fn request_id(&self) -> i32;

    fn symbol(&self) -> &str;

    fn trade_account(&self) -> &str;

    fn start_date_time(&self) -> DateTime;

    fn sub_account_identifier(&self) -> u32;

    fn create_flat_to_flat_trades(&self) -> u8;

    fn set_request_id(&mut self, value: i32) -> &mut Self;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self;

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self;

    fn set_create_flat_to_flat_trades(&mut self, value: u8) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalTradesRequest) {
        to.set_request_id(self.request_id());
        to.set_symbol(self.symbol());
        to.set_trade_account(self.trade_account());
        to.set_start_date_time(self.start_date_time());
        to.set_sub_account_identifier(self.sub_account_identifier());
        to.set_create_flat_to_flat_trades(self.create_flat_to_flat_trades());
    }
}

pub struct HistoricalTradesRequestVLS {
    data: *const HistoricalTradesRequestVLSData,
    capacity: usize,
}

pub struct HistoricalTradesRequestVLSUnsafe {
    data: *const HistoricalTradesRequestVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct HistoricalTradesRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    symbol: VLS,
    trade_account: VLS,
    start_date_time: DateTime,
    sub_account_identifier: u32,
    create_flat_to_flat_trades: u8,
}

pub struct HistoricalTradesRequestFixed {
    data: *const HistoricalTradesRequestFixedData,
}

pub struct HistoricalTradesRequestFixedUnsafe {
    data: *const HistoricalTradesRequestFixedData,
}

#[repr(packed(1), C)]
pub struct HistoricalTradesRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    symbol: [u8; 64],
    trade_account: [u8; 32],
    start_date_time: DateTime,
    sub_account_identifier: u32,
    create_flat_to_flat_trades: u8,
}

impl HistoricalTradesRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 31u16.to_le(),
            r#type: HISTORICAL_TRADES_REQUEST.to_le(),
            base_size: 31u16.to_le(),
            request_id: 0i32.to_le(),
            symbol: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
            start_date_time: 0i64.to_le(),
            sub_account_identifier: 0u32.to_le(),
            create_flat_to_flat_trades: 0,
        }
    }
}

impl HistoricalTradesRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 117u16.to_le(),
            r#type: HISTORICAL_TRADES_REQUEST.to_le(),
            request_id: 0i32,
            symbol: [0; 64],
            trade_account: [0; 32],
            start_date_time: 0i64,
            sub_account_identifier: 0u32,
            create_flat_to_flat_trades: 0u8,
        }
    }
}

unsafe impl Send for HistoricalTradesRequestFixed {}
unsafe impl Send for HistoricalTradesRequestFixedUnsafe {}
unsafe impl Send for HistoricalTradesRequestFixedData {}
unsafe impl Send for HistoricalTradesRequestVLS {}
unsafe impl Send for HistoricalTradesRequestVLSUnsafe {}
unsafe impl Send for HistoricalTradesRequestVLSData {}

impl Drop for HistoricalTradesRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalTradesRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalTradesRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalTradesRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalTradesRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalTradesRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalTradesRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalTradesRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalTradesRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalTradesRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalTradesRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalTradesRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalTradesRequestFixed {
    type Target = HistoricalTradesRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalTradesRequestFixedUnsafe {
    type Target = HistoricalTradesRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalTradesRequestVLS {
    type Target = HistoricalTradesRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalTradesRequestVLSUnsafe {
    type Target = HistoricalTradesRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalTradesRequestFixed {
    type Data = HistoricalTradesRequestFixedData;

    const BASE_SIZE: usize = 117;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesRequestFixedData,
        }
    }
}
impl crate::Message for HistoricalTradesRequestFixedUnsafe {
    type Data = HistoricalTradesRequestFixedData;

    const BASE_SIZE: usize = 117;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesRequestFixedData,
        }
    }
}
impl crate::Message for HistoricalTradesRequestVLS {
    type Data = HistoricalTradesRequestVLSData;

    const BASE_SIZE: usize = 31;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalTradesRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalTradesRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for HistoricalTradesRequestVLSUnsafe {
    type Data = HistoricalTradesRequestVLSData;

    const BASE_SIZE: usize = 31;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalTradesRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalTradesRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl HistoricalTradesRequest for HistoricalTradesRequestVLS {
    type Safe = HistoricalTradesRequestVLS;
    type Unsafe = HistoricalTradesRequestVLSUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn start_date_time(&self) -> DateTime {
        i64::from_le(self.start_date_time)
    }

    fn sub_account_identifier(&self) -> u32 {
        u32::from_le(self.sub_account_identifier)
    }

    fn create_flat_to_flat_trades(&self) -> u8 {
        self.create_flat_to_flat_trades
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        self.start_date_time = value.to_le();
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        self.sub_account_identifier = value.to_le();
        self
    }

    fn set_create_flat_to_flat_trades(&mut self, value: u8) -> &mut Self {
        self.create_flat_to_flat_trades = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalTradesRequest for HistoricalTradesRequestVLSUnsafe {
    type Safe = HistoricalTradesRequestVLS;
    type Unsafe = HistoricalTradesRequestVLSUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(10) {
            0i32.to_le()
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn start_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(26) {
            0i64.to_le()
        } else {
            i64::from_le(self.start_date_time)
        }
    }

    fn sub_account_identifier(&self) -> u32 {
        if self.is_out_of_bounds(30) {
            0u32.to_le()
        } else {
            u32::from_le(self.sub_account_identifier)
        }
    }

    fn create_flat_to_flat_trades(&self) -> u8 {
        if self.is_out_of_bounds(31) {
            0
        } else {
            self.create_flat_to_flat_trades
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(26) {
            self.start_date_time = value.to_le();
        }
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(30) {
            self.sub_account_identifier = value.to_le();
        }
        self
    }

    fn set_create_flat_to_flat_trades(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(31) {
            self.create_flat_to_flat_trades = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl HistoricalTradesRequest for HistoricalTradesRequestFixed {
    type Safe = HistoricalTradesRequestFixed;
    type Unsafe = HistoricalTradesRequestFixedUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    fn start_date_time(&self) -> DateTime {
        i64::from_le(self.start_date_time)
    }

    fn sub_account_identifier(&self) -> u32 {
        u32::from_le(self.sub_account_identifier)
    }

    fn create_flat_to_flat_trades(&self) -> u8 {
        self.create_flat_to_flat_trades
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        self.start_date_time = value.to_le();
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        self.sub_account_identifier = value.to_le();
        self
    }

    fn set_create_flat_to_flat_trades(&mut self, value: u8) -> &mut Self {
        self.create_flat_to_flat_trades = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalTradesRequest for HistoricalTradesRequestFixedUnsafe {
    type Safe = HistoricalTradesRequestFixed;
    type Unsafe = HistoricalTradesRequestFixedUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(72) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(104) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    fn start_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(112) {
            0i64
        } else {
            i64::from_le(self.start_date_time)
        }
    }

    fn sub_account_identifier(&self) -> u32 {
        if self.is_out_of_bounds(116) {
            0u32
        } else {
            u32::from_le(self.sub_account_identifier)
        }
    }

    fn create_flat_to_flat_trades(&self) -> u8 {
        if self.is_out_of_bounds(117) {
            0u8
        } else {
            self.create_flat_to_flat_trades
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.start_date_time = value.to_le();
        }
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(116) {
            self.sub_account_identifier = value.to_le();
        }
        self
    }

    fn set_create_flat_to_flat_trades(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(117) {
            self.create_flat_to_flat_trades = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                117usize,
                core::mem::size_of::<HistoricalTradesRequestFixedData>(),
                "HistoricalTradesRequestFixedData sizeof expected {:} but was {:}",
                117usize,
                core::mem::size_of::<HistoricalTradesRequestFixedData>()
            );
            assert_eq!(
                117u16,
                HistoricalTradesRequestFixed::new().size(),
                "HistoricalTradesRequestFixed sizeof expected {:} but was {:}",
                117u16,
                HistoricalTradesRequestFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_TRADES_REQUEST,
                HistoricalTradesRequestFixed::new().r#type(),
                "HistoricalTradesRequestFixed type expected {:} but was {:}",
                HISTORICAL_TRADES_REQUEST,
                HistoricalTradesRequestFixed::new().r#type(),
            );
            assert_eq!(
                10100u16,
                HistoricalTradesRequestFixed::new().r#type(),
                "HistoricalTradesRequestFixed type expected {:} but was {:}",
                10100u16,
                HistoricalTradesRequestFixed::new().r#type(),
            );
            let d = HistoricalTradesRequestFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
                "start_date_time offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
            );
            assert_eq!(
                112usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
                "sub_account_identifier offset expected {:} but was {:}",
                112usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
            );
            assert_eq!(
                116usize,
                (core::ptr::addr_of!(d.create_flat_to_flat_trades) as usize) - p,
                "create_flat_to_flat_trades offset expected {:} but was {:}",
                116usize,
                (core::ptr::addr_of!(d.create_flat_to_flat_trades) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                31usize,
                core::mem::size_of::<HistoricalTradesRequestVLSData>(),
                "HistoricalTradesRequestVLSData sizeof expected {:} but was {:}",
                31usize,
                core::mem::size_of::<HistoricalTradesRequestVLSData>()
            );
            assert_eq!(
                31u16,
                HistoricalTradesRequestVLS::new().size(),
                "HistoricalTradesRequestVLS sizeof expected {:} but was {:}",
                31u16,
                HistoricalTradesRequestVLS::new().size(),
            );
            assert_eq!(
                HISTORICAL_TRADES_REQUEST,
                HistoricalTradesRequestVLS::new().r#type(),
                "HistoricalTradesRequestVLS type expected {:} but was {:}",
                HISTORICAL_TRADES_REQUEST,
                HistoricalTradesRequestVLS::new().r#type(),
            );
            assert_eq!(
                10100u16,
                HistoricalTradesRequestVLS::new().r#type(),
                "HistoricalTradesRequestVLS type expected {:} but was {:}",
                10100u16,
                HistoricalTradesRequestVLS::new().r#type(),
            );
            let d = HistoricalTradesRequestVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
                "start_date_time offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
            );
            assert_eq!(
                26usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
                "sub_account_identifier offset expected {:} but was {:}",
                26usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
            );
            assert_eq!(
                30usize,
                (core::ptr::addr_of!(d.create_flat_to_flat_trades) as usize) - p,
                "create_flat_to_flat_trades offset expected {:} but was {:}",
                30usize,
                (core::ptr::addr_of!(d.create_flat_to_flat_trades) as usize) - p,
            );
        }
    }
}
