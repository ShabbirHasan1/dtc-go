// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-24 10:12:33.526761 +0800 WITA m=+0.004576126
use super::*;
use crate::message::*;

const SYMBOLS_FOR_EXCHANGE_REQUEST_VLS_SIZE: usize = 28;

const SYMBOLS_FOR_EXCHANGE_REQUEST_FIXED_SIZE: usize = 96;

/// size            u16                = SymbolsForExchangeRequestVLSSize  (28)
/// type            u16                = SYMBOLS_FOR_EXCHANGE_REQUEST  (502)
/// base_size       u16                = SymbolsForExchangeRequestVLSSize  (28)
/// request_id      i32                = 0
/// exchange        string             = ""
/// security_type   SecurityTypeEnum   = SECURITY_TYPE_UNSET  (0)
/// request_action  RequestActionEnum  = 0
/// symbol          string             = ""
const SYMBOLS_FOR_EXCHANGE_REQUEST_VLS_DEFAULT: [u8; 28] = [28, 0, 246, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size            u16                = SymbolsForExchangeRequestFixedSize  (96)
/// type            u16                = SYMBOLS_FOR_EXCHANGE_REQUEST  (502)
/// request_id      i32                = 0
/// exchange        string16           = ""
/// security_type   SecurityTypeEnum   = SECURITY_TYPE_UNSET  (0)
/// request_action  RequestActionEnum  = 0
/// symbol          string64           = ""
const SYMBOLS_FOR_EXCHANGE_REQUEST_FIXED_DEFAULT: [u8; 96] = [96, 0, 246, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// This is a message from the Client to the Server to request all of the
/// Symbols for a particular Exchange.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub trait SymbolsForExchangeRequest {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32;

    /// The Exchange to return the available symbols listed on that Exchange.
    fn exchange(&self) -> &str;

    /// The optional Security Type.
    fn security_type(&self) -> SecurityTypeEnum;

    fn request_action(&self) -> RequestActionEnum;

    fn symbol(&self) -> &str;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// The Exchange to return the available symbols listed on that Exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// The optional Security Type.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self;

    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn copy_to(&self, to: &mut impl SymbolsForExchangeRequest) {
        to.set_request_id(self.request_id());
        to.set_exchange(self.exchange());
        to.set_security_type(self.security_type());
        to.set_request_action(self.request_action());
        to.set_symbol(self.symbol());
    }
}

/// This is a message from the Client to the Server to request all of the
/// Symbols for a particular Exchange.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub struct SymbolsForExchangeRequestVLS {
    data: *const SymbolsForExchangeRequestVLSData,
    capacity: usize
}

pub struct SymbolsForExchangeRequestVLSUnsafe {
    data: *const SymbolsForExchangeRequestVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct SymbolsForExchangeRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    exchange: VLS,
    security_type: SecurityTypeEnum,
    request_action: RequestActionEnum,
    symbol: VLS,
}

/// This is a message from the Client to the Server to request all of the
/// Symbols for a particular Exchange.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub struct SymbolsForExchangeRequestFixed {
    data: *const SymbolsForExchangeRequestFixedData
}

pub struct SymbolsForExchangeRequestFixedUnsafe {
    data: *const SymbolsForExchangeRequestFixedData
}

#[repr(packed, C)]
pub struct SymbolsForExchangeRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    exchange: [u8; 16],
    security_type: SecurityTypeEnum,
    request_action: RequestActionEnum,
    symbol: [u8; 64],
}

impl SymbolsForExchangeRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 28u16.to_le(),
            r#type: SYMBOLS_FOR_EXCHANGE_REQUEST.to_le(),
            base_size: 28u16.to_le(),
            request_id: 0i32,
            exchange: crate::message::VLS::new(),
            security_type: SecurityTypeEnum::SecurityTypeUnset.to_le(),
            request_action: RequestActionEnum::Subscribe.to_le(),
            symbol: crate::message::VLS::new(),
        }
    }
}

impl SymbolsForExchangeRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 96u16.to_le(),
            r#type: SYMBOLS_FOR_EXCHANGE_REQUEST.to_le(),
            request_id: 0i32,
            exchange: [0; 16],
            security_type: SecurityTypeEnum::SecurityTypeUnset.to_le(),
            request_action: RequestActionEnum::Subscribe.to_le(),
            symbol: [0; 64],
        }
    }
}

unsafe impl Send for SymbolsForExchangeRequestFixed {}
unsafe impl Send for SymbolsForExchangeRequestFixedUnsafe {}
unsafe impl Send for SymbolsForExchangeRequestFixedData {}
unsafe impl Send for SymbolsForExchangeRequestVLS {}
unsafe impl Send for SymbolsForExchangeRequestVLSUnsafe {}
unsafe impl Send for SymbolsForExchangeRequestVLSData {}

impl Drop for SymbolsForExchangeRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SymbolsForExchangeRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SymbolsForExchangeRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SymbolsForExchangeRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for SymbolsForExchangeRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SymbolsForExchangeRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SymbolsForExchangeRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SymbolsForExchangeRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for SymbolsForExchangeRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SymbolsForExchangeRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SymbolsForExchangeRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SymbolsForExchangeRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for SymbolsForExchangeRequestFixed {
    type Target = SymbolsForExchangeRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForExchangeRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SymbolsForExchangeRequestFixedUnsafe {
    type Target = SymbolsForExchangeRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForExchangeRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SymbolsForExchangeRequestVLS {
    type Target = SymbolsForExchangeRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForExchangeRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SymbolsForExchangeRequestVLSUnsafe {
    type Target = SymbolsForExchangeRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForExchangeRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for SymbolsForExchangeRequestFixed {
    type Safe = SymbolsForExchangeRequestFixed;
    type Unsafe = SymbolsForExchangeRequestFixedUnsafe;
    type Data = SymbolsForExchangeRequestFixedData;
    const BASE_SIZE: usize = 96;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForExchangeRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SymbolsForExchangeRequestFixedData
        }
    }

}

impl crate::Message for SymbolsForExchangeRequestFixedUnsafe {
    type Safe = SymbolsForExchangeRequestFixed;
    type Unsafe = SymbolsForExchangeRequestFixedUnsafe;
    type Data = SymbolsForExchangeRequestFixedData;
    const BASE_SIZE: usize = 96;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForExchangeRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SymbolsForExchangeRequestFixedData
        }
    }

}

impl crate::Message for SymbolsForExchangeRequestVLS {
    type Safe = SymbolsForExchangeRequestVLS;
    type Unsafe = SymbolsForExchangeRequestVLSUnsafe;
    type Data = SymbolsForExchangeRequestVLSData;
    const BASE_SIZE: usize = 28;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForExchangeRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SymbolsForExchangeRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for SymbolsForExchangeRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SymbolsForExchangeRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for SymbolsForExchangeRequestVLSUnsafe {
    type Safe = SymbolsForExchangeRequestVLS;
    type Unsafe = SymbolsForExchangeRequestVLSUnsafe;
    type Data = SymbolsForExchangeRequestVLSData;
    const BASE_SIZE: usize = 28;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForExchangeRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SymbolsForExchangeRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for SymbolsForExchangeRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SymbolsForExchangeRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// This is a message from the Client to the Server to request all of the
/// Symbols for a particular Exchange.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForExchangeRequest for SymbolsForExchangeRequestVLS {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The Exchange to return the available symbols listed on that Exchange.
    fn exchange(&self) -> &str {
        crate::get_vls(self, self.exchange)
    }

    /// The optional Security Type.
    fn security_type(&self) -> SecurityTypeEnum {
        SecurityTypeEnum::from_le(self.security_type)
    }

    fn request_action(&self) -> RequestActionEnum {
        RequestActionEnum::from_le(self.request_action)
    }

    fn symbol(&self) -> &str {
        crate::get_vls(self, self.symbol)
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// The Exchange to return the available symbols listed on that Exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = crate::set_vls(self, self.exchange, value);
        self
    }


    /// The optional Security Type.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }


    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }


    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = crate::set_vls(self, self.symbol, value);
        self
    }

}

/// This is a message from the Client to the Server to request all of the
/// Symbols for a particular Exchange.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForExchangeRequest for SymbolsForExchangeRequestVLSUnsafe {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The Exchange to return the available symbols listed on that Exchange.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            crate::get_vls(self, self.exchange)
        }
    }

    /// The optional Security Type.
    fn security_type(&self) -> SecurityTypeEnum {
        if self.is_out_of_bounds(20) {
            SecurityTypeEnum::SecurityTypeUnset.to_le()
        } else {
            SecurityTypeEnum::from_le(self.security_type)
        }
    }

    fn request_action(&self) -> RequestActionEnum {
        if self.is_out_of_bounds(24) {
            RequestActionEnum::Subscribe.to_le()
        } else {
            RequestActionEnum::from_le(self.request_action)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(28) {
            ""
        } else {
            crate::get_vls(self, self.symbol)
        }
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }


    /// The Exchange to return the available symbols listed on that Exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.exchange = crate::set_vls(self, self.exchange, value);
        }
        self
    }


    /// The optional Security Type.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }


    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }


    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.symbol = crate::set_vls(self, self.symbol, value);
        }
        self
    }

}

/// This is a message from the Client to the Server to request all of the
/// Symbols for a particular Exchange.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForExchangeRequest for SymbolsForExchangeRequestFixed {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The Exchange to return the available symbols listed on that Exchange.
    fn exchange(&self) -> &str {
        crate::get_fixed(&self.exchange[..])
    }

    /// The optional Security Type.
    fn security_type(&self) -> SecurityTypeEnum {
        SecurityTypeEnum::from_le(self.security_type)
    }

    fn request_action(&self) -> RequestActionEnum {
        RequestActionEnum::from_le(self.request_action)
    }

    fn symbol(&self) -> &str {
        crate::get_fixed(&self.symbol[..])
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// The Exchange to return the available symbols listed on that Exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.exchange[..], value);
        self
    }


    /// The optional Security Type.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }


    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }


    fn set_symbol(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.symbol[..], value);
        self
    }

}

/// This is a message from the Client to the Server to request all of the
/// Symbols for a particular Exchange.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForExchangeRequest for SymbolsForExchangeRequestFixedUnsafe {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The Exchange to return the available symbols listed on that Exchange.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            crate::get_fixed(&self.exchange[..])
        }
    }

    /// The optional Security Type.
    fn security_type(&self) -> SecurityTypeEnum {
        if self.is_out_of_bounds(28) {
            SecurityTypeEnum::SecurityTypeUnset.to_le()
        } else {
            SecurityTypeEnum::from_le(self.security_type)
        }
    }

    fn request_action(&self) -> RequestActionEnum {
        if self.is_out_of_bounds(32) {
            RequestActionEnum::Subscribe.to_le()
        } else {
            RequestActionEnum::from_le(self.request_action)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(96) {
            ""
        } else {
            crate::get_fixed(&self.symbol[..])
        }
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// The Exchange to return the available symbols listed on that Exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            crate::set_fixed(&mut self.exchange[..], value);
        }
        self
    }


    /// The optional Security Type.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }


    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }


    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            crate::set_fixed(&mut self.symbol[..], value);
        }
        self
    }

}

