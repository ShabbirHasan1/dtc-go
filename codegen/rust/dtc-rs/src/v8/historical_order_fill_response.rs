// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const HISTORICAL_ORDER_FILL_RESPONSE_VLS_SIZE: usize = 112;

pub(crate) const HISTORICAL_ORDER_FILL_RESPONSE_FIXED_SIZE: usize = 384;

/// size                        u16                 = HistoricalOrderFillResponseVLSSize  (112)
/// type                        u16                 = HISTORICAL_ORDER_FILL_RESPONSE  (304)
/// base_size                   u16                 = HistoricalOrderFillResponseVLSSize  (112)
/// request_id                  i32                 = 0
/// total_number_messages       i32                 = 0
/// message_number              i32                 = 0
/// symbol                      string              = ""
/// exchange                    string              = ""
/// server_order_id             string              = ""
/// buy_sell                    BuySellEnum         = BUY_SELL_UNSET  (0)
/// price                       f64                 = 0
/// date_time                   DateTime            = 0
/// quantity                    f64                 = 0
/// unique_execution_id         string              = ""
/// trade_account               string              = ""
/// open_close                  OpenCloseTradeEnum  = TRADE_UNSET  (0)
/// no_order_fills              u8                  = 0
/// info_text                   string              = ""
/// high_price_during_position  f64                 = 0
/// low_price_during_position   f64                 = 0
/// position_quantity           f64                 = f64::MAX
pub(crate) const HISTORICAL_ORDER_FILL_RESPONSE_VLS_DEFAULT: [u8; 112] = [
    112, 0, 48, 1, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 239, 127,
];

/// size                        u16                 = HistoricalOrderFillResponseFixedSize  (384)
/// type                        u16                 = HISTORICAL_ORDER_FILL_RESPONSE  (304)
/// request_id                  i32                 = 0
/// total_number_messages       i32                 = 0
/// message_number              i32                 = 0
/// symbol                      string64            = ""
/// exchange                    string16            = ""
/// server_order_id             string32            = ""
/// buy_sell                    BuySellEnum         = BUY_SELL_UNSET  (0)
/// price                       f64                 = 0
/// date_time                   DateTime            = 0
/// quantity                    f64                 = 0
/// unique_execution_id         string64            = ""
/// trade_account               string32            = ""
/// open_close                  OpenCloseTradeEnum  = TRADE_UNSET  (0)
/// no_order_fills              u8                  = 0
/// info_text                   string96            = ""
/// high_price_during_position  f64                 = 0
/// low_price_during_position   f64                 = 0
/// position_quantity           f64                 = f64::MAX
pub(crate) const HISTORICAL_ORDER_FILL_RESPONSE_FIXED_DEFAULT: [u8; 384] = [
    128, 1, 48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255,
    255, 255, 239, 127,
];

/// This is a message from the Server to the Client providing an individual
/// historical order fill in response to a HistoricalOrderFillsRequestVLS
/// message.
///
/// The Server is expected to send this message to the Client in response
/// to a HistoricalOrderFillsRequestVLS message even when there are no order
/// fills to return. If there are no order fills to return, it needs to set
/// the NoOrderFills field to 1.
pub trait HistoricalOrderFillResponse: Message {
    type Safe: HistoricalOrderFillResponse;
    type Unsafe: HistoricalOrderFillResponse;

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn request_id(&self) -> i32;

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn total_number_messages(&self) -> i32;

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn message_number(&self) -> i32;

    /// The symbol the order fill is for.
    fn symbol(&self) -> &str;

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str;

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn server_order_id(&self) -> &str;

    /// This is the fill side and can be either BUY or SELL.
    fn buy_sell(&self) -> BuySellEnum;

    /// This is the price of the order fill.
    fn price(&self) -> f64;

    /// This is the Date and Time of the order fill.
    fn date_time(&self) -> DateTime;

    /// This is the quantity of the order fill.
    fn quantity(&self) -> f64;

    /// This is the unique execution identifier for the order fill.
    fn unique_execution_id(&self) -> &str;

    /// This is the trade account that the order fill is associated with.
    fn trade_account(&self) -> &str;

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn open_close(&self) -> OpenCloseTradeEnum;

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn no_order_fills(&self) -> u8;

    fn info_text(&self) -> &str;

    fn high_price_during_position(&self) -> f64;

    fn low_price_during_position(&self) -> f64;

    fn position_quantity(&self) -> f64;

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self;

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn set_message_number(&mut self, value: i32) -> &mut Self;

    /// The symbol the order fill is for.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self;

    /// This is the fill side and can be either BUY or SELL.
    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self;

    /// This is the price of the order fill.
    fn set_price(&mut self, value: f64) -> &mut Self;

    /// This is the Date and Time of the order fill.
    fn set_date_time(&mut self, value: DateTime) -> &mut Self;

    /// This is the quantity of the order fill.
    fn set_quantity(&mut self, value: f64) -> &mut Self;

    /// This is the unique execution identifier for the order fill.
    fn set_unique_execution_id(&mut self, value: &str) -> &mut Self;

    /// This is the trade account that the order fill is associated with.
    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn set_open_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self;

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn set_no_order_fills(&mut self, value: u8) -> &mut Self;

    fn set_info_text(&mut self, value: &str) -> &mut Self;

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self;

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self;

    fn set_position_quantity(&mut self, value: f64) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalOrderFillResponse) {
        to.set_request_id(self.request_id());
        to.set_total_number_messages(self.total_number_messages());
        to.set_message_number(self.message_number());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_server_order_id(self.server_order_id());
        to.set_buy_sell(self.buy_sell());
        to.set_price(self.price());
        to.set_date_time(self.date_time());
        to.set_quantity(self.quantity());
        to.set_unique_execution_id(self.unique_execution_id());
        to.set_trade_account(self.trade_account());
        to.set_open_close(self.open_close());
        to.set_no_order_fills(self.no_order_fills());
        to.set_info_text(self.info_text());
        to.set_high_price_during_position(self.high_price_during_position());
        to.set_low_price_during_position(self.low_price_during_position());
        to.set_position_quantity(self.position_quantity());
    }
}

/// This is a message from the Server to the Client providing an individual
/// historical order fill in response to a HistoricalOrderFillsRequestVLS
/// message.
///
/// The Server is expected to send this message to the Client in response
/// to a HistoricalOrderFillsRequestVLS message even when there are no order
/// fills to return. If there are no order fills to return, it needs to set
/// the NoOrderFills field to 1.
pub struct HistoricalOrderFillResponseVLS {
    data: *const HistoricalOrderFillResponseVLSData,
    capacity: usize,
}

pub struct HistoricalOrderFillResponseVLSUnsafe {
    data: *const HistoricalOrderFillResponseVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct HistoricalOrderFillResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    total_number_messages: i32,
    message_number: i32,
    symbol: VLS,
    exchange: VLS,
    server_order_id: VLS,
    buy_sell: BuySellEnum,
    price: f64,
    date_time: DateTime,
    quantity: f64,
    unique_execution_id: VLS,
    trade_account: VLS,
    open_close: OpenCloseTradeEnum,
    no_order_fills: u8,
    info_text: VLS,
    high_price_during_position: f64,
    low_price_during_position: f64,
    position_quantity: f64,
}

/// This is a message from the Server to the Client providing an individual
/// historical order fill in response to a HistoricalOrderFillsRequestVLS
/// message.
///
/// The Server is expected to send this message to the Client in response
/// to a HistoricalOrderFillsRequestVLS message even when there are no order
/// fills to return. If there are no order fills to return, it needs to set
/// the NoOrderFills field to 1.
pub struct HistoricalOrderFillResponseFixed {
    data: *const HistoricalOrderFillResponseFixedData,
}

pub struct HistoricalOrderFillResponseFixedUnsafe {
    data: *const HistoricalOrderFillResponseFixedData,
}

#[repr(packed(8), C)]
pub struct HistoricalOrderFillResponseFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    total_number_messages: i32,
    message_number: i32,
    symbol: [u8; 64],
    exchange: [u8; 16],
    server_order_id: [u8; 32],
    buy_sell: BuySellEnum,
    price: f64,
    date_time: DateTime,
    quantity: f64,
    unique_execution_id: [u8; 64],
    trade_account: [u8; 32],
    open_close: OpenCloseTradeEnum,
    no_order_fills: u8,
    info_text: [u8; 96],
    high_price_during_position: f64,
    low_price_during_position: f64,
    position_quantity: f64,
}

impl HistoricalOrderFillResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 112u16.to_le(),
            r#type: HISTORICAL_ORDER_FILL_RESPONSE.to_le(),
            base_size: 112u16.to_le(),
            request_id: 0i32.to_le(),
            total_number_messages: 0i32.to_le(),
            message_number: 0i32.to_le(),
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            server_order_id: crate::message::VLS::new(),
            buy_sell: BuySellEnum::BuySellUnset.to_le(),
            price: 0.0,
            date_time: 0i64.to_le(),
            quantity: 0.0,
            unique_execution_id: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
            open_close: OpenCloseTradeEnum::TradeUnset.to_le(),
            no_order_fills: 0,
            info_text: crate::message::VLS::new(),
            high_price_during_position: 0.0,
            low_price_during_position: 0.0,
            position_quantity: f64_le(f64::MAX),
        }
    }
}

impl HistoricalOrderFillResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 384u16.to_le(),
            r#type: HISTORICAL_ORDER_FILL_RESPONSE.to_le(),
            request_id: 0i32,
            total_number_messages: 0i32,
            message_number: 0i32,
            symbol: [0; 64],
            exchange: [0; 16],
            server_order_id: [0; 32],
            buy_sell: BuySellEnum::BuySellUnset.to_le(),
            price: 0.0f64,
            date_time: 0i64,
            quantity: 0.0f64,
            unique_execution_id: [0; 64],
            trade_account: [0; 32],
            open_close: OpenCloseTradeEnum::TradeUnset.to_le(),
            no_order_fills: 0u8,
            info_text: [0; 96],
            high_price_during_position: 0.0f64,
            low_price_during_position: 0.0f64,
            position_quantity: f64_le(f64::MAX),
        }
    }
}

unsafe impl Send for HistoricalOrderFillResponseFixed {}
unsafe impl Send for HistoricalOrderFillResponseFixedUnsafe {}
unsafe impl Send for HistoricalOrderFillResponseFixedData {}
unsafe impl Send for HistoricalOrderFillResponseVLS {}
unsafe impl Send for HistoricalOrderFillResponseVLSUnsafe {}
unsafe impl Send for HistoricalOrderFillResponseVLSData {}

impl Drop for HistoricalOrderFillResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalOrderFillResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalOrderFillResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalOrderFillResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalOrderFillResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalOrderFillResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalOrderFillResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalOrderFillResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalOrderFillResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalOrderFillResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalOrderFillResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalOrderFillResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalOrderFillResponseFixed {
    type Target = HistoricalOrderFillResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalOrderFillResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalOrderFillResponseFixedUnsafe {
    type Target = HistoricalOrderFillResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalOrderFillResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalOrderFillResponseVLS {
    type Target = HistoricalOrderFillResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalOrderFillResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalOrderFillResponseVLSUnsafe {
    type Target = HistoricalOrderFillResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalOrderFillResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalOrderFillResponseFixed {
    type Data = HistoricalOrderFillResponseFixedData;

    const BASE_SIZE: usize = 384;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalOrderFillResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalOrderFillResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalOrderFillResponseFixedUnsafe {
    type Data = HistoricalOrderFillResponseFixedData;

    const BASE_SIZE: usize = 384;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalOrderFillResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalOrderFillResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalOrderFillResponseVLS {
    type Data = HistoricalOrderFillResponseVLSData;

    const BASE_SIZE: usize = 112;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalOrderFillResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalOrderFillResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalOrderFillResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalOrderFillResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for HistoricalOrderFillResponseVLSUnsafe {
    type Data = HistoricalOrderFillResponseVLSData;

    const BASE_SIZE: usize = 112;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalOrderFillResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalOrderFillResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalOrderFillResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalOrderFillResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This is a message from the Server to the Client providing an individual
/// historical order fill in response to a HistoricalOrderFillsRequestVLS
/// message.
///
/// The Server is expected to send this message to the Client in response
/// to a HistoricalOrderFillsRequestVLS message even when there are no order
/// fills to return. If there are no order fills to return, it needs to set
/// the NoOrderFills field to 1.
impl HistoricalOrderFillResponse for HistoricalOrderFillResponseVLS {
    type Safe = HistoricalOrderFillResponseVLS;
    type Unsafe = HistoricalOrderFillResponseVLSUnsafe;

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn total_number_messages(&self) -> i32 {
        i32::from_le(self.total_number_messages)
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn message_number(&self) -> i32 {
        i32::from_le(self.message_number)
    }

    /// The symbol the order fill is for.
    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn server_order_id(&self) -> &str {
        get_vls(self, self.server_order_id)
    }

    /// This is the fill side and can be either BUY or SELL.
    fn buy_sell(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell)
    }

    /// This is the price of the order fill.
    fn price(&self) -> f64 {
        f64_le(self.price)
    }

    /// This is the Date and Time of the order fill.
    fn date_time(&self) -> DateTime {
        i64::from_le(self.date_time)
    }

    /// This is the quantity of the order fill.
    fn quantity(&self) -> f64 {
        f64_le(self.quantity)
    }

    /// This is the unique execution identifier for the order fill.
    fn unique_execution_id(&self) -> &str {
        get_vls(self, self.unique_execution_id)
    }

    /// This is the trade account that the order fill is associated with.
    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn open_close(&self) -> OpenCloseTradeEnum {
        OpenCloseTradeEnum::from_le(self.open_close)
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn no_order_fills(&self) -> u8 {
        self.no_order_fills
    }

    fn info_text(&self) -> &str {
        get_vls(self, self.info_text)
    }

    fn high_price_during_position(&self) -> f64 {
        f64_le(self.high_price_during_position)
    }

    fn low_price_during_position(&self) -> f64 {
        f64_le(self.low_price_during_position)
    }

    fn position_quantity(&self) -> f64 {
        f64_le(self.position_quantity)
    }

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        self.total_number_messages = value.to_le();
        self
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        self.message_number = value.to_le();
        self
    }

    /// The symbol the order fill is for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        self.server_order_id = set_vls(self, self.server_order_id, value);
        self
    }

    /// This is the fill side and can be either BUY or SELL.
    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the price of the order fill.
    fn set_price(&mut self, value: f64) -> &mut Self {
        self.price = f64_le(value);
        self
    }

    /// This is the Date and Time of the order fill.
    fn set_date_time(&mut self, value: DateTime) -> &mut Self {
        self.date_time = value.to_le();
        self
    }

    /// This is the quantity of the order fill.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }

    /// This is the unique execution identifier for the order fill.
    fn set_unique_execution_id(&mut self, value: &str) -> &mut Self {
        self.unique_execution_id = set_vls(self, self.unique_execution_id, value);
        self
    }

    /// This is the trade account that the order fill is associated with.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn set_open_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        self.open_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn set_no_order_fills(&mut self, value: u8) -> &mut Self {
        self.no_order_fills = value;
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        self.info_text = set_vls(self, self.info_text, value);
        self
    }

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        self.high_price_during_position = f64_le(value);
        self
    }

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        self.low_price_during_position = f64_le(value);
        self
    }

    fn set_position_quantity(&mut self, value: f64) -> &mut Self {
        self.position_quantity = f64_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Server to the Client providing an individual
/// historical order fill in response to a HistoricalOrderFillsRequestVLS
/// message.
///
/// The Server is expected to send this message to the Client in response
/// to a HistoricalOrderFillsRequestVLS message even when there are no order
/// fills to return. If there are no order fills to return, it needs to set
/// the NoOrderFills field to 1.
impl HistoricalOrderFillResponse for HistoricalOrderFillResponseVLSUnsafe {
    type Safe = HistoricalOrderFillResponseVLS;
    type Unsafe = HistoricalOrderFillResponseVLSUnsafe;

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32.to_le()
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn total_number_messages(&self) -> i32 {
        if self.is_out_of_bounds(16) {
            0i32.to_le()
        } else {
            i32::from_le(self.total_number_messages)
        }
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn message_number(&self) -> i32 {
        if self.is_out_of_bounds(20) {
            0i32.to_le()
        } else {
            i32::from_le(self.message_number)
        }
    }

    /// The symbol the order fill is for.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(28) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(32) {
            ""
        } else {
            get_vls(self, self.server_order_id)
        }
    }

    /// This is the fill side and can be either BUY or SELL.
    fn buy_sell(&self) -> BuySellEnum {
        if self.is_out_of_bounds(36) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell)
        }
    }

    /// This is the price of the order fill.
    fn price(&self) -> f64 {
        if self.is_out_of_bounds(48) {
            0.0
        } else {
            f64_le(self.price)
        }
    }

    /// This is the Date and Time of the order fill.
    fn date_time(&self) -> DateTime {
        if self.is_out_of_bounds(56) {
            0i64.to_le()
        } else {
            i64::from_le(self.date_time)
        }
    }

    /// This is the quantity of the order fill.
    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(64) {
            0.0
        } else {
            f64_le(self.quantity)
        }
    }

    /// This is the unique execution identifier for the order fill.
    fn unique_execution_id(&self) -> &str {
        if self.is_out_of_bounds(68) {
            ""
        } else {
            get_vls(self, self.unique_execution_id)
        }
    }

    /// This is the trade account that the order fill is associated with.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(72) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn open_close(&self) -> OpenCloseTradeEnum {
        if self.is_out_of_bounds(76) {
            OpenCloseTradeEnum::TradeUnset.to_le()
        } else {
            OpenCloseTradeEnum::from_le(self.open_close)
        }
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn no_order_fills(&self) -> u8 {
        if self.is_out_of_bounds(77) {
            0
        } else {
            self.no_order_fills
        }
    }

    fn info_text(&self) -> &str {
        if self.is_out_of_bounds(82) {
            ""
        } else {
            get_vls(self, self.info_text)
        }
    }

    fn high_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(96) {
            0.0
        } else {
            f64_le(self.high_price_during_position)
        }
    }

    fn low_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(104) {
            0.0
        } else {
            f64_le(self.low_price_during_position)
        }
    }

    fn position_quantity(&self) -> f64 {
        if self.is_out_of_bounds(112) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.position_quantity)
        }
    }

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.total_number_messages = value.to_le();
        }
        self
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.message_number = value.to_le();
        }
        self
    }

    /// The symbol the order fill is for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.server_order_id = set_vls(self, self.server_order_id, value);
        }
        self
    }

    /// This is the fill side and can be either BUY or SELL.
    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the price of the order fill.
    fn set_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.price = f64_le(value);
        }
        self
    }

    /// This is the Date and Time of the order fill.
    fn set_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.date_time = value.to_le();
        }
        self
    }

    /// This is the quantity of the order fill.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            self.quantity = f64_le(value);
        }
        self
    }

    /// This is the unique execution identifier for the order fill.
    fn set_unique_execution_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            self.unique_execution_id = set_vls(self, self.unique_execution_id, value);
        }
        self
    }

    /// This is the trade account that the order fill is associated with.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn set_open_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        if !self.is_out_of_bounds(76) {
            self.open_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn set_no_order_fills(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(77) {
            self.no_order_fills = value;
        }
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(82) {
            self.info_text = set_vls(self, self.info_text, value);
        }
        self
    }

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.high_price_during_position = f64_le(value);
        }
        self
    }

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.low_price_during_position = f64_le(value);
        }
        self
    }

    fn set_position_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.position_quantity = f64_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This is a message from the Server to the Client providing an individual
/// historical order fill in response to a HistoricalOrderFillsRequestVLS
/// message.
///
/// The Server is expected to send this message to the Client in response
/// to a HistoricalOrderFillsRequestVLS message even when there are no order
/// fills to return. If there are no order fills to return, it needs to set
/// the NoOrderFills field to 1.
impl HistoricalOrderFillResponse for HistoricalOrderFillResponseFixed {
    type Safe = HistoricalOrderFillResponseFixed;
    type Unsafe = HistoricalOrderFillResponseFixedUnsafe;

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn total_number_messages(&self) -> i32 {
        i32::from_le(self.total_number_messages)
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn message_number(&self) -> i32 {
        i32::from_le(self.message_number)
    }

    /// The symbol the order fill is for.
    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn server_order_id(&self) -> &str {
        get_fixed(&self.server_order_id[..])
    }

    /// This is the fill side and can be either BUY or SELL.
    fn buy_sell(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell)
    }

    /// This is the price of the order fill.
    fn price(&self) -> f64 {
        f64_le(self.price)
    }

    /// This is the Date and Time of the order fill.
    fn date_time(&self) -> DateTime {
        i64::from_le(self.date_time)
    }

    /// This is the quantity of the order fill.
    fn quantity(&self) -> f64 {
        f64_le(self.quantity)
    }

    /// This is the unique execution identifier for the order fill.
    fn unique_execution_id(&self) -> &str {
        get_fixed(&self.unique_execution_id[..])
    }

    /// This is the trade account that the order fill is associated with.
    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn open_close(&self) -> OpenCloseTradeEnum {
        OpenCloseTradeEnum::from_le(self.open_close)
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn no_order_fills(&self) -> u8 {
        self.no_order_fills
    }

    fn info_text(&self) -> &str {
        get_fixed(&self.info_text[..])
    }

    fn high_price_during_position(&self) -> f64 {
        f64_le(self.high_price_during_position)
    }

    fn low_price_during_position(&self) -> f64 {
        f64_le(self.low_price_during_position)
    }

    fn position_quantity(&self) -> f64 {
        f64_le(self.position_quantity)
    }

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        self.total_number_messages = value.to_le();
        self
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        self.message_number = value.to_le();
        self
    }

    /// The symbol the order fill is for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.server_order_id[..], value);
        self
    }

    /// This is the fill side and can be either BUY or SELL.
    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the price of the order fill.
    fn set_price(&mut self, value: f64) -> &mut Self {
        self.price = f64_le(value);
        self
    }

    /// This is the Date and Time of the order fill.
    fn set_date_time(&mut self, value: DateTime) -> &mut Self {
        self.date_time = value.to_le();
        self
    }

    /// This is the quantity of the order fill.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }

    /// This is the unique execution identifier for the order fill.
    fn set_unique_execution_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.unique_execution_id[..], value);
        self
    }

    /// This is the trade account that the order fill is associated with.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn set_open_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        self.open_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn set_no_order_fills(&mut self, value: u8) -> &mut Self {
        self.no_order_fills = value;
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.info_text[..], value);
        self
    }

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        self.high_price_during_position = f64_le(value);
        self
    }

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        self.low_price_during_position = f64_le(value);
        self
    }

    fn set_position_quantity(&mut self, value: f64) -> &mut Self {
        self.position_quantity = f64_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Server to the Client providing an individual
/// historical order fill in response to a HistoricalOrderFillsRequestVLS
/// message.
///
/// The Server is expected to send this message to the Client in response
/// to a HistoricalOrderFillsRequestVLS message even when there are no order
/// fills to return. If there are no order fills to return, it needs to set
/// the NoOrderFills field to 1.
impl HistoricalOrderFillResponse for HistoricalOrderFillResponseFixedUnsafe {
    type Safe = HistoricalOrderFillResponseFixed;
    type Unsafe = HistoricalOrderFillResponseFixedUnsafe;

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn total_number_messages(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.total_number_messages)
        }
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn message_number(&self) -> i32 {
        if self.is_out_of_bounds(16) {
            0i32
        } else {
            i32::from_le(self.message_number)
        }
    }

    /// The symbol the order fill is for.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(80) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(96) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(128) {
            ""
        } else {
            get_fixed(&self.server_order_id[..])
        }
    }

    /// This is the fill side and can be either BUY or SELL.
    fn buy_sell(&self) -> BuySellEnum {
        if self.is_out_of_bounds(132) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell)
        }
    }

    /// This is the price of the order fill.
    fn price(&self) -> f64 {
        if self.is_out_of_bounds(144) {
            0.0f64
        } else {
            f64_le(self.price)
        }
    }

    /// This is the Date and Time of the order fill.
    fn date_time(&self) -> DateTime {
        if self.is_out_of_bounds(152) {
            0i64
        } else {
            i64::from_le(self.date_time)
        }
    }

    /// This is the quantity of the order fill.
    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(160) {
            0.0f64
        } else {
            f64_le(self.quantity)
        }
    }

    /// This is the unique execution identifier for the order fill.
    fn unique_execution_id(&self) -> &str {
        if self.is_out_of_bounds(224) {
            ""
        } else {
            get_fixed(&self.unique_execution_id[..])
        }
    }

    /// This is the trade account that the order fill is associated with.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(256) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn open_close(&self) -> OpenCloseTradeEnum {
        if self.is_out_of_bounds(260) {
            OpenCloseTradeEnum::TradeUnset.to_le()
        } else {
            OpenCloseTradeEnum::from_le(self.open_close)
        }
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn no_order_fills(&self) -> u8 {
        if self.is_out_of_bounds(261) {
            0u8
        } else {
            self.no_order_fills
        }
    }

    fn info_text(&self) -> &str {
        if self.is_out_of_bounds(357) {
            ""
        } else {
            get_fixed(&self.info_text[..])
        }
    }

    fn high_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(368) {
            0.0f64
        } else {
            f64_le(self.high_price_during_position)
        }
    }

    fn low_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(376) {
            0.0f64
        } else {
            f64_le(self.low_price_during_position)
        }
    }

    fn position_quantity(&self) -> f64 {
        if self.is_out_of_bounds(384) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.position_quantity)
        }
    }

    /// The RequestID specified in the HistoricalOrderFillsRequestVLS message
    /// from the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    /// This indicates the total number of order fill reports when a batch of
    /// reports is being sent. If there is only one order fill report being sent,
    /// this will be 1.
    fn set_total_number_messages(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.total_number_messages = value.to_le();
        }
        self
    }

    /// This indicates the 1-based index of the order fill report when a batch
    /// of reports is being sent. If there is only one order fill report being
    /// sent, this will be 1.
    fn set_message_number(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.message_number = value.to_le();
        }
        self
    }

    /// The symbol the order fill is for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(80) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    /// This is the Server provided order identifier that the order fill was associated
    /// with.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(128) {
            set_fixed(&mut self.server_order_id[..], value);
        }
        self
    }

    /// This is the fill side and can be either BUY or SELL.
    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(132) {
            self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the price of the order fill.
    fn set_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(144) {
            self.price = f64_le(value);
        }
        self
    }

    /// This is the Date and Time of the order fill.
    fn set_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(152) {
            self.date_time = value.to_le();
        }
        self
    }

    /// This is the quantity of the order fill.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(160) {
            self.quantity = f64_le(value);
        }
        self
    }

    /// This is the unique execution identifier for the order fill.
    fn set_unique_execution_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(224) {
            set_fixed(&mut self.unique_execution_id[..], value);
        }
        self
    }

    /// This is the trade account that the order fill is associated with.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(256) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    /// Indicates whether this is an opening or closing order fill.
    ///
    /// This field is optional.
    fn set_open_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        if !self.is_out_of_bounds(260) {
            self.open_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// Set to a numeric 1 to indicate there are no historical order fills.
    ///
    /// If there are no order fills to return, the Server needs to set this to
    /// 1 and send through 1 HistoricalOrderFillResponseVLS message to indicate
    /// there are no order fills. Otherwise, leave this field at the default of
    /// 0.
    fn set_no_order_fills(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(261) {
            self.no_order_fills = value;
        }
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(357) {
            set_fixed(&mut self.info_text[..], value);
        }
        self
    }

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(368) {
            self.high_price_during_position = f64_le(value);
        }
        self
    }

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(376) {
            self.low_price_during_position = f64_le(value);
        }
        self
    }

    fn set_position_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(384) {
            self.position_quantity = f64_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                384usize,
                core::mem::size_of::<HistoricalOrderFillResponseFixedData>(),
                "HistoricalOrderFillResponseFixedData sizeof expected {:} but was {:}",
                384usize,
                core::mem::size_of::<HistoricalOrderFillResponseFixedData>()
            );
            assert_eq!(
                384u16,
                HistoricalOrderFillResponseFixed::new().size(),
                "HistoricalOrderFillResponseFixed sizeof expected {:} but was {:}",
                384u16,
                HistoricalOrderFillResponseFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_ORDER_FILL_RESPONSE,
                HistoricalOrderFillResponseFixed::new().r#type(),
                "HistoricalOrderFillResponseFixed type expected {:} but was {:}",
                HISTORICAL_ORDER_FILL_RESPONSE,
                HistoricalOrderFillResponseFixed::new().r#type(),
            );
            assert_eq!(
                304u16,
                HistoricalOrderFillResponseFixed::new().r#type(),
                "HistoricalOrderFillResponseFixed type expected {:} but was {:}",
                304u16,
                HistoricalOrderFillResponseFixed::new().r#type(),
            );
            let d = HistoricalOrderFillResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.total_number_messages) as usize) - p,
                "total_number_messages offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.total_number_messages) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.message_number) as usize) - p,
                "message_number offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.message_number) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                80usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                80usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
                "server_order_id offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
            );
            assert_eq!(
                128usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
                "buy_sell offset expected {:} but was {:}",
                128usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
            );
            assert_eq!(
                136usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                136usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                144usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                144usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                152usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                152usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                160usize,
                (core::ptr::addr_of!(d.unique_execution_id) as usize) - p,
                "unique_execution_id offset expected {:} but was {:}",
                160usize,
                (core::ptr::addr_of!(d.unique_execution_id) as usize) - p,
            );
            assert_eq!(
                224usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                224usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                256usize,
                (core::ptr::addr_of!(d.open_close) as usize) - p,
                "open_close offset expected {:} but was {:}",
                256usize,
                (core::ptr::addr_of!(d.open_close) as usize) - p,
            );
            assert_eq!(
                260usize,
                (core::ptr::addr_of!(d.no_order_fills) as usize) - p,
                "no_order_fills offset expected {:} but was {:}",
                260usize,
                (core::ptr::addr_of!(d.no_order_fills) as usize) - p,
            );
            assert_eq!(
                261usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
                "info_text offset expected {:} but was {:}",
                261usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
            );
            assert_eq!(
                360usize,
                (core::ptr::addr_of!(d.high_price_during_position) as usize) - p,
                "high_price_during_position offset expected {:} but was {:}",
                360usize,
                (core::ptr::addr_of!(d.high_price_during_position) as usize) - p,
            );
            assert_eq!(
                368usize,
                (core::ptr::addr_of!(d.low_price_during_position) as usize) - p,
                "low_price_during_position offset expected {:} but was {:}",
                368usize,
                (core::ptr::addr_of!(d.low_price_during_position) as usize) - p,
            );
            assert_eq!(
                376usize,
                (core::ptr::addr_of!(d.position_quantity) as usize) - p,
                "position_quantity offset expected {:} but was {:}",
                376usize,
                (core::ptr::addr_of!(d.position_quantity) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                112usize,
                core::mem::size_of::<HistoricalOrderFillResponseVLSData>(),
                "HistoricalOrderFillResponseVLSData sizeof expected {:} but was {:}",
                112usize,
                core::mem::size_of::<HistoricalOrderFillResponseVLSData>()
            );
            assert_eq!(
                112u16,
                HistoricalOrderFillResponseVLS::new().size(),
                "HistoricalOrderFillResponseVLS sizeof expected {:} but was {:}",
                112u16,
                HistoricalOrderFillResponseVLS::new().size(),
            );
            assert_eq!(
                HISTORICAL_ORDER_FILL_RESPONSE,
                HistoricalOrderFillResponseVLS::new().r#type(),
                "HistoricalOrderFillResponseVLS type expected {:} but was {:}",
                HISTORICAL_ORDER_FILL_RESPONSE,
                HistoricalOrderFillResponseVLS::new().r#type(),
            );
            assert_eq!(
                304u16,
                HistoricalOrderFillResponseVLS::new().r#type(),
                "HistoricalOrderFillResponseVLS type expected {:} but was {:}",
                304u16,
                HistoricalOrderFillResponseVLS::new().r#type(),
            );
            let d = HistoricalOrderFillResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.total_number_messages) as usize) - p,
                "total_number_messages offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.total_number_messages) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.message_number) as usize) - p,
                "message_number offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.message_number) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                28usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
                "server_order_id offset expected {:} but was {:}",
                28usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
                "buy_sell offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.unique_execution_id) as usize) - p,
                "unique_execution_id offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.unique_execution_id) as usize) - p,
            );
            assert_eq!(
                68usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                68usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.open_close) as usize) - p,
                "open_close offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.open_close) as usize) - p,
            );
            assert_eq!(
                76usize,
                (core::ptr::addr_of!(d.no_order_fills) as usize) - p,
                "no_order_fills offset expected {:} but was {:}",
                76usize,
                (core::ptr::addr_of!(d.no_order_fills) as usize) - p,
            );
            assert_eq!(
                78usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
                "info_text offset expected {:} but was {:}",
                78usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.high_price_during_position) as usize) - p,
                "high_price_during_position offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.high_price_during_position) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.low_price_during_position) as usize) - p,
                "low_price_during_position offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.low_price_during_position) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.position_quantity) as usize) - p,
                "position_quantity offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.position_quantity) as usize) - p,
            );
        }
    }
}
