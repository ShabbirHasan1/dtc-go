// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const MARKET_DATA_FEED_SYMBOL_STATUS_FIXED_SIZE: usize = 12;

/// size       u16                       = MarketDataFeedSymbolStatusFixedSize  (12)
/// type       u16                       = MARKET_DATA_FEED_SYMBOL_STATUS  (116)
/// symbol_id  u32                       = 0
/// status     MarketDataFeedStatusEnum  = MARKET_DATA_FEED_STATUS_UNSET  (0)
pub(crate) const MARKET_DATA_FEED_SYMBOL_STATUS_FIXED_DEFAULT: [u8; 12] =
    [12, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0];

pub trait MarketDataFeedSymbolStatus: Message {
    type Safe: MarketDataFeedSymbolStatus;
    type Unsafe: MarketDataFeedSymbolStatus;

    fn symbol_id(&self) -> u32;

    fn status(&self) -> MarketDataFeedStatusEnum;

    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    fn set_status(&mut self, value: MarketDataFeedStatusEnum) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDataFeedSymbolStatus) {
        to.set_symbol_id(self.symbol_id());
        to.set_status(self.status());
    }
}

pub struct MarketDataFeedSymbolStatusFixed {
    data: *const MarketDataFeedSymbolStatusFixedData,
}

pub struct MarketDataFeedSymbolStatusFixedUnsafe {
    data: *const MarketDataFeedSymbolStatusFixedData,
}

#[repr(packed(8), C)]
pub struct MarketDataFeedSymbolStatusFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    status: MarketDataFeedStatusEnum,
}

impl MarketDataFeedSymbolStatusFixedData {
    pub fn new() -> Self {
        Self {
            size: 12u16.to_le(),
            r#type: MARKET_DATA_FEED_SYMBOL_STATUS.to_le(),
            symbol_id: 0u32,
            status: MarketDataFeedStatusEnum::MarketDataFeedStatusUnset.to_le(),
        }
    }
}

unsafe impl Send for MarketDataFeedSymbolStatusFixed {}
unsafe impl Send for MarketDataFeedSymbolStatusFixedUnsafe {}
unsafe impl Send for MarketDataFeedSymbolStatusFixedData {}

impl Drop for MarketDataFeedSymbolStatusFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataFeedSymbolStatusFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataFeedSymbolStatusFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataFeedSymbolStatusFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataFeedSymbolStatusFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataFeedSymbolStatusFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataFeedSymbolStatusFixed {
    type Target = MarketDataFeedSymbolStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataFeedSymbolStatusFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataFeedSymbolStatusFixedUnsafe {
    type Target = MarketDataFeedSymbolStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataFeedSymbolStatusFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataFeedSymbolStatusFixed {
    type Data = MarketDataFeedSymbolStatusFixedData;

    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataFeedSymbolStatusFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataFeedSymbolStatusFixedData,
        }
    }
}
impl crate::Message for MarketDataFeedSymbolStatusFixedUnsafe {
    type Data = MarketDataFeedSymbolStatusFixedData;

    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataFeedSymbolStatusFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataFeedSymbolStatusFixedData,
        }
    }
}
impl MarketDataFeedSymbolStatus for MarketDataFeedSymbolStatusFixed {
    type Safe = MarketDataFeedSymbolStatusFixed;
    type Unsafe = MarketDataFeedSymbolStatusFixedUnsafe;

    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    fn status(&self) -> MarketDataFeedStatusEnum {
        MarketDataFeedStatusEnum::from_le(self.status)
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    fn set_status(&mut self, value: MarketDataFeedStatusEnum) -> &mut Self {
        self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl MarketDataFeedSymbolStatus for MarketDataFeedSymbolStatusFixedUnsafe {
    type Safe = MarketDataFeedSymbolStatusFixed;
    type Unsafe = MarketDataFeedSymbolStatusFixedUnsafe;

    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    fn status(&self) -> MarketDataFeedStatusEnum {
        if self.is_out_of_bounds(12) {
            MarketDataFeedStatusEnum::MarketDataFeedStatusUnset.to_le()
        } else {
            MarketDataFeedStatusEnum::from_le(self.status)
        }
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    fn set_status(&mut self, value: MarketDataFeedStatusEnum) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                12usize,
                core::mem::size_of::<MarketDataFeedSymbolStatusFixedData>(),
                "MarketDataFeedSymbolStatusFixedData sizeof expected {:} but was {:}",
                12usize,
                core::mem::size_of::<MarketDataFeedSymbolStatusFixedData>()
            );
            assert_eq!(
                12u16,
                MarketDataFeedSymbolStatusFixed::new().size(),
                "MarketDataFeedSymbolStatusFixed sizeof expected {:} but was {:}",
                12u16,
                MarketDataFeedSymbolStatusFixed::new().size(),
            );
            assert_eq!(
                MARKET_DATA_FEED_SYMBOL_STATUS,
                MarketDataFeedSymbolStatusFixed::new().r#type(),
                "MarketDataFeedSymbolStatusFixed type expected {:} but was {:}",
                MARKET_DATA_FEED_SYMBOL_STATUS,
                MarketDataFeedSymbolStatusFixed::new().r#type(),
            );
            assert_eq!(
                116u16,
                MarketDataFeedSymbolStatusFixed::new().r#type(),
                "MarketDataFeedSymbolStatusFixed type expected {:} but was {:}",
                116u16,
                MarketDataFeedSymbolStatusFixed::new().r#type(),
            );
            let d = MarketDataFeedSymbolStatusFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.status) as usize) - p,
                "status offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.status) as usize) - p,
            );
        }
    }
}
