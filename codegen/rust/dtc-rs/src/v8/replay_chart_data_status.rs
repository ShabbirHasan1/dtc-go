// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const REPLAY_CHART_DATA_STATUS_VLS_SIZE: usize = 22;

pub(crate) const REPLAY_CHART_DATA_STATUS_FIXED_SIZE: usize = 272;

/// size                    u16                        = ReplayChartDataStatusVLSSize  (22)
/// type                    u16                        = REPLAY_CHART_DATA_STATUS  (10106)
/// base_size               u16                        = ReplayChartDataStatusVLSSize  (22)
/// request_id              u32                        = 0
/// error_message           string                     = ""
/// status                  ReplayChartDataStatusEnum  = REPLAY_CHART_DATA_STATUS_UNSET  (0)
/// sub_account_identifier  u32                        = 0
pub(crate) const REPLAY_CHART_DATA_STATUS_VLS_DEFAULT: [u8; 22] = [
    22, 0, 122, 39, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                    u16                        = ReplayChartDataStatusFixedSize  (272)
/// type                    u16                        = REPLAY_CHART_DATA_STATUS  (10106)
/// request_id              u32                        = 0
/// error_message           string256                  = ""
/// status                  ReplayChartDataStatusEnum  = REPLAY_CHART_DATA_STATUS_UNSET  (0)
/// sub_account_identifier  u32                        = 0
pub(crate) const REPLAY_CHART_DATA_STATUS_FIXED_DEFAULT: [u8; 272] = [
    16, 1, 122, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait ReplayChartDataStatus: Message {
    type Safe: ReplayChartDataStatus;
    type Unsafe: ReplayChartDataStatus;

    fn request_id(&self) -> u32;

    fn error_message(&self) -> &str;

    fn status(&self) -> ReplayChartDataStatusEnum;

    fn sub_account_identifier(&self) -> u32;

    fn set_request_id(&mut self, value: u32) -> &mut Self;

    fn set_error_message(&mut self, value: &str) -> &mut Self;

    fn set_status(&mut self, value: ReplayChartDataStatusEnum) -> &mut Self;

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl ReplayChartDataStatus) {
        to.set_request_id(self.request_id());
        to.set_error_message(self.error_message());
        to.set_status(self.status());
        to.set_sub_account_identifier(self.sub_account_identifier());
    }
}

pub struct ReplayChartDataStatusVLS {
    data: *const ReplayChartDataStatusVLSData,
    capacity: usize,
}

pub struct ReplayChartDataStatusVLSUnsafe {
    data: *const ReplayChartDataStatusVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct ReplayChartDataStatusVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: u32,
    error_message: VLS,
    status: ReplayChartDataStatusEnum,
    sub_account_identifier: u32,
}

pub struct ReplayChartDataStatusFixed {
    data: *const ReplayChartDataStatusFixedData,
}

pub struct ReplayChartDataStatusFixedUnsafe {
    data: *const ReplayChartDataStatusFixedData,
}

#[repr(packed(1), C)]
pub struct ReplayChartDataStatusFixedData {
    size: u16,
    r#type: u16,
    request_id: u32,
    error_message: [u8; 256],
    status: ReplayChartDataStatusEnum,
    sub_account_identifier: u32,
}

impl ReplayChartDataStatusVLSData {
    pub fn new() -> Self {
        Self {
            size: 22u16.to_le(),
            r#type: REPLAY_CHART_DATA_STATUS.to_le(),
            base_size: 22u16.to_le(),
            request_id: 0u32.to_le(),
            error_message: crate::message::VLS::new(),
            status: ReplayChartDataStatusEnum::ReplayChartDataStatusUnset.to_le(),
            sub_account_identifier: 0u32.to_le(),
        }
    }
}

impl ReplayChartDataStatusFixedData {
    pub fn new() -> Self {
        Self {
            size: 272u16.to_le(),
            r#type: REPLAY_CHART_DATA_STATUS.to_le(),
            request_id: 0u32.to_le(),
            error_message: [0; 256],
            status: ReplayChartDataStatusEnum::ReplayChartDataStatusUnset.to_le(),
            sub_account_identifier: 0u32.to_le(),
        }
    }
}

unsafe impl Send for ReplayChartDataStatusFixed {}
unsafe impl Send for ReplayChartDataStatusFixedUnsafe {}
unsafe impl Send for ReplayChartDataStatusFixedData {}
unsafe impl Send for ReplayChartDataStatusVLS {}
unsafe impl Send for ReplayChartDataStatusVLSUnsafe {}
unsafe impl Send for ReplayChartDataStatusVLSData {}

impl Drop for ReplayChartDataStatusFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ReplayChartDataStatusFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ReplayChartDataStatusVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ReplayChartDataStatusVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for ReplayChartDataStatusFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ReplayChartDataStatusFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ReplayChartDataStatusVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ReplayChartDataStatusVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for ReplayChartDataStatusFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ReplayChartDataStatusFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ReplayChartDataStatusVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ReplayChartDataStatusVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for ReplayChartDataStatusFixed {
    type Target = ReplayChartDataStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ReplayChartDataStatusFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ReplayChartDataStatusFixedUnsafe {
    type Target = ReplayChartDataStatusFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ReplayChartDataStatusFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ReplayChartDataStatusVLS {
    type Target = ReplayChartDataStatusVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ReplayChartDataStatusVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ReplayChartDataStatusVLSUnsafe {
    type Target = ReplayChartDataStatusVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ReplayChartDataStatusVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for ReplayChartDataStatusFixed {
    type Data = ReplayChartDataStatusFixedData;

    const BASE_SIZE: usize = 272;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ReplayChartDataStatusFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const ReplayChartDataStatusFixedData,
        }
    }
}
impl crate::Message for ReplayChartDataStatusFixedUnsafe {
    type Data = ReplayChartDataStatusFixedData;

    const BASE_SIZE: usize = 272;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ReplayChartDataStatusFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const ReplayChartDataStatusFixedData,
        }
    }
}
impl crate::Message for ReplayChartDataStatusVLS {
    type Data = ReplayChartDataStatusVLSData;

    const BASE_SIZE: usize = 22;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ReplayChartDataStatusVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const ReplayChartDataStatusVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for ReplayChartDataStatusVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const ReplayChartDataStatusVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for ReplayChartDataStatusVLSUnsafe {
    type Data = ReplayChartDataStatusVLSData;

    const BASE_SIZE: usize = 22;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ReplayChartDataStatusVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const ReplayChartDataStatusVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for ReplayChartDataStatusVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const ReplayChartDataStatusVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl ReplayChartDataStatus for ReplayChartDataStatusVLS {
    type Safe = ReplayChartDataStatusVLS;
    type Unsafe = ReplayChartDataStatusVLSUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn error_message(&self) -> &str {
        get_vls(self, self.error_message)
    }

    fn status(&self) -> ReplayChartDataStatusEnum {
        ReplayChartDataStatusEnum::from_le(self.status)
    }

    fn sub_account_identifier(&self) -> u32 {
        u32::from_le(self.sub_account_identifier)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_error_message(&mut self, value: &str) -> &mut Self {
        self.error_message = set_vls(self, self.error_message, value);
        self
    }

    fn set_status(&mut self, value: ReplayChartDataStatusEnum) -> &mut Self {
        self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        self.sub_account_identifier = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl ReplayChartDataStatus for ReplayChartDataStatusVLSUnsafe {
    type Safe = ReplayChartDataStatusVLS;
    type Unsafe = ReplayChartDataStatusVLSUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn error_message(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.error_message)
        }
    }

    fn status(&self) -> ReplayChartDataStatusEnum {
        if self.is_out_of_bounds(18) {
            ReplayChartDataStatusEnum::ReplayChartDataStatusUnset.to_le()
        } else {
            ReplayChartDataStatusEnum::from_le(self.status)
        }
    }

    fn sub_account_identifier(&self) -> u32 {
        if self.is_out_of_bounds(22) {
            0u32.to_le()
        } else {
            u32::from_le(self.sub_account_identifier)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_error_message(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.error_message = set_vls(self, self.error_message, value);
        }
        self
    }

    fn set_status(&mut self, value: ReplayChartDataStatusEnum) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(22) {
            self.sub_account_identifier = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl ReplayChartDataStatus for ReplayChartDataStatusFixed {
    type Safe = ReplayChartDataStatusFixed;
    type Unsafe = ReplayChartDataStatusFixedUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn error_message(&self) -> &str {
        get_fixed(&self.error_message[..])
    }

    fn status(&self) -> ReplayChartDataStatusEnum {
        ReplayChartDataStatusEnum::from_le(self.status)
    }

    fn sub_account_identifier(&self) -> u32 {
        u32::from_le(self.sub_account_identifier)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_error_message(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.error_message[..], value);
        self
    }

    fn set_status(&mut self, value: ReplayChartDataStatusEnum) -> &mut Self {
        self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        self.sub_account_identifier = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl ReplayChartDataStatus for ReplayChartDataStatusFixedUnsafe {
    type Safe = ReplayChartDataStatusFixed;
    type Unsafe = ReplayChartDataStatusFixedUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn error_message(&self) -> &str {
        if self.is_out_of_bounds(264) {
            ""
        } else {
            get_fixed(&self.error_message[..])
        }
    }

    fn status(&self) -> ReplayChartDataStatusEnum {
        if self.is_out_of_bounds(268) {
            ReplayChartDataStatusEnum::ReplayChartDataStatusUnset.to_le()
        } else {
            ReplayChartDataStatusEnum::from_le(self.status)
        }
    }

    fn sub_account_identifier(&self) -> u32 {
        if self.is_out_of_bounds(272) {
            0u32.to_le()
        } else {
            u32::from_le(self.sub_account_identifier)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_error_message(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(264) {
            set_fixed(&mut self.error_message[..], value);
        }
        self
    }

    fn set_status(&mut self, value: ReplayChartDataStatusEnum) -> &mut Self {
        if !self.is_out_of_bounds(268) {
            self.status = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(272) {
            self.sub_account_identifier = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                272usize,
                core::mem::size_of::<ReplayChartDataStatusFixedData>(),
                "ReplayChartDataStatusFixedData sizeof expected {:} but was {:}",
                272usize,
                core::mem::size_of::<ReplayChartDataStatusFixedData>()
            );
            assert_eq!(
                272u16,
                ReplayChartDataStatusFixed::new().size(),
                "ReplayChartDataStatusFixed sizeof expected {:} but was {:}",
                272u16,
                ReplayChartDataStatusFixed::new().size(),
            );
            assert_eq!(
                REPLAY_CHART_DATA_STATUS,
                ReplayChartDataStatusFixed::new().r#type(),
                "ReplayChartDataStatusFixed type expected {:} but was {:}",
                REPLAY_CHART_DATA_STATUS,
                ReplayChartDataStatusFixed::new().r#type(),
            );
            assert_eq!(
                10106u16,
                ReplayChartDataStatusFixed::new().r#type(),
                "ReplayChartDataStatusFixed type expected {:} but was {:}",
                10106u16,
                ReplayChartDataStatusFixed::new().r#type(),
            );
            let d = ReplayChartDataStatusFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.error_message) as usize) - p,
                "error_message offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.error_message) as usize) - p,
            );
            assert_eq!(
                264usize,
                (core::ptr::addr_of!(d.status) as usize) - p,
                "status offset expected {:} but was {:}",
                264usize,
                (core::ptr::addr_of!(d.status) as usize) - p,
            );
            assert_eq!(
                268usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
                "sub_account_identifier offset expected {:} but was {:}",
                268usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                22usize,
                core::mem::size_of::<ReplayChartDataStatusVLSData>(),
                "ReplayChartDataStatusVLSData sizeof expected {:} but was {:}",
                22usize,
                core::mem::size_of::<ReplayChartDataStatusVLSData>()
            );
            assert_eq!(
                22u16,
                ReplayChartDataStatusVLS::new().size(),
                "ReplayChartDataStatusVLS sizeof expected {:} but was {:}",
                22u16,
                ReplayChartDataStatusVLS::new().size(),
            );
            assert_eq!(
                REPLAY_CHART_DATA_STATUS,
                ReplayChartDataStatusVLS::new().r#type(),
                "ReplayChartDataStatusVLS type expected {:} but was {:}",
                REPLAY_CHART_DATA_STATUS,
                ReplayChartDataStatusVLS::new().r#type(),
            );
            assert_eq!(
                10106u16,
                ReplayChartDataStatusVLS::new().r#type(),
                "ReplayChartDataStatusVLS type expected {:} but was {:}",
                10106u16,
                ReplayChartDataStatusVLS::new().r#type(),
            );
            let d = ReplayChartDataStatusVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.error_message) as usize) - p,
                "error_message offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.error_message) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.status) as usize) - p,
                "status offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.status) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
                "sub_account_identifier offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
            );
        }
    }
}
