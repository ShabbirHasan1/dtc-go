// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const INDIVIDUAL_TRADE_POSITION_VLS_SIZE: usize = 54;

/// size                       u16     = IndividualTradePositionVLSSize  (54)
/// type                       u16     = INDIVIDUAL_TRADE_POSITION  (10112)
/// base_size                  u16     = IndividualTradePositionVLSSize  (54)
/// symbol                     string  = ""
/// is_simulated               bool    = false
/// trade_account              string  = ""
/// quantity                   f64     = 0
/// position_price             f64     = 0
/// open_profit_loss           f64     = 0
/// trade_date_time            i64     = 0
/// fill_execution_identifier  string  = ""
/// is_snapshot                bool    = false
/// is_first_message_in_batch  bool    = false
/// is_last_message_in_batch   bool    = false
pub(crate) const INDIVIDUAL_TRADE_POSITION_VLS_DEFAULT: [u8; 54] = [
    54, 0, 128, 39, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait IndividualTradePosition: Message {
    type Safe: IndividualTradePosition;
    type Unsafe: IndividualTradePosition;

    fn symbol(&self) -> &str;

    fn is_simulated(&self) -> bool;

    fn trade_account(&self) -> &str;

    fn quantity(&self) -> f64;

    fn position_price(&self) -> f64;

    fn open_profit_loss(&self) -> f64;

    fn trade_date_time(&self) -> i64;

    fn fill_execution_identifier(&self) -> &str;

    fn is_snapshot(&self) -> bool;

    fn is_first_message_in_batch(&self) -> bool;

    fn is_last_message_in_batch(&self) -> bool;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_is_simulated(&mut self, value: bool) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_quantity(&mut self, value: f64) -> &mut Self;

    fn set_position_price(&mut self, value: f64) -> &mut Self;

    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self;

    fn set_trade_date_time(&mut self, value: i64) -> &mut Self;

    fn set_fill_execution_identifier(&mut self, value: &str) -> &mut Self;

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self;

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl IndividualTradePosition) {
        to.set_symbol(self.symbol());
        to.set_is_simulated(self.is_simulated());
        to.set_trade_account(self.trade_account());
        to.set_quantity(self.quantity());
        to.set_position_price(self.position_price());
        to.set_open_profit_loss(self.open_profit_loss());
        to.set_trade_date_time(self.trade_date_time());
        to.set_fill_execution_identifier(self.fill_execution_identifier());
        to.set_is_snapshot(self.is_snapshot());
        to.set_is_first_message_in_batch(self.is_first_message_in_batch());
        to.set_is_last_message_in_batch(self.is_last_message_in_batch());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct IndividualTradePositionVLS {
    data: *const IndividualTradePositionVLSData,
    capacity: usize,
}

pub struct IndividualTradePositionVLSUnsafe {
    data: *const IndividualTradePositionVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct IndividualTradePositionVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    symbol: VLS,
    is_simulated: bool,
    trade_account: VLS,
    quantity: f64,
    position_price: f64,
    open_profit_loss: f64,
    trade_date_time: i64,
    fill_execution_identifier: VLS,
    is_snapshot: bool,
    is_first_message_in_batch: bool,
    is_last_message_in_batch: bool,
}

impl IndividualTradePositionVLSData {
    pub fn new() -> Self {
        Self {
            size: 54u16.to_le(),
            r#type: INDIVIDUAL_TRADE_POSITION.to_le(),
            base_size: 54u16.to_le(),
            symbol: crate::message::VLS::new(),
            is_simulated: false,
            trade_account: crate::message::VLS::new(),
            quantity: 0.0,
            position_price: 0.0,
            open_profit_loss: 0.0,
            trade_date_time: 0i64.to_le(),
            fill_execution_identifier: crate::message::VLS::new(),
            is_snapshot: false,
            is_first_message_in_batch: false,
            is_last_message_in_batch: false,
        }
    }
}

unsafe impl Send for IndividualTradePositionVLS {}
unsafe impl Send for IndividualTradePositionVLSUnsafe {}
unsafe impl Send for IndividualTradePositionVLSData {}

impl Drop for IndividualTradePositionVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for IndividualTradePositionVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for IndividualTradePositionVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for IndividualTradePositionVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for IndividualTradePositionVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for IndividualTradePositionVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for IndividualTradePositionVLS {
    type Target = IndividualTradePositionVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for IndividualTradePositionVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for IndividualTradePositionVLSUnsafe {
    type Target = IndividualTradePositionVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for IndividualTradePositionVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for IndividualTradePositionVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("IndividualTradePositionVLS(size: {}, type: {}, base_size: {}, symbol: \"{}\", is_simulated: {}, trade_account: \"{}\", quantity: {}, position_price: {}, open_profit_loss: {}, trade_date_time: {}, fill_execution_identifier: \"{}\", is_snapshot: {}, is_first_message_in_batch: {}, is_last_message_in_batch: {})", self.size(), self.r#type(), self.base_size(), self.symbol(), self.is_simulated(), self.trade_account(), self.quantity(), self.position_price(), self.open_profit_loss(), self.trade_date_time(), self.fill_execution_identifier(), self.is_snapshot(), self.is_first_message_in_batch(), self.is_last_message_in_batch()).as_str())
    }
}

impl core::fmt::Debug for IndividualTradePositionVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("IndividualTradePositionVLS(size: {}, type: {}, base_size: {}, symbol: \"{}\", is_simulated: {}, trade_account: \"{}\", quantity: {}, position_price: {}, open_profit_loss: {}, trade_date_time: {}, fill_execution_identifier: \"{}\", is_snapshot: {}, is_first_message_in_batch: {}, is_last_message_in_batch: {})", self.size(), self.r#type(), self.base_size(), self.symbol(), self.is_simulated(), self.trade_account(), self.quantity(), self.position_price(), self.open_profit_loss(), self.trade_date_time(), self.fill_execution_identifier(), self.is_snapshot(), self.is_first_message_in_batch(), self.is_last_message_in_batch()).as_str())
    }
}

impl core::fmt::Display for IndividualTradePositionVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("IndividualTradePositionVLSUnsafe(size: {}, type: {}, base_size: {}, symbol: \"{}\", is_simulated: {}, trade_account: \"{}\", quantity: {}, position_price: {}, open_profit_loss: {}, trade_date_time: {}, fill_execution_identifier: \"{}\", is_snapshot: {}, is_first_message_in_batch: {}, is_last_message_in_batch: {})", self.size(), self.r#type(), self.base_size(), self.symbol(), self.is_simulated(), self.trade_account(), self.quantity(), self.position_price(), self.open_profit_loss(), self.trade_date_time(), self.fill_execution_identifier(), self.is_snapshot(), self.is_first_message_in_batch(), self.is_last_message_in_batch()).as_str())
    }
}

impl core::fmt::Debug for IndividualTradePositionVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("IndividualTradePositionVLSUnsafe(size: {}, type: {}, base_size: {}, symbol: \"{}\", is_simulated: {}, trade_account: \"{}\", quantity: {}, position_price: {}, open_profit_loss: {}, trade_date_time: {}, fill_execution_identifier: \"{}\", is_snapshot: {}, is_first_message_in_batch: {}, is_last_message_in_batch: {})", self.size(), self.r#type(), self.base_size(), self.symbol(), self.is_simulated(), self.trade_account(), self.quantity(), self.position_price(), self.open_profit_loss(), self.trade_date_time(), self.fill_execution_identifier(), self.is_snapshot(), self.is_first_message_in_batch(), self.is_last_message_in_batch()).as_str())
    }
}

impl crate::Message for IndividualTradePositionVLS {
    type Data = IndividualTradePositionVLSData;

    const TYPE: u16 = INDIVIDUAL_TRADE_POSITION;
    const BASE_SIZE: usize = 54;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, IndividualTradePositionVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const IndividualTradePositionVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for IndividualTradePositionVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const IndividualTradePositionVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for IndividualTradePositionVLSUnsafe {
    type Data = IndividualTradePositionVLSData;

    const TYPE: u16 = INDIVIDUAL_TRADE_POSITION;
    const BASE_SIZE: usize = 54;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, IndividualTradePositionVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const IndividualTradePositionVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for IndividualTradePositionVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const IndividualTradePositionVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl IndividualTradePosition for IndividualTradePositionVLS {
    type Safe = IndividualTradePositionVLS;
    type Unsafe = IndividualTradePositionVLSUnsafe;

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn is_simulated(&self) -> bool {
        self.is_simulated
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn quantity(&self) -> f64 {
        f64_le(self.quantity)
    }

    fn position_price(&self) -> f64 {
        f64_le(self.position_price)
    }

    fn open_profit_loss(&self) -> f64 {
        f64_le(self.open_profit_loss)
    }

    fn trade_date_time(&self) -> i64 {
        i64::from_le(self.trade_date_time)
    }

    fn fill_execution_identifier(&self) -> &str {
        get_vls(self, self.fill_execution_identifier)
    }

    fn is_snapshot(&self) -> bool {
        self.is_snapshot
    }

    fn is_first_message_in_batch(&self) -> bool {
        self.is_first_message_in_batch
    }

    fn is_last_message_in_batch(&self) -> bool {
        self.is_last_message_in_batch
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_is_simulated(&mut self, value: bool) -> &mut Self {
        self.is_simulated = value;
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }

    fn set_position_price(&mut self, value: f64) -> &mut Self {
        self.position_price = f64_le(value);
        self
    }

    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self {
        self.open_profit_loss = f64_le(value);
        self
    }

    fn set_trade_date_time(&mut self, value: i64) -> &mut Self {
        self.trade_date_time = value.to_le();
        self
    }

    fn set_fill_execution_identifier(&mut self, value: &str) -> &mut Self {
        self.fill_execution_identifier = set_vls(self, self.fill_execution_identifier, value);
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        self.is_snapshot = value;
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_first_message_in_batch = value;
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_last_message_in_batch = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl IndividualTradePosition for IndividualTradePositionVLSUnsafe {
    type Safe = IndividualTradePositionVLS;
    type Unsafe = IndividualTradePositionVLSUnsafe;

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn is_simulated(&self) -> bool {
        if self.is_out_of_bounds(11) {
            false
        } else {
            self.is_simulated
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(15) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(23) {
            0.0
        } else {
            f64_le(self.quantity)
        }
    }

    fn position_price(&self) -> f64 {
        if self.is_out_of_bounds(31) {
            0.0
        } else {
            f64_le(self.position_price)
        }
    }

    fn open_profit_loss(&self) -> f64 {
        if self.is_out_of_bounds(39) {
            0.0
        } else {
            f64_le(self.open_profit_loss)
        }
    }

    fn trade_date_time(&self) -> i64 {
        if self.is_out_of_bounds(47) {
            0i64.to_le()
        } else {
            i64::from_le(self.trade_date_time)
        }
    }

    fn fill_execution_identifier(&self) -> &str {
        if self.is_out_of_bounds(51) {
            ""
        } else {
            get_vls(self, self.fill_execution_identifier)
        }
    }

    fn is_snapshot(&self) -> bool {
        if self.is_out_of_bounds(52) {
            false
        } else {
            self.is_snapshot
        }
    }

    fn is_first_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(53) {
            false
        } else {
            self.is_first_message_in_batch
        }
    }

    fn is_last_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(54) {
            false
        } else {
            self.is_last_message_in_batch
        }
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_is_simulated(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(11) {
            self.is_simulated = value;
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(15) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(23) {
            self.quantity = f64_le(value);
        }
        self
    }

    fn set_position_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(31) {
            self.position_price = f64_le(value);
        }
        self
    }

    fn set_open_profit_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(39) {
            self.open_profit_loss = f64_le(value);
        }
        self
    }

    fn set_trade_date_time(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(47) {
            self.trade_date_time = value.to_le();
        }
        self
    }

    fn set_fill_execution_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(51) {
            self.fill_execution_identifier = set_vls(self, self.fill_execution_identifier, value);
        }
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.is_snapshot = value;
        }
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(53) {
            self.is_first_message_in_batch = value;
        }
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(54) {
            self.is_last_message_in_batch = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                54usize,
                core::mem::size_of::<IndividualTradePositionVLSData>(),
                "IndividualTradePositionVLSData sizeof expected {:} but was {:}",
                54usize,
                core::mem::size_of::<IndividualTradePositionVLSData>()
            );
            assert_eq!(
                54u16,
                IndividualTradePositionVLS::new().size(),
                "IndividualTradePositionVLS sizeof expected {:} but was {:}",
                54u16,
                IndividualTradePositionVLS::new().size(),
            );
            assert_eq!(
                INDIVIDUAL_TRADE_POSITION,
                IndividualTradePositionVLS::new().r#type(),
                "IndividualTradePositionVLS type expected {:} but was {:}",
                INDIVIDUAL_TRADE_POSITION,
                IndividualTradePositionVLS::new().r#type(),
            );
            assert_eq!(
                10112u16,
                IndividualTradePositionVLS::new().r#type(),
                "IndividualTradePositionVLS type expected {:} but was {:}",
                10112u16,
                IndividualTradePositionVLS::new().r#type(),
            );
            let d = IndividualTradePositionVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.is_simulated) as usize) - p,
                "is_simulated offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.is_simulated) as usize) - p,
            );
            assert_eq!(
                11usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                11usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                15usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                15usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                23usize,
                (core::ptr::addr_of!(d.position_price) as usize) - p,
                "position_price offset expected {:} but was {:}",
                23usize,
                (core::ptr::addr_of!(d.position_price) as usize) - p,
            );
            assert_eq!(
                31usize,
                (core::ptr::addr_of!(d.open_profit_loss) as usize) - p,
                "open_profit_loss offset expected {:} but was {:}",
                31usize,
                (core::ptr::addr_of!(d.open_profit_loss) as usize) - p,
            );
            assert_eq!(
                39usize,
                (core::ptr::addr_of!(d.trade_date_time) as usize) - p,
                "trade_date_time offset expected {:} but was {:}",
                39usize,
                (core::ptr::addr_of!(d.trade_date_time) as usize) - p,
            );
            assert_eq!(
                47usize,
                (core::ptr::addr_of!(d.fill_execution_identifier) as usize) - p,
                "fill_execution_identifier offset expected {:} but was {:}",
                47usize,
                (core::ptr::addr_of!(d.fill_execution_identifier) as usize) - p,
            );
            assert_eq!(
                51usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
                "is_snapshot offset expected {:} but was {:}",
                51usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
            );
            assert_eq!(
                52usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
                "is_first_message_in_batch offset expected {:} but was {:}",
                52usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
            );
            assert_eq!(
                53usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
                "is_last_message_in_batch offset expected {:} but was {:}",
                53usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
            );
        }
    }
}
