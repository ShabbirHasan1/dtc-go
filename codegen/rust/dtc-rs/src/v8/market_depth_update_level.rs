// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const MARKET_DEPTH_UPDATE_LEVEL_FIXED_SIZE: usize = 56;

/// size         u16                        = MarketDepthUpdateLevelFixedSize  (56)
/// type         u16                        = MARKET_DEPTH_UPDATE_LEVEL  (106)
/// symbol_id    u32                        = 0
/// side         AtBidOrAskEnum             = BID_ASK_UNSET  (0)
/// price        f64                        = 0
/// quantity     f64                        = 0
/// update_type  MarketDepthUpdateTypeEnum  = MARKET_DEPTH_UNSET  (0)
/// date_time    DateTimeWithMilliseconds   = 0
/// num_orders   u32                        = 0
pub(crate) const MARKET_DEPTH_UPDATE_LEVEL_FIXED_DEFAULT: [u8; 56] = [
    56, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// Each MarketDepthUpdateLevelFixed message updates one level of market depth
/// on one side. An insert/update/delete model is used for market depth.
///
/// The Client will need to determine the based upon the price, what particular
/// market depth level is being updated, inserted or deleted.
///
/// It is for this reason, that an insert/update is considered as one update
/// type since it is possible to determine whether it is an insert or update
/// based upon the existence of the price level in the existing market depth
/// book on the Client side.
///
/// What this means is that when the UpdateType field is MARKET_DEPTH_INSERT_UPDATE_LEVEL,
/// it is considered an insert if the price level is not found on the particular
/// side of the market depth being updated. It is considered an update, if
/// the price level is found on the particular side of market depth being
/// updated.
///
/// This message uses a double datatype for the Price field. There is no level
/// index. It is the responsibility of the Client to determine where in its
/// market depth array it is maintaining where the insert/update/delete operation
/// needs to occur.
///
/// Since floating-point comparisons are not always precise, there should
/// be a comparison made only to the number of decimal places the symbol specifies
/// in its security definition. This can be determined through the SecurityDefinitionResponseVLS::PriceDisplayFormat
/// field.
pub trait MarketDepthUpdateLevel: Message {
    type Safe: MarketDepthUpdateLevel;
    type Unsafe: MarketDepthUpdateLevel;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn side(&self) -> AtBidOrAskEnum;

    /// The price level to insert, update or delete.
    fn price(&self) -> f64;

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn quantity(&self) -> f64;

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn update_type(&self) -> MarketDepthUpdateTypeEnum;

    /// The Date-Time of the market depth update.
    fn date_time(&self) -> DateTimeWithMilliseconds;

    /// The number of orders at the Price.
    fn num_orders(&self) -> u32;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn set_side(&mut self, value: AtBidOrAskEnum) -> &mut Self;

    /// The price level to insert, update or delete.
    fn set_price(&mut self, value: f64) -> &mut Self;

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn set_quantity(&mut self, value: f64) -> &mut Self;

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn set_update_type(&mut self, value: MarketDepthUpdateTypeEnum) -> &mut Self;

    /// The Date-Time of the market depth update.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDepthUpdateLevel) {
        to.set_symbol_id(self.symbol_id());
        to.set_side(self.side());
        to.set_price(self.price());
        to.set_quantity(self.quantity());
        to.set_update_type(self.update_type());
        to.set_date_time(self.date_time());
        to.set_num_orders(self.num_orders());
    }
}

/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// Each MarketDepthUpdateLevelFixed message updates one level of market depth
/// on one side. An insert/update/delete model is used for market depth.
///
/// The Client will need to determine the based upon the price, what particular
/// market depth level is being updated, inserted or deleted.
///
/// It is for this reason, that an insert/update is considered as one update
/// type since it is possible to determine whether it is an insert or update
/// based upon the existence of the price level in the existing market depth
/// book on the Client side.
///
/// What this means is that when the UpdateType field is MARKET_DEPTH_INSERT_UPDATE_LEVEL,
/// it is considered an insert if the price level is not found on the particular
/// side of the market depth being updated. It is considered an update, if
/// the price level is found on the particular side of market depth being
/// updated.
///
/// This message uses a double datatype for the Price field. There is no level
/// index. It is the responsibility of the Client to determine where in its
/// market depth array it is maintaining where the insert/update/delete operation
/// needs to occur.
///
/// Since floating-point comparisons are not always precise, there should
/// be a comparison made only to the number of decimal places the symbol specifies
/// in its security definition. This can be determined through the SecurityDefinitionResponseVLS::PriceDisplayFormat
/// field.
pub struct MarketDepthUpdateLevelFixed {
    data: *const MarketDepthUpdateLevelFixedData,
}

pub struct MarketDepthUpdateLevelFixedUnsafe {
    data: *const MarketDepthUpdateLevelFixedData,
}

#[repr(packed(8), C)]
pub struct MarketDepthUpdateLevelFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    side: AtBidOrAskEnum,
    price: f64,
    quantity: f64,
    update_type: MarketDepthUpdateTypeEnum,
    date_time: DateTimeWithMilliseconds,
    num_orders: u32,
}

impl MarketDepthUpdateLevelFixedData {
    pub fn new() -> Self {
        Self {
            size: 56u16.to_le(),
            r#type: MARKET_DEPTH_UPDATE_LEVEL.to_le(),
            symbol_id: 0u32,
            side: AtBidOrAskEnum::BidAskUnset.to_le(),
            price: 0.0f64,
            quantity: 0.0f64,
            update_type: MarketDepthUpdateTypeEnum::MarketDepthUnset.to_le(),
            date_time: 0.0f64,
            num_orders: 0u32,
        }
    }
}

unsafe impl Send for MarketDepthUpdateLevelFixed {}
unsafe impl Send for MarketDepthUpdateLevelFixedUnsafe {}
unsafe impl Send for MarketDepthUpdateLevelFixedData {}

impl Drop for MarketDepthUpdateLevelFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthUpdateLevelFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDepthUpdateLevelFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthUpdateLevelFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDepthUpdateLevelFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthUpdateLevelFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDepthUpdateLevelFixed {
    type Target = MarketDepthUpdateLevelFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthUpdateLevelFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthUpdateLevelFixedUnsafe {
    type Target = MarketDepthUpdateLevelFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthUpdateLevelFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDepthUpdateLevelFixed {
    type Data = MarketDepthUpdateLevelFixedData;

    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthUpdateLevelFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthUpdateLevelFixedData,
        }
    }
}
impl crate::Message for MarketDepthUpdateLevelFixedUnsafe {
    type Data = MarketDepthUpdateLevelFixedData;

    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthUpdateLevelFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthUpdateLevelFixedData,
        }
    }
}
/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// Each MarketDepthUpdateLevelFixed message updates one level of market depth
/// on one side. An insert/update/delete model is used for market depth.
///
/// The Client will need to determine the based upon the price, what particular
/// market depth level is being updated, inserted or deleted.
///
/// It is for this reason, that an insert/update is considered as one update
/// type since it is possible to determine whether it is an insert or update
/// based upon the existence of the price level in the existing market depth
/// book on the Client side.
///
/// What this means is that when the UpdateType field is MARKET_DEPTH_INSERT_UPDATE_LEVEL,
/// it is considered an insert if the price level is not found on the particular
/// side of the market depth being updated. It is considered an update, if
/// the price level is found on the particular side of market depth being
/// updated.
///
/// This message uses a double datatype for the Price field. There is no level
/// index. It is the responsibility of the Client to determine where in its
/// market depth array it is maintaining where the insert/update/delete operation
/// needs to occur.
///
/// Since floating-point comparisons are not always precise, there should
/// be a comparison made only to the number of decimal places the symbol specifies
/// in its security definition. This can be determined through the SecurityDefinitionResponseVLS::PriceDisplayFormat
/// field.
impl MarketDepthUpdateLevel for MarketDepthUpdateLevelFixed {
    type Safe = MarketDepthUpdateLevelFixed;
    type Unsafe = MarketDepthUpdateLevelFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn side(&self) -> AtBidOrAskEnum {
        AtBidOrAskEnum::from_le(self.side)
    }

    /// The price level to insert, update or delete.
    fn price(&self) -> f64 {
        f64_le(self.price)
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn quantity(&self) -> f64 {
        f64_le(self.quantity)
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn update_type(&self) -> MarketDepthUpdateTypeEnum {
        MarketDepthUpdateTypeEnum::from_le(self.update_type)
    }

    /// The Date-Time of the market depth update.
    fn date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.date_time)
    }

    /// The number of orders at the Price.
    fn num_orders(&self) -> u32 {
        u32::from_le(self.num_orders)
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn set_side(&mut self, value: AtBidOrAskEnum) -> &mut Self {
        self.side = unsafe { core::mem::transmute((value as u16).to_le()) };
        self
    }

    /// The price level to insert, update or delete.
    fn set_price(&mut self, value: f64) -> &mut Self {
        self.price = f64_le(value);
        self
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn set_update_type(&mut self, value: MarketDepthUpdateTypeEnum) -> &mut Self {
        self.update_type = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

    /// The Date-Time of the market depth update.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.date_time = f64_le(value);
        self
    }

    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u32) -> &mut Self {
        self.num_orders = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// Each MarketDepthUpdateLevelFixed message updates one level of market depth
/// on one side. An insert/update/delete model is used for market depth.
///
/// The Client will need to determine the based upon the price, what particular
/// market depth level is being updated, inserted or deleted.
///
/// It is for this reason, that an insert/update is considered as one update
/// type since it is possible to determine whether it is an insert or update
/// based upon the existence of the price level in the existing market depth
/// book on the Client side.
///
/// What this means is that when the UpdateType field is MARKET_DEPTH_INSERT_UPDATE_LEVEL,
/// it is considered an insert if the price level is not found on the particular
/// side of the market depth being updated. It is considered an update, if
/// the price level is found on the particular side of market depth being
/// updated.
///
/// This message uses a double datatype for the Price field. There is no level
/// index. It is the responsibility of the Client to determine where in its
/// market depth array it is maintaining where the insert/update/delete operation
/// needs to occur.
///
/// Since floating-point comparisons are not always precise, there should
/// be a comparison made only to the number of decimal places the symbol specifies
/// in its security definition. This can be determined through the SecurityDefinitionResponseVLS::PriceDisplayFormat
/// field.
impl MarketDepthUpdateLevel for MarketDepthUpdateLevelFixedUnsafe {
    type Safe = MarketDepthUpdateLevelFixed;
    type Unsafe = MarketDepthUpdateLevelFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn side(&self) -> AtBidOrAskEnum {
        if self.is_out_of_bounds(10) {
            AtBidOrAskEnum::BidAskUnset.to_le()
        } else {
            AtBidOrAskEnum::from_le(self.side)
        }
    }

    /// The price level to insert, update or delete.
    fn price(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            0.0f64
        } else {
            f64_le(self.price)
        }
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(32) {
            0.0f64
        } else {
            f64_le(self.quantity)
        }
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn update_type(&self) -> MarketDepthUpdateTypeEnum {
        if self.is_out_of_bounds(33) {
            MarketDepthUpdateTypeEnum::MarketDepthUnset.to_le()
        } else {
            MarketDepthUpdateTypeEnum::from_le(self.update_type)
        }
    }

    /// The Date-Time of the market depth update.
    fn date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(48) {
            0.0f64
        } else {
            f64_le(self.date_time)
        }
    }

    /// The number of orders at the Price.
    fn num_orders(&self) -> u32 {
        if self.is_out_of_bounds(52) {
            0u32
        } else {
            u32::from_le(self.num_orders)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn set_side(&mut self, value: AtBidOrAskEnum) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.side = unsafe { core::mem::transmute((value as u16).to_le()) };
        }
        self
    }

    /// The price level to insert, update or delete.
    fn set_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.price = f64_le(value);
        }
        self
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.quantity = f64_le(value);
        }
        self
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn set_update_type(&mut self, value: MarketDepthUpdateTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(33) {
            self.update_type = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

    /// The Date-Time of the market depth update.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.date_time = f64_le(value);
        }
        self
    }

    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.num_orders = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                56usize,
                core::mem::size_of::<MarketDepthUpdateLevelFixedData>(),
                "MarketDepthUpdateLevelFixedData sizeof expected {:} but was {:}",
                56usize,
                core::mem::size_of::<MarketDepthUpdateLevelFixedData>()
            );
            assert_eq!(
                56u16,
                MarketDepthUpdateLevelFixed::new().size(),
                "MarketDepthUpdateLevelFixed sizeof expected {:} but was {:}",
                56u16,
                MarketDepthUpdateLevelFixed::new().size(),
            );
            assert_eq!(
                MARKET_DEPTH_UPDATE_LEVEL,
                MarketDepthUpdateLevelFixed::new().r#type(),
                "MarketDepthUpdateLevelFixed type expected {:} but was {:}",
                MARKET_DEPTH_UPDATE_LEVEL,
                MarketDepthUpdateLevelFixed::new().r#type(),
            );
            assert_eq!(
                106u16,
                MarketDepthUpdateLevelFixed::new().r#type(),
                "MarketDepthUpdateLevelFixed type expected {:} but was {:}",
                106u16,
                MarketDepthUpdateLevelFixed::new().r#type(),
            );
            let d = MarketDepthUpdateLevelFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.side) as usize) - p,
                "side offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.side) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.update_type) as usize) - p,
                "update_type offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.update_type) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.num_orders) as usize) - p,
                "num_orders offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.num_orders) as usize) - p,
            );
        }
    }
}
