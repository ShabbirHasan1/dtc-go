// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const SECURITY_DEFINITION_RESPONSE_VLS_SIZE: usize = 152;

pub(crate) const SECURITY_DEFINITION_RESPONSE_FIXED_SIZE: usize = 432;

/// size                            u16                     = SecurityDefinitionResponseVLSSize  (152)
/// type                            u16                     = SECURITY_DEFINITION_RESPONSE  (507)
/// base_size                       u16                     = SecurityDefinitionResponseVLSSize  (152)
/// request_id                      i32                     = 0
/// symbol                          string                  = ""
/// exchange                        string                  = ""
/// security_type                   SecurityTypeEnum        = SECURITY_TYPE_UNSET  (0)
/// description                     string                  = ""
/// min_price_increment             f32                     = 0
/// price_display_format            PriceDisplayFormatEnum  = PRICE_DISPLAY_FORMAT_DECIMAL_0  (0)
/// currency_value_per_increment    f32                     = 0
/// is_final_message                bool                    = false
/// float_to_int_price_multiplier   f32                     = 1.000000
/// int_to_float_price_divisor      f32                     = 1.000000
/// underlying_symbol               string                  = ""
/// updates_bid_ask_only            u8                      = 0
/// strike_price                    f32                     = 0
/// put_or_call                     PutCallEnum             = PC_UNSET  (0)
/// short_interest                  u32                     = 0
/// security_expiration_date        DateTime4Byte           = 0
/// buy_rollover_interest           f32                     = 0
/// sell_rollover_interest          f32                     = 0
/// earnings_per_share              f32                     = 0
/// shares_outstanding              u32                     = 0
/// int_to_float_quantity_divisor   f32                     = 0
/// has_market_depth_data           u8                      = 1
/// display_price_multiplier        f32                     = 1.000000
/// exchange_symbol                 string                  = ""
/// initial_margin_requirement      f32                     = 0
/// maintenance_margin_requirement  f32                     = 0
/// currency                        string                  = ""
/// contract_size                   f32                     = 0
/// open_interest                   u32                     = 0
/// rollover_date                   DateTime4Byte           = 0
/// is_delayed                      bool                    = false
/// security_identifier             i64                     = 0
/// product_identifier              string                  = ""
pub(crate) const SECURITY_DEFINITION_RESPONSE_VLS_DEFAULT: [u8; 152] = [
    152, 0, 251, 1, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                            u16                     = SecurityDefinitionResponseFixedSize  (432)
/// type                            u16                     = SECURITY_DEFINITION_RESPONSE  (507)
/// request_id                      i32                     = 0
/// symbol                          string64                = ""
/// exchange                        string16                = ""
/// security_type                   SecurityTypeEnum        = SECURITY_TYPE_UNSET  (0)
/// description                     string64                = ""
/// min_price_increment             f32                     = 0
/// price_display_format            PriceDisplayFormatEnum  = PRICE_DISPLAY_FORMAT_UNSET  (-1)
/// currency_value_per_increment    f32                     = 0
/// is_final_message                bool                    = false
/// float_to_int_price_multiplier   f32                     = 1.000000
/// int_to_float_price_divisor      f32                     = 1.000000
/// underlying_symbol               string32                = ""
/// updates_bid_ask_only            u8                      = 0
/// strike_price                    f32                     = 0
/// put_or_call                     PutCallEnum             = PC_UNSET  (0)
/// short_interest                  u32                     = 0
/// security_expiration_date        DateTime4Byte           = 0
/// buy_rollover_interest           f32                     = 0
/// sell_rollover_interest          f32                     = 0
/// earnings_per_share              f32                     = 0
/// shares_outstanding              u32                     = 0
/// int_to_float_quantity_divisor   f32                     = 0
/// has_market_depth_data           u8                      = 1
/// display_price_multiplier        f32                     = 1.000000
/// exchange_symbol                 string64                = ""
/// initial_margin_requirement      f32                     = 0
/// maintenance_margin_requirement  f32                     = 0
/// currency                        string8                 = ""
/// contract_size                   f32                     = 0
/// open_interest                   u32                     = 0
/// rollover_date                   DateTime4Byte           = 0
/// is_delayed                      bool                    = false
/// security_identifier             i64                     = 0
/// product_identifier              string64                = ""
pub(crate) const SECURITY_DEFINITION_RESPONSE_FIXED_DEFAULT: [u8; 432] = [
    176, 1, 251, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// This is a response from the Server in response to a SymbolsForExchangeRequestVLS,
/// UNDERLYING_SymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS,
/// SecurityDefinitionForSymbolRequestVLS, SymbolSearchRequestVLS message.
///
/// If there are no symbols to return in response to a request, the Server
/// needs to send through one of these messages with the RequestID set to
/// the same RequestID value that the request message set it to, and IsFinalMessage
/// = 1. Leave all other member fields in the default state and the Client
/// will recognize there are no symbols.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier
/// values in the Security Definition Response message when the Server uses
/// the integer market data and order messages.
pub trait SecurityDefinitionResponse: Message {
    type Safe: SecurityDefinitionResponse;
    type Unsafe: SecurityDefinitionResponse;

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn request_id(&self) -> i32;

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn symbol(&self) -> &str;

    /// This is the Exchange for the Symbol. This field is optional.
    fn exchange(&self) -> &str;

    /// The Security Type for the symbol.
    fn security_type(&self) -> SecurityTypeEnum;

    /// The text description for the Symbol.
    fn description(&self) -> &str;

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn min_price_increment(&self) -> f32;

    /// This field specifies the price formatting for display purposes.
    fn price_display_format(&self) -> PriceDisplayFormatEnum;

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn currency_value_per_increment(&self) -> f32;

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn is_final_message(&self) -> bool;

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn float_to_int_price_multiplier(&self) -> f32;

    fn int_to_float_price_divisor(&self) -> f32;

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn underlying_symbol(&self) -> &str;

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn updates_bid_ask_only(&self) -> u8;

    /// The strike price when the Security Type is an option type.
    fn strike_price(&self) -> f32;

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn put_or_call(&self) -> PutCallEnum;

    /// The short interest when the Security Type is a stock.
    fn short_interest(&self) -> u32;

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn security_expiration_date(&self) -> DateTime4Byte;

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn buy_rollover_interest(&self) -> f32;

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn sell_rollover_interest(&self) -> f32;

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn earnings_per_share(&self) -> f32;

    /// This is the number of shares outstanding for stocks.
    fn shares_outstanding(&self) -> u32;

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn int_to_float_quantity_divisor(&self) -> f32;

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn has_market_depth_data(&self) -> u8;

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn display_price_multiplier(&self) -> f32;

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn exchange_symbol(&self) -> &str;

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn initial_margin_requirement(&self) -> f32;

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn maintenance_margin_requirement(&self) -> f32;

    /// This is the currency that the Symbol trades in or is priced in.
    fn currency(&self) -> &str;

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn contract_size(&self) -> f32;

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn open_interest(&self) -> u32;

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn rollover_date(&self) -> DateTime4Byte;

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn is_delayed(&self) -> bool;

    fn security_identifier(&self) -> i64;

    fn product_identifier(&self) -> &str;

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// This is the Exchange for the Symbol. This field is optional.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// The Security Type for the symbol.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self;

    /// The text description for the Symbol.
    fn set_description(&mut self, value: &str) -> &mut Self;

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn set_min_price_increment(&mut self, value: f32) -> &mut Self;

    /// This field specifies the price formatting for display purposes.
    fn set_price_display_format(&mut self, value: PriceDisplayFormatEnum) -> &mut Self;

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn set_currency_value_per_increment(&mut self, value: f32) -> &mut Self;

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self;

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn set_float_to_int_price_multiplier(&mut self, value: f32) -> &mut Self;

    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self;

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self;

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn set_updates_bid_ask_only(&mut self, value: u8) -> &mut Self;

    /// The strike price when the Security Type is an option type.
    fn set_strike_price(&mut self, value: f32) -> &mut Self;

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn set_put_or_call(&mut self, value: PutCallEnum) -> &mut Self;

    /// The short interest when the Security Type is a stock.
    fn set_short_interest(&mut self, value: u32) -> &mut Self;

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn set_security_expiration_date(&mut self, value: DateTime4Byte) -> &mut Self;

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn set_buy_rollover_interest(&mut self, value: f32) -> &mut Self;

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn set_sell_rollover_interest(&mut self, value: f32) -> &mut Self;

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn set_earnings_per_share(&mut self, value: f32) -> &mut Self;

    /// This is the number of shares outstanding for stocks.
    fn set_shares_outstanding(&mut self, value: u32) -> &mut Self;

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn set_int_to_float_quantity_divisor(&mut self, value: f32) -> &mut Self;

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn set_has_market_depth_data(&mut self, value: u8) -> &mut Self;

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn set_display_price_multiplier(&mut self, value: f32) -> &mut Self;

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn set_exchange_symbol(&mut self, value: &str) -> &mut Self;

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn set_initial_margin_requirement(&mut self, value: f32) -> &mut Self;

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn set_maintenance_margin_requirement(&mut self, value: f32) -> &mut Self;

    /// This is the currency that the Symbol trades in or is priced in.
    fn set_currency(&mut self, value: &str) -> &mut Self;

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn set_contract_size(&mut self, value: f32) -> &mut Self;

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn set_open_interest(&mut self, value: u32) -> &mut Self;

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn set_rollover_date(&mut self, value: DateTime4Byte) -> &mut Self;

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn set_is_delayed(&mut self, value: bool) -> &mut Self;

    fn set_security_identifier(&mut self, value: i64) -> &mut Self;

    fn set_product_identifier(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl SecurityDefinitionResponse) {
        to.set_request_id(self.request_id());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_security_type(self.security_type());
        to.set_description(self.description());
        to.set_min_price_increment(self.min_price_increment());
        to.set_price_display_format(self.price_display_format());
        to.set_currency_value_per_increment(self.currency_value_per_increment());
        to.set_is_final_message(self.is_final_message());
        to.set_float_to_int_price_multiplier(self.float_to_int_price_multiplier());
        to.set_int_to_float_price_divisor(self.int_to_float_price_divisor());
        to.set_underlying_symbol(self.underlying_symbol());
        to.set_updates_bid_ask_only(self.updates_bid_ask_only());
        to.set_strike_price(self.strike_price());
        to.set_put_or_call(self.put_or_call());
        to.set_short_interest(self.short_interest());
        to.set_security_expiration_date(self.security_expiration_date());
        to.set_buy_rollover_interest(self.buy_rollover_interest());
        to.set_sell_rollover_interest(self.sell_rollover_interest());
        to.set_earnings_per_share(self.earnings_per_share());
        to.set_shares_outstanding(self.shares_outstanding());
        to.set_int_to_float_quantity_divisor(self.int_to_float_quantity_divisor());
        to.set_has_market_depth_data(self.has_market_depth_data());
        to.set_display_price_multiplier(self.display_price_multiplier());
        to.set_exchange_symbol(self.exchange_symbol());
        to.set_initial_margin_requirement(self.initial_margin_requirement());
        to.set_maintenance_margin_requirement(self.maintenance_margin_requirement());
        to.set_currency(self.currency());
        to.set_contract_size(self.contract_size());
        to.set_open_interest(self.open_interest());
        to.set_rollover_date(self.rollover_date());
        to.set_is_delayed(self.is_delayed());
        to.set_security_identifier(self.security_identifier());
        to.set_product_identifier(self.product_identifier());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

/// This is a response from the Server in response to a SymbolsForExchangeRequestVLS,
/// UNDERLYING_SymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS,
/// SecurityDefinitionForSymbolRequestVLS, SymbolSearchRequestVLS message.
///
/// If there are no symbols to return in response to a request, the Server
/// needs to send through one of these messages with the RequestID set to
/// the same RequestID value that the request message set it to, and IsFinalMessage
/// = 1. Leave all other member fields in the default state and the Client
/// will recognize there are no symbols.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier
/// values in the Security Definition Response message when the Server uses
/// the integer market data and order messages.
pub struct SecurityDefinitionResponseVLS {
    data: *const SecurityDefinitionResponseVLSData,
    capacity: usize,
}

pub struct SecurityDefinitionResponseVLSUnsafe {
    data: *const SecurityDefinitionResponseVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct SecurityDefinitionResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    symbol: VLS,
    exchange: VLS,
    security_type: SecurityTypeEnum,
    description: VLS,
    min_price_increment: f32,
    price_display_format: PriceDisplayFormatEnum,
    currency_value_per_increment: f32,
    is_final_message: bool,
    float_to_int_price_multiplier: f32,
    int_to_float_price_divisor: f32,
    underlying_symbol: VLS,
    updates_bid_ask_only: u8,
    strike_price: f32,
    put_or_call: PutCallEnum,
    short_interest: u32,
    security_expiration_date: DateTime4Byte,
    buy_rollover_interest: f32,
    sell_rollover_interest: f32,
    earnings_per_share: f32,
    shares_outstanding: u32,
    int_to_float_quantity_divisor: f32,
    has_market_depth_data: u8,
    display_price_multiplier: f32,
    exchange_symbol: VLS,
    initial_margin_requirement: f32,
    maintenance_margin_requirement: f32,
    currency: VLS,
    contract_size: f32,
    open_interest: u32,
    rollover_date: DateTime4Byte,
    is_delayed: bool,
    security_identifier: i64,
    product_identifier: VLS,
}

/// This is a response from the Server in response to a SymbolsForExchangeRequestVLS,
/// UNDERLYING_SymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS,
/// SecurityDefinitionForSymbolRequestVLS, SymbolSearchRequestVLS message.
///
/// If there are no symbols to return in response to a request, the Server
/// needs to send through one of these messages with the RequestID set to
/// the same RequestID value that the request message set it to, and IsFinalMessage
/// = 1. Leave all other member fields in the default state and the Client
/// will recognize there are no symbols.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier
/// values in the Security Definition Response message when the Server uses
/// the integer market data and order messages.
pub struct SecurityDefinitionResponseFixed {
    data: *const SecurityDefinitionResponseFixedData,
}

pub struct SecurityDefinitionResponseFixedUnsafe {
    data: *const SecurityDefinitionResponseFixedData,
}

#[repr(packed(8), C)]
pub struct SecurityDefinitionResponseFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    symbol: [u8; 64],
    exchange: [u8; 16],
    security_type: SecurityTypeEnum,
    description: [u8; 64],
    min_price_increment: f32,
    price_display_format: PriceDisplayFormatEnum,
    currency_value_per_increment: f32,
    is_final_message: bool,
    float_to_int_price_multiplier: f32,
    int_to_float_price_divisor: f32,
    underlying_symbol: [u8; 32],
    updates_bid_ask_only: u8,
    strike_price: f32,
    put_or_call: PutCallEnum,
    short_interest: u32,
    security_expiration_date: DateTime4Byte,
    buy_rollover_interest: f32,
    sell_rollover_interest: f32,
    earnings_per_share: f32,
    shares_outstanding: u32,
    int_to_float_quantity_divisor: f32,
    has_market_depth_data: u8,
    display_price_multiplier: f32,
    exchange_symbol: [u8; 64],
    initial_margin_requirement: f32,
    maintenance_margin_requirement: f32,
    currency: [u8; 8],
    contract_size: f32,
    open_interest: u32,
    rollover_date: DateTime4Byte,
    is_delayed: bool,
    security_identifier: i64,
    product_identifier: [u8; 64],
}

impl SecurityDefinitionResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 152u16.to_le(),
            r#type: SECURITY_DEFINITION_RESPONSE.to_le(),
            base_size: 152u16.to_le(),
            request_id: 0i32,
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            security_type: SecurityTypeEnum::SecurityTypeUnset.to_le(),
            description: crate::message::VLS::new(),
            min_price_increment: 0.0f32,
            price_display_format: PriceDisplayFormatEnum::PriceDisplayFormatUnset.to_le(),
            currency_value_per_increment: 0.0f32,
            is_final_message: false,
            float_to_int_price_multiplier: 1.0,
            int_to_float_price_divisor: 1.0,
            underlying_symbol: crate::message::VLS::new(),
            updates_bid_ask_only: 0u8,
            strike_price: 0.0f32,
            put_or_call: PutCallEnum::PcUnset.to_le(),
            short_interest: 0u32,
            security_expiration_date: 0u32,
            buy_rollover_interest: 0.0f32,
            sell_rollover_interest: 0.0f32,
            earnings_per_share: 0.0f32,
            shares_outstanding: 0u32,
            int_to_float_quantity_divisor: 0.0f32,
            has_market_depth_data: 1,
            display_price_multiplier: 1.0,
            exchange_symbol: crate::message::VLS::new(),
            initial_margin_requirement: 0.0f32,
            maintenance_margin_requirement: 0.0f32,
            currency: crate::message::VLS::new(),
            contract_size: 0.0f32,
            open_interest: 0u32,
            rollover_date: 0u32,
            is_delayed: false,
            security_identifier: 0i64.to_le(),
            product_identifier: crate::message::VLS::new(),
        }
    }
}

impl SecurityDefinitionResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 432u16.to_le(),
            r#type: SECURITY_DEFINITION_RESPONSE.to_le(),
            request_id: 0i32,
            symbol: [0; 64],
            exchange: [0; 16],
            security_type: SecurityTypeEnum::SecurityTypeUnset.to_le(),
            description: [0; 64],
            min_price_increment: 0.0f32,
            price_display_format: PriceDisplayFormatEnum::PriceDisplayFormatUnset.to_le(),
            currency_value_per_increment: 0.0f32,
            is_final_message: false,
            float_to_int_price_multiplier: 1.0,
            int_to_float_price_divisor: 1.0,
            underlying_symbol: [0; 32],
            updates_bid_ask_only: 0u8,
            strike_price: 0.0f32,
            put_or_call: PutCallEnum::PcUnset.to_le(),
            short_interest: 0u32,
            security_expiration_date: 0u32,
            buy_rollover_interest: 0.0f32,
            sell_rollover_interest: 0.0f32,
            earnings_per_share: 0.0f32,
            shares_outstanding: 0u32,
            int_to_float_quantity_divisor: 0.0f32,
            has_market_depth_data: 1,
            display_price_multiplier: 1.0,
            exchange_symbol: [0; 64],
            initial_margin_requirement: 0.0f32,
            maintenance_margin_requirement: 0.0f32,
            currency: [0; 8],
            contract_size: 0.0f32,
            open_interest: 0u32,
            rollover_date: 0u32,
            is_delayed: false,
            security_identifier: 0i64.to_le(),
            product_identifier: [0; 64],
        }
    }
}

unsafe impl Send for SecurityDefinitionResponseFixed {}
unsafe impl Send for SecurityDefinitionResponseFixedUnsafe {}
unsafe impl Send for SecurityDefinitionResponseFixedData {}
unsafe impl Send for SecurityDefinitionResponseVLS {}
unsafe impl Send for SecurityDefinitionResponseVLSUnsafe {}
unsafe impl Send for SecurityDefinitionResponseVLSData {}

impl Drop for SecurityDefinitionResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SecurityDefinitionResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SecurityDefinitionResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SecurityDefinitionResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for SecurityDefinitionResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SecurityDefinitionResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SecurityDefinitionResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SecurityDefinitionResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for SecurityDefinitionResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SecurityDefinitionResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SecurityDefinitionResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SecurityDefinitionResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for SecurityDefinitionResponseFixed {
    type Target = SecurityDefinitionResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SecurityDefinitionResponseFixedUnsafe {
    type Target = SecurityDefinitionResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SecurityDefinitionResponseVLS {
    type Target = SecurityDefinitionResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SecurityDefinitionResponseVLSUnsafe {
    type Target = SecurityDefinitionResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for SecurityDefinitionResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseFixed(size: {}, type: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl core::fmt::Debug for SecurityDefinitionResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseFixed(size: {}, type: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl core::fmt::Display for SecurityDefinitionResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseFixedUnsafe(size: {}, type: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl core::fmt::Debug for SecurityDefinitionResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseFixedUnsafe(size: {}, type: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl core::fmt::Display for SecurityDefinitionResponseVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseVLS(size: {}, type: {}, base_size: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.base_size(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl core::fmt::Debug for SecurityDefinitionResponseVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseVLS(size: {}, type: {}, base_size: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.base_size(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl core::fmt::Display for SecurityDefinitionResponseVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseVLSUnsafe(size: {}, type: {}, base_size: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.base_size(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl core::fmt::Debug for SecurityDefinitionResponseVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SecurityDefinitionResponseVLSUnsafe(size: {}, type: {}, base_size: {}, request_id: {}, symbol: \"{}\", exchange: \"{}\", security_type: {}, description: \"{}\", min_price_increment: {}, price_display_format: {}, currency_value_per_increment: {}, is_final_message: {}, float_to_int_price_multiplier: {}, int_to_float_price_divisor: {}, underlying_symbol: \"{}\", updates_bid_ask_only: {}, strike_price: {}, put_or_call: {}, short_interest: {}, security_expiration_date: {}, buy_rollover_interest: {}, sell_rollover_interest: {}, earnings_per_share: {}, shares_outstanding: {}, int_to_float_quantity_divisor: {}, has_market_depth_data: {}, display_price_multiplier: {}, exchange_symbol: \"{}\", initial_margin_requirement: {}, maintenance_margin_requirement: {}, currency: \"{}\", contract_size: {}, open_interest: {}, rollover_date: {}, is_delayed: {}, security_identifier: {}, product_identifier: \"{}\")", self.size(), self.r#type(), self.base_size(), self.request_id(), self.symbol(), self.exchange(), self.security_type(), self.description(), self.min_price_increment(), self.price_display_format(), self.currency_value_per_increment(), self.is_final_message(), self.float_to_int_price_multiplier(), self.int_to_float_price_divisor(), self.underlying_symbol(), self.updates_bid_ask_only(), self.strike_price(), self.put_or_call(), self.short_interest(), self.security_expiration_date(), self.buy_rollover_interest(), self.sell_rollover_interest(), self.earnings_per_share(), self.shares_outstanding(), self.int_to_float_quantity_divisor(), self.has_market_depth_data(), self.display_price_multiplier(), self.exchange_symbol(), self.initial_margin_requirement(), self.maintenance_margin_requirement(), self.currency(), self.contract_size(), self.open_interest(), self.rollover_date(), self.is_delayed(), self.security_identifier(), self.product_identifier()).as_str())
    }
}

impl crate::Message for SecurityDefinitionResponseFixed {
    type Data = SecurityDefinitionResponseFixedData;

    const TYPE: u16 = SECURITY_DEFINITION_RESPONSE;
    const BASE_SIZE: usize = 432;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SecurityDefinitionResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionResponseFixedData,
        }
    }
}
impl crate::Message for SecurityDefinitionResponseFixedUnsafe {
    type Data = SecurityDefinitionResponseFixedData;

    const TYPE: u16 = SECURITY_DEFINITION_RESPONSE;
    const BASE_SIZE: usize = 432;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SecurityDefinitionResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionResponseFixedData,
        }
    }
}
impl crate::Message for SecurityDefinitionResponseVLS {
    type Data = SecurityDefinitionResponseVLSData;

    const TYPE: u16 = SECURITY_DEFINITION_RESPONSE;
    const BASE_SIZE: usize = 152;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SecurityDefinitionResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SecurityDefinitionResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SecurityDefinitionResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for SecurityDefinitionResponseVLSUnsafe {
    type Data = SecurityDefinitionResponseVLSData;

    const TYPE: u16 = SECURITY_DEFINITION_RESPONSE;
    const BASE_SIZE: usize = 152;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SecurityDefinitionResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SecurityDefinitionResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SecurityDefinitionResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This is a response from the Server in response to a SymbolsForExchangeRequestVLS,
/// UNDERLYING_SymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS,
/// SecurityDefinitionForSymbolRequestVLS, SymbolSearchRequestVLS message.
///
/// If there are no symbols to return in response to a request, the Server
/// needs to send through one of these messages with the RequestID set to
/// the same RequestID value that the request message set it to, and IsFinalMessage
/// = 1. Leave all other member fields in the default state and the Client
/// will recognize there are no symbols.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier
/// values in the Security Definition Response message when the Server uses
/// the integer market data and order messages.
impl SecurityDefinitionResponse for SecurityDefinitionResponseVLS {
    type Safe = SecurityDefinitionResponseVLS;
    type Unsafe = SecurityDefinitionResponseVLSUnsafe;

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    /// The Security Type for the symbol.
    fn security_type(&self) -> SecurityTypeEnum {
        SecurityTypeEnum::from_le(self.security_type)
    }

    /// The text description for the Symbol.
    fn description(&self) -> &str {
        get_vls(self, self.description)
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn min_price_increment(&self) -> f32 {
        f32_le(self.min_price_increment)
    }

    /// This field specifies the price formatting for display purposes.
    fn price_display_format(&self) -> PriceDisplayFormatEnum {
        PriceDisplayFormatEnum::from_le(self.price_display_format)
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn currency_value_per_increment(&self) -> f32 {
        f32_le(self.currency_value_per_increment)
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn is_final_message(&self) -> bool {
        self.is_final_message
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn float_to_int_price_multiplier(&self) -> f32 {
        f32_le(self.float_to_int_price_multiplier)
    }

    fn int_to_float_price_divisor(&self) -> f32 {
        f32_le(self.int_to_float_price_divisor)
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn underlying_symbol(&self) -> &str {
        get_vls(self, self.underlying_symbol)
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn updates_bid_ask_only(&self) -> u8 {
        self.updates_bid_ask_only
    }

    /// The strike price when the Security Type is an option type.
    fn strike_price(&self) -> f32 {
        f32_le(self.strike_price)
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn put_or_call(&self) -> PutCallEnum {
        PutCallEnum::from_le(self.put_or_call)
    }

    /// The short interest when the Security Type is a stock.
    fn short_interest(&self) -> u32 {
        u32::from_le(self.short_interest)
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn security_expiration_date(&self) -> DateTime4Byte {
        u32::from_le(self.security_expiration_date)
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn buy_rollover_interest(&self) -> f32 {
        f32_le(self.buy_rollover_interest)
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn sell_rollover_interest(&self) -> f32 {
        f32_le(self.sell_rollover_interest)
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn earnings_per_share(&self) -> f32 {
        f32_le(self.earnings_per_share)
    }

    /// This is the number of shares outstanding for stocks.
    fn shares_outstanding(&self) -> u32 {
        u32::from_le(self.shares_outstanding)
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn int_to_float_quantity_divisor(&self) -> f32 {
        f32_le(self.int_to_float_quantity_divisor)
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn has_market_depth_data(&self) -> u8 {
        self.has_market_depth_data
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn display_price_multiplier(&self) -> f32 {
        f32_le(self.display_price_multiplier)
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn exchange_symbol(&self) -> &str {
        get_vls(self, self.exchange_symbol)
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn initial_margin_requirement(&self) -> f32 {
        f32_le(self.initial_margin_requirement)
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn maintenance_margin_requirement(&self) -> f32 {
        f32_le(self.maintenance_margin_requirement)
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn currency(&self) -> &str {
        get_vls(self, self.currency)
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn contract_size(&self) -> f32 {
        f32_le(self.contract_size)
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn open_interest(&self) -> u32 {
        u32::from_le(self.open_interest)
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn rollover_date(&self) -> DateTime4Byte {
        u32::from_le(self.rollover_date)
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn is_delayed(&self) -> bool {
        self.is_delayed
    }

    fn security_identifier(&self) -> i64 {
        i64::from_le(self.security_identifier)
    }

    fn product_identifier(&self) -> &str {
        get_vls(self, self.product_identifier)
    }

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    /// The Security Type for the symbol.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The text description for the Symbol.
    fn set_description(&mut self, value: &str) -> &mut Self {
        self.description = set_vls(self, self.description, value);
        self
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn set_min_price_increment(&mut self, value: f32) -> &mut Self {
        self.min_price_increment = f32_le(value);
        self
    }

    /// This field specifies the price formatting for display purposes.
    fn set_price_display_format(&mut self, value: PriceDisplayFormatEnum) -> &mut Self {
        self.price_display_format = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn set_currency_value_per_increment(&mut self, value: f32) -> &mut Self {
        self.currency_value_per_increment = f32_le(value);
        self
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        self.is_final_message = value;
        self
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn set_float_to_int_price_multiplier(&mut self, value: f32) -> &mut Self {
        self.float_to_int_price_multiplier = f32_le(value);
        self
    }

    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self {
        self.int_to_float_price_divisor = f32_le(value);
        self
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        self.underlying_symbol = set_vls(self, self.underlying_symbol, value);
        self
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn set_updates_bid_ask_only(&mut self, value: u8) -> &mut Self {
        self.updates_bid_ask_only = value;
        self
    }

    /// The strike price when the Security Type is an option type.
    fn set_strike_price(&mut self, value: f32) -> &mut Self {
        self.strike_price = f32_le(value);
        self
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn set_put_or_call(&mut self, value: PutCallEnum) -> &mut Self {
        self.put_or_call = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

    /// The short interest when the Security Type is a stock.
    fn set_short_interest(&mut self, value: u32) -> &mut Self {
        self.short_interest = value.to_le();
        self
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn set_security_expiration_date(&mut self, value: DateTime4Byte) -> &mut Self {
        self.security_expiration_date = value.to_le();
        self
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn set_buy_rollover_interest(&mut self, value: f32) -> &mut Self {
        self.buy_rollover_interest = f32_le(value);
        self
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn set_sell_rollover_interest(&mut self, value: f32) -> &mut Self {
        self.sell_rollover_interest = f32_le(value);
        self
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn set_earnings_per_share(&mut self, value: f32) -> &mut Self {
        self.earnings_per_share = f32_le(value);
        self
    }

    /// This is the number of shares outstanding for stocks.
    fn set_shares_outstanding(&mut self, value: u32) -> &mut Self {
        self.shares_outstanding = value.to_le();
        self
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn set_int_to_float_quantity_divisor(&mut self, value: f32) -> &mut Self {
        self.int_to_float_quantity_divisor = f32_le(value);
        self
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn set_has_market_depth_data(&mut self, value: u8) -> &mut Self {
        self.has_market_depth_data = value;
        self
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn set_display_price_multiplier(&mut self, value: f32) -> &mut Self {
        self.display_price_multiplier = f32_le(value);
        self
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn set_exchange_symbol(&mut self, value: &str) -> &mut Self {
        self.exchange_symbol = set_vls(self, self.exchange_symbol, value);
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn set_initial_margin_requirement(&mut self, value: f32) -> &mut Self {
        self.initial_margin_requirement = f32_le(value);
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn set_maintenance_margin_requirement(&mut self, value: f32) -> &mut Self {
        self.maintenance_margin_requirement = f32_le(value);
        self
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn set_currency(&mut self, value: &str) -> &mut Self {
        self.currency = set_vls(self, self.currency, value);
        self
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn set_contract_size(&mut self, value: f32) -> &mut Self {
        self.contract_size = f32_le(value);
        self
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn set_open_interest(&mut self, value: u32) -> &mut Self {
        self.open_interest = value.to_le();
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn set_rollover_date(&mut self, value: DateTime4Byte) -> &mut Self {
        self.rollover_date = value.to_le();
        self
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn set_is_delayed(&mut self, value: bool) -> &mut Self {
        self.is_delayed = value;
        self
    }

    fn set_security_identifier(&mut self, value: i64) -> &mut Self {
        self.security_identifier = value.to_le();
        self
    }

    fn set_product_identifier(&mut self, value: &str) -> &mut Self {
        self.product_identifier = set_vls(self, self.product_identifier, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a response from the Server in response to a SymbolsForExchangeRequestVLS,
/// UNDERLYING_SymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS,
/// SecurityDefinitionForSymbolRequestVLS, SymbolSearchRequestVLS message.
///
/// If there are no symbols to return in response to a request, the Server
/// needs to send through one of these messages with the RequestID set to
/// the same RequestID value that the request message set it to, and IsFinalMessage
/// = 1. Leave all other member fields in the default state and the Client
/// will recognize there are no symbols.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier
/// values in the Security Definition Response message when the Server uses
/// the integer market data and order messages.
impl SecurityDefinitionResponse for SecurityDefinitionResponseVLSUnsafe {
    type Safe = SecurityDefinitionResponseVLS;
    type Unsafe = SecurityDefinitionResponseVLSUnsafe;

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    /// The Security Type for the symbol.
    fn security_type(&self) -> SecurityTypeEnum {
        if self.is_out_of_bounds(24) {
            SecurityTypeEnum::SecurityTypeUnset.to_le()
        } else {
            SecurityTypeEnum::from_le(self.security_type)
        }
    }

    /// The text description for the Symbol.
    fn description(&self) -> &str {
        if self.is_out_of_bounds(28) {
            ""
        } else {
            get_vls(self, self.description)
        }
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn min_price_increment(&self) -> f32 {
        if self.is_out_of_bounds(32) {
            0.0f32
        } else {
            f32_le(self.min_price_increment)
        }
    }

    /// This field specifies the price formatting for display purposes.
    fn price_display_format(&self) -> PriceDisplayFormatEnum {
        if self.is_out_of_bounds(36) {
            PriceDisplayFormatEnum::PriceDisplayFormatUnset.to_le()
        } else {
            PriceDisplayFormatEnum::from_le(self.price_display_format)
        }
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn currency_value_per_increment(&self) -> f32 {
        if self.is_out_of_bounds(40) {
            0.0f32
        } else {
            f32_le(self.currency_value_per_increment)
        }
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn is_final_message(&self) -> bool {
        if self.is_out_of_bounds(41) {
            false
        } else {
            self.is_final_message
        }
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn float_to_int_price_multiplier(&self) -> f32 {
        if self.is_out_of_bounds(48) {
            1.0
        } else {
            f32_le(self.float_to_int_price_multiplier)
        }
    }

    fn int_to_float_price_divisor(&self) -> f32 {
        if self.is_out_of_bounds(52) {
            1.0
        } else {
            f32_le(self.int_to_float_price_divisor)
        }
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn underlying_symbol(&self) -> &str {
        if self.is_out_of_bounds(56) {
            ""
        } else {
            get_vls(self, self.underlying_symbol)
        }
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn updates_bid_ask_only(&self) -> u8 {
        if self.is_out_of_bounds(57) {
            0u8
        } else {
            self.updates_bid_ask_only
        }
    }

    /// The strike price when the Security Type is an option type.
    fn strike_price(&self) -> f32 {
        if self.is_out_of_bounds(64) {
            0.0f32
        } else {
            f32_le(self.strike_price)
        }
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn put_or_call(&self) -> PutCallEnum {
        if self.is_out_of_bounds(65) {
            PutCallEnum::PcUnset.to_le()
        } else {
            PutCallEnum::from_le(self.put_or_call)
        }
    }

    /// The short interest when the Security Type is a stock.
    fn short_interest(&self) -> u32 {
        if self.is_out_of_bounds(72) {
            0u32
        } else {
            u32::from_le(self.short_interest)
        }
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn security_expiration_date(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(76) {
            0u32
        } else {
            u32::from_le(self.security_expiration_date)
        }
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn buy_rollover_interest(&self) -> f32 {
        if self.is_out_of_bounds(80) {
            0.0f32
        } else {
            f32_le(self.buy_rollover_interest)
        }
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn sell_rollover_interest(&self) -> f32 {
        if self.is_out_of_bounds(84) {
            0.0f32
        } else {
            f32_le(self.sell_rollover_interest)
        }
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn earnings_per_share(&self) -> f32 {
        if self.is_out_of_bounds(88) {
            0.0f32
        } else {
            f32_le(self.earnings_per_share)
        }
    }

    /// This is the number of shares outstanding for stocks.
    fn shares_outstanding(&self) -> u32 {
        if self.is_out_of_bounds(92) {
            0u32
        } else {
            u32::from_le(self.shares_outstanding)
        }
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn int_to_float_quantity_divisor(&self) -> f32 {
        if self.is_out_of_bounds(96) {
            0.0f32
        } else {
            f32_le(self.int_to_float_quantity_divisor)
        }
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn has_market_depth_data(&self) -> u8 {
        if self.is_out_of_bounds(97) {
            1
        } else {
            self.has_market_depth_data
        }
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn display_price_multiplier(&self) -> f32 {
        if self.is_out_of_bounds(104) {
            1.0
        } else {
            f32_le(self.display_price_multiplier)
        }
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn exchange_symbol(&self) -> &str {
        if self.is_out_of_bounds(108) {
            ""
        } else {
            get_vls(self, self.exchange_symbol)
        }
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn initial_margin_requirement(&self) -> f32 {
        if self.is_out_of_bounds(112) {
            0.0f32
        } else {
            f32_le(self.initial_margin_requirement)
        }
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn maintenance_margin_requirement(&self) -> f32 {
        if self.is_out_of_bounds(116) {
            0.0f32
        } else {
            f32_le(self.maintenance_margin_requirement)
        }
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn currency(&self) -> &str {
        if self.is_out_of_bounds(120) {
            ""
        } else {
            get_vls(self, self.currency)
        }
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn contract_size(&self) -> f32 {
        if self.is_out_of_bounds(124) {
            0.0f32
        } else {
            f32_le(self.contract_size)
        }
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn open_interest(&self) -> u32 {
        if self.is_out_of_bounds(128) {
            0u32
        } else {
            u32::from_le(self.open_interest)
        }
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn rollover_date(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(132) {
            0u32
        } else {
            u32::from_le(self.rollover_date)
        }
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn is_delayed(&self) -> bool {
        if self.is_out_of_bounds(133) {
            false
        } else {
            self.is_delayed
        }
    }

    fn security_identifier(&self) -> i64 {
        if self.is_out_of_bounds(144) {
            0i64.to_le()
        } else {
            i64::from_le(self.security_identifier)
        }
    }

    fn product_identifier(&self) -> &str {
        if self.is_out_of_bounds(148) {
            ""
        } else {
            get_vls(self, self.product_identifier)
        }
    }

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    /// The Security Type for the symbol.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The text description for the Symbol.
    fn set_description(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.description = set_vls(self, self.description, value);
        }
        self
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn set_min_price_increment(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.min_price_increment = f32_le(value);
        }
        self
    }

    /// This field specifies the price formatting for display purposes.
    fn set_price_display_format(&mut self, value: PriceDisplayFormatEnum) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.price_display_format = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn set_currency_value_per_increment(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.currency_value_per_increment = f32_le(value);
        }
        self
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(41) {
            self.is_final_message = value;
        }
        self
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn set_float_to_int_price_multiplier(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.float_to_int_price_multiplier = f32_le(value);
        }
        self
    }

    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.int_to_float_price_divisor = f32_le(value);
        }
        self
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.underlying_symbol = set_vls(self, self.underlying_symbol, value);
        }
        self
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn set_updates_bid_ask_only(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(57) {
            self.updates_bid_ask_only = value;
        }
        self
    }

    /// The strike price when the Security Type is an option type.
    fn set_strike_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            self.strike_price = f32_le(value);
        }
        self
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn set_put_or_call(&mut self, value: PutCallEnum) -> &mut Self {
        if !self.is_out_of_bounds(65) {
            self.put_or_call = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

    /// The short interest when the Security Type is a stock.
    fn set_short_interest(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            self.short_interest = value.to_le();
        }
        self
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn set_security_expiration_date(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(76) {
            self.security_expiration_date = value.to_le();
        }
        self
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn set_buy_rollover_interest(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(80) {
            self.buy_rollover_interest = f32_le(value);
        }
        self
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn set_sell_rollover_interest(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(84) {
            self.sell_rollover_interest = f32_le(value);
        }
        self
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn set_earnings_per_share(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            self.earnings_per_share = f32_le(value);
        }
        self
    }

    /// This is the number of shares outstanding for stocks.
    fn set_shares_outstanding(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(92) {
            self.shares_outstanding = value.to_le();
        }
        self
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn set_int_to_float_quantity_divisor(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.int_to_float_quantity_divisor = f32_le(value);
        }
        self
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn set_has_market_depth_data(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(97) {
            self.has_market_depth_data = value;
        }
        self
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn set_display_price_multiplier(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.display_price_multiplier = f32_le(value);
        }
        self
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn set_exchange_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(108) {
            self.exchange_symbol = set_vls(self, self.exchange_symbol, value);
        }
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn set_initial_margin_requirement(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.initial_margin_requirement = f32_le(value);
        }
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn set_maintenance_margin_requirement(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(116) {
            self.maintenance_margin_requirement = f32_le(value);
        }
        self
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn set_currency(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.currency = set_vls(self, self.currency, value);
        }
        self
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn set_contract_size(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(124) {
            self.contract_size = f32_le(value);
        }
        self
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn set_open_interest(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(128) {
            self.open_interest = value.to_le();
        }
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn set_rollover_date(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(132) {
            self.rollover_date = value.to_le();
        }
        self
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn set_is_delayed(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(133) {
            self.is_delayed = value;
        }
        self
    }

    fn set_security_identifier(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(144) {
            self.security_identifier = value.to_le();
        }
        self
    }

    fn set_product_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(148) {
            self.product_identifier = set_vls(self, self.product_identifier, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This is a response from the Server in response to a SymbolsForExchangeRequestVLS,
/// UNDERLYING_SymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS,
/// SecurityDefinitionForSymbolRequestVLS, SymbolSearchRequestVLS message.
///
/// If there are no symbols to return in response to a request, the Server
/// needs to send through one of these messages with the RequestID set to
/// the same RequestID value that the request message set it to, and IsFinalMessage
/// = 1. Leave all other member fields in the default state and the Client
/// will recognize there are no symbols.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier
/// values in the Security Definition Response message when the Server uses
/// the integer market data and order messages.
impl SecurityDefinitionResponse for SecurityDefinitionResponseFixed {
    type Safe = SecurityDefinitionResponseFixed;
    type Unsafe = SecurityDefinitionResponseFixedUnsafe;

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    /// The Security Type for the symbol.
    fn security_type(&self) -> SecurityTypeEnum {
        SecurityTypeEnum::from_le(self.security_type)
    }

    /// The text description for the Symbol.
    fn description(&self) -> &str {
        get_fixed(&self.description[..])
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn min_price_increment(&self) -> f32 {
        f32_le(self.min_price_increment)
    }

    /// This field specifies the price formatting for display purposes.
    fn price_display_format(&self) -> PriceDisplayFormatEnum {
        PriceDisplayFormatEnum::from_le(self.price_display_format)
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn currency_value_per_increment(&self) -> f32 {
        f32_le(self.currency_value_per_increment)
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn is_final_message(&self) -> bool {
        self.is_final_message
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn float_to_int_price_multiplier(&self) -> f32 {
        f32_le(self.float_to_int_price_multiplier)
    }

    fn int_to_float_price_divisor(&self) -> f32 {
        f32_le(self.int_to_float_price_divisor)
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn underlying_symbol(&self) -> &str {
        get_fixed(&self.underlying_symbol[..])
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn updates_bid_ask_only(&self) -> u8 {
        self.updates_bid_ask_only
    }

    /// The strike price when the Security Type is an option type.
    fn strike_price(&self) -> f32 {
        f32_le(self.strike_price)
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn put_or_call(&self) -> PutCallEnum {
        PutCallEnum::from_le(self.put_or_call)
    }

    /// The short interest when the Security Type is a stock.
    fn short_interest(&self) -> u32 {
        u32::from_le(self.short_interest)
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn security_expiration_date(&self) -> DateTime4Byte {
        u32::from_le(self.security_expiration_date)
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn buy_rollover_interest(&self) -> f32 {
        f32_le(self.buy_rollover_interest)
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn sell_rollover_interest(&self) -> f32 {
        f32_le(self.sell_rollover_interest)
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn earnings_per_share(&self) -> f32 {
        f32_le(self.earnings_per_share)
    }

    /// This is the number of shares outstanding for stocks.
    fn shares_outstanding(&self) -> u32 {
        u32::from_le(self.shares_outstanding)
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn int_to_float_quantity_divisor(&self) -> f32 {
        f32_le(self.int_to_float_quantity_divisor)
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn has_market_depth_data(&self) -> u8 {
        self.has_market_depth_data
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn display_price_multiplier(&self) -> f32 {
        f32_le(self.display_price_multiplier)
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn exchange_symbol(&self) -> &str {
        get_fixed(&self.exchange_symbol[..])
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn initial_margin_requirement(&self) -> f32 {
        f32_le(self.initial_margin_requirement)
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn maintenance_margin_requirement(&self) -> f32 {
        f32_le(self.maintenance_margin_requirement)
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn currency(&self) -> &str {
        get_fixed(&self.currency[..])
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn contract_size(&self) -> f32 {
        f32_le(self.contract_size)
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn open_interest(&self) -> u32 {
        u32::from_le(self.open_interest)
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn rollover_date(&self) -> DateTime4Byte {
        u32::from_le(self.rollover_date)
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn is_delayed(&self) -> bool {
        self.is_delayed
    }

    fn security_identifier(&self) -> i64 {
        i64::from_le(self.security_identifier)
    }

    fn product_identifier(&self) -> &str {
        get_fixed(&self.product_identifier[..])
    }

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    /// The Security Type for the symbol.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The text description for the Symbol.
    fn set_description(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.description[..], value);
        self
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn set_min_price_increment(&mut self, value: f32) -> &mut Self {
        self.min_price_increment = f32_le(value);
        self
    }

    /// This field specifies the price formatting for display purposes.
    fn set_price_display_format(&mut self, value: PriceDisplayFormatEnum) -> &mut Self {
        self.price_display_format = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn set_currency_value_per_increment(&mut self, value: f32) -> &mut Self {
        self.currency_value_per_increment = f32_le(value);
        self
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        self.is_final_message = value;
        self
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn set_float_to_int_price_multiplier(&mut self, value: f32) -> &mut Self {
        self.float_to_int_price_multiplier = f32_le(value);
        self
    }

    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self {
        self.int_to_float_price_divisor = f32_le(value);
        self
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.underlying_symbol[..], value);
        self
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn set_updates_bid_ask_only(&mut self, value: u8) -> &mut Self {
        self.updates_bid_ask_only = value;
        self
    }

    /// The strike price when the Security Type is an option type.
    fn set_strike_price(&mut self, value: f32) -> &mut Self {
        self.strike_price = f32_le(value);
        self
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn set_put_or_call(&mut self, value: PutCallEnum) -> &mut Self {
        self.put_or_call = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

    /// The short interest when the Security Type is a stock.
    fn set_short_interest(&mut self, value: u32) -> &mut Self {
        self.short_interest = value.to_le();
        self
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn set_security_expiration_date(&mut self, value: DateTime4Byte) -> &mut Self {
        self.security_expiration_date = value.to_le();
        self
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn set_buy_rollover_interest(&mut self, value: f32) -> &mut Self {
        self.buy_rollover_interest = f32_le(value);
        self
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn set_sell_rollover_interest(&mut self, value: f32) -> &mut Self {
        self.sell_rollover_interest = f32_le(value);
        self
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn set_earnings_per_share(&mut self, value: f32) -> &mut Self {
        self.earnings_per_share = f32_le(value);
        self
    }

    /// This is the number of shares outstanding for stocks.
    fn set_shares_outstanding(&mut self, value: u32) -> &mut Self {
        self.shares_outstanding = value.to_le();
        self
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn set_int_to_float_quantity_divisor(&mut self, value: f32) -> &mut Self {
        self.int_to_float_quantity_divisor = f32_le(value);
        self
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn set_has_market_depth_data(&mut self, value: u8) -> &mut Self {
        self.has_market_depth_data = value;
        self
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn set_display_price_multiplier(&mut self, value: f32) -> &mut Self {
        self.display_price_multiplier = f32_le(value);
        self
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn set_exchange_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange_symbol[..], value);
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn set_initial_margin_requirement(&mut self, value: f32) -> &mut Self {
        self.initial_margin_requirement = f32_le(value);
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn set_maintenance_margin_requirement(&mut self, value: f32) -> &mut Self {
        self.maintenance_margin_requirement = f32_le(value);
        self
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn set_currency(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.currency[..], value);
        self
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn set_contract_size(&mut self, value: f32) -> &mut Self {
        self.contract_size = f32_le(value);
        self
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn set_open_interest(&mut self, value: u32) -> &mut Self {
        self.open_interest = value.to_le();
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn set_rollover_date(&mut self, value: DateTime4Byte) -> &mut Self {
        self.rollover_date = value.to_le();
        self
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn set_is_delayed(&mut self, value: bool) -> &mut Self {
        self.is_delayed = value;
        self
    }

    fn set_security_identifier(&mut self, value: i64) -> &mut Self {
        self.security_identifier = value.to_le();
        self
    }

    fn set_product_identifier(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.product_identifier[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a response from the Server in response to a SymbolsForExchangeRequestVLS,
/// UNDERLYING_SymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS,
/// SecurityDefinitionForSymbolRequestVLS, SymbolSearchRequestVLS message.
///
/// If there are no symbols to return in response to a request, the Server
/// needs to send through one of these messages with the RequestID set to
/// the same RequestID value that the request message set it to, and IsFinalMessage
/// = 1. Leave all other member fields in the default state and the Client
/// will recognize there are no symbols.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier
/// values in the Security Definition Response message when the Server uses
/// the integer market data and order messages.
impl SecurityDefinitionResponse for SecurityDefinitionResponseFixedUnsafe {
    type Safe = SecurityDefinitionResponseFixed;
    type Unsafe = SecurityDefinitionResponseFixedUnsafe;

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(72) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(88) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    /// The Security Type for the symbol.
    fn security_type(&self) -> SecurityTypeEnum {
        if self.is_out_of_bounds(92) {
            SecurityTypeEnum::SecurityTypeUnset.to_le()
        } else {
            SecurityTypeEnum::from_le(self.security_type)
        }
    }

    /// The text description for the Symbol.
    fn description(&self) -> &str {
        if self.is_out_of_bounds(156) {
            ""
        } else {
            get_fixed(&self.description[..])
        }
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn min_price_increment(&self) -> f32 {
        if self.is_out_of_bounds(160) {
            0.0f32
        } else {
            f32_le(self.min_price_increment)
        }
    }

    /// This field specifies the price formatting for display purposes.
    fn price_display_format(&self) -> PriceDisplayFormatEnum {
        if self.is_out_of_bounds(164) {
            PriceDisplayFormatEnum::PriceDisplayFormatUnset.to_le()
        } else {
            PriceDisplayFormatEnum::from_le(self.price_display_format)
        }
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn currency_value_per_increment(&self) -> f32 {
        if self.is_out_of_bounds(168) {
            0.0f32
        } else {
            f32_le(self.currency_value_per_increment)
        }
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn is_final_message(&self) -> bool {
        if self.is_out_of_bounds(169) {
            false
        } else {
            self.is_final_message
        }
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn float_to_int_price_multiplier(&self) -> f32 {
        if self.is_out_of_bounds(176) {
            1.0
        } else {
            f32_le(self.float_to_int_price_multiplier)
        }
    }

    fn int_to_float_price_divisor(&self) -> f32 {
        if self.is_out_of_bounds(180) {
            1.0
        } else {
            f32_le(self.int_to_float_price_divisor)
        }
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn underlying_symbol(&self) -> &str {
        if self.is_out_of_bounds(212) {
            ""
        } else {
            get_fixed(&self.underlying_symbol[..])
        }
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn updates_bid_ask_only(&self) -> u8 {
        if self.is_out_of_bounds(213) {
            0u8
        } else {
            self.updates_bid_ask_only
        }
    }

    /// The strike price when the Security Type is an option type.
    fn strike_price(&self) -> f32 {
        if self.is_out_of_bounds(220) {
            0.0f32
        } else {
            f32_le(self.strike_price)
        }
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn put_or_call(&self) -> PutCallEnum {
        if self.is_out_of_bounds(221) {
            PutCallEnum::PcUnset.to_le()
        } else {
            PutCallEnum::from_le(self.put_or_call)
        }
    }

    /// The short interest when the Security Type is a stock.
    fn short_interest(&self) -> u32 {
        if self.is_out_of_bounds(228) {
            0u32
        } else {
            u32::from_le(self.short_interest)
        }
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn security_expiration_date(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(232) {
            0u32
        } else {
            u32::from_le(self.security_expiration_date)
        }
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn buy_rollover_interest(&self) -> f32 {
        if self.is_out_of_bounds(236) {
            0.0f32
        } else {
            f32_le(self.buy_rollover_interest)
        }
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn sell_rollover_interest(&self) -> f32 {
        if self.is_out_of_bounds(240) {
            0.0f32
        } else {
            f32_le(self.sell_rollover_interest)
        }
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn earnings_per_share(&self) -> f32 {
        if self.is_out_of_bounds(244) {
            0.0f32
        } else {
            f32_le(self.earnings_per_share)
        }
    }

    /// This is the number of shares outstanding for stocks.
    fn shares_outstanding(&self) -> u32 {
        if self.is_out_of_bounds(248) {
            0u32
        } else {
            u32::from_le(self.shares_outstanding)
        }
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn int_to_float_quantity_divisor(&self) -> f32 {
        if self.is_out_of_bounds(252) {
            0.0f32
        } else {
            f32_le(self.int_to_float_quantity_divisor)
        }
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn has_market_depth_data(&self) -> u8 {
        if self.is_out_of_bounds(253) {
            1
        } else {
            self.has_market_depth_data
        }
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn display_price_multiplier(&self) -> f32 {
        if self.is_out_of_bounds(260) {
            1.0
        } else {
            f32_le(self.display_price_multiplier)
        }
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn exchange_symbol(&self) -> &str {
        if self.is_out_of_bounds(324) {
            ""
        } else {
            get_fixed(&self.exchange_symbol[..])
        }
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn initial_margin_requirement(&self) -> f32 {
        if self.is_out_of_bounds(328) {
            0.0f32
        } else {
            f32_le(self.initial_margin_requirement)
        }
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn maintenance_margin_requirement(&self) -> f32 {
        if self.is_out_of_bounds(332) {
            0.0f32
        } else {
            f32_le(self.maintenance_margin_requirement)
        }
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn currency(&self) -> &str {
        if self.is_out_of_bounds(340) {
            ""
        } else {
            get_fixed(&self.currency[..])
        }
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn contract_size(&self) -> f32 {
        if self.is_out_of_bounds(344) {
            0.0f32
        } else {
            f32_le(self.contract_size)
        }
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn open_interest(&self) -> u32 {
        if self.is_out_of_bounds(348) {
            0u32
        } else {
            u32::from_le(self.open_interest)
        }
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn rollover_date(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(352) {
            0u32
        } else {
            u32::from_le(self.rollover_date)
        }
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn is_delayed(&self) -> bool {
        if self.is_out_of_bounds(353) {
            false
        } else {
            self.is_delayed
        }
    }

    fn security_identifier(&self) -> i64 {
        if self.is_out_of_bounds(368) {
            0i64.to_le()
        } else {
            i64::from_le(self.security_identifier)
        }
    }

    fn product_identifier(&self) -> &str {
        if self.is_out_of_bounds(432) {
            ""
        } else {
            get_fixed(&self.product_identifier[..])
        }
    }

    /// This is the same RequestID that this message is in response to and was
    /// given in the original Security Definition request message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    /// This is the Symbol the Security Definition is for.
    ///
    /// When the Server responds with a single SecurityDefinitionResponseVLS message
    /// and there are no security definitions to return for the original request,
    /// this will be empty.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UnderlyingSymbolsForExchangeRequestVLS.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    /// This is the Exchange for the Symbol. This field is optional.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    /// The Security Type for the symbol.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(92) {
            self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The text description for the Symbol.
    fn set_description(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(156) {
            set_fixed(&mut self.description[..], value);
        }
        self
    }

    /// The minimum amount that prices can change by for the Symbol and minimum
    /// amount that prices are quoted in.
    fn set_min_price_increment(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(160) {
            self.min_price_increment = f32_le(value);
        }
        self
    }

    /// This field specifies the price formatting for display purposes.
    fn set_price_display_format(&mut self, value: PriceDisplayFormatEnum) -> &mut Self {
        if !self.is_out_of_bounds(164) {
            self.price_display_format = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This field is the currency value per MinPriceIncrement in the Symbols
    /// currency.
    fn set_currency_value_per_increment(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(168) {
            self.currency_value_per_increment = f32_le(value);
        }
        self
    }

    /// Set to a integer value of 1 to indicate this is the final message in batch
    /// of Security Definition Response messages.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(169) {
            self.is_final_message = value;
        }
        self
    }

    /// With the integer order entry messages discontinued as of August 2020,
    /// this field is no longer relevant.
    fn set_float_to_int_price_multiplier(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(176) {
            self.float_to_int_price_multiplier = f32_le(value);
        }
        self
    }

    fn set_int_to_float_price_divisor(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(180) {
            self.int_to_float_price_divisor = f32_le(value);
        }
        self
    }

    /// This is the underlying symbol for the Symbol field if the Symbol has an
    /// underlying symbol.
    ///
    /// The Server must set this when the SecurityDefinitionResponseVLS message
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    /// in response to UnderlyingSymbolsForExchangeRequestVLS, SymbolsForUnderlyingRequestVLS.
    ///
    /// This is typically used with futures. A futures symbol for a specific contract
    /// year and month will have an underlying symbol equivalent to the Symbol
    /// without the year and month characters.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(212) {
            set_fixed(&mut self.underlying_symbol[..], value);
        }
        self
    }

    /// This is set to 1 when the Symbol does not provide MarketDataUpdateTradeFixed
    /// messages and only provides MarketDataUpdateBidAskFixed messages when there
    /// is market activity for the Symbol.
    ///
    /// Otherwise, when this is set to 0, MarketDataUpdateTradeFixed messages
    /// will be received after subscribing to market data, when there is trading
    /// activity.
    fn set_updates_bid_ask_only(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(213) {
            self.updates_bid_ask_only = value;
        }
        self
    }

    /// The strike price when the Security Type is an option type.
    fn set_strike_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(220) {
            self.strike_price = f32_le(value);
        }
        self
    }

    /// When the Security Type is an option, this indicates if it is a put or
    /// call.
    fn set_put_or_call(&mut self, value: PutCallEnum) -> &mut Self {
        if !self.is_out_of_bounds(221) {
            self.put_or_call = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

    /// The short interest when the Security Type is a stock.
    fn set_short_interest(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(228) {
            self.short_interest = value.to_le();
        }
        self
    }

    /// The expiration date for the Symbol for symbols which have an expiration
    /// date.
    fn set_security_expiration_date(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(232) {
            self.security_expiration_date = value.to_le();
        }
        self
    }

    /// The daily interest amount which is deducted for a Buy position. This only
    /// applies for Forex trading. It is in the quote currency of the symbol.
    fn set_buy_rollover_interest(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(236) {
            self.buy_rollover_interest = f32_le(value);
        }
        self
    }

    /// The daily interest amount which is deducted for a Sell position. This
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    /// only applies for Forex trading. It is in the quote currency of the symbol.
    fn set_sell_rollover_interest(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(240) {
            self.sell_rollover_interest = f32_le(value);
        }
        self
    }

    /// The earnings per share as a currency value when the Security Type is a
    /// stock.
    fn set_earnings_per_share(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(244) {
            self.earnings_per_share = f32_le(value);
        }
        self
    }

    /// This is the number of shares outstanding for stocks.
    fn set_shares_outstanding(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(248) {
            self.shares_outstanding = value.to_le();
        }
        self
    }

    /// With the integer order entry and market data messages discontinued as
    /// of August 2020, this field is no longer relevant.
    fn set_int_to_float_quantity_divisor(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(252) {
            self.int_to_float_quantity_divisor = f32_le(value);
        }
        self
    }

    /// When HasMarketDepthData is set to 1, it indicates the Symbol has market
    /// depth data available for it. When this is set to 0, market depth data
    /// is not supported for the Symbol.
    fn set_has_market_depth_data(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(253) {
            self.has_market_depth_data = value;
        }
        self
    }

    /// This is an optional field for the Server to set.
    ///
    /// The default for this is 1.0.
    ///
    /// This sets the multiplier to use in the case where the Client should multiply
    /// the values in market data messages by some number other than 1.0 before
    /// displaying them to the user.
    ///
    /// It is recommended that a Server does not use this and instead transmit
    /// to the Client values as the actual floating-point values.
    ///
    /// This should not be confused with the integer market data messages and
    /// the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier
    /// is for when the Server transmits market data values using floating-point
    /// types and where those values may have a fractional component, but where
    /// it is necessary to still multiply the original value by this multiplier
    /// to get the final value to display to the user.
    ///
    /// When this is set to a value other than 1.0, then the MinPriceIncrement
    /// and the PriceDisplayFormat fields are relative to the market data values
    /// after the DisplayPriceMultiplier is applied.
    fn set_display_price_multiplier(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(260) {
            self.display_price_multiplier = f32_le(value);
        }
        self
    }

    /// This is an optional field. This is the exchange symbol which corresponds
    /// with the Symbol field.
    ///
    /// This field should be empty when this Security Definition message is in
    /// response to UNDERLYING_SymbolsForExchangeRequestVLS.
    fn set_exchange_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(324) {
            set_fixed(&mut self.exchange_symbol[..], value);
        }
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the initial margin requirement as specified by the exchange, if
    /// available.
    fn set_initial_margin_requirement(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(328) {
            self.initial_margin_requirement = f32_le(value);
        }
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the maintenance margin requirement as specified by the exchange,
    /// if available.
    fn set_maintenance_margin_requirement(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(332) {
            self.maintenance_margin_requirement = f32_le(value);
        }
        self
    }

    /// This is the currency that the Symbol trades in or is priced in.
    fn set_currency(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(340) {
            set_fixed(&mut self.currency[..], value);
        }
        self
    }

    /// In the case of when a Symbol is a contract type, this variable indicates
    /// the size of the contract.
    ///
    /// This is going to be an exchange specific specification.
    fn set_contract_size(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(344) {
            self.contract_size = f32_le(value);
        }
        self
    }

    /// In the case of when a Symbol is a contract type, this field is the number
    /// of outstanding contracts.
    fn set_open_interest(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(348) {
            self.open_interest = value.to_le();
        }
        self
    }

    /// This field applies to the Futures Security Type.
    ///
    /// This is the rollover date for the symbol according to the typical time
    /// where trading transitions from one contract month to the next.
    fn set_rollover_date(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(352) {
            self.rollover_date = value.to_le();
        }
        self
    }

    /// This field will be 1 if the market data for the Symbol is intentionally
    /// delayed by a certain amount of time. Otherwise, this will be 0.
    fn set_is_delayed(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(353) {
            self.is_delayed = value;
        }
        self
    }

    fn set_security_identifier(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(368) {
            self.security_identifier = value.to_le();
        }
        self
    }

    fn set_product_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(432) {
            set_fixed(&mut self.product_identifier[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                432usize,
                core::mem::size_of::<SecurityDefinitionResponseFixedData>(),
                "SecurityDefinitionResponseFixedData sizeof expected {:} but was {:}",
                432usize,
                core::mem::size_of::<SecurityDefinitionResponseFixedData>()
            );
            assert_eq!(
                432u16,
                SecurityDefinitionResponseFixed::new().size(),
                "SecurityDefinitionResponseFixed sizeof expected {:} but was {:}",
                432u16,
                SecurityDefinitionResponseFixed::new().size(),
            );
            assert_eq!(
                SECURITY_DEFINITION_RESPONSE,
                SecurityDefinitionResponseFixed::new().r#type(),
                "SecurityDefinitionResponseFixed type expected {:} but was {:}",
                SECURITY_DEFINITION_RESPONSE,
                SecurityDefinitionResponseFixed::new().r#type(),
            );
            assert_eq!(
                507u16,
                SecurityDefinitionResponseFixed::new().r#type(),
                "SecurityDefinitionResponseFixed type expected {:} but was {:}",
                507u16,
                SecurityDefinitionResponseFixed::new().r#type(),
            );
            let d = SecurityDefinitionResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.security_type) as usize) - p,
                "security_type offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.security_type) as usize) - p,
            );
            assert_eq!(
                92usize,
                (core::ptr::addr_of!(d.description) as usize) - p,
                "description offset expected {:} but was {:}",
                92usize,
                (core::ptr::addr_of!(d.description) as usize) - p,
            );
            assert_eq!(
                156usize,
                (core::ptr::addr_of!(d.min_price_increment) as usize) - p,
                "min_price_increment offset expected {:} but was {:}",
                156usize,
                (core::ptr::addr_of!(d.min_price_increment) as usize) - p,
            );
            assert_eq!(
                160usize,
                (core::ptr::addr_of!(d.price_display_format) as usize) - p,
                "price_display_format offset expected {:} but was {:}",
                160usize,
                (core::ptr::addr_of!(d.price_display_format) as usize) - p,
            );
            assert_eq!(
                164usize,
                (core::ptr::addr_of!(d.currency_value_per_increment) as usize) - p,
                "currency_value_per_increment offset expected {:} but was {:}",
                164usize,
                (core::ptr::addr_of!(d.currency_value_per_increment) as usize) - p,
            );
            assert_eq!(
                168usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
                "is_final_message offset expected {:} but was {:}",
                168usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
            );
            assert_eq!(
                172usize,
                (core::ptr::addr_of!(d.float_to_int_price_multiplier) as usize) - p,
                "float_to_int_price_multiplier offset expected {:} but was {:}",
                172usize,
                (core::ptr::addr_of!(d.float_to_int_price_multiplier) as usize) - p,
            );
            assert_eq!(
                176usize,
                (core::ptr::addr_of!(d.int_to_float_price_divisor) as usize) - p,
                "int_to_float_price_divisor offset expected {:} but was {:}",
                176usize,
                (core::ptr::addr_of!(d.int_to_float_price_divisor) as usize) - p,
            );
            assert_eq!(
                180usize,
                (core::ptr::addr_of!(d.underlying_symbol) as usize) - p,
                "underlying_symbol offset expected {:} but was {:}",
                180usize,
                (core::ptr::addr_of!(d.underlying_symbol) as usize) - p,
            );
            assert_eq!(
                212usize,
                (core::ptr::addr_of!(d.updates_bid_ask_only) as usize) - p,
                "updates_bid_ask_only offset expected {:} but was {:}",
                212usize,
                (core::ptr::addr_of!(d.updates_bid_ask_only) as usize) - p,
            );
            assert_eq!(
                216usize,
                (core::ptr::addr_of!(d.strike_price) as usize) - p,
                "strike_price offset expected {:} but was {:}",
                216usize,
                (core::ptr::addr_of!(d.strike_price) as usize) - p,
            );
            assert_eq!(
                220usize,
                (core::ptr::addr_of!(d.put_or_call) as usize) - p,
                "put_or_call offset expected {:} but was {:}",
                220usize,
                (core::ptr::addr_of!(d.put_or_call) as usize) - p,
            );
            assert_eq!(
                224usize,
                (core::ptr::addr_of!(d.short_interest) as usize) - p,
                "short_interest offset expected {:} but was {:}",
                224usize,
                (core::ptr::addr_of!(d.short_interest) as usize) - p,
            );
            assert_eq!(
                228usize,
                (core::ptr::addr_of!(d.security_expiration_date) as usize) - p,
                "security_expiration_date offset expected {:} but was {:}",
                228usize,
                (core::ptr::addr_of!(d.security_expiration_date) as usize) - p,
            );
            assert_eq!(
                232usize,
                (core::ptr::addr_of!(d.buy_rollover_interest) as usize) - p,
                "buy_rollover_interest offset expected {:} but was {:}",
                232usize,
                (core::ptr::addr_of!(d.buy_rollover_interest) as usize) - p,
            );
            assert_eq!(
                236usize,
                (core::ptr::addr_of!(d.sell_rollover_interest) as usize) - p,
                "sell_rollover_interest offset expected {:} but was {:}",
                236usize,
                (core::ptr::addr_of!(d.sell_rollover_interest) as usize) - p,
            );
            assert_eq!(
                240usize,
                (core::ptr::addr_of!(d.earnings_per_share) as usize) - p,
                "earnings_per_share offset expected {:} but was {:}",
                240usize,
                (core::ptr::addr_of!(d.earnings_per_share) as usize) - p,
            );
            assert_eq!(
                244usize,
                (core::ptr::addr_of!(d.shares_outstanding) as usize) - p,
                "shares_outstanding offset expected {:} but was {:}",
                244usize,
                (core::ptr::addr_of!(d.shares_outstanding) as usize) - p,
            );
            assert_eq!(
                248usize,
                (core::ptr::addr_of!(d.int_to_float_quantity_divisor) as usize) - p,
                "int_to_float_quantity_divisor offset expected {:} but was {:}",
                248usize,
                (core::ptr::addr_of!(d.int_to_float_quantity_divisor) as usize) - p,
            );
            assert_eq!(
                252usize,
                (core::ptr::addr_of!(d.has_market_depth_data) as usize) - p,
                "has_market_depth_data offset expected {:} but was {:}",
                252usize,
                (core::ptr::addr_of!(d.has_market_depth_data) as usize) - p,
            );
            assert_eq!(
                256usize,
                (core::ptr::addr_of!(d.display_price_multiplier) as usize) - p,
                "display_price_multiplier offset expected {:} but was {:}",
                256usize,
                (core::ptr::addr_of!(d.display_price_multiplier) as usize) - p,
            );
            assert_eq!(
                260usize,
                (core::ptr::addr_of!(d.exchange_symbol) as usize) - p,
                "exchange_symbol offset expected {:} but was {:}",
                260usize,
                (core::ptr::addr_of!(d.exchange_symbol) as usize) - p,
            );
            assert_eq!(
                324usize,
                (core::ptr::addr_of!(d.initial_margin_requirement) as usize) - p,
                "initial_margin_requirement offset expected {:} but was {:}",
                324usize,
                (core::ptr::addr_of!(d.initial_margin_requirement) as usize) - p,
            );
            assert_eq!(
                328usize,
                (core::ptr::addr_of!(d.maintenance_margin_requirement) as usize) - p,
                "maintenance_margin_requirement offset expected {:} but was {:}",
                328usize,
                (core::ptr::addr_of!(d.maintenance_margin_requirement) as usize) - p,
            );
            assert_eq!(
                332usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
                "currency offset expected {:} but was {:}",
                332usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
            );
            assert_eq!(
                340usize,
                (core::ptr::addr_of!(d.contract_size) as usize) - p,
                "contract_size offset expected {:} but was {:}",
                340usize,
                (core::ptr::addr_of!(d.contract_size) as usize) - p,
            );
            assert_eq!(
                344usize,
                (core::ptr::addr_of!(d.open_interest) as usize) - p,
                "open_interest offset expected {:} but was {:}",
                344usize,
                (core::ptr::addr_of!(d.open_interest) as usize) - p,
            );
            assert_eq!(
                348usize,
                (core::ptr::addr_of!(d.rollover_date) as usize) - p,
                "rollover_date offset expected {:} but was {:}",
                348usize,
                (core::ptr::addr_of!(d.rollover_date) as usize) - p,
            );
            assert_eq!(
                352usize,
                (core::ptr::addr_of!(d.is_delayed) as usize) - p,
                "is_delayed offset expected {:} but was {:}",
                352usize,
                (core::ptr::addr_of!(d.is_delayed) as usize) - p,
            );
            assert_eq!(
                360usize,
                (core::ptr::addr_of!(d.security_identifier) as usize) - p,
                "security_identifier offset expected {:} but was {:}",
                360usize,
                (core::ptr::addr_of!(d.security_identifier) as usize) - p,
            );
            assert_eq!(
                368usize,
                (core::ptr::addr_of!(d.product_identifier) as usize) - p,
                "product_identifier offset expected {:} but was {:}",
                368usize,
                (core::ptr::addr_of!(d.product_identifier) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                152usize,
                core::mem::size_of::<SecurityDefinitionResponseVLSData>(),
                "SecurityDefinitionResponseVLSData sizeof expected {:} but was {:}",
                152usize,
                core::mem::size_of::<SecurityDefinitionResponseVLSData>()
            );
            assert_eq!(
                152u16,
                SecurityDefinitionResponseVLS::new().size(),
                "SecurityDefinitionResponseVLS sizeof expected {:} but was {:}",
                152u16,
                SecurityDefinitionResponseVLS::new().size(),
            );
            assert_eq!(
                SECURITY_DEFINITION_RESPONSE,
                SecurityDefinitionResponseVLS::new().r#type(),
                "SecurityDefinitionResponseVLS type expected {:} but was {:}",
                SECURITY_DEFINITION_RESPONSE,
                SecurityDefinitionResponseVLS::new().r#type(),
            );
            assert_eq!(
                507u16,
                SecurityDefinitionResponseVLS::new().r#type(),
                "SecurityDefinitionResponseVLS type expected {:} but was {:}",
                507u16,
                SecurityDefinitionResponseVLS::new().r#type(),
            );
            let d = SecurityDefinitionResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.security_type) as usize) - p,
                "security_type offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.security_type) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.description) as usize) - p,
                "description offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.description) as usize) - p,
            );
            assert_eq!(
                28usize,
                (core::ptr::addr_of!(d.min_price_increment) as usize) - p,
                "min_price_increment offset expected {:} but was {:}",
                28usize,
                (core::ptr::addr_of!(d.min_price_increment) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.price_display_format) as usize) - p,
                "price_display_format offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.price_display_format) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.currency_value_per_increment) as usize) - p,
                "currency_value_per_increment offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.currency_value_per_increment) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
                "is_final_message offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
            );
            assert_eq!(
                44usize,
                (core::ptr::addr_of!(d.float_to_int_price_multiplier) as usize) - p,
                "float_to_int_price_multiplier offset expected {:} but was {:}",
                44usize,
                (core::ptr::addr_of!(d.float_to_int_price_multiplier) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.int_to_float_price_divisor) as usize) - p,
                "int_to_float_price_divisor offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.int_to_float_price_divisor) as usize) - p,
            );
            assert_eq!(
                52usize,
                (core::ptr::addr_of!(d.underlying_symbol) as usize) - p,
                "underlying_symbol offset expected {:} but was {:}",
                52usize,
                (core::ptr::addr_of!(d.underlying_symbol) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.updates_bid_ask_only) as usize) - p,
                "updates_bid_ask_only offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.updates_bid_ask_only) as usize) - p,
            );
            assert_eq!(
                60usize,
                (core::ptr::addr_of!(d.strike_price) as usize) - p,
                "strike_price offset expected {:} but was {:}",
                60usize,
                (core::ptr::addr_of!(d.strike_price) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.put_or_call) as usize) - p,
                "put_or_call offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.put_or_call) as usize) - p,
            );
            assert_eq!(
                68usize,
                (core::ptr::addr_of!(d.short_interest) as usize) - p,
                "short_interest offset expected {:} but was {:}",
                68usize,
                (core::ptr::addr_of!(d.short_interest) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.security_expiration_date) as usize) - p,
                "security_expiration_date offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.security_expiration_date) as usize) - p,
            );
            assert_eq!(
                76usize,
                (core::ptr::addr_of!(d.buy_rollover_interest) as usize) - p,
                "buy_rollover_interest offset expected {:} but was {:}",
                76usize,
                (core::ptr::addr_of!(d.buy_rollover_interest) as usize) - p,
            );
            assert_eq!(
                80usize,
                (core::ptr::addr_of!(d.sell_rollover_interest) as usize) - p,
                "sell_rollover_interest offset expected {:} but was {:}",
                80usize,
                (core::ptr::addr_of!(d.sell_rollover_interest) as usize) - p,
            );
            assert_eq!(
                84usize,
                (core::ptr::addr_of!(d.earnings_per_share) as usize) - p,
                "earnings_per_share offset expected {:} but was {:}",
                84usize,
                (core::ptr::addr_of!(d.earnings_per_share) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.shares_outstanding) as usize) - p,
                "shares_outstanding offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.shares_outstanding) as usize) - p,
            );
            assert_eq!(
                92usize,
                (core::ptr::addr_of!(d.int_to_float_quantity_divisor) as usize) - p,
                "int_to_float_quantity_divisor offset expected {:} but was {:}",
                92usize,
                (core::ptr::addr_of!(d.int_to_float_quantity_divisor) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.has_market_depth_data) as usize) - p,
                "has_market_depth_data offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.has_market_depth_data) as usize) - p,
            );
            assert_eq!(
                100usize,
                (core::ptr::addr_of!(d.display_price_multiplier) as usize) - p,
                "display_price_multiplier offset expected {:} but was {:}",
                100usize,
                (core::ptr::addr_of!(d.display_price_multiplier) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.exchange_symbol) as usize) - p,
                "exchange_symbol offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.exchange_symbol) as usize) - p,
            );
            assert_eq!(
                108usize,
                (core::ptr::addr_of!(d.initial_margin_requirement) as usize) - p,
                "initial_margin_requirement offset expected {:} but was {:}",
                108usize,
                (core::ptr::addr_of!(d.initial_margin_requirement) as usize) - p,
            );
            assert_eq!(
                112usize,
                (core::ptr::addr_of!(d.maintenance_margin_requirement) as usize) - p,
                "maintenance_margin_requirement offset expected {:} but was {:}",
                112usize,
                (core::ptr::addr_of!(d.maintenance_margin_requirement) as usize) - p,
            );
            assert_eq!(
                116usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
                "currency offset expected {:} but was {:}",
                116usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
            );
            assert_eq!(
                120usize,
                (core::ptr::addr_of!(d.contract_size) as usize) - p,
                "contract_size offset expected {:} but was {:}",
                120usize,
                (core::ptr::addr_of!(d.contract_size) as usize) - p,
            );
            assert_eq!(
                124usize,
                (core::ptr::addr_of!(d.open_interest) as usize) - p,
                "open_interest offset expected {:} but was {:}",
                124usize,
                (core::ptr::addr_of!(d.open_interest) as usize) - p,
            );
            assert_eq!(
                128usize,
                (core::ptr::addr_of!(d.rollover_date) as usize) - p,
                "rollover_date offset expected {:} but was {:}",
                128usize,
                (core::ptr::addr_of!(d.rollover_date) as usize) - p,
            );
            assert_eq!(
                132usize,
                (core::ptr::addr_of!(d.is_delayed) as usize) - p,
                "is_delayed offset expected {:} but was {:}",
                132usize,
                (core::ptr::addr_of!(d.is_delayed) as usize) - p,
            );
            assert_eq!(
                136usize,
                (core::ptr::addr_of!(d.security_identifier) as usize) - p,
                "security_identifier offset expected {:} but was {:}",
                136usize,
                (core::ptr::addr_of!(d.security_identifier) as usize) - p,
            );
            assert_eq!(
                144usize,
                (core::ptr::addr_of!(d.product_identifier) as usize) - p,
                "product_identifier offset expected {:} but was {:}",
                144usize,
                (core::ptr::addr_of!(d.product_identifier) as usize) - p,
            );
        }
    }
}
