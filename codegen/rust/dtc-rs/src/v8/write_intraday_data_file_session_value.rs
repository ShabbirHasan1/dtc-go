// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const WRITE_INTRADAY_DATA_FILE_SESSION_VALUE_FIXED_SIZE: usize = 44;

/// size        u16                                        = WriteIntradayDataFileSessionValueFixedSize  (44)
/// type        u16                                        = WRITE_INTRADAY_DATA_FILE_SESSION_VALUE  (10140)
/// symbol_id   u32                                        = 0
/// value_type  WriteIntradayDataFileSessionValueTypeEnum  = INTRADAY_DATA_FILE_SESSION_VALUE_UNSET  (0)
/// date_time   DateTimeWithMicrosecondsInt                = 0
/// date        DateTime                                   = 0
/// price       f64                                        = 0
/// volume      f64                                        = 0
pub(crate) const WRITE_INTRADAY_DATA_FILE_SESSION_VALUE_FIXED_DEFAULT: [u8; 44] = [
    44, 0, 156, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait WriteIntradayDataFileSessionValue: Message {
    type Safe: WriteIntradayDataFileSessionValue;
    type Unsafe: WriteIntradayDataFileSessionValue;

    fn symbol_id(&self) -> u32;

    fn value_type(&self) -> WriteIntradayDataFileSessionValueTypeEnum;

    fn date_time(&self) -> DateTimeWithMicrosecondsInt;

    fn date(&self) -> DateTime;

    fn price(&self) -> f64;

    fn volume(&self) -> f64;

    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    fn set_value_type(&mut self, value: WriteIntradayDataFileSessionValueTypeEnum) -> &mut Self;

    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self;

    fn set_date(&mut self, value: DateTime) -> &mut Self;

    fn set_price(&mut self, value: f64) -> &mut Self;

    fn set_volume(&mut self, value: f64) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl WriteIntradayDataFileSessionValue) {
        to.set_symbol_id(self.symbol_id());
        to.set_value_type(self.value_type());
        to.set_date_time(self.date_time());
        to.set_date(self.date());
        to.set_price(self.price());
        to.set_volume(self.volume());
    }
}

pub struct WriteIntradayDataFileSessionValueFixed {
    data: *const WriteIntradayDataFileSessionValueFixedData,
}

pub struct WriteIntradayDataFileSessionValueFixedUnsafe {
    data: *const WriteIntradayDataFileSessionValueFixedData,
}

#[repr(packed(1), C)]
pub struct WriteIntradayDataFileSessionValueFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    value_type: WriteIntradayDataFileSessionValueTypeEnum,
    date_time: DateTimeWithMicrosecondsInt,
    date: DateTime,
    price: f64,
    volume: f64,
}

impl WriteIntradayDataFileSessionValueFixedData {
    pub fn new() -> Self {
        Self {
            size: 44u16.to_le(),
            r#type: WRITE_INTRADAY_DATA_FILE_SESSION_VALUE.to_le(),
            symbol_id: 0u32.to_le(),
            value_type:
                WriteIntradayDataFileSessionValueTypeEnum::IntradayDataFileSessionValueUnset.to_le(),
            date_time: 0i64.to_le(),
            date: 0i64.to_le(),
            price: 0.0,
            volume: 0.0,
        }
    }
}

unsafe impl Send for WriteIntradayDataFileSessionValueFixed {}
unsafe impl Send for WriteIntradayDataFileSessionValueFixedUnsafe {}
unsafe impl Send for WriteIntradayDataFileSessionValueFixedData {}

impl Drop for WriteIntradayDataFileSessionValueFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for WriteIntradayDataFileSessionValueFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for WriteIntradayDataFileSessionValueFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for WriteIntradayDataFileSessionValueFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for WriteIntradayDataFileSessionValueFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for WriteIntradayDataFileSessionValueFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for WriteIntradayDataFileSessionValueFixed {
    type Target = WriteIntradayDataFileSessionValueFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for WriteIntradayDataFileSessionValueFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for WriteIntradayDataFileSessionValueFixedUnsafe {
    type Target = WriteIntradayDataFileSessionValueFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for WriteIntradayDataFileSessionValueFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for WriteIntradayDataFileSessionValueFixed {
    type Data = WriteIntradayDataFileSessionValueFixedData;

    const BASE_SIZE: usize = 44;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                WriteIntradayDataFileSessionValueFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const WriteIntradayDataFileSessionValueFixedData,
        }
    }
}
impl crate::Message for WriteIntradayDataFileSessionValueFixedUnsafe {
    type Data = WriteIntradayDataFileSessionValueFixedData;

    const BASE_SIZE: usize = 44;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                WriteIntradayDataFileSessionValueFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const WriteIntradayDataFileSessionValueFixedData,
        }
    }
}
impl WriteIntradayDataFileSessionValue for WriteIntradayDataFileSessionValueFixed {
    type Safe = WriteIntradayDataFileSessionValueFixed;
    type Unsafe = WriteIntradayDataFileSessionValueFixedUnsafe;

    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    fn value_type(&self) -> WriteIntradayDataFileSessionValueTypeEnum {
        WriteIntradayDataFileSessionValueTypeEnum::from_le(self.value_type)
    }

    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.date_time)
    }

    fn date(&self) -> DateTime {
        i64::from_le(self.date)
    }

    fn price(&self) -> f64 {
        f64_le(self.price)
    }

    fn volume(&self) -> f64 {
        f64_le(self.volume)
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    fn set_value_type(&mut self, value: WriteIntradayDataFileSessionValueTypeEnum) -> &mut Self {
        self.value_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.date_time = value.to_le();
        self
    }

    fn set_date(&mut self, value: DateTime) -> &mut Self {
        self.date = value.to_le();
        self
    }

    fn set_price(&mut self, value: f64) -> &mut Self {
        self.price = f64_le(value);
        self
    }

    fn set_volume(&mut self, value: f64) -> &mut Self {
        self.volume = f64_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl WriteIntradayDataFileSessionValue for WriteIntradayDataFileSessionValueFixedUnsafe {
    type Safe = WriteIntradayDataFileSessionValueFixed;
    type Unsafe = WriteIntradayDataFileSessionValueFixedUnsafe;

    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32.to_le()
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    fn value_type(&self) -> WriteIntradayDataFileSessionValueTypeEnum {
        if self.is_out_of_bounds(12) {
            WriteIntradayDataFileSessionValueTypeEnum::IntradayDataFileSessionValueUnset.to_le()
        } else {
            WriteIntradayDataFileSessionValueTypeEnum::from_le(self.value_type)
        }
    }

    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(20) {
            0i64.to_le()
        } else {
            i64::from_le(self.date_time)
        }
    }

    fn date(&self) -> DateTime {
        if self.is_out_of_bounds(28) {
            0i64.to_le()
        } else {
            i64::from_le(self.date)
        }
    }

    fn price(&self) -> f64 {
        if self.is_out_of_bounds(36) {
            0.0
        } else {
            f64_le(self.price)
        }
    }

    fn volume(&self) -> f64 {
        if self.is_out_of_bounds(44) {
            0.0
        } else {
            f64_le(self.volume)
        }
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    fn set_value_type(&mut self, value: WriteIntradayDataFileSessionValueTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.value_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.date_time = value.to_le();
        }
        self
    }

    fn set_date(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.date = value.to_le();
        }
        self
    }

    fn set_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.price = f64_le(value);
        }
        self
    }

    fn set_volume(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(44) {
            self.volume = f64_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                44usize,
                core::mem::size_of::<WriteIntradayDataFileSessionValueFixedData>(),
                "WriteIntradayDataFileSessionValueFixedData sizeof expected {:} but was {:}",
                44usize,
                core::mem::size_of::<WriteIntradayDataFileSessionValueFixedData>()
            );
            assert_eq!(
                44u16,
                WriteIntradayDataFileSessionValueFixed::new().size(),
                "WriteIntradayDataFileSessionValueFixed sizeof expected {:} but was {:}",
                44u16,
                WriteIntradayDataFileSessionValueFixed::new().size(),
            );
            assert_eq!(
                WRITE_INTRADAY_DATA_FILE_SESSION_VALUE,
                WriteIntradayDataFileSessionValueFixed::new().r#type(),
                "WriteIntradayDataFileSessionValueFixed type expected {:} but was {:}",
                WRITE_INTRADAY_DATA_FILE_SESSION_VALUE,
                WriteIntradayDataFileSessionValueFixed::new().r#type(),
            );
            assert_eq!(
                10140u16,
                WriteIntradayDataFileSessionValueFixed::new().r#type(),
                "WriteIntradayDataFileSessionValueFixed type expected {:} but was {:}",
                10140u16,
                WriteIntradayDataFileSessionValueFixed::new().r#type(),
            );
            let d = WriteIntradayDataFileSessionValueFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.value_type) as usize) - p,
                "value_type offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.value_type) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.date) as usize) - p,
                "date offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.date) as usize) - p,
            );
            assert_eq!(
                28usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                28usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
                "volume offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
            );
        }
    }
}
