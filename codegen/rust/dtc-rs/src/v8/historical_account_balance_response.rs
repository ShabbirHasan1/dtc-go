// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const HISTORICAL_ACCOUNT_BALANCE_RESPONSE_VLS_SIZE: usize = 56;

pub(crate) const HISTORICAL_ACCOUNT_BALANCE_RESPONSE_FIXED_SIZE: usize = 232;

/// size                 u16                       = HistoricalAccountBalanceResponseVLSSize  (56)
/// type                 u16                       = HISTORICAL_ACCOUNT_BALANCE_RESPONSE  (606)
/// base_size            u16                       = HistoricalAccountBalanceResponseVLSSize  (56)
/// request_id           i32                       = 0
/// date_time            DateTimeWithMilliseconds  = 0
/// cash_balance         f64                       = 0
/// account_currency     string                    = ""
/// trade_account        string                    = ""
/// is_final_response    bool                      = false
/// no_account_balances  u8                        = 0
/// info_text            string                    = ""
/// transaction_id       string                    = ""
pub(crate) const HISTORICAL_ACCOUNT_BALANCE_RESPONSE_VLS_DEFAULT: [u8; 56] = [
    56, 0, 94, 2, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                 u16                       = HistoricalAccountBalanceResponseFixedSize  (232)
/// type                 u16                       = HISTORICAL_ACCOUNT_BALANCE_RESPONSE  (606)
/// request_id           i32                       = 0
/// date_time            DateTimeWithMilliseconds  = 0
/// cash_balance         f64                       = 0
/// account_currency     string8                   = ""
/// trade_account        string32                  = ""
/// is_final_response    bool                      = false
/// no_account_balances  u8                        = 0
/// info_text            string96                  = ""
/// transaction_id       string64                  = ""
pub(crate) const HISTORICAL_ACCOUNT_BALANCE_RESPONSE_FIXED_DEFAULT: [u8; 232] = [
    232, 0, 94, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait HistoricalAccountBalanceResponse: Message {
    type Safe: HistoricalAccountBalanceResponse;
    type Unsafe: HistoricalAccountBalanceResponse;

    fn request_id(&self) -> i32;

    fn date_time(&self) -> DateTimeWithMilliseconds;

    fn cash_balance(&self) -> f64;

    fn account_currency(&self) -> &str;

    fn trade_account(&self) -> &str;

    fn is_final_response(&self) -> bool;

    fn no_account_balances(&self) -> u8;

    fn info_text(&self) -> &str;

    fn transaction_id(&self) -> &str;

    fn set_request_id(&mut self, value: i32) -> &mut Self;

    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    fn set_cash_balance(&mut self, value: f64) -> &mut Self;

    fn set_account_currency(&mut self, value: &str) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_is_final_response(&mut self, value: bool) -> &mut Self;

    fn set_no_account_balances(&mut self, value: u8) -> &mut Self;

    fn set_info_text(&mut self, value: &str) -> &mut Self;

    fn set_transaction_id(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalAccountBalanceResponse) {
        to.set_request_id(self.request_id());
        to.set_date_time(self.date_time());
        to.set_cash_balance(self.cash_balance());
        to.set_account_currency(self.account_currency());
        to.set_trade_account(self.trade_account());
        to.set_is_final_response(self.is_final_response());
        to.set_no_account_balances(self.no_account_balances());
        to.set_info_text(self.info_text());
        to.set_transaction_id(self.transaction_id());
    }
}

pub struct HistoricalAccountBalanceResponseVLS {
    data: *const HistoricalAccountBalanceResponseVLSData,
    capacity: usize,
}

pub struct HistoricalAccountBalanceResponseVLSUnsafe {
    data: *const HistoricalAccountBalanceResponseVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct HistoricalAccountBalanceResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    date_time: DateTimeWithMilliseconds,
    cash_balance: f64,
    account_currency: VLS,
    trade_account: VLS,
    is_final_response: bool,
    no_account_balances: u8,
    info_text: VLS,
    transaction_id: VLS,
}

pub struct HistoricalAccountBalanceResponseFixed {
    data: *const HistoricalAccountBalanceResponseFixedData,
}

pub struct HistoricalAccountBalanceResponseFixedUnsafe {
    data: *const HistoricalAccountBalanceResponseFixedData,
}

#[repr(packed(8), C)]
pub struct HistoricalAccountBalanceResponseFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    date_time: DateTimeWithMilliseconds,
    cash_balance: f64,
    account_currency: [u8; 8],
    trade_account: [u8; 32],
    is_final_response: bool,
    no_account_balances: u8,
    info_text: [u8; 96],
    transaction_id: [u8; 64],
}

impl HistoricalAccountBalanceResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 56u16.to_le(),
            r#type: HISTORICAL_ACCOUNT_BALANCE_RESPONSE.to_le(),
            base_size: 56u16.to_le(),
            request_id: 0i32,
            date_time: 0.0f64,
            cash_balance: 0.0f64,
            account_currency: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
            is_final_response: false,
            no_account_balances: 0u8,
            info_text: crate::message::VLS::new(),
            transaction_id: crate::message::VLS::new(),
        }
    }
}

impl HistoricalAccountBalanceResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 232u16.to_le(),
            r#type: HISTORICAL_ACCOUNT_BALANCE_RESPONSE.to_le(),
            request_id: 0i32,
            date_time: 0.0f64,
            cash_balance: 0.0f64,
            account_currency: [0; 8],
            trade_account: [0; 32],
            is_final_response: false,
            no_account_balances: 0u8,
            info_text: [0; 96],
            transaction_id: [0; 64],
        }
    }
}

unsafe impl Send for HistoricalAccountBalanceResponseFixed {}
unsafe impl Send for HistoricalAccountBalanceResponseFixedUnsafe {}
unsafe impl Send for HistoricalAccountBalanceResponseFixedData {}
unsafe impl Send for HistoricalAccountBalanceResponseVLS {}
unsafe impl Send for HistoricalAccountBalanceResponseVLSUnsafe {}
unsafe impl Send for HistoricalAccountBalanceResponseVLSData {}

impl Drop for HistoricalAccountBalanceResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalAccountBalanceResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalAccountBalanceResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalAccountBalanceResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalAccountBalanceResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalAccountBalanceResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalAccountBalanceResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalAccountBalanceResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalAccountBalanceResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalAccountBalanceResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalAccountBalanceResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalAccountBalanceResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalAccountBalanceResponseFixed {
    type Target = HistoricalAccountBalanceResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalAccountBalanceResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalAccountBalanceResponseFixedUnsafe {
    type Target = HistoricalAccountBalanceResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalAccountBalanceResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalAccountBalanceResponseVLS {
    type Target = HistoricalAccountBalanceResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalAccountBalanceResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalAccountBalanceResponseVLSUnsafe {
    type Target = HistoricalAccountBalanceResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalAccountBalanceResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalAccountBalanceResponseFixed {
    type Data = HistoricalAccountBalanceResponseFixedData;

    const BASE_SIZE: usize = 232;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalAccountBalanceResponseFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalAccountBalanceResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalAccountBalanceResponseFixedUnsafe {
    type Data = HistoricalAccountBalanceResponseFixedData;

    const BASE_SIZE: usize = 232;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalAccountBalanceResponseFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalAccountBalanceResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalAccountBalanceResponseVLS {
    type Data = HistoricalAccountBalanceResponseVLSData;

    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalAccountBalanceResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalAccountBalanceResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalAccountBalanceResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalAccountBalanceResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for HistoricalAccountBalanceResponseVLSUnsafe {
    type Data = HistoricalAccountBalanceResponseVLSData;

    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalAccountBalanceResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalAccountBalanceResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalAccountBalanceResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalAccountBalanceResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl HistoricalAccountBalanceResponse for HistoricalAccountBalanceResponseVLS {
    type Safe = HistoricalAccountBalanceResponseVLS;
    type Unsafe = HistoricalAccountBalanceResponseVLSUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.date_time)
    }

    fn cash_balance(&self) -> f64 {
        f64_le(self.cash_balance)
    }

    fn account_currency(&self) -> &str {
        get_vls(self, self.account_currency)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn is_final_response(&self) -> bool {
        self.is_final_response
    }

    fn no_account_balances(&self) -> u8 {
        self.no_account_balances
    }

    fn info_text(&self) -> &str {
        get_vls(self, self.info_text)
    }

    fn transaction_id(&self) -> &str {
        get_vls(self, self.transaction_id)
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.date_time = f64_le(value);
        self
    }

    fn set_cash_balance(&mut self, value: f64) -> &mut Self {
        self.cash_balance = f64_le(value);
        self
    }

    fn set_account_currency(&mut self, value: &str) -> &mut Self {
        self.account_currency = set_vls(self, self.account_currency, value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_is_final_response(&mut self, value: bool) -> &mut Self {
        self.is_final_response = value;
        self
    }

    fn set_no_account_balances(&mut self, value: u8) -> &mut Self {
        self.no_account_balances = value;
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        self.info_text = set_vls(self, self.info_text, value);
        self
    }

    fn set_transaction_id(&mut self, value: &str) -> &mut Self {
        self.transaction_id = set_vls(self, self.transaction_id, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalAccountBalanceResponse for HistoricalAccountBalanceResponseVLSUnsafe {
    type Safe = HistoricalAccountBalanceResponseVLS;
    type Unsafe = HistoricalAccountBalanceResponseVLSUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(24) {
            0.0f64
        } else {
            f64_le(self.date_time)
        }
    }

    fn cash_balance(&self) -> f64 {
        if self.is_out_of_bounds(32) {
            0.0f64
        } else {
            f64_le(self.cash_balance)
        }
    }

    fn account_currency(&self) -> &str {
        if self.is_out_of_bounds(36) {
            ""
        } else {
            get_vls(self, self.account_currency)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(40) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn is_final_response(&self) -> bool {
        if self.is_out_of_bounds(41) {
            false
        } else {
            self.is_final_response
        }
    }

    fn no_account_balances(&self) -> u8 {
        if self.is_out_of_bounds(42) {
            0u8
        } else {
            self.no_account_balances
        }
    }

    fn info_text(&self) -> &str {
        if self.is_out_of_bounds(46) {
            ""
        } else {
            get_vls(self, self.info_text)
        }
    }

    fn transaction_id(&self) -> &str {
        if self.is_out_of_bounds(50) {
            ""
        } else {
            get_vls(self, self.transaction_id)
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.date_time = f64_le(value);
        }
        self
    }

    fn set_cash_balance(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.cash_balance = f64_le(value);
        }
        self
    }

    fn set_account_currency(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.account_currency = set_vls(self, self.account_currency, value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_is_final_response(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(41) {
            self.is_final_response = value;
        }
        self
    }

    fn set_no_account_balances(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(42) {
            self.no_account_balances = value;
        }
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(46) {
            self.info_text = set_vls(self, self.info_text, value);
        }
        self
    }

    fn set_transaction_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(50) {
            self.transaction_id = set_vls(self, self.transaction_id, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl HistoricalAccountBalanceResponse for HistoricalAccountBalanceResponseFixed {
    type Safe = HistoricalAccountBalanceResponseFixed;
    type Unsafe = HistoricalAccountBalanceResponseFixedUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.date_time)
    }

    fn cash_balance(&self) -> f64 {
        f64_le(self.cash_balance)
    }

    fn account_currency(&self) -> &str {
        get_fixed(&self.account_currency[..])
    }

    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    fn is_final_response(&self) -> bool {
        self.is_final_response
    }

    fn no_account_balances(&self) -> u8 {
        self.no_account_balances
    }

    fn info_text(&self) -> &str {
        get_fixed(&self.info_text[..])
    }

    fn transaction_id(&self) -> &str {
        get_fixed(&self.transaction_id[..])
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.date_time = f64_le(value);
        self
    }

    fn set_cash_balance(&mut self, value: f64) -> &mut Self {
        self.cash_balance = f64_le(value);
        self
    }

    fn set_account_currency(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.account_currency[..], value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    fn set_is_final_response(&mut self, value: bool) -> &mut Self {
        self.is_final_response = value;
        self
    }

    fn set_no_account_balances(&mut self, value: u8) -> &mut Self {
        self.no_account_balances = value;
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.info_text[..], value);
        self
    }

    fn set_transaction_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.transaction_id[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalAccountBalanceResponse for HistoricalAccountBalanceResponseFixedUnsafe {
    type Safe = HistoricalAccountBalanceResponseFixed;
    type Unsafe = HistoricalAccountBalanceResponseFixedUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(16) {
            0.0f64
        } else {
            f64_le(self.date_time)
        }
    }

    fn cash_balance(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            0.0f64
        } else {
            f64_le(self.cash_balance)
        }
    }

    fn account_currency(&self) -> &str {
        if self.is_out_of_bounds(32) {
            ""
        } else {
            get_fixed(&self.account_currency[..])
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(64) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    fn is_final_response(&self) -> bool {
        if self.is_out_of_bounds(65) {
            false
        } else {
            self.is_final_response
        }
    }

    fn no_account_balances(&self) -> u8 {
        if self.is_out_of_bounds(66) {
            0u8
        } else {
            self.no_account_balances
        }
    }

    fn info_text(&self) -> &str {
        if self.is_out_of_bounds(162) {
            ""
        } else {
            get_fixed(&self.info_text[..])
        }
    }

    fn transaction_id(&self) -> &str {
        if self.is_out_of_bounds(226) {
            ""
        } else {
            get_fixed(&self.transaction_id[..])
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.date_time = f64_le(value);
        }
        self
    }

    fn set_cash_balance(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.cash_balance = f64_le(value);
        }
        self
    }

    fn set_account_currency(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            set_fixed(&mut self.account_currency[..], value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    fn set_is_final_response(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(65) {
            self.is_final_response = value;
        }
        self
    }

    fn set_no_account_balances(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(66) {
            self.no_account_balances = value;
        }
        self
    }

    fn set_info_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(162) {
            set_fixed(&mut self.info_text[..], value);
        }
        self
    }

    fn set_transaction_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(226) {
            set_fixed(&mut self.transaction_id[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                232usize,
                core::mem::size_of::<HistoricalAccountBalanceResponseFixedData>(),
                "HistoricalAccountBalanceResponseFixedData sizeof expected {:} but was {:}",
                232usize,
                core::mem::size_of::<HistoricalAccountBalanceResponseFixedData>()
            );
            assert_eq!(
                232u16,
                HistoricalAccountBalanceResponseFixed::new().size(),
                "HistoricalAccountBalanceResponseFixed sizeof expected {:} but was {:}",
                232u16,
                HistoricalAccountBalanceResponseFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_ACCOUNT_BALANCE_RESPONSE,
                HistoricalAccountBalanceResponseFixed::new().r#type(),
                "HistoricalAccountBalanceResponseFixed type expected {:} but was {:}",
                HISTORICAL_ACCOUNT_BALANCE_RESPONSE,
                HistoricalAccountBalanceResponseFixed::new().r#type(),
            );
            assert_eq!(
                606u16,
                HistoricalAccountBalanceResponseFixed::new().r#type(),
                "HistoricalAccountBalanceResponseFixed type expected {:} but was {:}",
                606u16,
                HistoricalAccountBalanceResponseFixed::new().r#type(),
            );
            let d = HistoricalAccountBalanceResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.cash_balance) as usize) - p,
                "cash_balance offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.cash_balance) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.account_currency) as usize) - p,
                "account_currency offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.account_currency) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.is_final_response) as usize) - p,
                "is_final_response offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.is_final_response) as usize) - p,
            );
            assert_eq!(
                65usize,
                (core::ptr::addr_of!(d.no_account_balances) as usize) - p,
                "no_account_balances offset expected {:} but was {:}",
                65usize,
                (core::ptr::addr_of!(d.no_account_balances) as usize) - p,
            );
            assert_eq!(
                66usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
                "info_text offset expected {:} but was {:}",
                66usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
            );
            assert_eq!(
                162usize,
                (core::ptr::addr_of!(d.transaction_id) as usize) - p,
                "transaction_id offset expected {:} but was {:}",
                162usize,
                (core::ptr::addr_of!(d.transaction_id) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                56usize,
                core::mem::size_of::<HistoricalAccountBalanceResponseVLSData>(),
                "HistoricalAccountBalanceResponseVLSData sizeof expected {:} but was {:}",
                56usize,
                core::mem::size_of::<HistoricalAccountBalanceResponseVLSData>()
            );
            assert_eq!(
                56u16,
                HistoricalAccountBalanceResponseVLS::new().size(),
                "HistoricalAccountBalanceResponseVLS sizeof expected {:} but was {:}",
                56u16,
                HistoricalAccountBalanceResponseVLS::new().size(),
            );
            assert_eq!(
                HISTORICAL_ACCOUNT_BALANCE_RESPONSE,
                HistoricalAccountBalanceResponseVLS::new().r#type(),
                "HistoricalAccountBalanceResponseVLS type expected {:} but was {:}",
                HISTORICAL_ACCOUNT_BALANCE_RESPONSE,
                HistoricalAccountBalanceResponseVLS::new().r#type(),
            );
            assert_eq!(
                606u16,
                HistoricalAccountBalanceResponseVLS::new().r#type(),
                "HistoricalAccountBalanceResponseVLS type expected {:} but was {:}",
                606u16,
                HistoricalAccountBalanceResponseVLS::new().r#type(),
            );
            let d = HistoricalAccountBalanceResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.cash_balance) as usize) - p,
                "cash_balance offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.cash_balance) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.account_currency) as usize) - p,
                "account_currency offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.account_currency) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.is_final_response) as usize) - p,
                "is_final_response offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.is_final_response) as usize) - p,
            );
            assert_eq!(
                41usize,
                (core::ptr::addr_of!(d.no_account_balances) as usize) - p,
                "no_account_balances offset expected {:} but was {:}",
                41usize,
                (core::ptr::addr_of!(d.no_account_balances) as usize) - p,
            );
            assert_eq!(
                42usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
                "info_text offset expected {:} but was {:}",
                42usize,
                (core::ptr::addr_of!(d.info_text) as usize) - p,
            );
            assert_eq!(
                46usize,
                (core::ptr::addr_of!(d.transaction_id) as usize) - p,
                "transaction_id offset expected {:} but was {:}",
                46usize,
                (core::ptr::addr_of!(d.transaction_id) as usize) - p,
            );
        }
    }
}
