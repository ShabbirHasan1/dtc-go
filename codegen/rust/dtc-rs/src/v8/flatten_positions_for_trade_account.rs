// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT_VLS_SIZE: usize = 19;

/// size                u16     = FlattenPositionsForTradeAccountVLSSize  (19)
/// type                u16     = FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT  (210)
/// base_size           u16     = FlattenPositionsForTradeAccountVLSSize  (19)
/// trade_account       string  = ""
/// client_order_id     string  = ""
/// free_form_text      string  = ""
/// is_automated_order  bool    = false
pub(crate) const FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT_VLS_DEFAULT: [u8; 19] =
    [19, 0, 210, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

pub trait FlattenPositionsForTradeAccount: Message {
    type Safe: FlattenPositionsForTradeAccount;
    type Unsafe: FlattenPositionsForTradeAccount;

    fn trade_account(&self) -> &str;

    fn client_order_id(&self) -> &str;

    fn free_form_text(&self) -> &str;

    fn is_automated_order(&self) -> bool;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_client_order_id(&mut self, value: &str) -> &mut Self;

    fn set_free_form_text(&mut self, value: &str) -> &mut Self;

    fn set_is_automated_order(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl FlattenPositionsForTradeAccount) {
        to.set_trade_account(self.trade_account());
        to.set_client_order_id(self.client_order_id());
        to.set_free_form_text(self.free_form_text());
        to.set_is_automated_order(self.is_automated_order());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct FlattenPositionsForTradeAccountVLS {
    data: *const FlattenPositionsForTradeAccountVLSData,
    capacity: usize,
}

pub struct FlattenPositionsForTradeAccountVLSUnsafe {
    data: *const FlattenPositionsForTradeAccountVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct FlattenPositionsForTradeAccountVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    trade_account: VLS,
    client_order_id: VLS,
    free_form_text: VLS,
    is_automated_order: bool,
}

impl FlattenPositionsForTradeAccountVLSData {
    pub fn new() -> Self {
        Self {
            size: 19u16.to_le(),
            r#type: FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT.to_le(),
            base_size: 19u16.to_le(),
            trade_account: crate::message::VLS::new(),
            client_order_id: crate::message::VLS::new(),
            free_form_text: crate::message::VLS::new(),
            is_automated_order: false,
        }
    }
}

unsafe impl Send for FlattenPositionsForTradeAccountVLS {}
unsafe impl Send for FlattenPositionsForTradeAccountVLSUnsafe {}
unsafe impl Send for FlattenPositionsForTradeAccountVLSData {}

impl Drop for FlattenPositionsForTradeAccountVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for FlattenPositionsForTradeAccountVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for FlattenPositionsForTradeAccountVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for FlattenPositionsForTradeAccountVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for FlattenPositionsForTradeAccountVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for FlattenPositionsForTradeAccountVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for FlattenPositionsForTradeAccountVLS {
    type Target = FlattenPositionsForTradeAccountVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for FlattenPositionsForTradeAccountVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for FlattenPositionsForTradeAccountVLSUnsafe {
    type Target = FlattenPositionsForTradeAccountVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for FlattenPositionsForTradeAccountVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for FlattenPositionsForTradeAccountVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("FlattenPositionsForTradeAccountVLS(size: {}, type: {}, base_size: {}, trade_account: \"{}\", client_order_id: \"{}\", free_form_text: \"{}\", is_automated_order: {})", self.size(), self.r#type(), self.base_size(), self.trade_account(), self.client_order_id(), self.free_form_text(), self.is_automated_order()).as_str())
    }
}

impl core::fmt::Debug for FlattenPositionsForTradeAccountVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("FlattenPositionsForTradeAccountVLS(size: {}, type: {}, base_size: {}, trade_account: \"{}\", client_order_id: \"{}\", free_form_text: \"{}\", is_automated_order: {})", self.size(), self.r#type(), self.base_size(), self.trade_account(), self.client_order_id(), self.free_form_text(), self.is_automated_order()).as_str())
    }
}

impl core::fmt::Display for FlattenPositionsForTradeAccountVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("FlattenPositionsForTradeAccountVLSUnsafe(size: {}, type: {}, base_size: {}, trade_account: \"{}\", client_order_id: \"{}\", free_form_text: \"{}\", is_automated_order: {})", self.size(), self.r#type(), self.base_size(), self.trade_account(), self.client_order_id(), self.free_form_text(), self.is_automated_order()).as_str())
    }
}

impl core::fmt::Debug for FlattenPositionsForTradeAccountVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("FlattenPositionsForTradeAccountVLSUnsafe(size: {}, type: {}, base_size: {}, trade_account: \"{}\", client_order_id: \"{}\", free_form_text: \"{}\", is_automated_order: {})", self.size(), self.r#type(), self.base_size(), self.trade_account(), self.client_order_id(), self.free_form_text(), self.is_automated_order()).as_str())
    }
}

impl crate::Message for FlattenPositionsForTradeAccountVLS {
    type Data = FlattenPositionsForTradeAccountVLSData;

    const TYPE: u16 = FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT;
    const BASE_SIZE: usize = 19;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                FlattenPositionsForTradeAccountVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const FlattenPositionsForTradeAccountVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for FlattenPositionsForTradeAccountVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const FlattenPositionsForTradeAccountVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for FlattenPositionsForTradeAccountVLSUnsafe {
    type Data = FlattenPositionsForTradeAccountVLSData;

    const TYPE: u16 = FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT;
    const BASE_SIZE: usize = 19;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                FlattenPositionsForTradeAccountVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const FlattenPositionsForTradeAccountVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for FlattenPositionsForTradeAccountVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const FlattenPositionsForTradeAccountVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl FlattenPositionsForTradeAccount for FlattenPositionsForTradeAccountVLS {
    type Safe = FlattenPositionsForTradeAccountVLS;
    type Unsafe = FlattenPositionsForTradeAccountVLSUnsafe;

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn client_order_id(&self) -> &str {
        get_vls(self, self.client_order_id)
    }

    fn free_form_text(&self) -> &str {
        get_vls(self, self.free_form_text)
    }

    fn is_automated_order(&self) -> bool {
        self.is_automated_order
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        self.client_order_id = set_vls(self, self.client_order_id, value);
        self
    }

    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        self.free_form_text = set_vls(self, self.free_form_text, value);
        self
    }

    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        self.is_automated_order = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl FlattenPositionsForTradeAccount for FlattenPositionsForTradeAccountVLSUnsafe {
    type Safe = FlattenPositionsForTradeAccountVLS;
    type Unsafe = FlattenPositionsForTradeAccountVLSUnsafe;

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.client_order_id)
        }
    }

    fn free_form_text(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.free_form_text)
        }
    }

    fn is_automated_order(&self) -> bool {
        if self.is_out_of_bounds(19) {
            false
        } else {
            self.is_automated_order
        }
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.client_order_id = set_vls(self, self.client_order_id, value);
        }
        self
    }

    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.free_form_text = set_vls(self, self.free_form_text, value);
        }
        self
    }

    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(19) {
            self.is_automated_order = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                19usize,
                core::mem::size_of::<FlattenPositionsForTradeAccountVLSData>(),
                "FlattenPositionsForTradeAccountVLSData sizeof expected {:} but was {:}",
                19usize,
                core::mem::size_of::<FlattenPositionsForTradeAccountVLSData>()
            );
            assert_eq!(
                19u16,
                FlattenPositionsForTradeAccountVLS::new().size(),
                "FlattenPositionsForTradeAccountVLS sizeof expected {:} but was {:}",
                19u16,
                FlattenPositionsForTradeAccountVLS::new().size(),
            );
            assert_eq!(
                FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT,
                FlattenPositionsForTradeAccountVLS::new().r#type(),
                "FlattenPositionsForTradeAccountVLS type expected {:} but was {:}",
                FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT,
                FlattenPositionsForTradeAccountVLS::new().r#type(),
            );
            assert_eq!(
                210u16,
                FlattenPositionsForTradeAccountVLS::new().r#type(),
                "FlattenPositionsForTradeAccountVLS type expected {:} but was {:}",
                210u16,
                FlattenPositionsForTradeAccountVLS::new().r#type(),
            );
            let d = FlattenPositionsForTradeAccountVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
                "free_form_text offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
                "is_automated_order offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
            );
        }
    }
}
