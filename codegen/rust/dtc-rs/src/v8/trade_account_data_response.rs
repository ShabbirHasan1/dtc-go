// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const TRADE_ACCOUNT_DATA_RESPONSE_VLS_SIZE: usize = 324;

/// size                                                                         u16     = TradeAccountDataResponseVLSSize  (324)
/// type                                                                         u16     = TRADE_ACCOUNT_DATA_RESPONSE  (10116)
/// base_size                                                                    u16     = TradeAccountDataResponseVLSSize  (324)
/// request_id                                                                   u32     = 0
/// trade_account_not_exist                                                      u8      = 0
/// trade_account                                                                string  = ""
/// is_simulated                                                                 bool    = false
/// currency_code                                                                string  = ""
/// current_cash_balance                                                         f64     = 0
/// available_funds_for_new_positions                                            f64     = 0
/// margin_requirement                                                           f64     = 0
/// account_value                                                                f64     = 0
/// open_positions_profit_loss                                                   f64     = 0
/// daily_profit_loss                                                            f64     = 0
/// transaction_identifier_for_cash_balance_adjustment                           u64     = 0
/// last_transaction_date_time                                                   i64     = 0
/// trailing_account_value_at_which_to_not_allow_new_positions                   f64     = 0
/// calculated_daily_net_loss_limit_in_account_currency                          f64     = 0
/// daily_net_loss_limit_has_been_reached                                        u8      = 0
/// last_reset_daily_net_loss_management_variables_date_time_utc                 i64     = 0
/// is_under_required_margin                                                     bool    = false
/// daily_net_loss_limit_in_account_currency                                     f32     = 0
/// percent_of_cash_balance_for_daily_net_loss_limit                             i32     = 0
/// use_trailing_account_value_to_not_allow_increase_in_positions                bool    = false
/// do_not_allow_increase_in_positions_at_daily_loss_limit                       u8      = false
/// flatten_positions_at_daily_loss_limit                                        u8      = false
/// close_positions_at_end_of_day                                                u8      = false
/// flatten_positions_when_under_margin_intraday                                 u8      = true
/// flatten_positions_when_under_margin_at_end_of_day                            u8      = false
/// sender_sub_id                                                                string  = ""
/// sender_location_id                                                           string  = ""
/// self_match_prevention_id                                                     string  = ""
/// cti_code                                                                     i32     = 0
/// trade_account_is_read_only                                                   bool    = false
/// maximum_global_position_quantity                                             i32     = 0
/// trade_fee_per_contract                                                       f64     = 0
/// trade_fee_per_share                                                          f64     = 0
/// require_sufficient_margin_for_new_positions                                  u8      = true
/// use_percent_of_margin                                                        i32     = 100
/// use_percent_of_margin_for_day_trading                                        i32     = 100
/// maximum_allowed_account_balance_for_positions_as_percentage                  i32     = 100
/// firm_id                                                                      string  = ""
/// trading_is_disabled                                                          bool    = false
/// descriptive_name                                                             string  = ""
/// is_master_firm_control_account                                               bool    = false
/// minimum_required_account_value                                               f64     = 0
/// begin_time_for_day_margin                                                    i64     = 0
/// end_time_for_day_margin                                                      i64     = 0
/// day_margin_time_zone                                                         string  = ""
/// is_snapshot                                                                  bool    = false
/// is_first_message_in_batch                                                    bool    = false
/// is_last_message_in_batch                                                     bool    = false
/// is_deleted                                                                   bool    = false
/// use_master_firm_flatten_positions_when_under_margin_intraday                 bool    = false
/// use_master_firm_flatten_positions_when_under_margin_at_end_of_day            bool    = false
/// use_master_firm_symbol_limits_array                                          bool    = false
/// use_master_firm_trade_fees                                                   bool    = false
/// use_master_firm_trade_fee_per_share                                          bool    = false
/// use_master_firm_require_sufficient_margin_for_new_positions                  bool    = false
/// use_master_firm_use_percent_of_margin                                        bool    = false
/// use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage  bool    = false
/// use_master_firm_minimum_required_account_value                               bool    = false
/// use_master_firm_margin_time_settings                                         bool    = false
/// use_master_firm_trading_is_disabled                                          bool    = false
/// is_trade_statistics_publically_shared                                        bool    = false
/// is_read_only_following_requests_allowed                                      bool    = false
/// is_trade_account_sharing_allowed                                             bool    = false
/// read_only_share_to_all_sc_usernames                                          u8      = 0
/// use_master_firm_symbol_commissions_array                                     bool    = false
/// use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit       bool    = false
/// use_master_firm_use_percent_of_margin_for_day_trading                        bool    = false
/// open_positions_profit_loss_based_on_settlement                               f64     = 0
/// margin_requirement_full                                                      f64     = 0
/// margin_requirement_full_positions_only                                       f64     = 0
/// use_master_firm_trade_fees_full_override                                     bool    = false
/// use_master_firm_num_days_before_last_trading_date_to_disallow_orders         bool    = false
/// use_master_firm_use_percent_of_margin_full_override                          bool    = false
/// use_master_firm_use_percent_of_margin_for_day_trading_full_override          bool    = false
/// peak_margin_requirement                                                      f64     = 0
/// liquidation_only_mode                                                        u8      = 0
/// flatten_positions_when_under_margin_intraday_triggered                       u8      = 0
/// flatten_positions_when_under_minimum_account_value_triggered                 u8      = 0
/// account_value_at_end_of_day_capture_time                                     f64     = 0
/// end_of_day_capture_time                                                      i64     = 0
/// customer_or_firm                                                             u8      = 0
/// master_firm_flatten_cancel_account_when_daily_loss_limit_met                 u8      = 0
/// master_firm_flatten_cancel_when_under_minimum_account_value                  u8      = 0
/// master_firm_flatten_cancel_when_under_margin_intraday                        u8      = 0
/// master_firm_flatten_cancel_when_under_margin_end_of_day                      u8      = 0
/// master_firm_maximum_order_quantity                                           u32     = 0
/// last_trigger_date_time_utc_for_daily_loss_limit                              i64     = 0
/// open_positions_profit_loss_is_delayed                                        bool    = false
/// exchange_trader_id                                                           string  = ""
/// profit_loss_for_open_position_date_time_utc                                  i64     = 0
/// use_fixed_cash_on_hand_balance                                               bool    = false
/// fixed_cash_on_hand_balance                                                   f32     = 0.000000
pub(crate) const TRADE_ACCOUNT_DATA_RESPONSE_VLS_DEFAULT: [u8; 324] = [
    68, 1, 132, 39, 68, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 100, 0, 0, 0, 100, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait TradeAccountDataResponse: Message {
    type Safe: TradeAccountDataResponse;
    type Unsafe: TradeAccountDataResponse;

    fn request_id(&self) -> u32;

    fn trade_account_not_exist(&self) -> u8;

    fn trade_account(&self) -> &str;

    fn is_simulated(&self) -> bool;

    fn currency_code(&self) -> &str;

    fn current_cash_balance(&self) -> f64;

    fn available_funds_for_new_positions(&self) -> f64;

    fn margin_requirement(&self) -> f64;

    fn account_value(&self) -> f64;

    fn open_positions_profit_loss(&self) -> f64;

    fn daily_profit_loss(&self) -> f64;

    fn transaction_identifier_for_cash_balance_adjustment(&self) -> u64;

    fn last_transaction_date_time(&self) -> i64;

    fn trailing_account_value_at_which_to_not_allow_new_positions(&self) -> f64;

    fn calculated_daily_net_loss_limit_in_account_currency(&self) -> f64;

    fn daily_net_loss_limit_has_been_reached(&self) -> u8;

    fn last_reset_daily_net_loss_management_variables_date_time_utc(&self) -> i64;

    fn is_under_required_margin(&self) -> bool;

    fn daily_net_loss_limit_in_account_currency(&self) -> f32;

    fn percent_of_cash_balance_for_daily_net_loss_limit(&self) -> i32;

    fn use_trailing_account_value_to_not_allow_increase_in_positions(&self) -> bool;

    fn do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> u8;

    fn flatten_positions_at_daily_loss_limit(&self) -> u8;

    fn close_positions_at_end_of_day(&self) -> u8;

    fn flatten_positions_when_under_margin_intraday(&self) -> u8;

    fn flatten_positions_when_under_margin_at_end_of_day(&self) -> u8;

    fn sender_sub_id(&self) -> &str;

    fn sender_location_id(&self) -> &str;

    fn self_match_prevention_id(&self) -> &str;

    fn cti_code(&self) -> i32;

    fn trade_account_is_read_only(&self) -> bool;

    fn maximum_global_position_quantity(&self) -> i32;

    fn trade_fee_per_contract(&self) -> f64;

    fn trade_fee_per_share(&self) -> f64;

    fn require_sufficient_margin_for_new_positions(&self) -> u8;

    fn use_percent_of_margin(&self) -> i32;

    fn use_percent_of_margin_for_day_trading(&self) -> i32;

    fn maximum_allowed_account_balance_for_positions_as_percentage(&self) -> i32;

    fn firm_id(&self) -> &str;

    fn trading_is_disabled(&self) -> bool;

    fn descriptive_name(&self) -> &str;

    fn is_master_firm_control_account(&self) -> bool;

    fn minimum_required_account_value(&self) -> f64;

    fn begin_time_for_day_margin(&self) -> i64;

    fn end_time_for_day_margin(&self) -> i64;

    fn day_margin_time_zone(&self) -> &str;

    fn is_snapshot(&self) -> bool;

    fn is_first_message_in_batch(&self) -> bool;

    fn is_last_message_in_batch(&self) -> bool;

    fn is_deleted(&self) -> bool;

    fn use_master_firm_flatten_positions_when_under_margin_intraday(&self) -> bool;

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day(&self) -> bool;

    fn use_master_firm_symbol_limits_array(&self) -> bool;

    fn use_master_firm_trade_fees(&self) -> bool;

    fn use_master_firm_trade_fee_per_share(&self) -> bool;

    fn use_master_firm_require_sufficient_margin_for_new_positions(&self) -> bool;

    fn use_master_firm_use_percent_of_margin(&self) -> bool;

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(&self) -> bool;

    fn use_master_firm_minimum_required_account_value(&self) -> bool;

    fn use_master_firm_margin_time_settings(&self) -> bool;

    fn use_master_firm_trading_is_disabled(&self) -> bool;

    fn is_trade_statistics_publically_shared(&self) -> bool;

    fn is_read_only_following_requests_allowed(&self) -> bool;

    fn is_trade_account_sharing_allowed(&self) -> bool;

    fn read_only_share_to_all_sc_usernames(&self) -> u8;

    fn use_master_firm_symbol_commissions_array(&self) -> bool;

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_for_day_trading(&self) -> bool;

    fn open_positions_profit_loss_based_on_settlement(&self) -> f64;

    fn margin_requirement_full(&self) -> f64;

    fn margin_requirement_full_positions_only(&self) -> f64;

    fn use_master_firm_trade_fees_full_override(&self) -> bool;

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_full_override(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override(&self) -> bool;

    fn peak_margin_requirement(&self) -> f64;

    fn liquidation_only_mode(&self) -> u8;

    fn flatten_positions_when_under_margin_intraday_triggered(&self) -> u8;

    fn flatten_positions_when_under_minimum_account_value_triggered(&self) -> u8;

    fn account_value_at_end_of_day_capture_time(&self) -> f64;

    fn end_of_day_capture_time(&self) -> i64;

    fn customer_or_firm(&self) -> u8;

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met(&self) -> u8;

    fn master_firm_flatten_cancel_when_under_minimum_account_value(&self) -> u8;

    fn master_firm_flatten_cancel_when_under_margin_intraday(&self) -> u8;

    fn master_firm_flatten_cancel_when_under_margin_end_of_day(&self) -> u8;

    fn master_firm_maximum_order_quantity(&self) -> u32;

    fn last_trigger_date_time_utc_for_daily_loss_limit(&self) -> i64;

    fn open_positions_profit_loss_is_delayed(&self) -> bool;

    fn exchange_trader_id(&self) -> &str;

    fn profit_loss_for_open_position_date_time_utc(&self) -> i64;

    fn use_fixed_cash_on_hand_balance(&self) -> bool;

    fn fixed_cash_on_hand_balance(&self) -> f32;

    fn set_request_id(&mut self, value: u32) -> &mut Self;

    fn set_trade_account_not_exist(&mut self, value: u8) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_is_simulated(&mut self, value: bool) -> &mut Self;

    fn set_currency_code(&mut self, value: &str) -> &mut Self;

    fn set_current_cash_balance(&mut self, value: f64) -> &mut Self;

    fn set_available_funds_for_new_positions(&mut self, value: f64) -> &mut Self;

    fn set_margin_requirement(&mut self, value: f64) -> &mut Self;

    fn set_account_value(&mut self, value: f64) -> &mut Self;

    fn set_open_positions_profit_loss(&mut self, value: f64) -> &mut Self;

    fn set_daily_profit_loss(&mut self, value: f64) -> &mut Self;

    fn set_transaction_identifier_for_cash_balance_adjustment(&mut self, value: u64) -> &mut Self;

    fn set_last_transaction_date_time(&mut self, value: i64) -> &mut Self;

    fn set_trailing_account_value_at_which_to_not_allow_new_positions(
        &mut self,
        value: f64,
    ) -> &mut Self;

    fn set_calculated_daily_net_loss_limit_in_account_currency(&mut self, value: f64) -> &mut Self;

    fn set_daily_net_loss_limit_has_been_reached(&mut self, value: u8) -> &mut Self;

    fn set_last_reset_daily_net_loss_management_variables_date_time_utc(
        &mut self,
        value: i64,
    ) -> &mut Self;

    fn set_is_under_required_margin(&mut self, value: bool) -> &mut Self;

    fn set_daily_net_loss_limit_in_account_currency(&mut self, value: f32) -> &mut Self;

    fn set_percent_of_cash_balance_for_daily_net_loss_limit(&mut self, value: i32) -> &mut Self;

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_flatten_positions_at_daily_loss_limit(&mut self, value: u8) -> &mut Self;

    fn set_close_positions_at_end_of_day(&mut self, value: u8) -> &mut Self;

    fn set_flatten_positions_when_under_margin_intraday(&mut self, value: u8) -> &mut Self;

    fn set_flatten_positions_when_under_margin_at_end_of_day(&mut self, value: u8) -> &mut Self;

    fn set_sender_sub_id(&mut self, value: &str) -> &mut Self;

    fn set_sender_location_id(&mut self, value: &str) -> &mut Self;

    fn set_self_match_prevention_id(&mut self, value: &str) -> &mut Self;

    fn set_cti_code(&mut self, value: i32) -> &mut Self;

    fn set_trade_account_is_read_only(&mut self, value: bool) -> &mut Self;

    fn set_maximum_global_position_quantity(&mut self, value: i32) -> &mut Self;

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self;

    fn set_trade_fee_per_share(&mut self, value: f64) -> &mut Self;

    fn set_require_sufficient_margin_for_new_positions(&mut self, value: u8) -> &mut Self;

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self;

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self;

    fn set_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: i32,
    ) -> &mut Self;

    fn set_firm_id(&mut self, value: &str) -> &mut Self;

    fn set_trading_is_disabled(&mut self, value: bool) -> &mut Self;

    fn set_descriptive_name(&mut self, value: &str) -> &mut Self;

    fn set_is_master_firm_control_account(&mut self, value: bool) -> &mut Self;

    fn set_minimum_required_account_value(&mut self, value: f64) -> &mut Self;

    fn set_begin_time_for_day_margin(&mut self, value: i64) -> &mut Self;

    fn set_end_time_for_day_margin(&mut self, value: i64) -> &mut Self;

    fn set_day_margin_time_zone(&mut self, value: &str) -> &mut Self;

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self;

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn set_is_deleted(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_symbol_limits_array(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trade_fees(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trade_fee_per_share(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_require_sufficient_margin_for_new_positions(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_minimum_required_account_value(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_margin_time_settings(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trading_is_disabled(&mut self, value: bool) -> &mut Self;

    fn set_is_trade_statistics_publically_shared(&mut self, value: bool) -> &mut Self;

    fn set_is_read_only_following_requests_allowed(&mut self, value: bool) -> &mut Self;

    fn set_is_trade_account_sharing_allowed(&mut self, value: bool) -> &mut Self;

    fn set_read_only_share_to_all_sc_usernames(&mut self, value: u8) -> &mut Self;

    fn set_use_master_firm_symbol_commissions_array(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_for_day_trading(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_open_positions_profit_loss_based_on_settlement(&mut self, value: f64) -> &mut Self;

    fn set_margin_requirement_full(&mut self, value: f64) -> &mut Self;

    fn set_margin_requirement_full_positions_only(&mut self, value: f64) -> &mut Self;

    fn set_use_master_firm_trade_fees_full_override(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_full_override(&mut self, value: bool)
        -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_peak_margin_requirement(&mut self, value: f64) -> &mut Self;

    fn set_liquidation_only_mode(&mut self, value: u8) -> &mut Self;

    fn set_flatten_positions_when_under_margin_intraday_triggered(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_flatten_positions_when_under_minimum_account_value_triggered(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_account_value_at_end_of_day_capture_time(&mut self, value: f64) -> &mut Self;

    fn set_end_of_day_capture_time(&mut self, value: i64) -> &mut Self;

    fn set_customer_or_firm(&mut self, value: u8) -> &mut Self;

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_margin_intraday(&mut self, value: u8)
        -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_master_firm_maximum_order_quantity(&mut self, value: u32) -> &mut Self;

    fn set_last_trigger_date_time_utc_for_daily_loss_limit(&mut self, value: i64) -> &mut Self;

    fn set_open_positions_profit_loss_is_delayed(&mut self, value: bool) -> &mut Self;

    fn set_exchange_trader_id(&mut self, value: &str) -> &mut Self;

    fn set_profit_loss_for_open_position_date_time_utc(&mut self, value: i64) -> &mut Self;

    fn set_use_fixed_cash_on_hand_balance(&mut self, value: bool) -> &mut Self;

    fn set_fixed_cash_on_hand_balance(&mut self, value: f32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl TradeAccountDataResponse) {
        to.set_request_id(self.request_id());
        to.set_trade_account_not_exist(self.trade_account_not_exist());
        to.set_trade_account(self.trade_account());
        to.set_is_simulated(self.is_simulated());
        to.set_currency_code(self.currency_code());
        to.set_current_cash_balance(self.current_cash_balance());
        to.set_available_funds_for_new_positions(self.available_funds_for_new_positions());
        to.set_margin_requirement(self.margin_requirement());
        to.set_account_value(self.account_value());
        to.set_open_positions_profit_loss(self.open_positions_profit_loss());
        to.set_daily_profit_loss(self.daily_profit_loss());
        to.set_transaction_identifier_for_cash_balance_adjustment(
            self.transaction_identifier_for_cash_balance_adjustment(),
        );
        to.set_last_transaction_date_time(self.last_transaction_date_time());
        to.set_trailing_account_value_at_which_to_not_allow_new_positions(
            self.trailing_account_value_at_which_to_not_allow_new_positions(),
        );
        to.set_calculated_daily_net_loss_limit_in_account_currency(
            self.calculated_daily_net_loss_limit_in_account_currency(),
        );
        to.set_daily_net_loss_limit_has_been_reached(self.daily_net_loss_limit_has_been_reached());
        to.set_last_reset_daily_net_loss_management_variables_date_time_utc(
            self.last_reset_daily_net_loss_management_variables_date_time_utc(),
        );
        to.set_is_under_required_margin(self.is_under_required_margin());
        to.set_daily_net_loss_limit_in_account_currency(
            self.daily_net_loss_limit_in_account_currency(),
        );
        to.set_percent_of_cash_balance_for_daily_net_loss_limit(
            self.percent_of_cash_balance_for_daily_net_loss_limit(),
        );
        to.set_use_trailing_account_value_to_not_allow_increase_in_positions(
            self.use_trailing_account_value_to_not_allow_increase_in_positions(),
        );
        to.set_do_not_allow_increase_in_positions_at_daily_loss_limit(
            self.do_not_allow_increase_in_positions_at_daily_loss_limit(),
        );
        to.set_flatten_positions_at_daily_loss_limit(self.flatten_positions_at_daily_loss_limit());
        to.set_close_positions_at_end_of_day(self.close_positions_at_end_of_day());
        to.set_flatten_positions_when_under_margin_intraday(
            self.flatten_positions_when_under_margin_intraday(),
        );
        to.set_flatten_positions_when_under_margin_at_end_of_day(
            self.flatten_positions_when_under_margin_at_end_of_day(),
        );
        to.set_sender_sub_id(self.sender_sub_id());
        to.set_sender_location_id(self.sender_location_id());
        to.set_self_match_prevention_id(self.self_match_prevention_id());
        to.set_cti_code(self.cti_code());
        to.set_trade_account_is_read_only(self.trade_account_is_read_only());
        to.set_maximum_global_position_quantity(self.maximum_global_position_quantity());
        to.set_trade_fee_per_contract(self.trade_fee_per_contract());
        to.set_trade_fee_per_share(self.trade_fee_per_share());
        to.set_require_sufficient_margin_for_new_positions(
            self.require_sufficient_margin_for_new_positions(),
        );
        to.set_use_percent_of_margin(self.use_percent_of_margin());
        to.set_use_percent_of_margin_for_day_trading(self.use_percent_of_margin_for_day_trading());
        to.set_maximum_allowed_account_balance_for_positions_as_percentage(
            self.maximum_allowed_account_balance_for_positions_as_percentage(),
        );
        to.set_firm_id(self.firm_id());
        to.set_trading_is_disabled(self.trading_is_disabled());
        to.set_descriptive_name(self.descriptive_name());
        to.set_is_master_firm_control_account(self.is_master_firm_control_account());
        to.set_minimum_required_account_value(self.minimum_required_account_value());
        to.set_begin_time_for_day_margin(self.begin_time_for_day_margin());
        to.set_end_time_for_day_margin(self.end_time_for_day_margin());
        to.set_day_margin_time_zone(self.day_margin_time_zone());
        to.set_is_snapshot(self.is_snapshot());
        to.set_is_first_message_in_batch(self.is_first_message_in_batch());
        to.set_is_last_message_in_batch(self.is_last_message_in_batch());
        to.set_is_deleted(self.is_deleted());
        to.set_use_master_firm_flatten_positions_when_under_margin_intraday(
            self.use_master_firm_flatten_positions_when_under_margin_intraday(),
        );
        to.set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day(),
        );
        to.set_use_master_firm_symbol_limits_array(self.use_master_firm_symbol_limits_array());
        to.set_use_master_firm_trade_fees(self.use_master_firm_trade_fees());
        to.set_use_master_firm_trade_fee_per_share(self.use_master_firm_trade_fee_per_share());
        to.set_use_master_firm_require_sufficient_margin_for_new_positions(
            self.use_master_firm_require_sufficient_margin_for_new_positions(),
        );
        to.set_use_master_firm_use_percent_of_margin(self.use_master_firm_use_percent_of_margin());
        to.set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(),
        );
        to.set_use_master_firm_minimum_required_account_value(
            self.use_master_firm_minimum_required_account_value(),
        );
        to.set_use_master_firm_margin_time_settings(self.use_master_firm_margin_time_settings());
        to.set_use_master_firm_trading_is_disabled(self.use_master_firm_trading_is_disabled());
        to.set_is_trade_statistics_publically_shared(self.is_trade_statistics_publically_shared());
        to.set_is_read_only_following_requests_allowed(
            self.is_read_only_following_requests_allowed(),
        );
        to.set_is_trade_account_sharing_allowed(self.is_trade_account_sharing_allowed());
        to.set_read_only_share_to_all_sc_usernames(self.read_only_share_to_all_sc_usernames());
        to.set_use_master_firm_symbol_commissions_array(
            self.use_master_firm_symbol_commissions_array(),
        );
        to.set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(),
        );
        to.set_use_master_firm_use_percent_of_margin_for_day_trading(
            self.use_master_firm_use_percent_of_margin_for_day_trading(),
        );
        to.set_open_positions_profit_loss_based_on_settlement(
            self.open_positions_profit_loss_based_on_settlement(),
        );
        to.set_margin_requirement_full(self.margin_requirement_full());
        to.set_margin_requirement_full_positions_only(
            self.margin_requirement_full_positions_only(),
        );
        to.set_use_master_firm_trade_fees_full_override(
            self.use_master_firm_trade_fees_full_override(),
        );
        to.set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders(),
        );
        to.set_use_master_firm_use_percent_of_margin_full_override(
            self.use_master_firm_use_percent_of_margin_full_override(),
        );
        to.set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override(),
        );
        to.set_peak_margin_requirement(self.peak_margin_requirement());
        to.set_liquidation_only_mode(self.liquidation_only_mode());
        to.set_flatten_positions_when_under_margin_intraday_triggered(
            self.flatten_positions_when_under_margin_intraday_triggered(),
        );
        to.set_flatten_positions_when_under_minimum_account_value_triggered(
            self.flatten_positions_when_under_minimum_account_value_triggered(),
        );
        to.set_account_value_at_end_of_day_capture_time(
            self.account_value_at_end_of_day_capture_time(),
        );
        to.set_end_of_day_capture_time(self.end_of_day_capture_time());
        to.set_customer_or_firm(self.customer_or_firm());
        to.set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met(),
        );
        to.set_master_firm_flatten_cancel_when_under_minimum_account_value(
            self.master_firm_flatten_cancel_when_under_minimum_account_value(),
        );
        to.set_master_firm_flatten_cancel_when_under_margin_intraday(
            self.master_firm_flatten_cancel_when_under_margin_intraday(),
        );
        to.set_master_firm_flatten_cancel_when_under_margin_end_of_day(
            self.master_firm_flatten_cancel_when_under_margin_end_of_day(),
        );
        to.set_master_firm_maximum_order_quantity(self.master_firm_maximum_order_quantity());
        to.set_last_trigger_date_time_utc_for_daily_loss_limit(
            self.last_trigger_date_time_utc_for_daily_loss_limit(),
        );
        to.set_open_positions_profit_loss_is_delayed(self.open_positions_profit_loss_is_delayed());
        to.set_exchange_trader_id(self.exchange_trader_id());
        to.set_profit_loss_for_open_position_date_time_utc(
            self.profit_loss_for_open_position_date_time_utc(),
        );
        to.set_use_fixed_cash_on_hand_balance(self.use_fixed_cash_on_hand_balance());
        to.set_fixed_cash_on_hand_balance(self.fixed_cash_on_hand_balance());
    }
}

pub struct TradeAccountDataResponseVLS {
    data: *const TradeAccountDataResponseVLSData,
    capacity: usize,
}

pub struct TradeAccountDataResponseVLSUnsafe {
    data: *const TradeAccountDataResponseVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct TradeAccountDataResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: u32,
    trade_account_not_exist: u8,
    trade_account: VLS,
    is_simulated: bool,
    currency_code: VLS,
    current_cash_balance: f64,
    available_funds_for_new_positions: f64,
    margin_requirement: f64,
    account_value: f64,
    open_positions_profit_loss: f64,
    daily_profit_loss: f64,
    transaction_identifier_for_cash_balance_adjustment: u64,
    last_transaction_date_time: i64,
    trailing_account_value_at_which_to_not_allow_new_positions: f64,
    calculated_daily_net_loss_limit_in_account_currency: f64,
    daily_net_loss_limit_has_been_reached: u8,
    last_reset_daily_net_loss_management_variables_date_time_utc: i64,
    is_under_required_margin: bool,
    daily_net_loss_limit_in_account_currency: f32,
    percent_of_cash_balance_for_daily_net_loss_limit: i32,
    use_trailing_account_value_to_not_allow_increase_in_positions: bool,
    do_not_allow_increase_in_positions_at_daily_loss_limit: u8,
    flatten_positions_at_daily_loss_limit: u8,
    close_positions_at_end_of_day: u8,
    flatten_positions_when_under_margin_intraday: u8,
    flatten_positions_when_under_margin_at_end_of_day: u8,
    sender_sub_id: VLS,
    sender_location_id: VLS,
    self_match_prevention_id: VLS,
    cti_code: i32,
    trade_account_is_read_only: bool,
    maximum_global_position_quantity: i32,
    trade_fee_per_contract: f64,
    trade_fee_per_share: f64,
    require_sufficient_margin_for_new_positions: u8,
    use_percent_of_margin: i32,
    use_percent_of_margin_for_day_trading: i32,
    maximum_allowed_account_balance_for_positions_as_percentage: i32,
    firm_id: VLS,
    trading_is_disabled: bool,
    descriptive_name: VLS,
    is_master_firm_control_account: bool,
    minimum_required_account_value: f64,
    begin_time_for_day_margin: i64,
    end_time_for_day_margin: i64,
    day_margin_time_zone: VLS,
    is_snapshot: bool,
    is_first_message_in_batch: bool,
    is_last_message_in_batch: bool,
    is_deleted: bool,
    use_master_firm_flatten_positions_when_under_margin_intraday: bool,
    use_master_firm_flatten_positions_when_under_margin_at_end_of_day: bool,
    use_master_firm_symbol_limits_array: bool,
    use_master_firm_trade_fees: bool,
    use_master_firm_trade_fee_per_share: bool,
    use_master_firm_require_sufficient_margin_for_new_positions: bool,
    use_master_firm_use_percent_of_margin: bool,
    use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage: bool,
    use_master_firm_minimum_required_account_value: bool,
    use_master_firm_margin_time_settings: bool,
    use_master_firm_trading_is_disabled: bool,
    is_trade_statistics_publically_shared: bool,
    is_read_only_following_requests_allowed: bool,
    is_trade_account_sharing_allowed: bool,
    read_only_share_to_all_sc_usernames: u8,
    use_master_firm_symbol_commissions_array: bool,
    use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit: bool,
    use_master_firm_use_percent_of_margin_for_day_trading: bool,
    open_positions_profit_loss_based_on_settlement: f64,
    margin_requirement_full: f64,
    margin_requirement_full_positions_only: f64,
    use_master_firm_trade_fees_full_override: bool,
    use_master_firm_num_days_before_last_trading_date_to_disallow_orders: bool,
    use_master_firm_use_percent_of_margin_full_override: bool,
    use_master_firm_use_percent_of_margin_for_day_trading_full_override: bool,
    peak_margin_requirement: f64,
    liquidation_only_mode: u8,
    flatten_positions_when_under_margin_intraday_triggered: u8,
    flatten_positions_when_under_minimum_account_value_triggered: u8,
    account_value_at_end_of_day_capture_time: f64,
    end_of_day_capture_time: i64,
    customer_or_firm: u8,
    master_firm_flatten_cancel_account_when_daily_loss_limit_met: u8,
    master_firm_flatten_cancel_when_under_minimum_account_value: u8,
    master_firm_flatten_cancel_when_under_margin_intraday: u8,
    master_firm_flatten_cancel_when_under_margin_end_of_day: u8,
    master_firm_maximum_order_quantity: u32,
    last_trigger_date_time_utc_for_daily_loss_limit: i64,
    open_positions_profit_loss_is_delayed: bool,
    exchange_trader_id: VLS,
    profit_loss_for_open_position_date_time_utc: i64,
    use_fixed_cash_on_hand_balance: bool,
    fixed_cash_on_hand_balance: f32,
}

impl TradeAccountDataResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 324u16.to_le(),
            r#type: TRADE_ACCOUNT_DATA_RESPONSE.to_le(),
            base_size: 324u16.to_le(),
            request_id: 0u32.to_le(),
            trade_account_not_exist: 0,
            trade_account: crate::message::VLS::new(),
            is_simulated: false,
            currency_code: crate::message::VLS::new(),
            current_cash_balance: 0.0,
            available_funds_for_new_positions: 0.0,
            margin_requirement: 0.0,
            account_value: 0.0,
            open_positions_profit_loss: 0.0,
            daily_profit_loss: 0.0,
            transaction_identifier_for_cash_balance_adjustment: 0u64.to_le(),
            last_transaction_date_time: 0i64.to_le(),
            trailing_account_value_at_which_to_not_allow_new_positions: 0.0,
            calculated_daily_net_loss_limit_in_account_currency: 0.0,
            daily_net_loss_limit_has_been_reached: 0,
            last_reset_daily_net_loss_management_variables_date_time_utc: 0i64.to_le(),
            is_under_required_margin: false,
            daily_net_loss_limit_in_account_currency: 0.0,
            percent_of_cash_balance_for_daily_net_loss_limit: 0i32.to_le(),
            use_trailing_account_value_to_not_allow_increase_in_positions: false,
            do_not_allow_increase_in_positions_at_daily_loss_limit: 0,
            flatten_positions_at_daily_loss_limit: 0,
            close_positions_at_end_of_day: 0,
            flatten_positions_when_under_margin_intraday: 1,
            flatten_positions_when_under_margin_at_end_of_day: 0,
            sender_sub_id: crate::message::VLS::new(),
            sender_location_id: crate::message::VLS::new(),
            self_match_prevention_id: crate::message::VLS::new(),
            cti_code: 0i32.to_le(),
            trade_account_is_read_only: false,
            maximum_global_position_quantity: 0i32.to_le(),
            trade_fee_per_contract: 0.0,
            trade_fee_per_share: 0.0,
            require_sufficient_margin_for_new_positions: 1,
            use_percent_of_margin: 100i32.to_le(),
            use_percent_of_margin_for_day_trading: 100i32.to_le(),
            maximum_allowed_account_balance_for_positions_as_percentage: 100i32.to_le(),
            firm_id: crate::message::VLS::new(),
            trading_is_disabled: false,
            descriptive_name: crate::message::VLS::new(),
            is_master_firm_control_account: false,
            minimum_required_account_value: 0.0,
            begin_time_for_day_margin: 0i64.to_le(),
            end_time_for_day_margin: 0i64.to_le(),
            day_margin_time_zone: crate::message::VLS::new(),
            is_snapshot: false,
            is_first_message_in_batch: false,
            is_last_message_in_batch: false,
            is_deleted: false,
            use_master_firm_flatten_positions_when_under_margin_intraday: false,
            use_master_firm_flatten_positions_when_under_margin_at_end_of_day: false,
            use_master_firm_symbol_limits_array: false,
            use_master_firm_trade_fees: false,
            use_master_firm_trade_fee_per_share: false,
            use_master_firm_require_sufficient_margin_for_new_positions: false,
            use_master_firm_use_percent_of_margin: false,
            use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage: false,
            use_master_firm_minimum_required_account_value: false,
            use_master_firm_margin_time_settings: false,
            use_master_firm_trading_is_disabled: false,
            is_trade_statistics_publically_shared: false,
            is_read_only_following_requests_allowed: false,
            is_trade_account_sharing_allowed: false,
            read_only_share_to_all_sc_usernames: 0,
            use_master_firm_symbol_commissions_array: false,
            use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit: false,
            use_master_firm_use_percent_of_margin_for_day_trading: false,
            open_positions_profit_loss_based_on_settlement: 0.0,
            margin_requirement_full: 0.0,
            margin_requirement_full_positions_only: 0.0,
            use_master_firm_trade_fees_full_override: false,
            use_master_firm_num_days_before_last_trading_date_to_disallow_orders: false,
            use_master_firm_use_percent_of_margin_full_override: false,
            use_master_firm_use_percent_of_margin_for_day_trading_full_override: false,
            peak_margin_requirement: 0.0,
            liquidation_only_mode: 0,
            flatten_positions_when_under_margin_intraday_triggered: 0,
            flatten_positions_when_under_minimum_account_value_triggered: 0,
            account_value_at_end_of_day_capture_time: 0.0,
            end_of_day_capture_time: 0i64.to_le(),
            customer_or_firm: 0,
            master_firm_flatten_cancel_account_when_daily_loss_limit_met: 0,
            master_firm_flatten_cancel_when_under_minimum_account_value: 0,
            master_firm_flatten_cancel_when_under_margin_intraday: 0,
            master_firm_flatten_cancel_when_under_margin_end_of_day: 0,
            master_firm_maximum_order_quantity: 0u32.to_le(),
            last_trigger_date_time_utc_for_daily_loss_limit: 0i64.to_le(),
            open_positions_profit_loss_is_delayed: false,
            exchange_trader_id: crate::message::VLS::new(),
            profit_loss_for_open_position_date_time_utc: 0i64.to_le(),
            use_fixed_cash_on_hand_balance: false,
            fixed_cash_on_hand_balance: 0.0,
        }
    }
}

unsafe impl Send for TradeAccountDataResponseVLS {}
unsafe impl Send for TradeAccountDataResponseVLSUnsafe {}
unsafe impl Send for TradeAccountDataResponseVLSData {}

impl Drop for TradeAccountDataResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for TradeAccountDataResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for TradeAccountDataResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for TradeAccountDataResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for TradeAccountDataResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for TradeAccountDataResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for TradeAccountDataResponseVLS {
    type Target = TradeAccountDataResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for TradeAccountDataResponseVLSUnsafe {
    type Target = TradeAccountDataResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for TradeAccountDataResponseVLS {
    type Data = TradeAccountDataResponseVLSData;

    const BASE_SIZE: usize = 324;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradeAccountDataResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for TradeAccountDataResponseVLSUnsafe {
    type Data = TradeAccountDataResponseVLSData;

    const BASE_SIZE: usize = 324;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradeAccountDataResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl TradeAccountDataResponse for TradeAccountDataResponseVLS {
    type Safe = TradeAccountDataResponseVLS;
    type Unsafe = TradeAccountDataResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn trade_account_not_exist(&self) -> u8 {
        self.trade_account_not_exist
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn is_simulated(&self) -> bool {
        self.is_simulated
    }

    fn currency_code(&self) -> &str {
        get_vls(self, self.currency_code)
    }

    fn current_cash_balance(&self) -> f64 {
        f64_le(self.current_cash_balance)
    }

    fn available_funds_for_new_positions(&self) -> f64 {
        f64_le(self.available_funds_for_new_positions)
    }

    fn margin_requirement(&self) -> f64 {
        f64_le(self.margin_requirement)
    }

    fn account_value(&self) -> f64 {
        f64_le(self.account_value)
    }

    fn open_positions_profit_loss(&self) -> f64 {
        f64_le(self.open_positions_profit_loss)
    }

    fn daily_profit_loss(&self) -> f64 {
        f64_le(self.daily_profit_loss)
    }

    fn transaction_identifier_for_cash_balance_adjustment(&self) -> u64 {
        u64::from_le(self.transaction_identifier_for_cash_balance_adjustment)
    }

    fn last_transaction_date_time(&self) -> i64 {
        i64::from_le(self.last_transaction_date_time)
    }

    fn trailing_account_value_at_which_to_not_allow_new_positions(&self) -> f64 {
        f64_le(self.trailing_account_value_at_which_to_not_allow_new_positions)
    }

    fn calculated_daily_net_loss_limit_in_account_currency(&self) -> f64 {
        f64_le(self.calculated_daily_net_loss_limit_in_account_currency)
    }

    fn daily_net_loss_limit_has_been_reached(&self) -> u8 {
        self.daily_net_loss_limit_has_been_reached
    }

    fn last_reset_daily_net_loss_management_variables_date_time_utc(&self) -> i64 {
        i64::from_le(self.last_reset_daily_net_loss_management_variables_date_time_utc)
    }

    fn is_under_required_margin(&self) -> bool {
        self.is_under_required_margin
    }

    fn daily_net_loss_limit_in_account_currency(&self) -> f32 {
        f32_le(self.daily_net_loss_limit_in_account_currency)
    }

    fn percent_of_cash_balance_for_daily_net_loss_limit(&self) -> i32 {
        i32::from_le(self.percent_of_cash_balance_for_daily_net_loss_limit)
    }

    fn use_trailing_account_value_to_not_allow_increase_in_positions(&self) -> bool {
        self.use_trailing_account_value_to_not_allow_increase_in_positions
    }

    fn do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> u8 {
        self.do_not_allow_increase_in_positions_at_daily_loss_limit
    }

    fn flatten_positions_at_daily_loss_limit(&self) -> u8 {
        self.flatten_positions_at_daily_loss_limit
    }

    fn close_positions_at_end_of_day(&self) -> u8 {
        self.close_positions_at_end_of_day
    }

    fn flatten_positions_when_under_margin_intraday(&self) -> u8 {
        self.flatten_positions_when_under_margin_intraday
    }

    fn flatten_positions_when_under_margin_at_end_of_day(&self) -> u8 {
        self.flatten_positions_when_under_margin_at_end_of_day
    }

    fn sender_sub_id(&self) -> &str {
        get_vls(self, self.sender_sub_id)
    }

    fn sender_location_id(&self) -> &str {
        get_vls(self, self.sender_location_id)
    }

    fn self_match_prevention_id(&self) -> &str {
        get_vls(self, self.self_match_prevention_id)
    }

    fn cti_code(&self) -> i32 {
        i32::from_le(self.cti_code)
    }

    fn trade_account_is_read_only(&self) -> bool {
        self.trade_account_is_read_only
    }

    fn maximum_global_position_quantity(&self) -> i32 {
        i32::from_le(self.maximum_global_position_quantity)
    }

    fn trade_fee_per_contract(&self) -> f64 {
        f64_le(self.trade_fee_per_contract)
    }

    fn trade_fee_per_share(&self) -> f64 {
        f64_le(self.trade_fee_per_share)
    }

    fn require_sufficient_margin_for_new_positions(&self) -> u8 {
        self.require_sufficient_margin_for_new_positions
    }

    fn use_percent_of_margin(&self) -> i32 {
        i32::from_le(self.use_percent_of_margin)
    }

    fn use_percent_of_margin_for_day_trading(&self) -> i32 {
        i32::from_le(self.use_percent_of_margin_for_day_trading)
    }

    fn maximum_allowed_account_balance_for_positions_as_percentage(&self) -> i32 {
        i32::from_le(self.maximum_allowed_account_balance_for_positions_as_percentage)
    }

    fn firm_id(&self) -> &str {
        get_vls(self, self.firm_id)
    }

    fn trading_is_disabled(&self) -> bool {
        self.trading_is_disabled
    }

    fn descriptive_name(&self) -> &str {
        get_vls(self, self.descriptive_name)
    }

    fn is_master_firm_control_account(&self) -> bool {
        self.is_master_firm_control_account
    }

    fn minimum_required_account_value(&self) -> f64 {
        f64_le(self.minimum_required_account_value)
    }

    fn begin_time_for_day_margin(&self) -> i64 {
        i64::from_le(self.begin_time_for_day_margin)
    }

    fn end_time_for_day_margin(&self) -> i64 {
        i64::from_le(self.end_time_for_day_margin)
    }

    fn day_margin_time_zone(&self) -> &str {
        get_vls(self, self.day_margin_time_zone)
    }

    fn is_snapshot(&self) -> bool {
        self.is_snapshot
    }

    fn is_first_message_in_batch(&self) -> bool {
        self.is_first_message_in_batch
    }

    fn is_last_message_in_batch(&self) -> bool {
        self.is_last_message_in_batch
    }

    fn is_deleted(&self) -> bool {
        self.is_deleted
    }

    fn use_master_firm_flatten_positions_when_under_margin_intraday(&self) -> bool {
        self.use_master_firm_flatten_positions_when_under_margin_intraday
    }

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day(&self) -> bool {
        self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day
    }

    fn use_master_firm_symbol_limits_array(&self) -> bool {
        self.use_master_firm_symbol_limits_array
    }

    fn use_master_firm_trade_fees(&self) -> bool {
        self.use_master_firm_trade_fees
    }

    fn use_master_firm_trade_fee_per_share(&self) -> bool {
        self.use_master_firm_trade_fee_per_share
    }

    fn use_master_firm_require_sufficient_margin_for_new_positions(&self) -> bool {
        self.use_master_firm_require_sufficient_margin_for_new_positions
    }

    fn use_master_firm_use_percent_of_margin(&self) -> bool {
        self.use_master_firm_use_percent_of_margin
    }

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(&self) -> bool {
        self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage
    }

    fn use_master_firm_minimum_required_account_value(&self) -> bool {
        self.use_master_firm_minimum_required_account_value
    }

    fn use_master_firm_margin_time_settings(&self) -> bool {
        self.use_master_firm_margin_time_settings
    }

    fn use_master_firm_trading_is_disabled(&self) -> bool {
        self.use_master_firm_trading_is_disabled
    }

    fn is_trade_statistics_publically_shared(&self) -> bool {
        self.is_trade_statistics_publically_shared
    }

    fn is_read_only_following_requests_allowed(&self) -> bool {
        self.is_read_only_following_requests_allowed
    }

    fn is_trade_account_sharing_allowed(&self) -> bool {
        self.is_trade_account_sharing_allowed
    }

    fn read_only_share_to_all_sc_usernames(&self) -> u8 {
        self.read_only_share_to_all_sc_usernames
    }

    fn use_master_firm_symbol_commissions_array(&self) -> bool {
        self.use_master_firm_symbol_commissions_array
    }

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> bool {
        self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_for_day_trading
    }

    fn open_positions_profit_loss_based_on_settlement(&self) -> f64 {
        f64_le(self.open_positions_profit_loss_based_on_settlement)
    }

    fn margin_requirement_full(&self) -> f64 {
        f64_le(self.margin_requirement_full)
    }

    fn margin_requirement_full_positions_only(&self) -> f64 {
        f64_le(self.margin_requirement_full_positions_only)
    }

    fn use_master_firm_trade_fees_full_override(&self) -> bool {
        self.use_master_firm_trade_fees_full_override
    }

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders(&self) -> bool {
        self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders
    }

    fn use_master_firm_use_percent_of_margin_full_override(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_full_override
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_for_day_trading_full_override
    }

    fn peak_margin_requirement(&self) -> f64 {
        f64_le(self.peak_margin_requirement)
    }

    fn liquidation_only_mode(&self) -> u8 {
        self.liquidation_only_mode
    }

    fn flatten_positions_when_under_margin_intraday_triggered(&self) -> u8 {
        self.flatten_positions_when_under_margin_intraday_triggered
    }

    fn flatten_positions_when_under_minimum_account_value_triggered(&self) -> u8 {
        self.flatten_positions_when_under_minimum_account_value_triggered
    }

    fn account_value_at_end_of_day_capture_time(&self) -> f64 {
        f64_le(self.account_value_at_end_of_day_capture_time)
    }

    fn end_of_day_capture_time(&self) -> i64 {
        i64::from_le(self.end_of_day_capture_time)
    }

    fn customer_or_firm(&self) -> u8 {
        self.customer_or_firm
    }

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met(&self) -> u8 {
        self.master_firm_flatten_cancel_account_when_daily_loss_limit_met
    }

    fn master_firm_flatten_cancel_when_under_minimum_account_value(&self) -> u8 {
        self.master_firm_flatten_cancel_when_under_minimum_account_value
    }

    fn master_firm_flatten_cancel_when_under_margin_intraday(&self) -> u8 {
        self.master_firm_flatten_cancel_when_under_margin_intraday
    }

    fn master_firm_flatten_cancel_when_under_margin_end_of_day(&self) -> u8 {
        self.master_firm_flatten_cancel_when_under_margin_end_of_day
    }

    fn master_firm_maximum_order_quantity(&self) -> u32 {
        u32::from_le(self.master_firm_maximum_order_quantity)
    }

    fn last_trigger_date_time_utc_for_daily_loss_limit(&self) -> i64 {
        i64::from_le(self.last_trigger_date_time_utc_for_daily_loss_limit)
    }

    fn open_positions_profit_loss_is_delayed(&self) -> bool {
        self.open_positions_profit_loss_is_delayed
    }

    fn exchange_trader_id(&self) -> &str {
        get_vls(self, self.exchange_trader_id)
    }

    fn profit_loss_for_open_position_date_time_utc(&self) -> i64 {
        i64::from_le(self.profit_loss_for_open_position_date_time_utc)
    }

    fn use_fixed_cash_on_hand_balance(&self) -> bool {
        self.use_fixed_cash_on_hand_balance
    }

    fn fixed_cash_on_hand_balance(&self) -> f32 {
        f32_le(self.fixed_cash_on_hand_balance)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_trade_account_not_exist(&mut self, value: u8) -> &mut Self {
        self.trade_account_not_exist = value;
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_is_simulated(&mut self, value: bool) -> &mut Self {
        self.is_simulated = value;
        self
    }

    fn set_currency_code(&mut self, value: &str) -> &mut Self {
        self.currency_code = set_vls(self, self.currency_code, value);
        self
    }

    fn set_current_cash_balance(&mut self, value: f64) -> &mut Self {
        self.current_cash_balance = f64_le(value);
        self
    }

    fn set_available_funds_for_new_positions(&mut self, value: f64) -> &mut Self {
        self.available_funds_for_new_positions = f64_le(value);
        self
    }

    fn set_margin_requirement(&mut self, value: f64) -> &mut Self {
        self.margin_requirement = f64_le(value);
        self
    }

    fn set_account_value(&mut self, value: f64) -> &mut Self {
        self.account_value = f64_le(value);
        self
    }

    fn set_open_positions_profit_loss(&mut self, value: f64) -> &mut Self {
        self.open_positions_profit_loss = f64_le(value);
        self
    }

    fn set_daily_profit_loss(&mut self, value: f64) -> &mut Self {
        self.daily_profit_loss = f64_le(value);
        self
    }

    fn set_transaction_identifier_for_cash_balance_adjustment(&mut self, value: u64) -> &mut Self {
        self.transaction_identifier_for_cash_balance_adjustment = value.to_le();
        self
    }

    fn set_last_transaction_date_time(&mut self, value: i64) -> &mut Self {
        self.last_transaction_date_time = value.to_le();
        self
    }

    fn set_trailing_account_value_at_which_to_not_allow_new_positions(
        &mut self,
        value: f64,
    ) -> &mut Self {
        self.trailing_account_value_at_which_to_not_allow_new_positions = f64_le(value);
        self
    }

    fn set_calculated_daily_net_loss_limit_in_account_currency(&mut self, value: f64) -> &mut Self {
        self.calculated_daily_net_loss_limit_in_account_currency = f64_le(value);
        self
    }

    fn set_daily_net_loss_limit_has_been_reached(&mut self, value: u8) -> &mut Self {
        self.daily_net_loss_limit_has_been_reached = value;
        self
    }

    fn set_last_reset_daily_net_loss_management_variables_date_time_utc(
        &mut self,
        value: i64,
    ) -> &mut Self {
        self.last_reset_daily_net_loss_management_variables_date_time_utc = value.to_le();
        self
    }

    fn set_is_under_required_margin(&mut self, value: bool) -> &mut Self {
        self.is_under_required_margin = value;
        self
    }

    fn set_daily_net_loss_limit_in_account_currency(&mut self, value: f32) -> &mut Self {
        self.daily_net_loss_limit_in_account_currency = f32_le(value);
        self
    }

    fn set_percent_of_cash_balance_for_daily_net_loss_limit(&mut self, value: i32) -> &mut Self {
        self.percent_of_cash_balance_for_daily_net_loss_limit = value.to_le();
        self
    }

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_trailing_account_value_to_not_allow_increase_in_positions = value;
        self
    }

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        self
    }

    fn set_flatten_positions_at_daily_loss_limit(&mut self, value: u8) -> &mut Self {
        self.flatten_positions_at_daily_loss_limit = value;
        self
    }

    fn set_close_positions_at_end_of_day(&mut self, value: u8) -> &mut Self {
        self.close_positions_at_end_of_day = value;
        self
    }

    fn set_flatten_positions_when_under_margin_intraday(&mut self, value: u8) -> &mut Self {
        self.flatten_positions_when_under_margin_intraday = value;
        self
    }

    fn set_flatten_positions_when_under_margin_at_end_of_day(&mut self, value: u8) -> &mut Self {
        self.flatten_positions_when_under_margin_at_end_of_day = value;
        self
    }

    fn set_sender_sub_id(&mut self, value: &str) -> &mut Self {
        self.sender_sub_id = set_vls(self, self.sender_sub_id, value);
        self
    }

    fn set_sender_location_id(&mut self, value: &str) -> &mut Self {
        self.sender_location_id = set_vls(self, self.sender_location_id, value);
        self
    }

    fn set_self_match_prevention_id(&mut self, value: &str) -> &mut Self {
        self.self_match_prevention_id = set_vls(self, self.self_match_prevention_id, value);
        self
    }

    fn set_cti_code(&mut self, value: i32) -> &mut Self {
        self.cti_code = value.to_le();
        self
    }

    fn set_trade_account_is_read_only(&mut self, value: bool) -> &mut Self {
        self.trade_account_is_read_only = value;
        self
    }

    fn set_maximum_global_position_quantity(&mut self, value: i32) -> &mut Self {
        self.maximum_global_position_quantity = value.to_le();
        self
    }

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self {
        self.trade_fee_per_contract = f64_le(value);
        self
    }

    fn set_trade_fee_per_share(&mut self, value: f64) -> &mut Self {
        self.trade_fee_per_share = f64_le(value);
        self
    }

    fn set_require_sufficient_margin_for_new_positions(&mut self, value: u8) -> &mut Self {
        self.require_sufficient_margin_for_new_positions = value;
        self
    }

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self {
        self.use_percent_of_margin = value.to_le();
        self
    }

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self {
        self.use_percent_of_margin_for_day_trading = value.to_le();
        self
    }

    fn set_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: i32,
    ) -> &mut Self {
        self.maximum_allowed_account_balance_for_positions_as_percentage = value.to_le();
        self
    }

    fn set_firm_id(&mut self, value: &str) -> &mut Self {
        self.firm_id = set_vls(self, self.firm_id, value);
        self
    }

    fn set_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        self.trading_is_disabled = value;
        self
    }

    fn set_descriptive_name(&mut self, value: &str) -> &mut Self {
        self.descriptive_name = set_vls(self, self.descriptive_name, value);
        self
    }

    fn set_is_master_firm_control_account(&mut self, value: bool) -> &mut Self {
        self.is_master_firm_control_account = value;
        self
    }

    fn set_minimum_required_account_value(&mut self, value: f64) -> &mut Self {
        self.minimum_required_account_value = f64_le(value);
        self
    }

    fn set_begin_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        self.begin_time_for_day_margin = value.to_le();
        self
    }

    fn set_end_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        self.end_time_for_day_margin = value.to_le();
        self
    }

    fn set_day_margin_time_zone(&mut self, value: &str) -> &mut Self {
        self.day_margin_time_zone = set_vls(self, self.day_margin_time_zone, value);
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        self.is_snapshot = value;
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_first_message_in_batch = value;
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_last_message_in_batch = value;
        self
    }

    fn set_is_deleted(&mut self, value: bool) -> &mut Self {
        self.is_deleted = value;
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_flatten_positions_when_under_margin_intraday = value;
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day = value;
        self
    }

    fn set_use_master_firm_symbol_limits_array(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_symbol_limits_array = value;
        self
    }

    fn set_use_master_firm_trade_fees(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fees = value;
        self
    }

    fn set_use_master_firm_trade_fee_per_share(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fee_per_share = value;
        self
    }

    fn set_use_master_firm_require_sufficient_margin_for_new_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_require_sufficient_margin_for_new_positions = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_use_percent_of_margin = value;
        self
    }

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage = value;
        self
    }

    fn set_use_master_firm_minimum_required_account_value(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_minimum_required_account_value = value;
        self
    }

    fn set_use_master_firm_margin_time_settings(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_margin_time_settings = value;
        self
    }

    fn set_use_master_firm_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trading_is_disabled = value;
        self
    }

    fn set_is_trade_statistics_publically_shared(&mut self, value: bool) -> &mut Self {
        self.is_trade_statistics_publically_shared = value;
        self
    }

    fn set_is_read_only_following_requests_allowed(&mut self, value: bool) -> &mut Self {
        self.is_read_only_following_requests_allowed = value;
        self
    }

    fn set_is_trade_account_sharing_allowed(&mut self, value: bool) -> &mut Self {
        self.is_trade_account_sharing_allowed = value;
        self
    }

    fn set_read_only_share_to_all_sc_usernames(&mut self, value: u8) -> &mut Self {
        self.read_only_share_to_all_sc_usernames = value;
        self
    }

    fn set_use_master_firm_symbol_commissions_array(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_symbol_commissions_array = value;
        self
    }

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_for_day_trading = value;
        self
    }

    fn set_open_positions_profit_loss_based_on_settlement(&mut self, value: f64) -> &mut Self {
        self.open_positions_profit_loss_based_on_settlement = f64_le(value);
        self
    }

    fn set_margin_requirement_full(&mut self, value: f64) -> &mut Self {
        self.margin_requirement_full = f64_le(value);
        self
    }

    fn set_margin_requirement_full_positions_only(&mut self, value: f64) -> &mut Self {
        self.margin_requirement_full_positions_only = f64_le(value);
        self
    }

    fn set_use_master_firm_trade_fees_full_override(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fees_full_override = value;
        self
    }

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_full_override = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_for_day_trading_full_override = value;
        self
    }

    fn set_peak_margin_requirement(&mut self, value: f64) -> &mut Self {
        self.peak_margin_requirement = f64_le(value);
        self
    }

    fn set_liquidation_only_mode(&mut self, value: u8) -> &mut Self {
        self.liquidation_only_mode = value;
        self
    }

    fn set_flatten_positions_when_under_margin_intraday_triggered(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.flatten_positions_when_under_margin_intraday_triggered = value;
        self
    }

    fn set_flatten_positions_when_under_minimum_account_value_triggered(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.flatten_positions_when_under_minimum_account_value_triggered = value;
        self
    }

    fn set_account_value_at_end_of_day_capture_time(&mut self, value: f64) -> &mut Self {
        self.account_value_at_end_of_day_capture_time = f64_le(value);
        self
    }

    fn set_end_of_day_capture_time(&mut self, value: i64) -> &mut Self {
        self.end_of_day_capture_time = value.to_le();
        self
    }

    fn set_customer_or_firm(&mut self, value: u8) -> &mut Self {
        self.customer_or_firm = value;
        self
    }

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_account_when_daily_loss_limit_met = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_minimum_account_value = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_intraday(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_margin_intraday = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_margin_end_of_day = value;
        self
    }

    fn set_master_firm_maximum_order_quantity(&mut self, value: u32) -> &mut Self {
        self.master_firm_maximum_order_quantity = value.to_le();
        self
    }

    fn set_last_trigger_date_time_utc_for_daily_loss_limit(&mut self, value: i64) -> &mut Self {
        self.last_trigger_date_time_utc_for_daily_loss_limit = value.to_le();
        self
    }

    fn set_open_positions_profit_loss_is_delayed(&mut self, value: bool) -> &mut Self {
        self.open_positions_profit_loss_is_delayed = value;
        self
    }

    fn set_exchange_trader_id(&mut self, value: &str) -> &mut Self {
        self.exchange_trader_id = set_vls(self, self.exchange_trader_id, value);
        self
    }

    fn set_profit_loss_for_open_position_date_time_utc(&mut self, value: i64) -> &mut Self {
        self.profit_loss_for_open_position_date_time_utc = value.to_le();
        self
    }

    fn set_use_fixed_cash_on_hand_balance(&mut self, value: bool) -> &mut Self {
        self.use_fixed_cash_on_hand_balance = value;
        self
    }

    fn set_fixed_cash_on_hand_balance(&mut self, value: f32) -> &mut Self {
        self.fixed_cash_on_hand_balance = f32_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl TradeAccountDataResponse for TradeAccountDataResponseVLSUnsafe {
    type Safe = TradeAccountDataResponseVLS;
    type Unsafe = TradeAccountDataResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn trade_account_not_exist(&self) -> u8 {
        if self.is_out_of_bounds(11) {
            0
        } else {
            self.trade_account_not_exist
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(15) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn is_simulated(&self) -> bool {
        if self.is_out_of_bounds(16) {
            false
        } else {
            self.is_simulated
        }
    }

    fn currency_code(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            get_vls(self, self.currency_code)
        }
    }

    fn current_cash_balance(&self) -> f64 {
        if self.is_out_of_bounds(28) {
            0.0
        } else {
            f64_le(self.current_cash_balance)
        }
    }

    fn available_funds_for_new_positions(&self) -> f64 {
        if self.is_out_of_bounds(36) {
            0.0
        } else {
            f64_le(self.available_funds_for_new_positions)
        }
    }

    fn margin_requirement(&self) -> f64 {
        if self.is_out_of_bounds(44) {
            0.0
        } else {
            f64_le(self.margin_requirement)
        }
    }

    fn account_value(&self) -> f64 {
        if self.is_out_of_bounds(52) {
            0.0
        } else {
            f64_le(self.account_value)
        }
    }

    fn open_positions_profit_loss(&self) -> f64 {
        if self.is_out_of_bounds(60) {
            0.0
        } else {
            f64_le(self.open_positions_profit_loss)
        }
    }

    fn daily_profit_loss(&self) -> f64 {
        if self.is_out_of_bounds(68) {
            0.0
        } else {
            f64_le(self.daily_profit_loss)
        }
    }

    fn transaction_identifier_for_cash_balance_adjustment(&self) -> u64 {
        if self.is_out_of_bounds(76) {
            0u64.to_le()
        } else {
            u64::from_le(self.transaction_identifier_for_cash_balance_adjustment)
        }
    }

    fn last_transaction_date_time(&self) -> i64 {
        if self.is_out_of_bounds(84) {
            0i64.to_le()
        } else {
            i64::from_le(self.last_transaction_date_time)
        }
    }

    fn trailing_account_value_at_which_to_not_allow_new_positions(&self) -> f64 {
        if self.is_out_of_bounds(92) {
            0.0
        } else {
            f64_le(self.trailing_account_value_at_which_to_not_allow_new_positions)
        }
    }

    fn calculated_daily_net_loss_limit_in_account_currency(&self) -> f64 {
        if self.is_out_of_bounds(100) {
            0.0
        } else {
            f64_le(self.calculated_daily_net_loss_limit_in_account_currency)
        }
    }

    fn daily_net_loss_limit_has_been_reached(&self) -> u8 {
        if self.is_out_of_bounds(101) {
            0
        } else {
            self.daily_net_loss_limit_has_been_reached
        }
    }

    fn last_reset_daily_net_loss_management_variables_date_time_utc(&self) -> i64 {
        if self.is_out_of_bounds(109) {
            0i64.to_le()
        } else {
            i64::from_le(self.last_reset_daily_net_loss_management_variables_date_time_utc)
        }
    }

    fn is_under_required_margin(&self) -> bool {
        if self.is_out_of_bounds(110) {
            false
        } else {
            self.is_under_required_margin
        }
    }

    fn daily_net_loss_limit_in_account_currency(&self) -> f32 {
        if self.is_out_of_bounds(114) {
            0.0
        } else {
            f32_le(self.daily_net_loss_limit_in_account_currency)
        }
    }

    fn percent_of_cash_balance_for_daily_net_loss_limit(&self) -> i32 {
        if self.is_out_of_bounds(118) {
            0i32.to_le()
        } else {
            i32::from_le(self.percent_of_cash_balance_for_daily_net_loss_limit)
        }
    }

    fn use_trailing_account_value_to_not_allow_increase_in_positions(&self) -> bool {
        if self.is_out_of_bounds(119) {
            false
        } else {
            self.use_trailing_account_value_to_not_allow_increase_in_positions
        }
    }

    fn do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> u8 {
        if self.is_out_of_bounds(120) {
            0
        } else {
            self.do_not_allow_increase_in_positions_at_daily_loss_limit
        }
    }

    fn flatten_positions_at_daily_loss_limit(&self) -> u8 {
        if self.is_out_of_bounds(121) {
            0
        } else {
            self.flatten_positions_at_daily_loss_limit
        }
    }

    fn close_positions_at_end_of_day(&self) -> u8 {
        if self.is_out_of_bounds(122) {
            0
        } else {
            self.close_positions_at_end_of_day
        }
    }

    fn flatten_positions_when_under_margin_intraday(&self) -> u8 {
        if self.is_out_of_bounds(123) {
            1
        } else {
            self.flatten_positions_when_under_margin_intraday
        }
    }

    fn flatten_positions_when_under_margin_at_end_of_day(&self) -> u8 {
        if self.is_out_of_bounds(124) {
            0
        } else {
            self.flatten_positions_when_under_margin_at_end_of_day
        }
    }

    fn sender_sub_id(&self) -> &str {
        if self.is_out_of_bounds(128) {
            ""
        } else {
            get_vls(self, self.sender_sub_id)
        }
    }

    fn sender_location_id(&self) -> &str {
        if self.is_out_of_bounds(132) {
            ""
        } else {
            get_vls(self, self.sender_location_id)
        }
    }

    fn self_match_prevention_id(&self) -> &str {
        if self.is_out_of_bounds(136) {
            ""
        } else {
            get_vls(self, self.self_match_prevention_id)
        }
    }

    fn cti_code(&self) -> i32 {
        if self.is_out_of_bounds(140) {
            0i32.to_le()
        } else {
            i32::from_le(self.cti_code)
        }
    }

    fn trade_account_is_read_only(&self) -> bool {
        if self.is_out_of_bounds(141) {
            false
        } else {
            self.trade_account_is_read_only
        }
    }

    fn maximum_global_position_quantity(&self) -> i32 {
        if self.is_out_of_bounds(145) {
            0i32.to_le()
        } else {
            i32::from_le(self.maximum_global_position_quantity)
        }
    }

    fn trade_fee_per_contract(&self) -> f64 {
        if self.is_out_of_bounds(153) {
            0.0
        } else {
            f64_le(self.trade_fee_per_contract)
        }
    }

    fn trade_fee_per_share(&self) -> f64 {
        if self.is_out_of_bounds(161) {
            0.0
        } else {
            f64_le(self.trade_fee_per_share)
        }
    }

    fn require_sufficient_margin_for_new_positions(&self) -> u8 {
        if self.is_out_of_bounds(162) {
            1
        } else {
            self.require_sufficient_margin_for_new_positions
        }
    }

    fn use_percent_of_margin(&self) -> i32 {
        if self.is_out_of_bounds(166) {
            100i32.to_le()
        } else {
            i32::from_le(self.use_percent_of_margin)
        }
    }

    fn use_percent_of_margin_for_day_trading(&self) -> i32 {
        if self.is_out_of_bounds(170) {
            100i32.to_le()
        } else {
            i32::from_le(self.use_percent_of_margin_for_day_trading)
        }
    }

    fn maximum_allowed_account_balance_for_positions_as_percentage(&self) -> i32 {
        if self.is_out_of_bounds(174) {
            100i32.to_le()
        } else {
            i32::from_le(self.maximum_allowed_account_balance_for_positions_as_percentage)
        }
    }

    fn firm_id(&self) -> &str {
        if self.is_out_of_bounds(178) {
            ""
        } else {
            get_vls(self, self.firm_id)
        }
    }

    fn trading_is_disabled(&self) -> bool {
        if self.is_out_of_bounds(179) {
            false
        } else {
            self.trading_is_disabled
        }
    }

    fn descriptive_name(&self) -> &str {
        if self.is_out_of_bounds(183) {
            ""
        } else {
            get_vls(self, self.descriptive_name)
        }
    }

    fn is_master_firm_control_account(&self) -> bool {
        if self.is_out_of_bounds(184) {
            false
        } else {
            self.is_master_firm_control_account
        }
    }

    fn minimum_required_account_value(&self) -> f64 {
        if self.is_out_of_bounds(192) {
            0.0
        } else {
            f64_le(self.minimum_required_account_value)
        }
    }

    fn begin_time_for_day_margin(&self) -> i64 {
        if self.is_out_of_bounds(200) {
            0i64.to_le()
        } else {
            i64::from_le(self.begin_time_for_day_margin)
        }
    }

    fn end_time_for_day_margin(&self) -> i64 {
        if self.is_out_of_bounds(208) {
            0i64.to_le()
        } else {
            i64::from_le(self.end_time_for_day_margin)
        }
    }

    fn day_margin_time_zone(&self) -> &str {
        if self.is_out_of_bounds(212) {
            ""
        } else {
            get_vls(self, self.day_margin_time_zone)
        }
    }

    fn is_snapshot(&self) -> bool {
        if self.is_out_of_bounds(213) {
            false
        } else {
            self.is_snapshot
        }
    }

    fn is_first_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(214) {
            false
        } else {
            self.is_first_message_in_batch
        }
    }

    fn is_last_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(215) {
            false
        } else {
            self.is_last_message_in_batch
        }
    }

    fn is_deleted(&self) -> bool {
        if self.is_out_of_bounds(216) {
            false
        } else {
            self.is_deleted
        }
    }

    fn use_master_firm_flatten_positions_when_under_margin_intraday(&self) -> bool {
        if self.is_out_of_bounds(217) {
            false
        } else {
            self.use_master_firm_flatten_positions_when_under_margin_intraday
        }
    }

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day(&self) -> bool {
        if self.is_out_of_bounds(218) {
            false
        } else {
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day
        }
    }

    fn use_master_firm_symbol_limits_array(&self) -> bool {
        if self.is_out_of_bounds(219) {
            false
        } else {
            self.use_master_firm_symbol_limits_array
        }
    }

    fn use_master_firm_trade_fees(&self) -> bool {
        if self.is_out_of_bounds(220) {
            false
        } else {
            self.use_master_firm_trade_fees
        }
    }

    fn use_master_firm_trade_fee_per_share(&self) -> bool {
        if self.is_out_of_bounds(221) {
            false
        } else {
            self.use_master_firm_trade_fee_per_share
        }
    }

    fn use_master_firm_require_sufficient_margin_for_new_positions(&self) -> bool {
        if self.is_out_of_bounds(222) {
            false
        } else {
            self.use_master_firm_require_sufficient_margin_for_new_positions
        }
    }

    fn use_master_firm_use_percent_of_margin(&self) -> bool {
        if self.is_out_of_bounds(223) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin
        }
    }

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(&self) -> bool {
        if self.is_out_of_bounds(224) {
            false
        } else {
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage
        }
    }

    fn use_master_firm_minimum_required_account_value(&self) -> bool {
        if self.is_out_of_bounds(225) {
            false
        } else {
            self.use_master_firm_minimum_required_account_value
        }
    }

    fn use_master_firm_margin_time_settings(&self) -> bool {
        if self.is_out_of_bounds(226) {
            false
        } else {
            self.use_master_firm_margin_time_settings
        }
    }

    fn use_master_firm_trading_is_disabled(&self) -> bool {
        if self.is_out_of_bounds(227) {
            false
        } else {
            self.use_master_firm_trading_is_disabled
        }
    }

    fn is_trade_statistics_publically_shared(&self) -> bool {
        if self.is_out_of_bounds(228) {
            false
        } else {
            self.is_trade_statistics_publically_shared
        }
    }

    fn is_read_only_following_requests_allowed(&self) -> bool {
        if self.is_out_of_bounds(229) {
            false
        } else {
            self.is_read_only_following_requests_allowed
        }
    }

    fn is_trade_account_sharing_allowed(&self) -> bool {
        if self.is_out_of_bounds(230) {
            false
        } else {
            self.is_trade_account_sharing_allowed
        }
    }

    fn read_only_share_to_all_sc_usernames(&self) -> u8 {
        if self.is_out_of_bounds(231) {
            0
        } else {
            self.read_only_share_to_all_sc_usernames
        }
    }

    fn use_master_firm_symbol_commissions_array(&self) -> bool {
        if self.is_out_of_bounds(232) {
            false
        } else {
            self.use_master_firm_symbol_commissions_array
        }
    }

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> bool {
        if self.is_out_of_bounds(233) {
            false
        } else {
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit
        }
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading(&self) -> bool {
        if self.is_out_of_bounds(234) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_for_day_trading
        }
    }

    fn open_positions_profit_loss_based_on_settlement(&self) -> f64 {
        if self.is_out_of_bounds(242) {
            0.0
        } else {
            f64_le(self.open_positions_profit_loss_based_on_settlement)
        }
    }

    fn margin_requirement_full(&self) -> f64 {
        if self.is_out_of_bounds(250) {
            0.0
        } else {
            f64_le(self.margin_requirement_full)
        }
    }

    fn margin_requirement_full_positions_only(&self) -> f64 {
        if self.is_out_of_bounds(258) {
            0.0
        } else {
            f64_le(self.margin_requirement_full_positions_only)
        }
    }

    fn use_master_firm_trade_fees_full_override(&self) -> bool {
        if self.is_out_of_bounds(259) {
            false
        } else {
            self.use_master_firm_trade_fees_full_override
        }
    }

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders(&self) -> bool {
        if self.is_out_of_bounds(260) {
            false
        } else {
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders
        }
    }

    fn use_master_firm_use_percent_of_margin_full_override(&self) -> bool {
        if self.is_out_of_bounds(261) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_full_override
        }
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override(&self) -> bool {
        if self.is_out_of_bounds(262) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override
        }
    }

    fn peak_margin_requirement(&self) -> f64 {
        if self.is_out_of_bounds(270) {
            0.0
        } else {
            f64_le(self.peak_margin_requirement)
        }
    }

    fn liquidation_only_mode(&self) -> u8 {
        if self.is_out_of_bounds(271) {
            0
        } else {
            self.liquidation_only_mode
        }
    }

    fn flatten_positions_when_under_margin_intraday_triggered(&self) -> u8 {
        if self.is_out_of_bounds(272) {
            0
        } else {
            self.flatten_positions_when_under_margin_intraday_triggered
        }
    }

    fn flatten_positions_when_under_minimum_account_value_triggered(&self) -> u8 {
        if self.is_out_of_bounds(273) {
            0
        } else {
            self.flatten_positions_when_under_minimum_account_value_triggered
        }
    }

    fn account_value_at_end_of_day_capture_time(&self) -> f64 {
        if self.is_out_of_bounds(281) {
            0.0
        } else {
            f64_le(self.account_value_at_end_of_day_capture_time)
        }
    }

    fn end_of_day_capture_time(&self) -> i64 {
        if self.is_out_of_bounds(289) {
            0i64.to_le()
        } else {
            i64::from_le(self.end_of_day_capture_time)
        }
    }

    fn customer_or_firm(&self) -> u8 {
        if self.is_out_of_bounds(290) {
            0
        } else {
            self.customer_or_firm
        }
    }

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met(&self) -> u8 {
        if self.is_out_of_bounds(291) {
            0
        } else {
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met
        }
    }

    fn master_firm_flatten_cancel_when_under_minimum_account_value(&self) -> u8 {
        if self.is_out_of_bounds(292) {
            0
        } else {
            self.master_firm_flatten_cancel_when_under_minimum_account_value
        }
    }

    fn master_firm_flatten_cancel_when_under_margin_intraday(&self) -> u8 {
        if self.is_out_of_bounds(293) {
            0
        } else {
            self.master_firm_flatten_cancel_when_under_margin_intraday
        }
    }

    fn master_firm_flatten_cancel_when_under_margin_end_of_day(&self) -> u8 {
        if self.is_out_of_bounds(294) {
            0
        } else {
            self.master_firm_flatten_cancel_when_under_margin_end_of_day
        }
    }

    fn master_firm_maximum_order_quantity(&self) -> u32 {
        if self.is_out_of_bounds(298) {
            0u32.to_le()
        } else {
            u32::from_le(self.master_firm_maximum_order_quantity)
        }
    }

    fn last_trigger_date_time_utc_for_daily_loss_limit(&self) -> i64 {
        if self.is_out_of_bounds(306) {
            0i64.to_le()
        } else {
            i64::from_le(self.last_trigger_date_time_utc_for_daily_loss_limit)
        }
    }

    fn open_positions_profit_loss_is_delayed(&self) -> bool {
        if self.is_out_of_bounds(307) {
            false
        } else {
            self.open_positions_profit_loss_is_delayed
        }
    }

    fn exchange_trader_id(&self) -> &str {
        if self.is_out_of_bounds(311) {
            ""
        } else {
            get_vls(self, self.exchange_trader_id)
        }
    }

    fn profit_loss_for_open_position_date_time_utc(&self) -> i64 {
        if self.is_out_of_bounds(319) {
            0i64.to_le()
        } else {
            i64::from_le(self.profit_loss_for_open_position_date_time_utc)
        }
    }

    fn use_fixed_cash_on_hand_balance(&self) -> bool {
        if self.is_out_of_bounds(320) {
            false
        } else {
            self.use_fixed_cash_on_hand_balance
        }
    }

    fn fixed_cash_on_hand_balance(&self) -> f32 {
        if self.is_out_of_bounds(324) {
            0.0
        } else {
            f32_le(self.fixed_cash_on_hand_balance)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_trade_account_not_exist(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(11) {
            self.trade_account_not_exist = value;
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(15) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_is_simulated(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.is_simulated = value;
        }
        self
    }

    fn set_currency_code(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.currency_code = set_vls(self, self.currency_code, value);
        }
        self
    }

    fn set_current_cash_balance(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.current_cash_balance = f64_le(value);
        }
        self
    }

    fn set_available_funds_for_new_positions(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.available_funds_for_new_positions = f64_le(value);
        }
        self
    }

    fn set_margin_requirement(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(44) {
            self.margin_requirement = f64_le(value);
        }
        self
    }

    fn set_account_value(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.account_value = f64_le(value);
        }
        self
    }

    fn set_open_positions_profit_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(60) {
            self.open_positions_profit_loss = f64_le(value);
        }
        self
    }

    fn set_daily_profit_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            self.daily_profit_loss = f64_le(value);
        }
        self
    }

    fn set_transaction_identifier_for_cash_balance_adjustment(&mut self, value: u64) -> &mut Self {
        if !self.is_out_of_bounds(76) {
            self.transaction_identifier_for_cash_balance_adjustment = value.to_le();
        }
        self
    }

    fn set_last_transaction_date_time(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(84) {
            self.last_transaction_date_time = value.to_le();
        }
        self
    }

    fn set_trailing_account_value_at_which_to_not_allow_new_positions(
        &mut self,
        value: f64,
    ) -> &mut Self {
        if !self.is_out_of_bounds(92) {
            self.trailing_account_value_at_which_to_not_allow_new_positions = f64_le(value);
        }
        self
    }

    fn set_calculated_daily_net_loss_limit_in_account_currency(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(100) {
            self.calculated_daily_net_loss_limit_in_account_currency = f64_le(value);
        }
        self
    }

    fn set_daily_net_loss_limit_has_been_reached(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(101) {
            self.daily_net_loss_limit_has_been_reached = value;
        }
        self
    }

    fn set_last_reset_daily_net_loss_management_variables_date_time_utc(
        &mut self,
        value: i64,
    ) -> &mut Self {
        if !self.is_out_of_bounds(109) {
            self.last_reset_daily_net_loss_management_variables_date_time_utc = value.to_le();
        }
        self
    }

    fn set_is_under_required_margin(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(110) {
            self.is_under_required_margin = value;
        }
        self
    }

    fn set_daily_net_loss_limit_in_account_currency(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(114) {
            self.daily_net_loss_limit_in_account_currency = f32_le(value);
        }
        self
    }

    fn set_percent_of_cash_balance_for_daily_net_loss_limit(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(118) {
            self.percent_of_cash_balance_for_daily_net_loss_limit = value.to_le();
        }
        self
    }

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(119) {
            self.use_trailing_account_value_to_not_allow_increase_in_positions = value;
        }
        self
    }

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        }
        self
    }

    fn set_flatten_positions_at_daily_loss_limit(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(121) {
            self.flatten_positions_at_daily_loss_limit = value;
        }
        self
    }

    fn set_close_positions_at_end_of_day(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(122) {
            self.close_positions_at_end_of_day = value;
        }
        self
    }

    fn set_flatten_positions_when_under_margin_intraday(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(123) {
            self.flatten_positions_when_under_margin_intraday = value;
        }
        self
    }

    fn set_flatten_positions_when_under_margin_at_end_of_day(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(124) {
            self.flatten_positions_when_under_margin_at_end_of_day = value;
        }
        self
    }

    fn set_sender_sub_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(128) {
            self.sender_sub_id = set_vls(self, self.sender_sub_id, value);
        }
        self
    }

    fn set_sender_location_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(132) {
            self.sender_location_id = set_vls(self, self.sender_location_id, value);
        }
        self
    }

    fn set_self_match_prevention_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(136) {
            self.self_match_prevention_id = set_vls(self, self.self_match_prevention_id, value);
        }
        self
    }

    fn set_cti_code(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(140) {
            self.cti_code = value.to_le();
        }
        self
    }

    fn set_trade_account_is_read_only(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(141) {
            self.trade_account_is_read_only = value;
        }
        self
    }

    fn set_maximum_global_position_quantity(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(145) {
            self.maximum_global_position_quantity = value.to_le();
        }
        self
    }

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(153) {
            self.trade_fee_per_contract = f64_le(value);
        }
        self
    }

    fn set_trade_fee_per_share(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(161) {
            self.trade_fee_per_share = f64_le(value);
        }
        self
    }

    fn set_require_sufficient_margin_for_new_positions(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(162) {
            self.require_sufficient_margin_for_new_positions = value;
        }
        self
    }

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(166) {
            self.use_percent_of_margin = value.to_le();
        }
        self
    }

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(170) {
            self.use_percent_of_margin_for_day_trading = value.to_le();
        }
        self
    }

    fn set_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: i32,
    ) -> &mut Self {
        if !self.is_out_of_bounds(174) {
            self.maximum_allowed_account_balance_for_positions_as_percentage = value.to_le();
        }
        self
    }

    fn set_firm_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(178) {
            self.firm_id = set_vls(self, self.firm_id, value);
        }
        self
    }

    fn set_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(179) {
            self.trading_is_disabled = value;
        }
        self
    }

    fn set_descriptive_name(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(183) {
            self.descriptive_name = set_vls(self, self.descriptive_name, value);
        }
        self
    }

    fn set_is_master_firm_control_account(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(184) {
            self.is_master_firm_control_account = value;
        }
        self
    }

    fn set_minimum_required_account_value(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(192) {
            self.minimum_required_account_value = f64_le(value);
        }
        self
    }

    fn set_begin_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(200) {
            self.begin_time_for_day_margin = value.to_le();
        }
        self
    }

    fn set_end_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(208) {
            self.end_time_for_day_margin = value.to_le();
        }
        self
    }

    fn set_day_margin_time_zone(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(212) {
            self.day_margin_time_zone = set_vls(self, self.day_margin_time_zone, value);
        }
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(213) {
            self.is_snapshot = value;
        }
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(214) {
            self.is_first_message_in_batch = value;
        }
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(215) {
            self.is_last_message_in_batch = value;
        }
        self
    }

    fn set_is_deleted(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(216) {
            self.is_deleted = value;
        }
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(217) {
            self.use_master_firm_flatten_positions_when_under_margin_intraday = value;
        }
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(218) {
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day = value;
        }
        self
    }

    fn set_use_master_firm_symbol_limits_array(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(219) {
            self.use_master_firm_symbol_limits_array = value;
        }
        self
    }

    fn set_use_master_firm_trade_fees(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(220) {
            self.use_master_firm_trade_fees = value;
        }
        self
    }

    fn set_use_master_firm_trade_fee_per_share(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(221) {
            self.use_master_firm_trade_fee_per_share = value;
        }
        self
    }

    fn set_use_master_firm_require_sufficient_margin_for_new_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(222) {
            self.use_master_firm_require_sufficient_margin_for_new_positions = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(223) {
            self.use_master_firm_use_percent_of_margin = value;
        }
        self
    }

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(224) {
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage =
                value;
        }
        self
    }

    fn set_use_master_firm_minimum_required_account_value(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(225) {
            self.use_master_firm_minimum_required_account_value = value;
        }
        self
    }

    fn set_use_master_firm_margin_time_settings(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(226) {
            self.use_master_firm_margin_time_settings = value;
        }
        self
    }

    fn set_use_master_firm_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(227) {
            self.use_master_firm_trading_is_disabled = value;
        }
        self
    }

    fn set_is_trade_statistics_publically_shared(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(228) {
            self.is_trade_statistics_publically_shared = value;
        }
        self
    }

    fn set_is_read_only_following_requests_allowed(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(229) {
            self.is_read_only_following_requests_allowed = value;
        }
        self
    }

    fn set_is_trade_account_sharing_allowed(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(230) {
            self.is_trade_account_sharing_allowed = value;
        }
        self
    }

    fn set_read_only_share_to_all_sc_usernames(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(231) {
            self.read_only_share_to_all_sc_usernames = value;
        }
        self
    }

    fn set_use_master_firm_symbol_commissions_array(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(232) {
            self.use_master_firm_symbol_commissions_array = value;
        }
        self
    }

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(233) {
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(234) {
            self.use_master_firm_use_percent_of_margin_for_day_trading = value;
        }
        self
    }

    fn set_open_positions_profit_loss_based_on_settlement(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(242) {
            self.open_positions_profit_loss_based_on_settlement = f64_le(value);
        }
        self
    }

    fn set_margin_requirement_full(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(250) {
            self.margin_requirement_full = f64_le(value);
        }
        self
    }

    fn set_margin_requirement_full_positions_only(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(258) {
            self.margin_requirement_full_positions_only = f64_le(value);
        }
        self
    }

    fn set_use_master_firm_trade_fees_full_override(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(259) {
            self.use_master_firm_trade_fees_full_override = value;
        }
        self
    }

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(260) {
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(261) {
            self.use_master_firm_use_percent_of_margin_full_override = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(262) {
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override = value;
        }
        self
    }

    fn set_peak_margin_requirement(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(270) {
            self.peak_margin_requirement = f64_le(value);
        }
        self
    }

    fn set_liquidation_only_mode(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(271) {
            self.liquidation_only_mode = value;
        }
        self
    }

    fn set_flatten_positions_when_under_margin_intraday_triggered(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(272) {
            self.flatten_positions_when_under_margin_intraday_triggered = value;
        }
        self
    }

    fn set_flatten_positions_when_under_minimum_account_value_triggered(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(273) {
            self.flatten_positions_when_under_minimum_account_value_triggered = value;
        }
        self
    }

    fn set_account_value_at_end_of_day_capture_time(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(281) {
            self.account_value_at_end_of_day_capture_time = f64_le(value);
        }
        self
    }

    fn set_end_of_day_capture_time(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(289) {
            self.end_of_day_capture_time = value.to_le();
        }
        self
    }

    fn set_customer_or_firm(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(290) {
            self.customer_or_firm = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(291) {
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(292) {
            self.master_firm_flatten_cancel_when_under_minimum_account_value = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_intraday(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(293) {
            self.master_firm_flatten_cancel_when_under_margin_intraday = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(294) {
            self.master_firm_flatten_cancel_when_under_margin_end_of_day = value;
        }
        self
    }

    fn set_master_firm_maximum_order_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(298) {
            self.master_firm_maximum_order_quantity = value.to_le();
        }
        self
    }

    fn set_last_trigger_date_time_utc_for_daily_loss_limit(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(306) {
            self.last_trigger_date_time_utc_for_daily_loss_limit = value.to_le();
        }
        self
    }

    fn set_open_positions_profit_loss_is_delayed(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(307) {
            self.open_positions_profit_loss_is_delayed = value;
        }
        self
    }

    fn set_exchange_trader_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(311) {
            self.exchange_trader_id = set_vls(self, self.exchange_trader_id, value);
        }
        self
    }

    fn set_profit_loss_for_open_position_date_time_utc(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(319) {
            self.profit_loss_for_open_position_date_time_utc = value.to_le();
        }
        self
    }

    fn set_use_fixed_cash_on_hand_balance(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(320) {
            self.use_fixed_cash_on_hand_balance = value;
        }
        self
    }

    fn set_fixed_cash_on_hand_balance(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(324) {
            self.fixed_cash_on_hand_balance = f32_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                324usize,
                core::mem::size_of::<TradeAccountDataResponseVLSData>(),
                "TradeAccountDataResponseVLSData sizeof expected {:} but was {:}",
                324usize,
                core::mem::size_of::<TradeAccountDataResponseVLSData>()
            );
            assert_eq!(
                324u16,
                TradeAccountDataResponseVLS::new().size(),
                "TradeAccountDataResponseVLS sizeof expected {:} but was {:}",
                324u16,
                TradeAccountDataResponseVLS::new().size(),
            );
            assert_eq!(
                TRADE_ACCOUNT_DATA_RESPONSE,
                TradeAccountDataResponseVLS::new().r#type(),
                "TradeAccountDataResponseVLS type expected {:} but was {:}",
                TRADE_ACCOUNT_DATA_RESPONSE,
                TradeAccountDataResponseVLS::new().r#type(),
            );
            assert_eq!(
                10116u16,
                TradeAccountDataResponseVLS::new().r#type(),
                "TradeAccountDataResponseVLS type expected {:} but was {:}",
                10116u16,
                TradeAccountDataResponseVLS::new().r#type(),
            );
            let d = TradeAccountDataResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.trade_account_not_exist) as usize) - p,
                "trade_account_not_exist offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.trade_account_not_exist) as usize) - p,
            );
            assert_eq!(
                11usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                11usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                15usize,
                (core::ptr::addr_of!(d.is_simulated) as usize) - p,
                "is_simulated offset expected {:} but was {:}",
                15usize,
                (core::ptr::addr_of!(d.is_simulated) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.currency_code) as usize) - p,
                "currency_code offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.currency_code) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.current_cash_balance) as usize) - p,
                "current_cash_balance offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.current_cash_balance) as usize) - p,
            );
            assert_eq!(
                28usize,
                (core::ptr::addr_of!(d.available_funds_for_new_positions) as usize) - p,
                "available_funds_for_new_positions offset expected {:} but was {:}",
                28usize,
                (core::ptr::addr_of!(d.available_funds_for_new_positions) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.margin_requirement) as usize) - p,
                "margin_requirement offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.margin_requirement) as usize) - p,
            );
            assert_eq!(
                44usize,
                (core::ptr::addr_of!(d.account_value) as usize) - p,
                "account_value offset expected {:} but was {:}",
                44usize,
                (core::ptr::addr_of!(d.account_value) as usize) - p,
            );
            assert_eq!(
                52usize,
                (core::ptr::addr_of!(d.open_positions_profit_loss) as usize) - p,
                "open_positions_profit_loss offset expected {:} but was {:}",
                52usize,
                (core::ptr::addr_of!(d.open_positions_profit_loss) as usize) - p,
            );
            assert_eq!(
                60usize,
                (core::ptr::addr_of!(d.daily_profit_loss) as usize) - p,
                "daily_profit_loss offset expected {:} but was {:}",
                60usize,
                (core::ptr::addr_of!(d.daily_profit_loss) as usize) - p,
            );
            assert_eq!(
                68usize,
                (core::ptr::addr_of!(d.transaction_identifier_for_cash_balance_adjustment) as usize) - p,
                "transaction_identifier_for_cash_balance_adjustment offset expected {:} but was {:}",
                68usize,
                (core::ptr::addr_of!(d.transaction_identifier_for_cash_balance_adjustment) as usize) - p,
            );
            assert_eq!(
                76usize,
                (core::ptr::addr_of!(d.last_transaction_date_time) as usize) - p,
                "last_transaction_date_time offset expected {:} but was {:}",
                76usize,
                (core::ptr::addr_of!(d.last_transaction_date_time) as usize) - p,
            );
            assert_eq!(
                84usize,
                (core::ptr::addr_of!(d.trailing_account_value_at_which_to_not_allow_new_positions) as usize) - p,
                "trailing_account_value_at_which_to_not_allow_new_positions offset expected {:} but was {:}",
                84usize,
                (core::ptr::addr_of!(d.trailing_account_value_at_which_to_not_allow_new_positions) as usize) - p,
            );
            assert_eq!(
                92usize,
                (core::ptr::addr_of!(d.calculated_daily_net_loss_limit_in_account_currency) as usize) - p,
                "calculated_daily_net_loss_limit_in_account_currency offset expected {:} but was {:}",
                92usize,
                (core::ptr::addr_of!(d.calculated_daily_net_loss_limit_in_account_currency) as usize) - p,
            );
            assert_eq!(
                100usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_has_been_reached) as usize) - p,
                "daily_net_loss_limit_has_been_reached offset expected {:} but was {:}",
                100usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_has_been_reached) as usize) - p,
            );
            assert_eq!(
                101usize,
                (core::ptr::addr_of!(d.last_reset_daily_net_loss_management_variables_date_time_utc) as usize) - p,
                "last_reset_daily_net_loss_management_variables_date_time_utc offset expected {:} but was {:}",
                101usize,
                (core::ptr::addr_of!(d.last_reset_daily_net_loss_management_variables_date_time_utc) as usize) - p,
            );
            assert_eq!(
                109usize,
                (core::ptr::addr_of!(d.is_under_required_margin) as usize) - p,
                "is_under_required_margin offset expected {:} but was {:}",
                109usize,
                (core::ptr::addr_of!(d.is_under_required_margin) as usize) - p,
            );
            assert_eq!(
                110usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_in_account_currency) as usize) - p,
                "daily_net_loss_limit_in_account_currency offset expected {:} but was {:}",
                110usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_in_account_currency) as usize) - p,
            );
            assert_eq!(
                114usize,
                (core::ptr::addr_of!(d.percent_of_cash_balance_for_daily_net_loss_limit) as usize)
                    - p,
                "percent_of_cash_balance_for_daily_net_loss_limit offset expected {:} but was {:}",
                114usize,
                (core::ptr::addr_of!(d.percent_of_cash_balance_for_daily_net_loss_limit) as usize)
                    - p,
            );
            assert_eq!(
                118usize,
                (core::ptr::addr_of!(d.use_trailing_account_value_to_not_allow_increase_in_positions) as usize) - p,
                "use_trailing_account_value_to_not_allow_increase_in_positions offset expected {:} but was {:}",
                118usize,
                (core::ptr::addr_of!(d.use_trailing_account_value_to_not_allow_increase_in_positions) as usize) - p,
            );
            assert_eq!(
                119usize,
                (core::ptr::addr_of!(d.do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
                "do_not_allow_increase_in_positions_at_daily_loss_limit offset expected {:} but was {:}",
                119usize,
                (core::ptr::addr_of!(d.do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
            );
            assert_eq!(
                120usize,
                (core::ptr::addr_of!(d.flatten_positions_at_daily_loss_limit) as usize) - p,
                "flatten_positions_at_daily_loss_limit offset expected {:} but was {:}",
                120usize,
                (core::ptr::addr_of!(d.flatten_positions_at_daily_loss_limit) as usize) - p,
            );
            assert_eq!(
                121usize,
                (core::ptr::addr_of!(d.close_positions_at_end_of_day) as usize) - p,
                "close_positions_at_end_of_day offset expected {:} but was {:}",
                121usize,
                (core::ptr::addr_of!(d.close_positions_at_end_of_day) as usize) - p,
            );
            assert_eq!(
                122usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday) as usize) - p,
                "flatten_positions_when_under_margin_intraday offset expected {:} but was {:}",
                122usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday) as usize) - p,
            );
            assert_eq!(
                123usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_at_end_of_day) as usize)
                    - p,
                "flatten_positions_when_under_margin_at_end_of_day offset expected {:} but was {:}",
                123usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_at_end_of_day) as usize)
                    - p,
            );
            assert_eq!(
                124usize,
                (core::ptr::addr_of!(d.sender_sub_id) as usize) - p,
                "sender_sub_id offset expected {:} but was {:}",
                124usize,
                (core::ptr::addr_of!(d.sender_sub_id) as usize) - p,
            );
            assert_eq!(
                128usize,
                (core::ptr::addr_of!(d.sender_location_id) as usize) - p,
                "sender_location_id offset expected {:} but was {:}",
                128usize,
                (core::ptr::addr_of!(d.sender_location_id) as usize) - p,
            );
            assert_eq!(
                132usize,
                (core::ptr::addr_of!(d.self_match_prevention_id) as usize) - p,
                "self_match_prevention_id offset expected {:} but was {:}",
                132usize,
                (core::ptr::addr_of!(d.self_match_prevention_id) as usize) - p,
            );
            assert_eq!(
                136usize,
                (core::ptr::addr_of!(d.cti_code) as usize) - p,
                "cti_code offset expected {:} but was {:}",
                136usize,
                (core::ptr::addr_of!(d.cti_code) as usize) - p,
            );
            assert_eq!(
                140usize,
                (core::ptr::addr_of!(d.trade_account_is_read_only) as usize) - p,
                "trade_account_is_read_only offset expected {:} but was {:}",
                140usize,
                (core::ptr::addr_of!(d.trade_account_is_read_only) as usize) - p,
            );
            assert_eq!(
                141usize,
                (core::ptr::addr_of!(d.maximum_global_position_quantity) as usize) - p,
                "maximum_global_position_quantity offset expected {:} but was {:}",
                141usize,
                (core::ptr::addr_of!(d.maximum_global_position_quantity) as usize) - p,
            );
            assert_eq!(
                145usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract) as usize) - p,
                "trade_fee_per_contract offset expected {:} but was {:}",
                145usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract) as usize) - p,
            );
            assert_eq!(
                153usize,
                (core::ptr::addr_of!(d.trade_fee_per_share) as usize) - p,
                "trade_fee_per_share offset expected {:} but was {:}",
                153usize,
                (core::ptr::addr_of!(d.trade_fee_per_share) as usize) - p,
            );
            assert_eq!(
                161usize,
                (core::ptr::addr_of!(d.require_sufficient_margin_for_new_positions) as usize) - p,
                "require_sufficient_margin_for_new_positions offset expected {:} but was {:}",
                161usize,
                (core::ptr::addr_of!(d.require_sufficient_margin_for_new_positions) as usize) - p,
            );
            assert_eq!(
                162usize,
                (core::ptr::addr_of!(d.use_percent_of_margin) as usize) - p,
                "use_percent_of_margin offset expected {:} but was {:}",
                162usize,
                (core::ptr::addr_of!(d.use_percent_of_margin) as usize) - p,
            );
            assert_eq!(
                166usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading) as usize) - p,
                "use_percent_of_margin_for_day_trading offset expected {:} but was {:}",
                166usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading) as usize) - p,
            );
            assert_eq!(
                170usize,
                (core::ptr::addr_of!(d.maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
                "maximum_allowed_account_balance_for_positions_as_percentage offset expected {:} but was {:}",
                170usize,
                (core::ptr::addr_of!(d.maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
            );
            assert_eq!(
                174usize,
                (core::ptr::addr_of!(d.firm_id) as usize) - p,
                "firm_id offset expected {:} but was {:}",
                174usize,
                (core::ptr::addr_of!(d.firm_id) as usize) - p,
            );
            assert_eq!(
                178usize,
                (core::ptr::addr_of!(d.trading_is_disabled) as usize) - p,
                "trading_is_disabled offset expected {:} but was {:}",
                178usize,
                (core::ptr::addr_of!(d.trading_is_disabled) as usize) - p,
            );
            assert_eq!(
                179usize,
                (core::ptr::addr_of!(d.descriptive_name) as usize) - p,
                "descriptive_name offset expected {:} but was {:}",
                179usize,
                (core::ptr::addr_of!(d.descriptive_name) as usize) - p,
            );
            assert_eq!(
                183usize,
                (core::ptr::addr_of!(d.is_master_firm_control_account) as usize) - p,
                "is_master_firm_control_account offset expected {:} but was {:}",
                183usize,
                (core::ptr::addr_of!(d.is_master_firm_control_account) as usize) - p,
            );
            assert_eq!(
                184usize,
                (core::ptr::addr_of!(d.minimum_required_account_value) as usize) - p,
                "minimum_required_account_value offset expected {:} but was {:}",
                184usize,
                (core::ptr::addr_of!(d.minimum_required_account_value) as usize) - p,
            );
            assert_eq!(
                192usize,
                (core::ptr::addr_of!(d.begin_time_for_day_margin) as usize) - p,
                "begin_time_for_day_margin offset expected {:} but was {:}",
                192usize,
                (core::ptr::addr_of!(d.begin_time_for_day_margin) as usize) - p,
            );
            assert_eq!(
                200usize,
                (core::ptr::addr_of!(d.end_time_for_day_margin) as usize) - p,
                "end_time_for_day_margin offset expected {:} but was {:}",
                200usize,
                (core::ptr::addr_of!(d.end_time_for_day_margin) as usize) - p,
            );
            assert_eq!(
                208usize,
                (core::ptr::addr_of!(d.day_margin_time_zone) as usize) - p,
                "day_margin_time_zone offset expected {:} but was {:}",
                208usize,
                (core::ptr::addr_of!(d.day_margin_time_zone) as usize) - p,
            );
            assert_eq!(
                212usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
                "is_snapshot offset expected {:} but was {:}",
                212usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
            );
            assert_eq!(
                213usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
                "is_first_message_in_batch offset expected {:} but was {:}",
                213usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
            );
            assert_eq!(
                214usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
                "is_last_message_in_batch offset expected {:} but was {:}",
                214usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
            );
            assert_eq!(
                215usize,
                (core::ptr::addr_of!(d.is_deleted) as usize) - p,
                "is_deleted offset expected {:} but was {:}",
                215usize,
                (core::ptr::addr_of!(d.is_deleted) as usize) - p,
            );
            assert_eq!(
                216usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_intraday) as usize) - p,
                "use_master_firm_flatten_positions_when_under_margin_intraday offset expected {:} but was {:}",
                216usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_intraday) as usize) - p,
            );
            assert_eq!(
                217usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_at_end_of_day) as usize) - p,
                "use_master_firm_flatten_positions_when_under_margin_at_end_of_day offset expected {:} but was {:}",
                217usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_at_end_of_day) as usize) - p,
            );
            assert_eq!(
                218usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_limits_array) as usize) - p,
                "use_master_firm_symbol_limits_array offset expected {:} but was {:}",
                218usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_limits_array) as usize) - p,
            );
            assert_eq!(
                219usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees) as usize) - p,
                "use_master_firm_trade_fees offset expected {:} but was {:}",
                219usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees) as usize) - p,
            );
            assert_eq!(
                220usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fee_per_share) as usize) - p,
                "use_master_firm_trade_fee_per_share offset expected {:} but was {:}",
                220usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fee_per_share) as usize) - p,
            );
            assert_eq!(
                221usize,
                (core::ptr::addr_of!(d.use_master_firm_require_sufficient_margin_for_new_positions) as usize) - p,
                "use_master_firm_require_sufficient_margin_for_new_positions offset expected {:} but was {:}",
                221usize,
                (core::ptr::addr_of!(d.use_master_firm_require_sufficient_margin_for_new_positions) as usize) - p,
            );
            assert_eq!(
                222usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin) as usize) - p,
                "use_master_firm_use_percent_of_margin offset expected {:} but was {:}",
                222usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin) as usize) - p,
            );
            assert_eq!(
                223usize,
                (core::ptr::addr_of!(d.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
                "use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage offset expected {:} but was {:}",
                223usize,
                (core::ptr::addr_of!(d.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
            );
            assert_eq!(
                224usize,
                (core::ptr::addr_of!(d.use_master_firm_minimum_required_account_value) as usize)
                    - p,
                "use_master_firm_minimum_required_account_value offset expected {:} but was {:}",
                224usize,
                (core::ptr::addr_of!(d.use_master_firm_minimum_required_account_value) as usize)
                    - p,
            );
            assert_eq!(
                225usize,
                (core::ptr::addr_of!(d.use_master_firm_margin_time_settings) as usize) - p,
                "use_master_firm_margin_time_settings offset expected {:} but was {:}",
                225usize,
                (core::ptr::addr_of!(d.use_master_firm_margin_time_settings) as usize) - p,
            );
            assert_eq!(
                226usize,
                (core::ptr::addr_of!(d.use_master_firm_trading_is_disabled) as usize) - p,
                "use_master_firm_trading_is_disabled offset expected {:} but was {:}",
                226usize,
                (core::ptr::addr_of!(d.use_master_firm_trading_is_disabled) as usize) - p,
            );
            assert_eq!(
                227usize,
                (core::ptr::addr_of!(d.is_trade_statistics_publically_shared) as usize) - p,
                "is_trade_statistics_publically_shared offset expected {:} but was {:}",
                227usize,
                (core::ptr::addr_of!(d.is_trade_statistics_publically_shared) as usize) - p,
            );
            assert_eq!(
                228usize,
                (core::ptr::addr_of!(d.is_read_only_following_requests_allowed) as usize) - p,
                "is_read_only_following_requests_allowed offset expected {:} but was {:}",
                228usize,
                (core::ptr::addr_of!(d.is_read_only_following_requests_allowed) as usize) - p,
            );
            assert_eq!(
                229usize,
                (core::ptr::addr_of!(d.is_trade_account_sharing_allowed) as usize) - p,
                "is_trade_account_sharing_allowed offset expected {:} but was {:}",
                229usize,
                (core::ptr::addr_of!(d.is_trade_account_sharing_allowed) as usize) - p,
            );
            assert_eq!(
                230usize,
                (core::ptr::addr_of!(d.read_only_share_to_all_sc_usernames) as usize) - p,
                "read_only_share_to_all_sc_usernames offset expected {:} but was {:}",
                230usize,
                (core::ptr::addr_of!(d.read_only_share_to_all_sc_usernames) as usize) - p,
            );
            assert_eq!(
                231usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array) as usize) - p,
                "use_master_firm_symbol_commissions_array offset expected {:} but was {:}",
                231usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array) as usize) - p,
            );
            assert_eq!(
                232usize,
                (core::ptr::addr_of!(d.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
                "use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit offset expected {:} but was {:}",
                232usize,
                (core::ptr::addr_of!(d.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
            );
            assert_eq!(
                233usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading) as usize) - p,
                "use_master_firm_use_percent_of_margin_for_day_trading offset expected {:} but was {:}",
                233usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading) as usize) - p,
            );
            assert_eq!(
                234usize,
                (core::ptr::addr_of!(d.open_positions_profit_loss_based_on_settlement) as usize)
                    - p,
                "open_positions_profit_loss_based_on_settlement offset expected {:} but was {:}",
                234usize,
                (core::ptr::addr_of!(d.open_positions_profit_loss_based_on_settlement) as usize)
                    - p,
            );
            assert_eq!(
                242usize,
                (core::ptr::addr_of!(d.margin_requirement_full) as usize) - p,
                "margin_requirement_full offset expected {:} but was {:}",
                242usize,
                (core::ptr::addr_of!(d.margin_requirement_full) as usize) - p,
            );
            assert_eq!(
                250usize,
                (core::ptr::addr_of!(d.margin_requirement_full_positions_only) as usize) - p,
                "margin_requirement_full_positions_only offset expected {:} but was {:}",
                250usize,
                (core::ptr::addr_of!(d.margin_requirement_full_positions_only) as usize) - p,
            );
            assert_eq!(
                258usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_full_override) as usize) - p,
                "use_master_firm_trade_fees_full_override offset expected {:} but was {:}",
                258usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_full_override) as usize) - p,
            );
            assert_eq!(
                259usize,
                (core::ptr::addr_of!(d.use_master_firm_num_days_before_last_trading_date_to_disallow_orders) as usize) - p,
                "use_master_firm_num_days_before_last_trading_date_to_disallow_orders offset expected {:} but was {:}",
                259usize,
                (core::ptr::addr_of!(d.use_master_firm_num_days_before_last_trading_date_to_disallow_orders) as usize) - p,
            );
            assert_eq!(
                260usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_full_override) as usize) - p,
                "use_master_firm_use_percent_of_margin_full_override offset expected {:} but was {:}",
                260usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_full_override) as usize) - p,
            );
            assert_eq!(
                261usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_full_override) as usize) - p,
                "use_master_firm_use_percent_of_margin_for_day_trading_full_override offset expected {:} but was {:}",
                261usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_full_override) as usize) - p,
            );
            assert_eq!(
                262usize,
                (core::ptr::addr_of!(d.peak_margin_requirement) as usize) - p,
                "peak_margin_requirement offset expected {:} but was {:}",
                262usize,
                (core::ptr::addr_of!(d.peak_margin_requirement) as usize) - p,
            );
            assert_eq!(
                270usize,
                (core::ptr::addr_of!(d.liquidation_only_mode) as usize) - p,
                "liquidation_only_mode offset expected {:} but was {:}",
                270usize,
                (core::ptr::addr_of!(d.liquidation_only_mode) as usize) - p,
            );
            assert_eq!(
                271usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday_triggered) as usize) - p,
                "flatten_positions_when_under_margin_intraday_triggered offset expected {:} but was {:}",
                271usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday_triggered) as usize) - p,
            );
            assert_eq!(
                272usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_minimum_account_value_triggered) as usize) - p,
                "flatten_positions_when_under_minimum_account_value_triggered offset expected {:} but was {:}",
                272usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_minimum_account_value_triggered) as usize) - p,
            );
            assert_eq!(
                273usize,
                (core::ptr::addr_of!(d.account_value_at_end_of_day_capture_time) as usize) - p,
                "account_value_at_end_of_day_capture_time offset expected {:} but was {:}",
                273usize,
                (core::ptr::addr_of!(d.account_value_at_end_of_day_capture_time) as usize) - p,
            );
            assert_eq!(
                281usize,
                (core::ptr::addr_of!(d.end_of_day_capture_time) as usize) - p,
                "end_of_day_capture_time offset expected {:} but was {:}",
                281usize,
                (core::ptr::addr_of!(d.end_of_day_capture_time) as usize) - p,
            );
            assert_eq!(
                289usize,
                (core::ptr::addr_of!(d.customer_or_firm) as usize) - p,
                "customer_or_firm offset expected {:} but was {:}",
                289usize,
                (core::ptr::addr_of!(d.customer_or_firm) as usize) - p,
            );
            assert_eq!(
                290usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_account_when_daily_loss_limit_met) as usize) - p,
                "master_firm_flatten_cancel_account_when_daily_loss_limit_met offset expected {:} but was {:}",
                290usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_account_when_daily_loss_limit_met) as usize) - p,
            );
            assert_eq!(
                291usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_minimum_account_value) as usize) - p,
                "master_firm_flatten_cancel_when_under_minimum_account_value offset expected {:} but was {:}",
                291usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_minimum_account_value) as usize) - p,
            );
            assert_eq!(
                292usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_intraday) as usize) - p,
                "master_firm_flatten_cancel_when_under_margin_intraday offset expected {:} but was {:}",
                292usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_intraday) as usize) - p,
            );
            assert_eq!(
                293usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_end_of_day) as usize) - p,
                "master_firm_flatten_cancel_when_under_margin_end_of_day offset expected {:} but was {:}",
                293usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_end_of_day) as usize) - p,
            );
            assert_eq!(
                294usize,
                (core::ptr::addr_of!(d.master_firm_maximum_order_quantity) as usize) - p,
                "master_firm_maximum_order_quantity offset expected {:} but was {:}",
                294usize,
                (core::ptr::addr_of!(d.master_firm_maximum_order_quantity) as usize) - p,
            );
            assert_eq!(
                298usize,
                (core::ptr::addr_of!(d.last_trigger_date_time_utc_for_daily_loss_limit) as usize)
                    - p,
                "last_trigger_date_time_utc_for_daily_loss_limit offset expected {:} but was {:}",
                298usize,
                (core::ptr::addr_of!(d.last_trigger_date_time_utc_for_daily_loss_limit) as usize)
                    - p,
            );
            assert_eq!(
                306usize,
                (core::ptr::addr_of!(d.open_positions_profit_loss_is_delayed) as usize) - p,
                "open_positions_profit_loss_is_delayed offset expected {:} but was {:}",
                306usize,
                (core::ptr::addr_of!(d.open_positions_profit_loss_is_delayed) as usize) - p,
            );
            assert_eq!(
                307usize,
                (core::ptr::addr_of!(d.exchange_trader_id) as usize) - p,
                "exchange_trader_id offset expected {:} but was {:}",
                307usize,
                (core::ptr::addr_of!(d.exchange_trader_id) as usize) - p,
            );
            assert_eq!(
                311usize,
                (core::ptr::addr_of!(d.profit_loss_for_open_position_date_time_utc) as usize) - p,
                "profit_loss_for_open_position_date_time_utc offset expected {:} but was {:}",
                311usize,
                (core::ptr::addr_of!(d.profit_loss_for_open_position_date_time_utc) as usize) - p,
            );
            assert_eq!(
                319usize,
                (core::ptr::addr_of!(d.use_fixed_cash_on_hand_balance) as usize) - p,
                "use_fixed_cash_on_hand_balance offset expected {:} but was {:}",
                319usize,
                (core::ptr::addr_of!(d.use_fixed_cash_on_hand_balance) as usize) - p,
            );
            assert_eq!(
                320usize,
                (core::ptr::addr_of!(d.fixed_cash_on_hand_balance) as usize) - p,
                "fixed_cash_on_hand_balance offset expected {:} but was {:}",
                320usize,
                (core::ptr::addr_of!(d.fixed_cash_on_hand_balance) as usize) - p,
            );
        }
    }
}
