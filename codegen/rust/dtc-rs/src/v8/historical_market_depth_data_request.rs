// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const HISTORICAL_MARKET_DEPTH_DATA_REQUEST_VLS_SIZE: usize = 48;

pub(crate) const HISTORICAL_MARKET_DEPTH_DATA_REQUEST_FIXED_SIZE: usize = 112;

/// size                   u16                          = HistoricalMarketDepthDataRequestVLSSize  (48)
/// type                   u16                          = HISTORICAL_MARKET_DEPTH_DATA_REQUEST  (900)
/// base_size              u16                          = HistoricalMarketDepthDataRequestVLSSize  (48)
/// request_id             i32                          = 0
/// symbol                 string                       = ""
/// exchange               string                       = ""
/// start_date_time        DateTimeWithMicrosecondsInt  = 0
/// end_date_time          DateTimeWithMicrosecondsInt  = 0
/// use_z_lib_compression  bool                         = false
/// integer1               u8                           = 0
pub(crate) const HISTORICAL_MARKET_DEPTH_DATA_REQUEST_VLS_DEFAULT: [u8; 48] = [
    48, 0, 132, 3, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                   u16                          = HistoricalMarketDepthDataRequestFixedSize  (112)
/// type                   u16                          = HISTORICAL_MARKET_DEPTH_DATA_REQUEST  (900)
/// request_id             i32                          = 0
/// symbol                 string64                     = ""
/// exchange               string16                     = ""
/// start_date_time        DateTimeWithMicrosecondsInt  = 0
/// end_date_time          DateTimeWithMicrosecondsInt  = 0
/// use_z_lib_compression  bool                         = false
/// integer1               u8                           = 0
pub(crate) const HISTORICAL_MARKET_DEPTH_DATA_REQUEST_FIXED_DEFAULT: [u8; 112] = [
    112, 0, 132, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait HistoricalMarketDepthDataRequest: Message {
    type Safe: HistoricalMarketDepthDataRequest;
    type Unsafe: HistoricalMarketDepthDataRequest;

    fn request_id(&self) -> i32;

    fn symbol(&self) -> &str;

    fn exchange(&self) -> &str;

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt;

    fn end_date_time(&self) -> DateTimeWithMicrosecondsInt;

    fn use_z_lib_compression(&self) -> bool;

    fn integer1(&self) -> u8;

    fn set_request_id(&mut self, value: i32) -> &mut Self;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_exchange(&mut self, value: &str) -> &mut Self;

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self;

    fn set_end_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self;

    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self;

    fn set_integer1(&mut self, value: u8) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalMarketDepthDataRequest) {
        to.set_request_id(self.request_id());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_start_date_time(self.start_date_time());
        to.set_end_date_time(self.end_date_time());
        to.set_use_z_lib_compression(self.use_z_lib_compression());
        to.set_integer1(self.integer1());
    }
}

pub struct HistoricalMarketDepthDataRequestVLS {
    data: *const HistoricalMarketDepthDataRequestVLSData,
    capacity: usize,
}

pub struct HistoricalMarketDepthDataRequestVLSUnsafe {
    data: *const HistoricalMarketDepthDataRequestVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct HistoricalMarketDepthDataRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    symbol: VLS,
    exchange: VLS,
    start_date_time: DateTimeWithMicrosecondsInt,
    end_date_time: DateTimeWithMicrosecondsInt,
    use_z_lib_compression: bool,
    integer1: u8,
}

pub struct HistoricalMarketDepthDataRequestFixed {
    data: *const HistoricalMarketDepthDataRequestFixedData,
}

pub struct HistoricalMarketDepthDataRequestFixedUnsafe {
    data: *const HistoricalMarketDepthDataRequestFixedData,
}

#[repr(packed(8), C)]
pub struct HistoricalMarketDepthDataRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    symbol: [u8; 64],
    exchange: [u8; 16],
    start_date_time: DateTimeWithMicrosecondsInt,
    end_date_time: DateTimeWithMicrosecondsInt,
    use_z_lib_compression: bool,
    integer1: u8,
}

impl HistoricalMarketDepthDataRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 48u16.to_le(),
            r#type: HISTORICAL_MARKET_DEPTH_DATA_REQUEST.to_le(),
            base_size: 48u16.to_le(),
            request_id: 0i32,
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            start_date_time: 0i64,
            end_date_time: 0i64,
            use_z_lib_compression: false,
            integer1: 0u8,
        }
    }
}

impl HistoricalMarketDepthDataRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 112u16.to_le(),
            r#type: HISTORICAL_MARKET_DEPTH_DATA_REQUEST.to_le(),
            request_id: 0i32,
            symbol: [0; 64],
            exchange: [0; 16],
            start_date_time: 0i64,
            end_date_time: 0i64,
            use_z_lib_compression: false,
            integer1: 0u8,
        }
    }
}

unsafe impl Send for HistoricalMarketDepthDataRequestFixed {}
unsafe impl Send for HistoricalMarketDepthDataRequestFixedUnsafe {}
unsafe impl Send for HistoricalMarketDepthDataRequestFixedData {}
unsafe impl Send for HistoricalMarketDepthDataRequestVLS {}
unsafe impl Send for HistoricalMarketDepthDataRequestVLSUnsafe {}
unsafe impl Send for HistoricalMarketDepthDataRequestVLSData {}

impl Drop for HistoricalMarketDepthDataRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalMarketDepthDataRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalMarketDepthDataRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalMarketDepthDataRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalMarketDepthDataRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalMarketDepthDataRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalMarketDepthDataRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalMarketDepthDataRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataRequestFixed {
    type Target = HistoricalMarketDepthDataRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataRequestFixedUnsafe {
    type Target = HistoricalMarketDepthDataRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataRequestVLS {
    type Target = HistoricalMarketDepthDataRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataRequestVLSUnsafe {
    type Target = HistoricalMarketDepthDataRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalMarketDepthDataRequestFixed {
    type Data = HistoricalMarketDepthDataRequestFixedData;

    const BASE_SIZE: usize = 112;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalMarketDepthDataRequestFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataRequestFixedData,
        }
    }
}
impl crate::Message for HistoricalMarketDepthDataRequestFixedUnsafe {
    type Data = HistoricalMarketDepthDataRequestFixedData;

    const BASE_SIZE: usize = 112;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalMarketDepthDataRequestFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataRequestFixedData,
        }
    }
}
impl crate::Message for HistoricalMarketDepthDataRequestVLS {
    type Data = HistoricalMarketDepthDataRequestVLSData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalMarketDepthDataRequestVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalMarketDepthDataRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalMarketDepthDataRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for HistoricalMarketDepthDataRequestVLSUnsafe {
    type Data = HistoricalMarketDepthDataRequestVLSData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalMarketDepthDataRequestVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalMarketDepthDataRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalMarketDepthDataRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl HistoricalMarketDepthDataRequest for HistoricalMarketDepthDataRequestVLS {
    type Safe = HistoricalMarketDepthDataRequestVLS;
    type Unsafe = HistoricalMarketDepthDataRequestVLSUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.start_date_time)
    }

    fn end_date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.end_date_time)
    }

    fn use_z_lib_compression(&self) -> bool {
        self.use_z_lib_compression
    }

    fn integer1(&self) -> u8 {
        self.integer1
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.start_date_time = value.to_le();
        self
    }

    fn set_end_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.end_date_time = value.to_le();
        self
    }

    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        self.use_z_lib_compression = value;
        self
    }

    fn set_integer1(&mut self, value: u8) -> &mut Self {
        self.integer1 = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalMarketDepthDataRequest for HistoricalMarketDepthDataRequestVLSUnsafe {
    type Safe = HistoricalMarketDepthDataRequestVLS;
    type Unsafe = HistoricalMarketDepthDataRequestVLSUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(32) {
            0i64
        } else {
            i64::from_le(self.start_date_time)
        }
    }

    fn end_date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(40) {
            0i64
        } else {
            i64::from_le(self.end_date_time)
        }
    }

    fn use_z_lib_compression(&self) -> bool {
        if self.is_out_of_bounds(41) {
            false
        } else {
            self.use_z_lib_compression
        }
    }

    fn integer1(&self) -> u8 {
        if self.is_out_of_bounds(42) {
            0u8
        } else {
            self.integer1
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.start_date_time = value.to_le();
        }
        self
    }

    fn set_end_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.end_date_time = value.to_le();
        }
        self
    }

    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(41) {
            self.use_z_lib_compression = value;
        }
        self
    }

    fn set_integer1(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(42) {
            self.integer1 = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl HistoricalMarketDepthDataRequest for HistoricalMarketDepthDataRequestFixed {
    type Safe = HistoricalMarketDepthDataRequestFixed;
    type Unsafe = HistoricalMarketDepthDataRequestFixedUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.start_date_time)
    }

    fn end_date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.end_date_time)
    }

    fn use_z_lib_compression(&self) -> bool {
        self.use_z_lib_compression
    }

    fn integer1(&self) -> u8 {
        self.integer1
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.start_date_time = value.to_le();
        self
    }

    fn set_end_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.end_date_time = value.to_le();
        self
    }

    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        self.use_z_lib_compression = value;
        self
    }

    fn set_integer1(&mut self, value: u8) -> &mut Self {
        self.integer1 = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalMarketDepthDataRequest for HistoricalMarketDepthDataRequestFixedUnsafe {
    type Safe = HistoricalMarketDepthDataRequestFixed;
    type Unsafe = HistoricalMarketDepthDataRequestFixedUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(72) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(88) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(96) {
            0i64
        } else {
            i64::from_le(self.start_date_time)
        }
    }

    fn end_date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(104) {
            0i64
        } else {
            i64::from_le(self.end_date_time)
        }
    }

    fn use_z_lib_compression(&self) -> bool {
        if self.is_out_of_bounds(105) {
            false
        } else {
            self.use_z_lib_compression
        }
    }

    fn integer1(&self) -> u8 {
        if self.is_out_of_bounds(106) {
            0u8
        } else {
            self.integer1
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.start_date_time = value.to_le();
        }
        self
    }

    fn set_end_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.end_date_time = value.to_le();
        }
        self
    }

    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(105) {
            self.use_z_lib_compression = value;
        }
        self
    }

    fn set_integer1(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(106) {
            self.integer1 = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                112usize,
                core::mem::size_of::<HistoricalMarketDepthDataRequestFixedData>(),
                "HistoricalMarketDepthDataRequestFixedData sizeof expected {:} but was {:}",
                112usize,
                core::mem::size_of::<HistoricalMarketDepthDataRequestFixedData>()
            );
            assert_eq!(
                112u16,
                HistoricalMarketDepthDataRequestFixed::new().size(),
                "HistoricalMarketDepthDataRequestFixed sizeof expected {:} but was {:}",
                112u16,
                HistoricalMarketDepthDataRequestFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_MARKET_DEPTH_DATA_REQUEST,
                HistoricalMarketDepthDataRequestFixed::new().r#type(),
                "HistoricalMarketDepthDataRequestFixed type expected {:} but was {:}",
                HISTORICAL_MARKET_DEPTH_DATA_REQUEST,
                HistoricalMarketDepthDataRequestFixed::new().r#type(),
            );
            assert_eq!(
                900u16,
                HistoricalMarketDepthDataRequestFixed::new().r#type(),
                "HistoricalMarketDepthDataRequestFixed type expected {:} but was {:}",
                900u16,
                HistoricalMarketDepthDataRequestFixed::new().r#type(),
            );
            let d = HistoricalMarketDepthDataRequestFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
                "start_date_time offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
                "end_date_time offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
                "use_z_lib_compression offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
            );
            assert_eq!(
                105usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
                "integer1 offset expected {:} but was {:}",
                105usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                48usize,
                core::mem::size_of::<HistoricalMarketDepthDataRequestVLSData>(),
                "HistoricalMarketDepthDataRequestVLSData sizeof expected {:} but was {:}",
                48usize,
                core::mem::size_of::<HistoricalMarketDepthDataRequestVLSData>()
            );
            assert_eq!(
                48u16,
                HistoricalMarketDepthDataRequestVLS::new().size(),
                "HistoricalMarketDepthDataRequestVLS sizeof expected {:} but was {:}",
                48u16,
                HistoricalMarketDepthDataRequestVLS::new().size(),
            );
            assert_eq!(
                HISTORICAL_MARKET_DEPTH_DATA_REQUEST,
                HistoricalMarketDepthDataRequestVLS::new().r#type(),
                "HistoricalMarketDepthDataRequestVLS type expected {:} but was {:}",
                HISTORICAL_MARKET_DEPTH_DATA_REQUEST,
                HistoricalMarketDepthDataRequestVLS::new().r#type(),
            );
            assert_eq!(
                900u16,
                HistoricalMarketDepthDataRequestVLS::new().r#type(),
                "HistoricalMarketDepthDataRequestVLS type expected {:} but was {:}",
                900u16,
                HistoricalMarketDepthDataRequestVLS::new().r#type(),
            );
            let d = HistoricalMarketDepthDataRequestVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
                "start_date_time offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
                "end_date_time offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
                "use_z_lib_compression offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
            );
            assert_eq!(
                41usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
                "integer1 offset expected {:} but was {:}",
                41usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
            );
        }
    }
}
