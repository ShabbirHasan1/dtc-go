// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-24 10:12:33.526761 +0800 WITA m=+0.004576126
use super::*;
use crate::message::*;

const EXCHANGE_LIST_RESPONSE_VLS_SIZE: usize = 24;

const EXCHANGE_LIST_RESPONSE_FIXED_SIZE: usize = 76;

/// size              u16     = ExchangeListResponseVLSSize  (24)
/// type              u16     = EXCHANGE_LIST_RESPONSE  (501)
/// base_size         u16     = ExchangeListResponseVLSSize  (24)
/// request_id        i32     = 0
/// exchange          string  = ""
/// is_final_message  bool    = false
/// description       string  = ""
const EXCHANGE_LIST_RESPONSE_VLS_DEFAULT: [u8; 24] = [24, 0, 245, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size              u16       = ExchangeListResponseFixedSize  (76)
/// type              u16       = EXCHANGE_LIST_RESPONSE  (501)
/// request_id        i32       = 0
/// exchange          string16  = ""
/// is_final_message  bool      = false
/// description       string48  = ""
const EXCHANGE_LIST_RESPONSE_FIXED_DEFAULT: [u8; 76] = [76, 0, 245, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// The server will return this message for each supported exchange.
///
/// If there are no exchanges to return in response to a request, send through
/// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
/// all other members in the default state and the Client will recognize there
/// are no Exchanges.
pub trait ExchangeListResponse {
    /// The RequestID sent in the request by the Client.
    fn request_id(&self) -> i32;

    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn exchange(&self) -> &str;

    /// 1 = final message in batch.
    fn is_final_message(&self) -> bool;

    /// The complete exchange description.
    fn description(&self) -> &str;

    /// The RequestID sent in the request by the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// 1 = final message in batch.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self;

    /// The complete exchange description.
    fn set_description(&mut self, value: &str) -> &mut Self;

    fn copy_to(&self, to: &mut impl ExchangeListResponse) {
        to.set_request_id(self.request_id());
        to.set_exchange(self.exchange());
        to.set_is_final_message(self.is_final_message());
        to.set_description(self.description());
    }
}

/// The server will return this message for each supported exchange.
///
/// If there are no exchanges to return in response to a request, send through
/// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
/// all other members in the default state and the Client will recognize there
/// are no Exchanges.
pub struct ExchangeListResponseVLS {
    data: *const ExchangeListResponseVLSData,
    capacity: usize
}

pub struct ExchangeListResponseVLSUnsafe {
    data: *const ExchangeListResponseVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct ExchangeListResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    exchange: VLS,
    is_final_message: bool,
    description: VLS,
}

/// The server will return this message for each supported exchange.
///
/// If there are no exchanges to return in response to a request, send through
/// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
/// all other members in the default state and the Client will recognize there
/// are no Exchanges.
pub struct ExchangeListResponseFixed {
    data: *const ExchangeListResponseFixedData
}

pub struct ExchangeListResponseFixedUnsafe {
    data: *const ExchangeListResponseFixedData
}

#[repr(packed, C)]
pub struct ExchangeListResponseFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    exchange: [u8; 16],
    is_final_message: bool,
    description: [u8; 48],
}

impl ExchangeListResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 24u16.to_le(),
            r#type: EXCHANGE_LIST_RESPONSE.to_le(),
            base_size: 24u16.to_le(),
            request_id: 0i32,
            exchange: crate::message::VLS::new(),
            is_final_message: false,
            description: crate::message::VLS::new(),
        }
    }
}

impl ExchangeListResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 76u16.to_le(),
            r#type: EXCHANGE_LIST_RESPONSE.to_le(),
            request_id: 0i32,
            exchange: [0; 16],
            is_final_message: false,
            description: [0; 48],
        }
    }
}

unsafe impl Send for ExchangeListResponseFixed {}
unsafe impl Send for ExchangeListResponseFixedUnsafe {}
unsafe impl Send for ExchangeListResponseFixedData {}
unsafe impl Send for ExchangeListResponseVLS {}
unsafe impl Send for ExchangeListResponseVLSUnsafe {}
unsafe impl Send for ExchangeListResponseVLSData {}

impl Drop for ExchangeListResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ExchangeListResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ExchangeListResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ExchangeListResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for ExchangeListResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ExchangeListResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ExchangeListResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ExchangeListResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for ExchangeListResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ExchangeListResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ExchangeListResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ExchangeListResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for ExchangeListResponseFixed {
    type Target = ExchangeListResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ExchangeListResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ExchangeListResponseFixedUnsafe {
    type Target = ExchangeListResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ExchangeListResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ExchangeListResponseVLS {
    type Target = ExchangeListResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ExchangeListResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ExchangeListResponseVLSUnsafe {
    type Target = ExchangeListResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ExchangeListResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for ExchangeListResponseFixed {
    type Safe = ExchangeListResponseFixed;
    type Unsafe = ExchangeListResponseFixedUnsafe;
    type Data = ExchangeListResponseFixedData;
    const BASE_SIZE: usize = 76;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ExchangeListResponseFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const ExchangeListResponseFixedData
        }
    }

}

impl crate::Message for ExchangeListResponseFixedUnsafe {
    type Safe = ExchangeListResponseFixed;
    type Unsafe = ExchangeListResponseFixedUnsafe;
    type Data = ExchangeListResponseFixedData;
    const BASE_SIZE: usize = 76;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ExchangeListResponseFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const ExchangeListResponseFixedData
        }
    }

}

impl crate::Message for ExchangeListResponseVLS {
    type Safe = ExchangeListResponseVLS;
    type Unsafe = ExchangeListResponseVLSUnsafe;
    type Data = ExchangeListResponseVLSData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ExchangeListResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const ExchangeListResponseVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for ExchangeListResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const ExchangeListResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for ExchangeListResponseVLSUnsafe {
    type Safe = ExchangeListResponseVLS;
    type Unsafe = ExchangeListResponseVLSUnsafe;
    type Data = ExchangeListResponseVLSData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ExchangeListResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const ExchangeListResponseVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for ExchangeListResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const ExchangeListResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// The server will return this message for each supported exchange.
///
/// If there are no exchanges to return in response to a request, send through
/// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
/// all other members in the default state and the Client will recognize there
/// are no Exchanges.
impl ExchangeListResponse for ExchangeListResponseVLS {
    /// The RequestID sent in the request by the Client.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn exchange(&self) -> &str {
        crate::get_vls(self, self.exchange)
    }

    /// 1 = final message in batch.
    fn is_final_message(&self) -> bool {
        self.is_final_message
    }

    /// The complete exchange description.
    fn description(&self) -> &str {
        crate::get_vls(self, self.description)
    }

    /// The RequestID sent in the request by the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = crate::set_vls(self, self.exchange, value);
        self
    }


    /// 1 = final message in batch.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        self.is_final_message = value;
        self
    }


    /// The complete exchange description.
    fn set_description(&mut self, value: &str) -> &mut Self {
        self.description = crate::set_vls(self, self.description, value);
        self
    }

}

/// The server will return this message for each supported exchange.
///
/// If there are no exchanges to return in response to a request, send through
/// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
/// all other members in the default state and the Client will recognize there
/// are no Exchanges.
impl ExchangeListResponse for ExchangeListResponseVLSUnsafe {
    /// The RequestID sent in the request by the Client.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            crate::get_vls(self, self.exchange)
        }
    }

    /// 1 = final message in batch.
    fn is_final_message(&self) -> bool {
        if self.is_out_of_bounds(17) {
            false
        } else {
            self.is_final_message
        }
    }

    /// The complete exchange description.
    fn description(&self) -> &str {
        if self.is_out_of_bounds(22) {
            ""
        } else {
            crate::get_vls(self, self.description)
        }
    }

    /// The RequestID sent in the request by the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }


    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.exchange = crate::set_vls(self, self.exchange, value);
        }
        self
    }


    /// 1 = final message in batch.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(17) {
            self.is_final_message = value;
        }
        self
    }


    /// The complete exchange description.
    fn set_description(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(22) {
            self.description = crate::set_vls(self, self.description, value);
        }
        self
    }

}

/// The server will return this message for each supported exchange.
///
/// If there are no exchanges to return in response to a request, send through
/// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
/// all other members in the default state and the Client will recognize there
/// are no Exchanges.
impl ExchangeListResponse for ExchangeListResponseFixed {
    /// The RequestID sent in the request by the Client.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn exchange(&self) -> &str {
        crate::get_fixed(&self.exchange[..])
    }

    /// 1 = final message in batch.
    fn is_final_message(&self) -> bool {
        self.is_final_message
    }

    /// The complete exchange description.
    fn description(&self) -> &str {
        crate::get_fixed(&self.description[..])
    }

    /// The RequestID sent in the request by the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.exchange[..], value);
        self
    }


    /// 1 = final message in batch.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        self.is_final_message = value;
        self
    }


    /// The complete exchange description.
    fn set_description(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.description[..], value);
        self
    }

}

/// The server will return this message for each supported exchange.
///
/// If there are no exchanges to return in response to a request, send through
/// one of these messages with the RequestID set and IsFinalMessage = 1. Leave
/// all other members in the default state and the Client will recognize there
/// are no Exchanges.
impl ExchangeListResponse for ExchangeListResponseFixedUnsafe {
    /// The RequestID sent in the request by the Client.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            crate::get_fixed(&self.exchange[..])
        }
    }

    /// 1 = final message in batch.
    fn is_final_message(&self) -> bool {
        if self.is_out_of_bounds(25) {
            false
        } else {
            self.is_final_message
        }
    }

    /// The complete exchange description.
    fn description(&self) -> &str {
        if self.is_out_of_bounds(73) {
            ""
        } else {
            crate::get_fixed(&self.description[..])
        }
    }

    /// The RequestID sent in the request by the Client.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// The exchange identifier that the Server uses to identify a particular
    /// exchange.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            crate::set_fixed(&mut self.exchange[..], value);
        }
        self
    }


    /// 1 = final message in batch.
    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(25) {
            self.is_final_message = value;
        }
        self
    }


    /// The complete exchange description.
    fn set_description(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(73) {
            crate::set_fixed(&mut self.description[..], value);
        }
        self
    }

}

