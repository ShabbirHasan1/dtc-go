// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const SUBMIT_NEW_OCO_ORDER_VLS_SIZE: usize = 176;

pub(crate) const SUBMIT_NEW_OCO_ORDER_FIXED_SIZE: usize = 448;

/// size                                 u16                      = SubmitNewOCOOrderVLSSize  (176)
/// type                                 u16                      = SUBMIT_NEW_OCO_ORDER  (201)
/// base_size                            u16                      = SubmitNewOCOOrderVLSSize  (176)
/// symbol                               string                   = ""
/// exchange                             string                   = ""
/// client_order_i_d1                    string                   = ""
/// order_type1                          OrderTypeEnum            = ORDER_TYPE_UNSET  (0)
/// buy_sell1                            BuySellEnum              = BUY_SELL_UNSET  (0)
/// price11                              f64                      = 0
/// price21                              f64                      = 0
/// quantity1                            f64                      = 0
/// client_order_i_d2                    string                   = ""
/// order_type2                          OrderTypeEnum            = ORDER_TYPE_UNSET  (0)
/// buy_sell2                            BuySellEnum              = BUY_SELL_UNSET  (0)
/// price12                              f64                      = 0
/// price22                              f64                      = 0
/// quantity2                            f64                      = 0
/// time_in_force                        TimeInForceEnum          = TIF_UNSET  (0)
/// good_till_date_time                  DateTime                 = 0
/// trade_account                        string                   = ""
/// is_automated_order                   bool                     = false
/// parent_trigger_client_order_id       string                   = ""
/// free_form_text                       string                   = ""
/// open_or_close                        OpenCloseTradeEnum       = TRADE_UNSET  (0)
/// partial_fill_handling                PartialFillHandlingEnum  = PARTIAL_FILL_UNSET  (0)
/// use_offsets                          bool                     = false
/// offset_from_parent1                  f64                      = 0
/// offset_from_parent2                  f64                      = 0
/// maintain_same_prices_on_parent_fill  u8                       = 0
/// price11_as_string                    string                   = ""
/// price21_as_string                    string                   = ""
/// price12_as_string                    string                   = ""
/// price22_as_string                    string                   = ""
pub(crate) const SUBMIT_NEW_OCO_ORDER_VLS_DEFAULT: [u8; 176] = [
    176, 0, 201, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                                 u16                      = SubmitNewOCOOrderFixedSize  (448)
/// type                                 u16                      = SUBMIT_NEW_OCO_ORDER  (201)
/// symbol                               string64                 = ""
/// exchange                             string16                 = ""
/// client_order_i_d1                    string32                 = ""
/// order_type1                          OrderTypeEnum            = ORDER_TYPE_UNSET  (0)
/// buy_sell1                            BuySellEnum              = BUY_SELL_UNSET  (0)
/// price11                              f64                      = 0
/// price21                              f64                      = 0
/// quantity1                            f64                      = 0
/// client_order_i_d2                    string32                 = ""
/// order_type2                          OrderTypeEnum            = ORDER_TYPE_UNSET  (0)
/// buy_sell2                            BuySellEnum              = BUY_SELL_UNSET  (0)
/// price12                              f64                      = 0
/// price22                              f64                      = 0
/// quantity2                            f64                      = 0
/// time_in_force                        TimeInForceEnum          = TIF_UNSET  (0)
/// good_till_date_time                  DateTime                 = 0
/// trade_account                        string32                 = ""
/// is_automated_order                   bool                     = false
/// parent_trigger_client_order_id       string32                 = ""
/// free_form_text                       string48                 = ""
/// open_or_close                        OpenCloseTradeEnum       = TRADE_UNSET  (0)
/// partial_fill_handling                PartialFillHandlingEnum  = PARTIAL_FILL_UNSET  (0)
/// use_offsets                          bool                     = false
/// offset_from_parent1                  f64                      = 0
/// offset_from_parent2                  f64                      = 0
/// maintain_same_prices_on_parent_fill  u8                       = 0
/// price11_as_string                    string16                 = ""
/// price21_as_string                    string16                 = ""
/// price12_as_string                    string16                 = ""
/// price22_as_string                    string16                 = ""
pub(crate) const SUBMIT_NEW_OCO_ORDER_FIXED_DEFAULT: [u8; 448] = [
    192, 1, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
];

/// This is a message from the Client to the Server for submitting an order
/// cancels order (OCO) pair into the market. What this means is when one
/// of the orders is filled or canceled, the other order will be canceled.
/// If one order partially fills, the other order will be reduced in quantity
/// by the fill amount of the order that partially filled.
///
/// A service provider must implement OCO orders on the server so that they
/// can independently be modified (Cancel/Replace) and canceled independently
/// using each order's distinct ServerOrderID. Although, if one of the orders
/// is canceled by the Client, the other order will be canceled as well unless
/// they have a parent order, as specified through the ParentTriggerClientOrderID
/// field, in which case the other order should remain open.
///
/// If the OCO order pair is rejected, this must be communicated through two
/// separate OrderUpdateVLS messages, 1 for each order, with the OrderUpdateReason
/// set to NEW_ORDER_REJECTED.
pub trait SubmitNewOCOOrder: Message {
    type Safe: SubmitNewOCOOrder;
    type Unsafe: SubmitNewOCOOrder;

    /// The symbol for the order.
    fn symbol(&self) -> &str;

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str;

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn client_order_i_d1(&self) -> &str;

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type1(&self) -> OrderTypeEnum;

    /// The side for the first order. Either Buy or Sell.
    fn buy_sell1(&self) -> BuySellEnum;

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price11(&self) -> f64;

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn price21(&self) -> f64;

    /// The quantity for the first order.
    fn quantity1(&self) -> f64;

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn client_order_i_d2(&self) -> &str;

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type2(&self) -> OrderTypeEnum;

    /// The side for the second order. Either Buy or Sell.
    fn buy_sell2(&self) -> BuySellEnum;

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price12(&self) -> f64;

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn price22(&self) -> f64;

    /// The quantity for the second order.
    fn quantity2(&self) -> f64;

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn time_in_force(&self) -> TimeInForceEnum;

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn good_till_date_time(&self) -> DateTime;

    /// This is the trade account as a text string that the orders belong to.
    fn trade_account(&self) -> &str;

    /// Set to 1 for an order submitted by an automated trading system.
    fn is_automated_order(&self) -> bool;

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn parent_trigger_client_order_id(&self) -> &str;

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn free_form_text(&self) -> &str;

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn open_or_close(&self) -> OpenCloseTradeEnum;

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn partial_fill_handling(&self) -> PartialFillHandlingEnum;

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn use_offsets(&self) -> bool;

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent1(&self) -> f64;

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent2(&self) -> f64;

    fn maintain_same_prices_on_parent_fill(&self) -> u8;

    fn price11_as_string(&self) -> &str;

    fn price21_as_string(&self) -> &str;

    fn price12_as_string(&self) -> &str;

    fn price22_as_string(&self) -> &str;

    /// The symbol for the order.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn set_client_order_i_d1(&mut self, value: &str) -> &mut Self;

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type1(&mut self, value: OrderTypeEnum) -> &mut Self;

    /// The side for the first order. Either Buy or Sell.
    fn set_buy_sell1(&mut self, value: BuySellEnum) -> &mut Self;

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price11(&mut self, value: f64) -> &mut Self;

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn set_price21(&mut self, value: f64) -> &mut Self;

    /// The quantity for the first order.
    fn set_quantity1(&mut self, value: f64) -> &mut Self;

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn set_client_order_i_d2(&mut self, value: &str) -> &mut Self;

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type2(&mut self, value: OrderTypeEnum) -> &mut Self;

    /// The side for the second order. Either Buy or Sell.
    fn set_buy_sell2(&mut self, value: BuySellEnum) -> &mut Self;

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price12(&mut self, value: f64) -> &mut Self;

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn set_price22(&mut self, value: f64) -> &mut Self;

    /// The quantity for the second order.
    fn set_quantity2(&mut self, value: f64) -> &mut Self;

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self;

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self;

    /// This is the trade account as a text string that the orders belong to.
    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    /// Set to 1 for an order submitted by an automated trading system.
    fn set_is_automated_order(&mut self, value: bool) -> &mut Self;

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn set_parent_trigger_client_order_id(&mut self, value: &str) -> &mut Self;

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn set_free_form_text(&mut self, value: &str) -> &mut Self;

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn set_open_or_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self;

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn set_partial_fill_handling(&mut self, value: PartialFillHandlingEnum) -> &mut Self;

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn set_use_offsets(&mut self, value: bool) -> &mut Self;

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent1(&mut self, value: f64) -> &mut Self;

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent2(&mut self, value: f64) -> &mut Self;

    fn set_maintain_same_prices_on_parent_fill(&mut self, value: u8) -> &mut Self;

    fn set_price11_as_string(&mut self, value: &str) -> &mut Self;

    fn set_price21_as_string(&mut self, value: &str) -> &mut Self;

    fn set_price12_as_string(&mut self, value: &str) -> &mut Self;

    fn set_price22_as_string(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl SubmitNewOCOOrder) {
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_client_order_i_d1(self.client_order_i_d1());
        to.set_order_type1(self.order_type1());
        to.set_buy_sell1(self.buy_sell1());
        to.set_price11(self.price11());
        to.set_price21(self.price21());
        to.set_quantity1(self.quantity1());
        to.set_client_order_i_d2(self.client_order_i_d2());
        to.set_order_type2(self.order_type2());
        to.set_buy_sell2(self.buy_sell2());
        to.set_price12(self.price12());
        to.set_price22(self.price22());
        to.set_quantity2(self.quantity2());
        to.set_time_in_force(self.time_in_force());
        to.set_good_till_date_time(self.good_till_date_time());
        to.set_trade_account(self.trade_account());
        to.set_is_automated_order(self.is_automated_order());
        to.set_parent_trigger_client_order_id(self.parent_trigger_client_order_id());
        to.set_free_form_text(self.free_form_text());
        to.set_open_or_close(self.open_or_close());
        to.set_partial_fill_handling(self.partial_fill_handling());
        to.set_use_offsets(self.use_offsets());
        to.set_offset_from_parent1(self.offset_from_parent1());
        to.set_offset_from_parent2(self.offset_from_parent2());
        to.set_maintain_same_prices_on_parent_fill(self.maintain_same_prices_on_parent_fill());
        to.set_price11_as_string(self.price11_as_string());
        to.set_price21_as_string(self.price21_as_string());
        to.set_price12_as_string(self.price12_as_string());
        to.set_price22_as_string(self.price22_as_string());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

/// This is a message from the Client to the Server for submitting an order
/// cancels order (OCO) pair into the market. What this means is when one
/// of the orders is filled or canceled, the other order will be canceled.
/// If one order partially fills, the other order will be reduced in quantity
/// by the fill amount of the order that partially filled.
///
/// A service provider must implement OCO orders on the server so that they
/// can independently be modified (Cancel/Replace) and canceled independently
/// using each order's distinct ServerOrderID. Although, if one of the orders
/// is canceled by the Client, the other order will be canceled as well unless
/// they have a parent order, as specified through the ParentTriggerClientOrderID
/// field, in which case the other order should remain open.
///
/// If the OCO order pair is rejected, this must be communicated through two
/// separate OrderUpdateVLS messages, 1 for each order, with the OrderUpdateReason
/// set to NEW_ORDER_REJECTED.
pub struct SubmitNewOCOOrderVLS {
    data: *const SubmitNewOCOOrderVLSData,
    capacity: usize,
}

pub struct SubmitNewOCOOrderVLSUnsafe {
    data: *const SubmitNewOCOOrderVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct SubmitNewOCOOrderVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    symbol: VLS,
    exchange: VLS,
    client_order_i_d1: VLS,
    order_type1: OrderTypeEnum,
    buy_sell1: BuySellEnum,
    price11: f64,
    price21: f64,
    quantity1: f64,
    client_order_i_d2: VLS,
    order_type2: OrderTypeEnum,
    buy_sell2: BuySellEnum,
    price12: f64,
    price22: f64,
    quantity2: f64,
    time_in_force: TimeInForceEnum,
    good_till_date_time: DateTime,
    trade_account: VLS,
    is_automated_order: bool,
    parent_trigger_client_order_id: VLS,
    free_form_text: VLS,
    open_or_close: OpenCloseTradeEnum,
    partial_fill_handling: PartialFillHandlingEnum,
    use_offsets: bool,
    offset_from_parent1: f64,
    offset_from_parent2: f64,
    maintain_same_prices_on_parent_fill: u8,
    price11_as_string: VLS,
    price21_as_string: VLS,
    price12_as_string: VLS,
    price22_as_string: VLS,
}

/// This is a message from the Client to the Server for submitting an order
/// cancels order (OCO) pair into the market. What this means is when one
/// of the orders is filled or canceled, the other order will be canceled.
/// If one order partially fills, the other order will be reduced in quantity
/// by the fill amount of the order that partially filled.
///
/// A service provider must implement OCO orders on the server so that they
/// can independently be modified (Cancel/Replace) and canceled independently
/// using each order's distinct ServerOrderID. Although, if one of the orders
/// is canceled by the Client, the other order will be canceled as well unless
/// they have a parent order, as specified through the ParentTriggerClientOrderID
/// field, in which case the other order should remain open.
///
/// If the OCO order pair is rejected, this must be communicated through two
/// separate OrderUpdateVLS messages, 1 for each order, with the OrderUpdateReason
/// set to NEW_ORDER_REJECTED.
pub struct SubmitNewOCOOrderFixed {
    data: *const SubmitNewOCOOrderFixedData,
}

pub struct SubmitNewOCOOrderFixedUnsafe {
    data: *const SubmitNewOCOOrderFixedData,
}

#[repr(packed(8), C)]
pub struct SubmitNewOCOOrderFixedData {
    size: u16,
    r#type: u16,
    symbol: [u8; 64],
    exchange: [u8; 16],
    client_order_i_d1: [u8; 32],
    order_type1: OrderTypeEnum,
    buy_sell1: BuySellEnum,
    price11: f64,
    price21: f64,
    quantity1: f64,
    client_order_i_d2: [u8; 32],
    order_type2: OrderTypeEnum,
    buy_sell2: BuySellEnum,
    price12: f64,
    price22: f64,
    quantity2: f64,
    time_in_force: TimeInForceEnum,
    good_till_date_time: DateTime,
    trade_account: [u8; 32],
    is_automated_order: bool,
    parent_trigger_client_order_id: [u8; 32],
    free_form_text: [u8; 48],
    open_or_close: OpenCloseTradeEnum,
    partial_fill_handling: PartialFillHandlingEnum,
    use_offsets: bool,
    offset_from_parent1: f64,
    offset_from_parent2: f64,
    maintain_same_prices_on_parent_fill: u8,
    price11_as_string: [u8; 16],
    price21_as_string: [u8; 16],
    price12_as_string: [u8; 16],
    price22_as_string: [u8; 16],
}

impl SubmitNewOCOOrderVLSData {
    pub fn new() -> Self {
        Self {
            size: 176u16.to_le(),
            r#type: SUBMIT_NEW_OCO_ORDER.to_le(),
            base_size: 176u16.to_le(),
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            client_order_i_d1: crate::message::VLS::new(),
            order_type1: OrderTypeEnum::OrderTypeUnset.to_le(),
            buy_sell1: BuySellEnum::BuySellUnset.to_le(),
            price11: 0.0,
            price21: 0.0,
            quantity1: 0.0,
            client_order_i_d2: crate::message::VLS::new(),
            order_type2: OrderTypeEnum::OrderTypeUnset.to_le(),
            buy_sell2: BuySellEnum::BuySellUnset.to_le(),
            price12: 0.0,
            price22: 0.0,
            quantity2: 0.0,
            time_in_force: TimeInForceEnum::TifUnset.to_le(),
            good_till_date_time: 0i64.to_le(),
            trade_account: crate::message::VLS::new(),
            is_automated_order: false,
            parent_trigger_client_order_id: crate::message::VLS::new(),
            free_form_text: crate::message::VLS::new(),
            open_or_close: OpenCloseTradeEnum::TradeUnset.to_le(),
            partial_fill_handling: PartialFillHandlingEnum::PartialFillUnset.to_le(),
            use_offsets: false,
            offset_from_parent1: 0.0,
            offset_from_parent2: 0.0,
            maintain_same_prices_on_parent_fill: 0,
            price11_as_string: crate::message::VLS::new(),
            price21_as_string: crate::message::VLS::new(),
            price12_as_string: crate::message::VLS::new(),
            price22_as_string: crate::message::VLS::new(),
        }
    }
}

impl SubmitNewOCOOrderFixedData {
    pub fn new() -> Self {
        Self {
            size: 448u16.to_le(),
            r#type: SUBMIT_NEW_OCO_ORDER.to_le(),
            symbol: [0; 64],
            exchange: [0; 16],
            client_order_i_d1: [0; 32],
            order_type1: OrderTypeEnum::OrderTypeUnset.to_le(),
            buy_sell1: BuySellEnum::BuySellUnset.to_le(),
            price11: 0.0f64,
            price21: 0.0f64,
            quantity1: 0.0f64,
            client_order_i_d2: [0; 32],
            order_type2: OrderTypeEnum::OrderTypeUnset.to_le(),
            buy_sell2: BuySellEnum::BuySellUnset.to_le(),
            price12: 0.0f64,
            price22: 0.0f64,
            quantity2: 0.0f64,
            time_in_force: TimeInForceEnum::TifUnset.to_le(),
            good_till_date_time: 0i64,
            trade_account: [0; 32],
            is_automated_order: false,
            parent_trigger_client_order_id: [0; 32],
            free_form_text: [0; 48],
            open_or_close: OpenCloseTradeEnum::TradeUnset.to_le(),
            partial_fill_handling: PartialFillHandlingEnum::PartialFillUnset.to_le(),
            use_offsets: false,
            offset_from_parent1: 0.0f64,
            offset_from_parent2: 0.0f64,
            maintain_same_prices_on_parent_fill: 0,
            price11_as_string: [0; 16],
            price21_as_string: [0; 16],
            price12_as_string: [0; 16],
            price22_as_string: [0; 16],
        }
    }
}

unsafe impl Send for SubmitNewOCOOrderFixed {}
unsafe impl Send for SubmitNewOCOOrderFixedUnsafe {}
unsafe impl Send for SubmitNewOCOOrderFixedData {}
unsafe impl Send for SubmitNewOCOOrderVLS {}
unsafe impl Send for SubmitNewOCOOrderVLSUnsafe {}
unsafe impl Send for SubmitNewOCOOrderVLSData {}

impl Drop for SubmitNewOCOOrderFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SubmitNewOCOOrderFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SubmitNewOCOOrderVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SubmitNewOCOOrderVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for SubmitNewOCOOrderFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SubmitNewOCOOrderFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SubmitNewOCOOrderVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SubmitNewOCOOrderVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for SubmitNewOCOOrderFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SubmitNewOCOOrderFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SubmitNewOCOOrderVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SubmitNewOCOOrderVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for SubmitNewOCOOrderFixed {
    type Target = SubmitNewOCOOrderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SubmitNewOCOOrderFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SubmitNewOCOOrderFixedUnsafe {
    type Target = SubmitNewOCOOrderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SubmitNewOCOOrderFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SubmitNewOCOOrderVLS {
    type Target = SubmitNewOCOOrderVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SubmitNewOCOOrderVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SubmitNewOCOOrderVLSUnsafe {
    type Target = SubmitNewOCOOrderVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SubmitNewOCOOrderVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for SubmitNewOCOOrderFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderFixed(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl core::fmt::Debug for SubmitNewOCOOrderFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderFixed(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl core::fmt::Display for SubmitNewOCOOrderFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderFixedUnsafe(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl core::fmt::Debug for SubmitNewOCOOrderFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderFixedUnsafe(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl core::fmt::Display for SubmitNewOCOOrderVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderVLS(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl core::fmt::Debug for SubmitNewOCOOrderVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderVLS(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl core::fmt::Display for SubmitNewOCOOrderVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderVLSUnsafe(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl core::fmt::Debug for SubmitNewOCOOrderVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("SubmitNewOCOOrderVLSUnsafe(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", client_order_i_d1: \"{}\", order_type1: {}, buy_sell1: {}, price11: {}, price21: {}, quantity1: {}, client_order_i_d2: \"{}\", order_type2: {}, buy_sell2: {}, price12: {}, price22: {}, quantity2: {}, time_in_force: {}, good_till_date_time: {}, trade_account: \"{}\", is_automated_order: {}, parent_trigger_client_order_id: \"{}\", free_form_text: \"{}\", open_or_close: {}, partial_fill_handling: {}, use_offsets: {}, offset_from_parent1: {}, offset_from_parent2: {}, maintain_same_prices_on_parent_fill: {}, price11_as_string: \"{}\", price21_as_string: \"{}\", price12_as_string: \"{}\", price22_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.client_order_i_d1(), self.order_type1(), self.buy_sell1(), self.price11(), self.price21(), self.quantity1(), self.client_order_i_d2(), self.order_type2(), self.buy_sell2(), self.price12(), self.price22(), self.quantity2(), self.time_in_force(), self.good_till_date_time(), self.trade_account(), self.is_automated_order(), self.parent_trigger_client_order_id(), self.free_form_text(), self.open_or_close(), self.partial_fill_handling(), self.use_offsets(), self.offset_from_parent1(), self.offset_from_parent2(), self.maintain_same_prices_on_parent_fill(), self.price11_as_string(), self.price21_as_string(), self.price12_as_string(), self.price22_as_string()).as_str())
    }
}

impl crate::Message for SubmitNewOCOOrderFixed {
    type Data = SubmitNewOCOOrderFixedData;

    const TYPE: u16 = SUBMIT_NEW_OCO_ORDER;
    const BASE_SIZE: usize = 448;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SubmitNewOCOOrderFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SubmitNewOCOOrderFixedData,
        }
    }
}
impl crate::Message for SubmitNewOCOOrderFixedUnsafe {
    type Data = SubmitNewOCOOrderFixedData;

    const TYPE: u16 = SUBMIT_NEW_OCO_ORDER;
    const BASE_SIZE: usize = 448;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SubmitNewOCOOrderFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SubmitNewOCOOrderFixedData,
        }
    }
}
impl crate::Message for SubmitNewOCOOrderVLS {
    type Data = SubmitNewOCOOrderVLSData;

    const TYPE: u16 = SUBMIT_NEW_OCO_ORDER;
    const BASE_SIZE: usize = 176;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SubmitNewOCOOrderVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SubmitNewOCOOrderVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SubmitNewOCOOrderVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SubmitNewOCOOrderVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for SubmitNewOCOOrderVLSUnsafe {
    type Data = SubmitNewOCOOrderVLSData;

    const TYPE: u16 = SUBMIT_NEW_OCO_ORDER;
    const BASE_SIZE: usize = 176;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SubmitNewOCOOrderVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SubmitNewOCOOrderVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SubmitNewOCOOrderVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SubmitNewOCOOrderVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This is a message from the Client to the Server for submitting an order
/// cancels order (OCO) pair into the market. What this means is when one
/// of the orders is filled or canceled, the other order will be canceled.
/// If one order partially fills, the other order will be reduced in quantity
/// by the fill amount of the order that partially filled.
///
/// A service provider must implement OCO orders on the server so that they
/// can independently be modified (Cancel/Replace) and canceled independently
/// using each order's distinct ServerOrderID. Although, if one of the orders
/// is canceled by the Client, the other order will be canceled as well unless
/// they have a parent order, as specified through the ParentTriggerClientOrderID
/// field, in which case the other order should remain open.
///
/// If the OCO order pair is rejected, this must be communicated through two
/// separate OrderUpdateVLS messages, 1 for each order, with the OrderUpdateReason
/// set to NEW_ORDER_REJECTED.
impl SubmitNewOCOOrder for SubmitNewOCOOrderVLS {
    type Safe = SubmitNewOCOOrderVLS;
    type Unsafe = SubmitNewOCOOrderVLSUnsafe;

    /// The symbol for the order.
    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn client_order_i_d1(&self) -> &str {
        get_vls(self, self.client_order_i_d1)
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type1(&self) -> OrderTypeEnum {
        OrderTypeEnum::from_le(self.order_type1)
    }

    /// The side for the first order. Either Buy or Sell.
    fn buy_sell1(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell1)
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price11(&self) -> f64 {
        f64_le(self.price11)
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn price21(&self) -> f64 {
        f64_le(self.price21)
    }

    /// The quantity for the first order.
    fn quantity1(&self) -> f64 {
        f64_le(self.quantity1)
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn client_order_i_d2(&self) -> &str {
        get_vls(self, self.client_order_i_d2)
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type2(&self) -> OrderTypeEnum {
        OrderTypeEnum::from_le(self.order_type2)
    }

    /// The side for the second order. Either Buy or Sell.
    fn buy_sell2(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell2)
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price12(&self) -> f64 {
        f64_le(self.price12)
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn price22(&self) -> f64 {
        f64_le(self.price22)
    }

    /// The quantity for the second order.
    fn quantity2(&self) -> f64 {
        f64_le(self.quantity2)
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn time_in_force(&self) -> TimeInForceEnum {
        TimeInForceEnum::from_le(self.time_in_force)
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn good_till_date_time(&self) -> DateTime {
        i64::from_le(self.good_till_date_time)
    }

    /// This is the trade account as a text string that the orders belong to.
    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn is_automated_order(&self) -> bool {
        self.is_automated_order
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn parent_trigger_client_order_id(&self) -> &str {
        get_vls(self, self.parent_trigger_client_order_id)
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn free_form_text(&self) -> &str {
        get_vls(self, self.free_form_text)
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn open_or_close(&self) -> OpenCloseTradeEnum {
        OpenCloseTradeEnum::from_le(self.open_or_close)
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn partial_fill_handling(&self) -> PartialFillHandlingEnum {
        PartialFillHandlingEnum::from_le(self.partial_fill_handling)
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn use_offsets(&self) -> bool {
        self.use_offsets
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent1(&self) -> f64 {
        f64_le(self.offset_from_parent1)
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent2(&self) -> f64 {
        f64_le(self.offset_from_parent2)
    }

    fn maintain_same_prices_on_parent_fill(&self) -> u8 {
        self.maintain_same_prices_on_parent_fill
    }

    fn price11_as_string(&self) -> &str {
        get_vls(self, self.price11_as_string)
    }

    fn price21_as_string(&self) -> &str {
        get_vls(self, self.price21_as_string)
    }

    fn price12_as_string(&self) -> &str {
        get_vls(self, self.price12_as_string)
    }

    fn price22_as_string(&self) -> &str {
        get_vls(self, self.price22_as_string)
    }

    /// The symbol for the order.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn set_client_order_i_d1(&mut self, value: &str) -> &mut Self {
        self.client_order_i_d1 = set_vls(self, self.client_order_i_d1, value);
        self
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type1(&mut self, value: OrderTypeEnum) -> &mut Self {
        self.order_type1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The side for the first order. Either Buy or Sell.
    fn set_buy_sell1(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price11(&mut self, value: f64) -> &mut Self {
        self.price11 = f64_le(value);
        self
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn set_price21(&mut self, value: f64) -> &mut Self {
        self.price21 = f64_le(value);
        self
    }

    /// The quantity for the first order.
    fn set_quantity1(&mut self, value: f64) -> &mut Self {
        self.quantity1 = f64_le(value);
        self
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn set_client_order_i_d2(&mut self, value: &str) -> &mut Self {
        self.client_order_i_d2 = set_vls(self, self.client_order_i_d2, value);
        self
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type2(&mut self, value: OrderTypeEnum) -> &mut Self {
        self.order_type2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The side for the second order. Either Buy or Sell.
    fn set_buy_sell2(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price12(&mut self, value: f64) -> &mut Self {
        self.price12 = f64_le(value);
        self
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn set_price22(&mut self, value: f64) -> &mut Self {
        self.price22 = f64_le(value);
        self
    }

    /// The quantity for the second order.
    fn set_quantity2(&mut self, value: f64) -> &mut Self {
        self.quantity2 = f64_le(value);
        self
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        self.good_till_date_time = value.to_le();
        self
    }

    /// This is the trade account as a text string that the orders belong to.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        self.is_automated_order = value;
        self
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn set_parent_trigger_client_order_id(&mut self, value: &str) -> &mut Self {
        self.parent_trigger_client_order_id =
            set_vls(self, self.parent_trigger_client_order_id, value);
        self
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        self.free_form_text = set_vls(self, self.free_form_text, value);
        self
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn set_open_or_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        self.open_or_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn set_partial_fill_handling(&mut self, value: PartialFillHandlingEnum) -> &mut Self {
        self.partial_fill_handling = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn set_use_offsets(&mut self, value: bool) -> &mut Self {
        self.use_offsets = value;
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent1(&mut self, value: f64) -> &mut Self {
        self.offset_from_parent1 = f64_le(value);
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent2(&mut self, value: f64) -> &mut Self {
        self.offset_from_parent2 = f64_le(value);
        self
    }

    fn set_maintain_same_prices_on_parent_fill(&mut self, value: u8) -> &mut Self {
        self.maintain_same_prices_on_parent_fill = value;
        self
    }

    fn set_price11_as_string(&mut self, value: &str) -> &mut Self {
        self.price11_as_string = set_vls(self, self.price11_as_string, value);
        self
    }

    fn set_price21_as_string(&mut self, value: &str) -> &mut Self {
        self.price21_as_string = set_vls(self, self.price21_as_string, value);
        self
    }

    fn set_price12_as_string(&mut self, value: &str) -> &mut Self {
        self.price12_as_string = set_vls(self, self.price12_as_string, value);
        self
    }

    fn set_price22_as_string(&mut self, value: &str) -> &mut Self {
        self.price22_as_string = set_vls(self, self.price22_as_string, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server for submitting an order
/// cancels order (OCO) pair into the market. What this means is when one
/// of the orders is filled or canceled, the other order will be canceled.
/// If one order partially fills, the other order will be reduced in quantity
/// by the fill amount of the order that partially filled.
///
/// A service provider must implement OCO orders on the server so that they
/// can independently be modified (Cancel/Replace) and canceled independently
/// using each order's distinct ServerOrderID. Although, if one of the orders
/// is canceled by the Client, the other order will be canceled as well unless
/// they have a parent order, as specified through the ParentTriggerClientOrderID
/// field, in which case the other order should remain open.
///
/// If the OCO order pair is rejected, this must be communicated through two
/// separate OrderUpdateVLS messages, 1 for each order, with the OrderUpdateReason
/// set to NEW_ORDER_REJECTED.
impl SubmitNewOCOOrder for SubmitNewOCOOrderVLSUnsafe {
    type Safe = SubmitNewOCOOrderVLS;
    type Unsafe = SubmitNewOCOOrderVLSUnsafe;

    /// The symbol for the order.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn client_order_i_d1(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.client_order_i_d1)
        }
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type1(&self) -> OrderTypeEnum {
        if self.is_out_of_bounds(24) {
            OrderTypeEnum::OrderTypeUnset.to_le()
        } else {
            OrderTypeEnum::from_le(self.order_type1)
        }
    }

    /// The side for the first order. Either Buy or Sell.
    fn buy_sell1(&self) -> BuySellEnum {
        if self.is_out_of_bounds(28) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell1)
        }
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price11(&self) -> f64 {
        if self.is_out_of_bounds(40) {
            0.0
        } else {
            f64_le(self.price11)
        }
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn price21(&self) -> f64 {
        if self.is_out_of_bounds(48) {
            0.0
        } else {
            f64_le(self.price21)
        }
    }

    /// The quantity for the first order.
    fn quantity1(&self) -> f64 {
        if self.is_out_of_bounds(56) {
            0.0
        } else {
            f64_le(self.quantity1)
        }
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn client_order_i_d2(&self) -> &str {
        if self.is_out_of_bounds(60) {
            ""
        } else {
            get_vls(self, self.client_order_i_d2)
        }
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type2(&self) -> OrderTypeEnum {
        if self.is_out_of_bounds(64) {
            OrderTypeEnum::OrderTypeUnset.to_le()
        } else {
            OrderTypeEnum::from_le(self.order_type2)
        }
    }

    /// The side for the second order. Either Buy or Sell.
    fn buy_sell2(&self) -> BuySellEnum {
        if self.is_out_of_bounds(68) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell2)
        }
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price12(&self) -> f64 {
        if self.is_out_of_bounds(80) {
            0.0
        } else {
            f64_le(self.price12)
        }
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn price22(&self) -> f64 {
        if self.is_out_of_bounds(88) {
            0.0
        } else {
            f64_le(self.price22)
        }
    }

    /// The quantity for the second order.
    fn quantity2(&self) -> f64 {
        if self.is_out_of_bounds(96) {
            0.0
        } else {
            f64_le(self.quantity2)
        }
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn time_in_force(&self) -> TimeInForceEnum {
        if self.is_out_of_bounds(100) {
            TimeInForceEnum::TifUnset.to_le()
        } else {
            TimeInForceEnum::from_le(self.time_in_force)
        }
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn good_till_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(112) {
            0i64.to_le()
        } else {
            i64::from_le(self.good_till_date_time)
        }
    }

    /// This is the trade account as a text string that the orders belong to.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(116) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn is_automated_order(&self) -> bool {
        if self.is_out_of_bounds(117) {
            false
        } else {
            self.is_automated_order
        }
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn parent_trigger_client_order_id(&self) -> &str {
        if self.is_out_of_bounds(122) {
            ""
        } else {
            get_vls(self, self.parent_trigger_client_order_id)
        }
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn free_form_text(&self) -> &str {
        if self.is_out_of_bounds(126) {
            ""
        } else {
            get_vls(self, self.free_form_text)
        }
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn open_or_close(&self) -> OpenCloseTradeEnum {
        if self.is_out_of_bounds(132) {
            OpenCloseTradeEnum::TradeUnset.to_le()
        } else {
            OpenCloseTradeEnum::from_le(self.open_or_close)
        }
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn partial_fill_handling(&self) -> PartialFillHandlingEnum {
        if self.is_out_of_bounds(133) {
            PartialFillHandlingEnum::PartialFillUnset.to_le()
        } else {
            PartialFillHandlingEnum::from_le(self.partial_fill_handling)
        }
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn use_offsets(&self) -> bool {
        if self.is_out_of_bounds(134) {
            false
        } else {
            self.use_offsets
        }
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent1(&self) -> f64 {
        if self.is_out_of_bounds(144) {
            0.0
        } else {
            f64_le(self.offset_from_parent1)
        }
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent2(&self) -> f64 {
        if self.is_out_of_bounds(152) {
            0.0
        } else {
            f64_le(self.offset_from_parent2)
        }
    }

    fn maintain_same_prices_on_parent_fill(&self) -> u8 {
        if self.is_out_of_bounds(153) {
            0
        } else {
            self.maintain_same_prices_on_parent_fill
        }
    }

    fn price11_as_string(&self) -> &str {
        if self.is_out_of_bounds(158) {
            ""
        } else {
            get_vls(self, self.price11_as_string)
        }
    }

    fn price21_as_string(&self) -> &str {
        if self.is_out_of_bounds(162) {
            ""
        } else {
            get_vls(self, self.price21_as_string)
        }
    }

    fn price12_as_string(&self) -> &str {
        if self.is_out_of_bounds(166) {
            ""
        } else {
            get_vls(self, self.price12_as_string)
        }
    }

    fn price22_as_string(&self) -> &str {
        if self.is_out_of_bounds(170) {
            ""
        } else {
            get_vls(self, self.price22_as_string)
        }
    }

    /// The symbol for the order.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn set_client_order_i_d1(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.client_order_i_d1 = set_vls(self, self.client_order_i_d1, value);
        }
        self
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type1(&mut self, value: OrderTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.order_type1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The side for the first order. Either Buy or Sell.
    fn set_buy_sell1(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.buy_sell1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price11(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.price11 = f64_le(value);
        }
        self
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn set_price21(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.price21 = f64_le(value);
        }
        self
    }

    /// The quantity for the first order.
    fn set_quantity1(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.quantity1 = f64_le(value);
        }
        self
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn set_client_order_i_d2(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(60) {
            self.client_order_i_d2 = set_vls(self, self.client_order_i_d2, value);
        }
        self
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type2(&mut self, value: OrderTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            self.order_type2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The side for the second order. Either Buy or Sell.
    fn set_buy_sell2(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            self.buy_sell2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price12(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(80) {
            self.price12 = f64_le(value);
        }
        self
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn set_price22(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            self.price22 = f64_le(value);
        }
        self
    }

    /// The quantity for the second order.
    fn set_quantity2(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.quantity2 = f64_le(value);
        }
        self
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        if !self.is_out_of_bounds(100) {
            self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.good_till_date_time = value.to_le();
        }
        self
    }

    /// This is the trade account as a text string that the orders belong to.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(116) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(117) {
            self.is_automated_order = value;
        }
        self
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn set_parent_trigger_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(122) {
            self.parent_trigger_client_order_id =
                set_vls(self, self.parent_trigger_client_order_id, value);
        }
        self
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(126) {
            self.free_form_text = set_vls(self, self.free_form_text, value);
        }
        self
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn set_open_or_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        if !self.is_out_of_bounds(132) {
            self.open_or_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn set_partial_fill_handling(&mut self, value: PartialFillHandlingEnum) -> &mut Self {
        if !self.is_out_of_bounds(133) {
            self.partial_fill_handling = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn set_use_offsets(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(134) {
            self.use_offsets = value;
        }
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent1(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(144) {
            self.offset_from_parent1 = f64_le(value);
        }
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent2(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(152) {
            self.offset_from_parent2 = f64_le(value);
        }
        self
    }

    fn set_maintain_same_prices_on_parent_fill(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(153) {
            self.maintain_same_prices_on_parent_fill = value;
        }
        self
    }

    fn set_price11_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(158) {
            self.price11_as_string = set_vls(self, self.price11_as_string, value);
        }
        self
    }

    fn set_price21_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(162) {
            self.price21_as_string = set_vls(self, self.price21_as_string, value);
        }
        self
    }

    fn set_price12_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(166) {
            self.price12_as_string = set_vls(self, self.price12_as_string, value);
        }
        self
    }

    fn set_price22_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(170) {
            self.price22_as_string = set_vls(self, self.price22_as_string, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This is a message from the Client to the Server for submitting an order
/// cancels order (OCO) pair into the market. What this means is when one
/// of the orders is filled or canceled, the other order will be canceled.
/// If one order partially fills, the other order will be reduced in quantity
/// by the fill amount of the order that partially filled.
///
/// A service provider must implement OCO orders on the server so that they
/// can independently be modified (Cancel/Replace) and canceled independently
/// using each order's distinct ServerOrderID. Although, if one of the orders
/// is canceled by the Client, the other order will be canceled as well unless
/// they have a parent order, as specified through the ParentTriggerClientOrderID
/// field, in which case the other order should remain open.
///
/// If the OCO order pair is rejected, this must be communicated through two
/// separate OrderUpdateVLS messages, 1 for each order, with the OrderUpdateReason
/// set to NEW_ORDER_REJECTED.
impl SubmitNewOCOOrder for SubmitNewOCOOrderFixed {
    type Safe = SubmitNewOCOOrderFixed;
    type Unsafe = SubmitNewOCOOrderFixedUnsafe;

    /// The symbol for the order.
    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn client_order_i_d1(&self) -> &str {
        get_fixed(&self.client_order_i_d1[..])
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type1(&self) -> OrderTypeEnum {
        OrderTypeEnum::from_le(self.order_type1)
    }

    /// The side for the first order. Either Buy or Sell.
    fn buy_sell1(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell1)
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price11(&self) -> f64 {
        f64_le(self.price11)
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn price21(&self) -> f64 {
        f64_le(self.price21)
    }

    /// The quantity for the first order.
    fn quantity1(&self) -> f64 {
        f64_le(self.quantity1)
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn client_order_i_d2(&self) -> &str {
        get_fixed(&self.client_order_i_d2[..])
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type2(&self) -> OrderTypeEnum {
        OrderTypeEnum::from_le(self.order_type2)
    }

    /// The side for the second order. Either Buy or Sell.
    fn buy_sell2(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell2)
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price12(&self) -> f64 {
        f64_le(self.price12)
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn price22(&self) -> f64 {
        f64_le(self.price22)
    }

    /// The quantity for the second order.
    fn quantity2(&self) -> f64 {
        f64_le(self.quantity2)
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn time_in_force(&self) -> TimeInForceEnum {
        TimeInForceEnum::from_le(self.time_in_force)
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn good_till_date_time(&self) -> DateTime {
        i64::from_le(self.good_till_date_time)
    }

    /// This is the trade account as a text string that the orders belong to.
    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn is_automated_order(&self) -> bool {
        self.is_automated_order
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn parent_trigger_client_order_id(&self) -> &str {
        get_fixed(&self.parent_trigger_client_order_id[..])
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn free_form_text(&self) -> &str {
        get_fixed(&self.free_form_text[..])
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn open_or_close(&self) -> OpenCloseTradeEnum {
        OpenCloseTradeEnum::from_le(self.open_or_close)
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn partial_fill_handling(&self) -> PartialFillHandlingEnum {
        PartialFillHandlingEnum::from_le(self.partial_fill_handling)
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn use_offsets(&self) -> bool {
        self.use_offsets
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent1(&self) -> f64 {
        f64_le(self.offset_from_parent1)
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent2(&self) -> f64 {
        f64_le(self.offset_from_parent2)
    }

    fn maintain_same_prices_on_parent_fill(&self) -> u8 {
        self.maintain_same_prices_on_parent_fill
    }

    fn price11_as_string(&self) -> &str {
        get_fixed(&self.price11_as_string[..])
    }

    fn price21_as_string(&self) -> &str {
        get_fixed(&self.price21_as_string[..])
    }

    fn price12_as_string(&self) -> &str {
        get_fixed(&self.price12_as_string[..])
    }

    fn price22_as_string(&self) -> &str {
        get_fixed(&self.price22_as_string[..])
    }

    /// The symbol for the order.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn set_client_order_i_d1(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.client_order_i_d1[..], value);
        self
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type1(&mut self, value: OrderTypeEnum) -> &mut Self {
        self.order_type1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The side for the first order. Either Buy or Sell.
    fn set_buy_sell1(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price11(&mut self, value: f64) -> &mut Self {
        self.price11 = f64_le(value);
        self
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn set_price21(&mut self, value: f64) -> &mut Self {
        self.price21 = f64_le(value);
        self
    }

    /// The quantity for the first order.
    fn set_quantity1(&mut self, value: f64) -> &mut Self {
        self.quantity1 = f64_le(value);
        self
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn set_client_order_i_d2(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.client_order_i_d2[..], value);
        self
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type2(&mut self, value: OrderTypeEnum) -> &mut Self {
        self.order_type2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The side for the second order. Either Buy or Sell.
    fn set_buy_sell2(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price12(&mut self, value: f64) -> &mut Self {
        self.price12 = f64_le(value);
        self
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn set_price22(&mut self, value: f64) -> &mut Self {
        self.price22 = f64_le(value);
        self
    }

    /// The quantity for the second order.
    fn set_quantity2(&mut self, value: f64) -> &mut Self {
        self.quantity2 = f64_le(value);
        self
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        self.good_till_date_time = value.to_le();
        self
    }

    /// This is the trade account as a text string that the orders belong to.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        self.is_automated_order = value;
        self
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn set_parent_trigger_client_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.parent_trigger_client_order_id[..], value);
        self
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.free_form_text[..], value);
        self
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn set_open_or_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        self.open_or_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn set_partial_fill_handling(&mut self, value: PartialFillHandlingEnum) -> &mut Self {
        self.partial_fill_handling = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn set_use_offsets(&mut self, value: bool) -> &mut Self {
        self.use_offsets = value;
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent1(&mut self, value: f64) -> &mut Self {
        self.offset_from_parent1 = f64_le(value);
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent2(&mut self, value: f64) -> &mut Self {
        self.offset_from_parent2 = f64_le(value);
        self
    }

    fn set_maintain_same_prices_on_parent_fill(&mut self, value: u8) -> &mut Self {
        self.maintain_same_prices_on_parent_fill = value;
        self
    }

    fn set_price11_as_string(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.price11_as_string[..], value);
        self
    }

    fn set_price21_as_string(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.price21_as_string[..], value);
        self
    }

    fn set_price12_as_string(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.price12_as_string[..], value);
        self
    }

    fn set_price22_as_string(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.price22_as_string[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server for submitting an order
/// cancels order (OCO) pair into the market. What this means is when one
/// of the orders is filled or canceled, the other order will be canceled.
/// If one order partially fills, the other order will be reduced in quantity
/// by the fill amount of the order that partially filled.
///
/// A service provider must implement OCO orders on the server so that they
/// can independently be modified (Cancel/Replace) and canceled independently
/// using each order's distinct ServerOrderID. Although, if one of the orders
/// is canceled by the Client, the other order will be canceled as well unless
/// they have a parent order, as specified through the ParentTriggerClientOrderID
/// field, in which case the other order should remain open.
///
/// If the OCO order pair is rejected, this must be communicated through two
/// separate OrderUpdateVLS messages, 1 for each order, with the OrderUpdateReason
/// set to NEW_ORDER_REJECTED.
impl SubmitNewOCOOrder for SubmitNewOCOOrderFixedUnsafe {
    type Safe = SubmitNewOCOOrderFixed;
    type Unsafe = SubmitNewOCOOrderFixedUnsafe;

    /// The symbol for the order.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(68) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    /// The optional exchange for the symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(84) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn client_order_i_d1(&self) -> &str {
        if self.is_out_of_bounds(116) {
            ""
        } else {
            get_fixed(&self.client_order_i_d1[..])
        }
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type1(&self) -> OrderTypeEnum {
        if self.is_out_of_bounds(120) {
            OrderTypeEnum::OrderTypeUnset.to_le()
        } else {
            OrderTypeEnum::from_le(self.order_type1)
        }
    }

    /// The side for the first order. Either Buy or Sell.
    fn buy_sell1(&self) -> BuySellEnum {
        if self.is_out_of_bounds(124) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell1)
        }
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price11(&self) -> f64 {
        if self.is_out_of_bounds(136) {
            0.0f64
        } else {
            f64_le(self.price11)
        }
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn price21(&self) -> f64 {
        if self.is_out_of_bounds(144) {
            0.0f64
        } else {
            f64_le(self.price21)
        }
    }

    /// The quantity for the first order.
    fn quantity1(&self) -> f64 {
        if self.is_out_of_bounds(152) {
            0.0f64
        } else {
            f64_le(self.quantity1)
        }
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn client_order_i_d2(&self) -> &str {
        if self.is_out_of_bounds(184) {
            ""
        } else {
            get_fixed(&self.client_order_i_d2[..])
        }
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn order_type2(&self) -> OrderTypeEnum {
        if self.is_out_of_bounds(188) {
            OrderTypeEnum::OrderTypeUnset.to_le()
        } else {
            OrderTypeEnum::from_le(self.order_type2)
        }
    }

    /// The side for the second order. Either Buy or Sell.
    fn buy_sell2(&self) -> BuySellEnum {
        if self.is_out_of_bounds(192) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell2)
        }
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn price12(&self) -> f64 {
        if self.is_out_of_bounds(200) {
            0.0f64
        } else {
            f64_le(self.price12)
        }
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn price22(&self) -> f64 {
        if self.is_out_of_bounds(208) {
            0.0f64
        } else {
            f64_le(self.price22)
        }
    }

    /// The quantity for the second order.
    fn quantity2(&self) -> f64 {
        if self.is_out_of_bounds(216) {
            0.0f64
        } else {
            f64_le(self.quantity2)
        }
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn time_in_force(&self) -> TimeInForceEnum {
        if self.is_out_of_bounds(220) {
            TimeInForceEnum::TifUnset.to_le()
        } else {
            TimeInForceEnum::from_le(self.time_in_force)
        }
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn good_till_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(232) {
            0i64
        } else {
            i64::from_le(self.good_till_date_time)
        }
    }

    /// This is the trade account as a text string that the orders belong to.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(264) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn is_automated_order(&self) -> bool {
        if self.is_out_of_bounds(265) {
            false
        } else {
            self.is_automated_order
        }
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn parent_trigger_client_order_id(&self) -> &str {
        if self.is_out_of_bounds(297) {
            ""
        } else {
            get_fixed(&self.parent_trigger_client_order_id[..])
        }
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn free_form_text(&self) -> &str {
        if self.is_out_of_bounds(345) {
            ""
        } else {
            get_fixed(&self.free_form_text[..])
        }
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn open_or_close(&self) -> OpenCloseTradeEnum {
        if self.is_out_of_bounds(352) {
            OpenCloseTradeEnum::TradeUnset.to_le()
        } else {
            OpenCloseTradeEnum::from_le(self.open_or_close)
        }
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn partial_fill_handling(&self) -> PartialFillHandlingEnum {
        if self.is_out_of_bounds(353) {
            PartialFillHandlingEnum::PartialFillUnset.to_le()
        } else {
            PartialFillHandlingEnum::from_le(self.partial_fill_handling)
        }
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn use_offsets(&self) -> bool {
        if self.is_out_of_bounds(354) {
            false
        } else {
            self.use_offsets
        }
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent1(&self) -> f64 {
        if self.is_out_of_bounds(368) {
            0.0f64
        } else {
            f64_le(self.offset_from_parent1)
        }
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn offset_from_parent2(&self) -> f64 {
        if self.is_out_of_bounds(376) {
            0.0f64
        } else {
            f64_le(self.offset_from_parent2)
        }
    }

    fn maintain_same_prices_on_parent_fill(&self) -> u8 {
        if self.is_out_of_bounds(377) {
            0
        } else {
            self.maintain_same_prices_on_parent_fill
        }
    }

    fn price11_as_string(&self) -> &str {
        if self.is_out_of_bounds(393) {
            ""
        } else {
            get_fixed(&self.price11_as_string[..])
        }
    }

    fn price21_as_string(&self) -> &str {
        if self.is_out_of_bounds(409) {
            ""
        } else {
            get_fixed(&self.price21_as_string[..])
        }
    }

    fn price12_as_string(&self) -> &str {
        if self.is_out_of_bounds(425) {
            ""
        } else {
            get_fixed(&self.price12_as_string[..])
        }
    }

    fn price22_as_string(&self) -> &str {
        if self.is_out_of_bounds(441) {
            ""
        } else {
            get_fixed(&self.price22_as_string[..])
        }
    }

    /// The symbol for the order.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    /// The optional exchange for the symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(84) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    /// The Client supplied order identifier for the first order. The Server will
    /// remember this for the life of the order.
    fn set_client_order_i_d1(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(116) {
            set_fixed(&mut self.client_order_i_d1[..], value);
        }
        self
    }

    /// The order type for the first order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type1(&mut self, value: OrderTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.order_type1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The side for the first order. Either Buy or Sell.
    fn set_buy_sell1(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(124) {
            self.buy_sell1 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the price of the first order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price11(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(136) {
            self.price11 = f64_le(value);
        }
        self
    }

    /// This is the second price for the first order. For a Stop-Limit order,
    /// this is the limit price. Price2_1 only applies to Stop-Limit orders.
    fn set_price21(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(144) {
            self.price21 = f64_le(value);
        }
        self
    }

    /// The quantity for the first order.
    fn set_quantity1(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(152) {
            self.quantity1 = f64_le(value);
        }
        self
    }

    /// The Client supplied order identifier for the second order. The Server
    /// will remember this for the life of the order.
    fn set_client_order_i_d2(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(184) {
            set_fixed(&mut self.client_order_i_d2[..], value);
        }
        self
    }

    /// The order type for the second order. For list of order types, refer to
    /// OrderTypeEnum.
    fn set_order_type2(&mut self, value: OrderTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(188) {
            self.order_type2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The side for the second order. Either Buy or Sell.
    fn set_buy_sell2(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(192) {
            self.buy_sell2 = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the price of the second order. This is the limit price for a Limit
    /// order, the stop price for a Stop order, or the trigger price for a Market
    /// if Touched order.
    fn set_price12(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(200) {
            self.price12 = f64_le(value);
        }
        self
    }

    /// This is the second price for the second order. For a Stop-Limit order,
    /// this is the limit price. Price2_2 only applies to Stop-Limit orders.
    fn set_price22(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(208) {
            self.price22 = f64_le(value);
        }
        self
    }

    /// The quantity for the second order.
    fn set_quantity2(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(216) {
            self.quantity2 = f64_le(value);
        }
        self
    }

    /// The Time in Force for the order or orders (in the case of an OCO order).
    /// The Time in Force for the order or orders (in the case of an OCO order).
    ///
    /// For more information, refer to TimeInForceEnum.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        if !self.is_out_of_bounds(220) {
            self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies
    /// the expiration Date-Time of the order. This applies to both of the orders
    /// in the OCO pair.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(232) {
            self.good_till_date_time = value.to_le();
        }
        self
    }

    /// This is the trade account as a text string that the orders belong to.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(264) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    /// Set to 1 for an order submitted by an automated trading system.
    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(265) {
            self.is_automated_order = value;
        }
        self
    }

    /// Optional: This field supports the submission of an OCO order pair which
    /// has a parent. This is known as a Bracket order.
    ///
    /// For complete documentation for bracket orders, refer to Bracket Order
    /// Procedures.
    fn set_parent_trigger_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(297) {
            set_fixed(&mut self.parent_trigger_client_order_id[..], value);
        }
        self
    }

    /// Optional: This is an optional text string which can be set by the Client
    /// to associate text with each of the OCO orders. The Server is not under
    /// any obligation to use this text and it may place a limitation on the length
    /// of this text.
    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(345) {
            set_fixed(&mut self.free_form_text[..], value);
        }
        self
    }

    /// For the description for this field, refer to OpenCloseTradeEnum.
    fn set_open_or_close(&mut self, value: OpenCloseTradeEnum) -> &mut Self {
        if !self.is_out_of_bounds(352) {
            self.open_or_close = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// Specifies how partial fills should be handled when when one of the orders
    /// in the OCO order set partially fills.
    ///
    /// For the possible values, refer to PartialFillHandlingEnum.
    fn set_partial_fill_handling(&mut self, value: PartialFillHandlingEnum) -> &mut Self {
        if !self.is_out_of_bounds(353) {
            self.partial_fill_handling = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

    /// This field is only relevant to a Bracket order which is the case when
    /// the ParentTriggerClientOrderID field is set.
    ///
    /// UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and
    /// OffsetFromParent2 fields specify the two OCO order prices as a price offset
    /// from the parent order Price1 field, rather than an absolute price. In
    /// this case Price1_1 and Price1_2 are not used.
    ///
    /// When UseOffsets is set to 0, the default, then the OCO order prices are
    /// specified with Price1_1 and Price1_2.
    ///
    /// When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2
    /// fields are set, it is necessary that the parent order Price1 field be
    /// set even in the case of a Market order type. In the case of a Market order
    /// type use the current order price. This is so that the server has a reference
    /// price for the offsets in case it needs to translate them to actual prices.
    /// price for the offsets in case it needs to translate them to actual prices.
    ///
    /// When the parent order fills, it is expected the Server will maintain the
    /// specified offsets to the parent order fill price for the Target and Stop
    /// orders.
    ///
    /// A Server is not required to support this field.
    fn set_use_offsets(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(354) {
            self.use_offsets = value;
        }
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_1 price
    /// as an offset from the parent order. In this case Price1_1 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent1(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(368) {
            self.offset_from_parent1 = f64_le(value);
        }
        self
    }

    /// When UseOffsets is set to 1, then this field specifies the Price1_2 price
    /// as an offset from the parent order. In this case Price1_2 will not be
    /// set in the message. Instead the Server calculates that price from this
    /// offset and parent order price.
    ///
    /// This needs to always be set to a positive price value which is an offset
    /// from the parent order price. The Server will make the correct calculation
    /// based upon the Side and Order Type.
    ///
    /// A Server is not required to support this field.
    fn set_offset_from_parent2(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(376) {
            self.offset_from_parent2 = f64_le(value);
        }
        self
    }

    fn set_maintain_same_prices_on_parent_fill(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(377) {
            self.maintain_same_prices_on_parent_fill = value;
        }
        self
    }

    fn set_price11_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(393) {
            set_fixed(&mut self.price11_as_string[..], value);
        }
        self
    }

    fn set_price21_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(409) {
            set_fixed(&mut self.price21_as_string[..], value);
        }
        self
    }

    fn set_price12_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(425) {
            set_fixed(&mut self.price12_as_string[..], value);
        }
        self
    }

    fn set_price22_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(441) {
            set_fixed(&mut self.price22_as_string[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                448usize,
                core::mem::size_of::<SubmitNewOCOOrderFixedData>(),
                "SubmitNewOCOOrderFixedData sizeof expected {:} but was {:}",
                448usize,
                core::mem::size_of::<SubmitNewOCOOrderFixedData>()
            );
            assert_eq!(
                448u16,
                SubmitNewOCOOrderFixed::new().size(),
                "SubmitNewOCOOrderFixed sizeof expected {:} but was {:}",
                448u16,
                SubmitNewOCOOrderFixed::new().size(),
            );
            assert_eq!(
                SUBMIT_NEW_OCO_ORDER,
                SubmitNewOCOOrderFixed::new().r#type(),
                "SubmitNewOCOOrderFixed type expected {:} but was {:}",
                SUBMIT_NEW_OCO_ORDER,
                SubmitNewOCOOrderFixed::new().r#type(),
            );
            assert_eq!(
                201u16,
                SubmitNewOCOOrderFixed::new().r#type(),
                "SubmitNewOCOOrderFixed type expected {:} but was {:}",
                201u16,
                SubmitNewOCOOrderFixed::new().r#type(),
            );
            let d = SubmitNewOCOOrderFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                68usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                68usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                84usize,
                (core::ptr::addr_of!(d.client_order_i_d1) as usize) - p,
                "client_order_i_d1 offset expected {:} but was {:}",
                84usize,
                (core::ptr::addr_of!(d.client_order_i_d1) as usize) - p,
            );
            assert_eq!(
                116usize,
                (core::ptr::addr_of!(d.order_type1) as usize) - p,
                "order_type1 offset expected {:} but was {:}",
                116usize,
                (core::ptr::addr_of!(d.order_type1) as usize) - p,
            );
            assert_eq!(
                120usize,
                (core::ptr::addr_of!(d.buy_sell1) as usize) - p,
                "buy_sell1 offset expected {:} but was {:}",
                120usize,
                (core::ptr::addr_of!(d.buy_sell1) as usize) - p,
            );
            assert_eq!(
                128usize,
                (core::ptr::addr_of!(d.price11) as usize) - p,
                "price11 offset expected {:} but was {:}",
                128usize,
                (core::ptr::addr_of!(d.price11) as usize) - p,
            );
            assert_eq!(
                136usize,
                (core::ptr::addr_of!(d.price21) as usize) - p,
                "price21 offset expected {:} but was {:}",
                136usize,
                (core::ptr::addr_of!(d.price21) as usize) - p,
            );
            assert_eq!(
                144usize,
                (core::ptr::addr_of!(d.quantity1) as usize) - p,
                "quantity1 offset expected {:} but was {:}",
                144usize,
                (core::ptr::addr_of!(d.quantity1) as usize) - p,
            );
            assert_eq!(
                152usize,
                (core::ptr::addr_of!(d.client_order_i_d2) as usize) - p,
                "client_order_i_d2 offset expected {:} but was {:}",
                152usize,
                (core::ptr::addr_of!(d.client_order_i_d2) as usize) - p,
            );
            assert_eq!(
                184usize,
                (core::ptr::addr_of!(d.order_type2) as usize) - p,
                "order_type2 offset expected {:} but was {:}",
                184usize,
                (core::ptr::addr_of!(d.order_type2) as usize) - p,
            );
            assert_eq!(
                188usize,
                (core::ptr::addr_of!(d.buy_sell2) as usize) - p,
                "buy_sell2 offset expected {:} but was {:}",
                188usize,
                (core::ptr::addr_of!(d.buy_sell2) as usize) - p,
            );
            assert_eq!(
                192usize,
                (core::ptr::addr_of!(d.price12) as usize) - p,
                "price12 offset expected {:} but was {:}",
                192usize,
                (core::ptr::addr_of!(d.price12) as usize) - p,
            );
            assert_eq!(
                200usize,
                (core::ptr::addr_of!(d.price22) as usize) - p,
                "price22 offset expected {:} but was {:}",
                200usize,
                (core::ptr::addr_of!(d.price22) as usize) - p,
            );
            assert_eq!(
                208usize,
                (core::ptr::addr_of!(d.quantity2) as usize) - p,
                "quantity2 offset expected {:} but was {:}",
                208usize,
                (core::ptr::addr_of!(d.quantity2) as usize) - p,
            );
            assert_eq!(
                216usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
                "time_in_force offset expected {:} but was {:}",
                216usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
            );
            assert_eq!(
                224usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
                "good_till_date_time offset expected {:} but was {:}",
                224usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
            );
            assert_eq!(
                232usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                232usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                264usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
                "is_automated_order offset expected {:} but was {:}",
                264usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
            );
            assert_eq!(
                265usize,
                (core::ptr::addr_of!(d.parent_trigger_client_order_id) as usize) - p,
                "parent_trigger_client_order_id offset expected {:} but was {:}",
                265usize,
                (core::ptr::addr_of!(d.parent_trigger_client_order_id) as usize) - p,
            );
            assert_eq!(
                297usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
                "free_form_text offset expected {:} but was {:}",
                297usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
            );
            assert_eq!(
                348usize,
                (core::ptr::addr_of!(d.open_or_close) as usize) - p,
                "open_or_close offset expected {:} but was {:}",
                348usize,
                (core::ptr::addr_of!(d.open_or_close) as usize) - p,
            );
            assert_eq!(
                352usize,
                (core::ptr::addr_of!(d.partial_fill_handling) as usize) - p,
                "partial_fill_handling offset expected {:} but was {:}",
                352usize,
                (core::ptr::addr_of!(d.partial_fill_handling) as usize) - p,
            );
            assert_eq!(
                353usize,
                (core::ptr::addr_of!(d.use_offsets) as usize) - p,
                "use_offsets offset expected {:} but was {:}",
                353usize,
                (core::ptr::addr_of!(d.use_offsets) as usize) - p,
            );
            assert_eq!(
                360usize,
                (core::ptr::addr_of!(d.offset_from_parent1) as usize) - p,
                "offset_from_parent1 offset expected {:} but was {:}",
                360usize,
                (core::ptr::addr_of!(d.offset_from_parent1) as usize) - p,
            );
            assert_eq!(
                368usize,
                (core::ptr::addr_of!(d.offset_from_parent2) as usize) - p,
                "offset_from_parent2 offset expected {:} but was {:}",
                368usize,
                (core::ptr::addr_of!(d.offset_from_parent2) as usize) - p,
            );
            assert_eq!(
                376usize,
                (core::ptr::addr_of!(d.maintain_same_prices_on_parent_fill) as usize) - p,
                "maintain_same_prices_on_parent_fill offset expected {:} but was {:}",
                376usize,
                (core::ptr::addr_of!(d.maintain_same_prices_on_parent_fill) as usize) - p,
            );
            assert_eq!(
                377usize,
                (core::ptr::addr_of!(d.price11_as_string) as usize) - p,
                "price11_as_string offset expected {:} but was {:}",
                377usize,
                (core::ptr::addr_of!(d.price11_as_string) as usize) - p,
            );
            assert_eq!(
                393usize,
                (core::ptr::addr_of!(d.price21_as_string) as usize) - p,
                "price21_as_string offset expected {:} but was {:}",
                393usize,
                (core::ptr::addr_of!(d.price21_as_string) as usize) - p,
            );
            assert_eq!(
                409usize,
                (core::ptr::addr_of!(d.price12_as_string) as usize) - p,
                "price12_as_string offset expected {:} but was {:}",
                409usize,
                (core::ptr::addr_of!(d.price12_as_string) as usize) - p,
            );
            assert_eq!(
                425usize,
                (core::ptr::addr_of!(d.price22_as_string) as usize) - p,
                "price22_as_string offset expected {:} but was {:}",
                425usize,
                (core::ptr::addr_of!(d.price22_as_string) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                176usize,
                core::mem::size_of::<SubmitNewOCOOrderVLSData>(),
                "SubmitNewOCOOrderVLSData sizeof expected {:} but was {:}",
                176usize,
                core::mem::size_of::<SubmitNewOCOOrderVLSData>()
            );
            assert_eq!(
                176u16,
                SubmitNewOCOOrderVLS::new().size(),
                "SubmitNewOCOOrderVLS sizeof expected {:} but was {:}",
                176u16,
                SubmitNewOCOOrderVLS::new().size(),
            );
            assert_eq!(
                SUBMIT_NEW_OCO_ORDER,
                SubmitNewOCOOrderVLS::new().r#type(),
                "SubmitNewOCOOrderVLS type expected {:} but was {:}",
                SUBMIT_NEW_OCO_ORDER,
                SubmitNewOCOOrderVLS::new().r#type(),
            );
            assert_eq!(
                201u16,
                SubmitNewOCOOrderVLS::new().r#type(),
                "SubmitNewOCOOrderVLS type expected {:} but was {:}",
                201u16,
                SubmitNewOCOOrderVLS::new().r#type(),
            );
            let d = SubmitNewOCOOrderVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.client_order_i_d1) as usize) - p,
                "client_order_i_d1 offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.client_order_i_d1) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.order_type1) as usize) - p,
                "order_type1 offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.order_type1) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.buy_sell1) as usize) - p,
                "buy_sell1 offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.buy_sell1) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.price11) as usize) - p,
                "price11 offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.price11) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.price21) as usize) - p,
                "price21 offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.price21) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.quantity1) as usize) - p,
                "quantity1 offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.quantity1) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.client_order_i_d2) as usize) - p,
                "client_order_i_d2 offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.client_order_i_d2) as usize) - p,
            );
            assert_eq!(
                60usize,
                (core::ptr::addr_of!(d.order_type2) as usize) - p,
                "order_type2 offset expected {:} but was {:}",
                60usize,
                (core::ptr::addr_of!(d.order_type2) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.buy_sell2) as usize) - p,
                "buy_sell2 offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.buy_sell2) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.price12) as usize) - p,
                "price12 offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.price12) as usize) - p,
            );
            assert_eq!(
                80usize,
                (core::ptr::addr_of!(d.price22) as usize) - p,
                "price22 offset expected {:} but was {:}",
                80usize,
                (core::ptr::addr_of!(d.price22) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.quantity2) as usize) - p,
                "quantity2 offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.quantity2) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
                "time_in_force offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
                "good_till_date_time offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
            );
            assert_eq!(
                112usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                112usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                116usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
                "is_automated_order offset expected {:} but was {:}",
                116usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
            );
            assert_eq!(
                118usize,
                (core::ptr::addr_of!(d.parent_trigger_client_order_id) as usize) - p,
                "parent_trigger_client_order_id offset expected {:} but was {:}",
                118usize,
                (core::ptr::addr_of!(d.parent_trigger_client_order_id) as usize) - p,
            );
            assert_eq!(
                122usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
                "free_form_text offset expected {:} but was {:}",
                122usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
            );
            assert_eq!(
                128usize,
                (core::ptr::addr_of!(d.open_or_close) as usize) - p,
                "open_or_close offset expected {:} but was {:}",
                128usize,
                (core::ptr::addr_of!(d.open_or_close) as usize) - p,
            );
            assert_eq!(
                132usize,
                (core::ptr::addr_of!(d.partial_fill_handling) as usize) - p,
                "partial_fill_handling offset expected {:} but was {:}",
                132usize,
                (core::ptr::addr_of!(d.partial_fill_handling) as usize) - p,
            );
            assert_eq!(
                133usize,
                (core::ptr::addr_of!(d.use_offsets) as usize) - p,
                "use_offsets offset expected {:} but was {:}",
                133usize,
                (core::ptr::addr_of!(d.use_offsets) as usize) - p,
            );
            assert_eq!(
                136usize,
                (core::ptr::addr_of!(d.offset_from_parent1) as usize) - p,
                "offset_from_parent1 offset expected {:} but was {:}",
                136usize,
                (core::ptr::addr_of!(d.offset_from_parent1) as usize) - p,
            );
            assert_eq!(
                144usize,
                (core::ptr::addr_of!(d.offset_from_parent2) as usize) - p,
                "offset_from_parent2 offset expected {:} but was {:}",
                144usize,
                (core::ptr::addr_of!(d.offset_from_parent2) as usize) - p,
            );
            assert_eq!(
                152usize,
                (core::ptr::addr_of!(d.maintain_same_prices_on_parent_fill) as usize) - p,
                "maintain_same_prices_on_parent_fill offset expected {:} but was {:}",
                152usize,
                (core::ptr::addr_of!(d.maintain_same_prices_on_parent_fill) as usize) - p,
            );
            assert_eq!(
                154usize,
                (core::ptr::addr_of!(d.price11_as_string) as usize) - p,
                "price11_as_string offset expected {:} but was {:}",
                154usize,
                (core::ptr::addr_of!(d.price11_as_string) as usize) - p,
            );
            assert_eq!(
                158usize,
                (core::ptr::addr_of!(d.price21_as_string) as usize) - p,
                "price21_as_string offset expected {:} but was {:}",
                158usize,
                (core::ptr::addr_of!(d.price21_as_string) as usize) - p,
            );
            assert_eq!(
                162usize,
                (core::ptr::addr_of!(d.price12_as_string) as usize) - p,
                "price12_as_string offset expected {:} but was {:}",
                162usize,
                (core::ptr::addr_of!(d.price12_as_string) as usize) - p,
            );
            assert_eq!(
                166usize,
                (core::ptr::addr_of!(d.price22_as_string) as usize) - p,
                "price22_as_string offset expected {:} but was {:}",
                166usize,
                (core::ptr::addr_of!(d.price22_as_string) as usize) - p,
            );
        }
    }
}
