// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS_FIXED_SIZE: usize = 32;

/// size          u16                          = MarketDataUpdateBidAskFloatWithMicrosecondsFixedSize  (32)
/// type          u16                          = MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS  (144)
/// symbol_id     u32                          = 0
/// bid_price     f32                          = f32::MAX
/// bid_quantity  f32                          = 0
/// ask_price     f32                          = f32::MAX
/// ask_quantity  f32                          = 0
/// date_time     DateTimeWithMicrosecondsInt  = 0
pub(crate) const MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS_FIXED_DEFAULT: [u8; 32] = [
    32, 0, 144, 0, 0, 0, 0, 0, 255, 255, 127, 127, 0, 0, 0, 0, 255, 255, 127, 127, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
];

/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
pub trait MarketDataUpdateBidAskFloatWithMicroseconds: Message {
    type Safe: MarketDataUpdateBidAskFloatWithMicroseconds;
    type Unsafe: MarketDataUpdateBidAskFloatWithMicroseconds;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The current Bid price. Leave unset if there is no price available.
    fn bid_price(&self) -> f32;

    /// The current number of contracts/shares at the bid price.
    fn bid_quantity(&self) -> f32;

    /// The current ask or offer price. Leave unset if there is no price available.
    /// The current ask or offer price. Leave unset if there is no price available.
    fn ask_price(&self) -> f32;

    /// The current number of contracts/shares at the ask price.
    fn ask_quantity(&self) -> f32;

    /// The timestamp of the trade in UNIX microseconds time format.
    fn date_time(&self) -> DateTimeWithMicrosecondsInt;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The current Bid price. Leave unset if there is no price available.
    fn set_bid_price(&mut self, value: f32) -> &mut Self;

    /// The current number of contracts/shares at the bid price.
    fn set_bid_quantity(&mut self, value: f32) -> &mut Self;

    /// The current ask or offer price. Leave unset if there is no price available.
    /// The current ask or offer price. Leave unset if there is no price available.
    fn set_ask_price(&mut self, value: f32) -> &mut Self;

    /// The current number of contracts/shares at the ask price.
    fn set_ask_quantity(&mut self, value: f32) -> &mut Self;

    /// The timestamp of the trade in UNIX microseconds time format.
    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDataUpdateBidAskFloatWithMicroseconds) {
        to.set_symbol_id(self.symbol_id());
        to.set_bid_price(self.bid_price());
        to.set_bid_quantity(self.bid_quantity());
        to.set_ask_price(self.ask_price());
        to.set_ask_quantity(self.ask_quantity());
        to.set_date_time(self.date_time());
    }
}

/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
pub struct MarketDataUpdateBidAskFloatWithMicrosecondsFixed {
    data: *const MarketDataUpdateBidAskFloatWithMicrosecondsFixedData,
}

pub struct MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {
    data: *const MarketDataUpdateBidAskFloatWithMicrosecondsFixedData,
}

#[repr(packed(1), C)]
pub struct MarketDataUpdateBidAskFloatWithMicrosecondsFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    bid_price: f32,
    bid_quantity: f32,
    ask_price: f32,
    ask_quantity: f32,
    date_time: DateTimeWithMicrosecondsInt,
}

impl MarketDataUpdateBidAskFloatWithMicrosecondsFixedData {
    pub fn new() -> Self {
        Self {
            size: 32u16.to_le(),
            r#type: MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS.to_le(),
            symbol_id: 0u32,
            bid_price: f32_le(f32::MAX),
            bid_quantity: 0.0f32,
            ask_price: f32_le(f32::MAX),
            ask_quantity: 0.0f32,
            date_time: 0i64,
        }
    }
}

unsafe impl Send for MarketDataUpdateBidAskFloatWithMicrosecondsFixed {}
unsafe impl Send for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {}
unsafe impl Send for MarketDataUpdateBidAskFloatWithMicrosecondsFixedData {}

impl Drop for MarketDataUpdateBidAskFloatWithMicrosecondsFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataUpdateBidAskFloatWithMicrosecondsFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataUpdateBidAskFloatWithMicrosecondsFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataUpdateBidAskFloatWithMicrosecondsFixed {
    type Target = MarketDataUpdateBidAskFloatWithMicrosecondsFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateBidAskFloatWithMicrosecondsFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {
    type Target = MarketDataUpdateBidAskFloatWithMicrosecondsFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataUpdateBidAskFloatWithMicrosecondsFixed {
    type Data = MarketDataUpdateBidAskFloatWithMicrosecondsFixedData;

    const BASE_SIZE: usize = 32;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateBidAskFloatWithMicrosecondsFixedData,
        }
    }
}
impl crate::Message for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe {
    type Data = MarketDataUpdateBidAskFloatWithMicrosecondsFixedData;

    const BASE_SIZE: usize = 32;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateBidAskFloatWithMicrosecondsFixedData,
        }
    }
}
/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
impl MarketDataUpdateBidAskFloatWithMicroseconds
    for MarketDataUpdateBidAskFloatWithMicrosecondsFixed
{
    type Safe = MarketDataUpdateBidAskFloatWithMicrosecondsFixed;
    type Unsafe = MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The current Bid price. Leave unset if there is no price available.
    fn bid_price(&self) -> f32 {
        f32_le(self.bid_price)
    }

    /// The current number of contracts/shares at the bid price.
    fn bid_quantity(&self) -> f32 {
        f32_le(self.bid_quantity)
    }

    /// The current ask or offer price. Leave unset if there is no price available.
    /// The current ask or offer price. Leave unset if there is no price available.
    fn ask_price(&self) -> f32 {
        f32_le(self.ask_price)
    }

    /// The current number of contracts/shares at the ask price.
    fn ask_quantity(&self) -> f32 {
        f32_le(self.ask_quantity)
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.date_time)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The current Bid price. Leave unset if there is no price available.
    fn set_bid_price(&mut self, value: f32) -> &mut Self {
        self.bid_price = f32_le(value);
        self
    }

    /// The current number of contracts/shares at the bid price.
    fn set_bid_quantity(&mut self, value: f32) -> &mut Self {
        self.bid_quantity = f32_le(value);
        self
    }

    /// The current ask or offer price. Leave unset if there is no price available.
    /// The current ask or offer price. Leave unset if there is no price available.
    fn set_ask_price(&mut self, value: f32) -> &mut Self {
        self.ask_price = f32_le(value);
        self
    }

    /// The current number of contracts/shares at the ask price.
    fn set_ask_quantity(&mut self, value: f32) -> &mut Self {
        self.ask_quantity = f32_le(value);
        self
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.date_time = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
impl MarketDataUpdateBidAskFloatWithMicroseconds
    for MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe
{
    type Safe = MarketDataUpdateBidAskFloatWithMicrosecondsFixed;
    type Unsafe = MarketDataUpdateBidAskFloatWithMicrosecondsFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The current Bid price. Leave unset if there is no price available.
    fn bid_price(&self) -> f32 {
        if self.is_out_of_bounds(12) {
            f32_le(f32::MAX)
        } else {
            f32_le(self.bid_price)
        }
    }

    /// The current number of contracts/shares at the bid price.
    fn bid_quantity(&self) -> f32 {
        if self.is_out_of_bounds(16) {
            0.0f32
        } else {
            f32_le(self.bid_quantity)
        }
    }

    /// The current ask or offer price. Leave unset if there is no price available.
    /// The current ask or offer price. Leave unset if there is no price available.
    fn ask_price(&self) -> f32 {
        if self.is_out_of_bounds(20) {
            f32_le(f32::MAX)
        } else {
            f32_le(self.ask_price)
        }
    }

    /// The current number of contracts/shares at the ask price.
    fn ask_quantity(&self) -> f32 {
        if self.is_out_of_bounds(24) {
            0.0f32
        } else {
            f32_le(self.ask_quantity)
        }
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(32) {
            0i64
        } else {
            i64::from_le(self.date_time)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The current Bid price. Leave unset if there is no price available.
    fn set_bid_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.bid_price = f32_le(value);
        }
        self
    }

    /// The current number of contracts/shares at the bid price.
    fn set_bid_quantity(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.bid_quantity = f32_le(value);
        }
        self
    }

    /// The current ask or offer price. Leave unset if there is no price available.
    /// The current ask or offer price. Leave unset if there is no price available.
    fn set_ask_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.ask_price = f32_le(value);
        }
        self
    }

    /// The current number of contracts/shares at the ask price.
    fn set_ask_quantity(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.ask_quantity = f32_le(value);
        }
        self
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.date_time = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                32usize,
                core::mem::size_of::<MarketDataUpdateBidAskFloatWithMicrosecondsFixedData>(),
                "MarketDataUpdateBidAskFloatWithMicrosecondsFixedData sizeof expected {:} but was {:}",
                32usize,
                core::mem::size_of::<MarketDataUpdateBidAskFloatWithMicrosecondsFixedData>()
            );
            assert_eq!(
                32u16,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixed::new().size(),
                "MarketDataUpdateBidAskFloatWithMicrosecondsFixed sizeof expected {:} but was {:}",
                32u16,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixed::new().size(),
            );
            assert_eq!(
                MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixed::new().r#type(),
                "MarketDataUpdateBidAskFloatWithMicrosecondsFixed type expected {:} but was {:}",
                MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixed::new().r#type(),
            );
            assert_eq!(
                144u16,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixed::new().r#type(),
                "MarketDataUpdateBidAskFloatWithMicrosecondsFixed type expected {:} but was {:}",
                144u16,
                MarketDataUpdateBidAskFloatWithMicrosecondsFixed::new().r#type(),
            );
            let d = MarketDataUpdateBidAskFloatWithMicrosecondsFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.bid_price) as usize) - p,
                "bid_price offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.bid_price) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.bid_quantity) as usize) - p,
                "bid_quantity offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.bid_quantity) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.ask_price) as usize) - p,
                "ask_price offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.ask_price) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.ask_quantity) as usize) - p,
                "ask_quantity offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.ask_quantity) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
        }
    }
}
