// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const SECURITY_DEFINITION_FOR_SYMBOL_REQUEST_VLS_SIZE: usize = 20;

pub(crate) const SECURITY_DEFINITION_FOR_SYMBOL_REQUEST_FIXED_SIZE: usize = 88;

/// size        u16     = SecurityDefinitionForSymbolRequestVLSSize  (20)
/// type        u16     = SECURITY_DEFINITION_FOR_SYMBOL_REQUEST  (506)
/// base_size   u16     = SecurityDefinitionForSymbolRequestVLSSize  (20)
/// request_id  i32     = 0
/// symbol      string  = ""
/// exchange    string  = ""
pub(crate) const SECURITY_DEFINITION_FOR_SYMBOL_REQUEST_VLS_DEFAULT: [u8; 20] = [
    20, 0, 250, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size        u16       = SecurityDefinitionForSymbolRequestFixedSize  (88)
/// type        u16       = SECURITY_DEFINITION_FOR_SYMBOL_REQUEST  (506)
/// request_id  i32       = 0
/// symbol      string64  = ""
/// exchange    string16  = ""
pub(crate) const SECURITY_DEFINITION_FOR_SYMBOL_REQUEST_FIXED_DEFAULT: [u8; 88] = [
    88, 0, 250, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// This is a message from the Client to the Server for requesting Security
/// Definition data for a specific symbol.
///
/// The Server will return a single SecurityDefinitionResponseVLS message
/// in response to this request.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server in order to obtain the IntegerToFloatPriceDivisor value
/// in case the Server uses the integer market data messages.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub trait SecurityDefinitionForSymbolRequest: Message {
    type Safe: SecurityDefinitionForSymbolRequest;
    type Unsafe: SecurityDefinitionForSymbolRequest;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32;

    /// The symbol to return a security definition for.
    fn symbol(&self) -> &str;

    /// The optional exchange for the Symbol.
    fn exchange(&self) -> &str;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// The symbol to return a security definition for.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// The optional exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl SecurityDefinitionForSymbolRequest) {
        to.set_request_id(self.request_id());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
    }
}

/// This is a message from the Client to the Server for requesting Security
/// Definition data for a specific symbol.
///
/// The Server will return a single SecurityDefinitionResponseVLS message
/// in response to this request.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server in order to obtain the IntegerToFloatPriceDivisor value
/// in case the Server uses the integer market data messages.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub struct SecurityDefinitionForSymbolRequestVLS {
    data: *const SecurityDefinitionForSymbolRequestVLSData,
    capacity: usize,
}

pub struct SecurityDefinitionForSymbolRequestVLSUnsafe {
    data: *const SecurityDefinitionForSymbolRequestVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct SecurityDefinitionForSymbolRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    symbol: VLS,
    exchange: VLS,
}

/// This is a message from the Client to the Server for requesting Security
/// Definition data for a specific symbol.
///
/// The Server will return a single SecurityDefinitionResponseVLS message
/// in response to this request.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server in order to obtain the IntegerToFloatPriceDivisor value
/// in case the Server uses the integer market data messages.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub struct SecurityDefinitionForSymbolRequestFixed {
    data: *const SecurityDefinitionForSymbolRequestFixedData,
}

pub struct SecurityDefinitionForSymbolRequestFixedUnsafe {
    data: *const SecurityDefinitionForSymbolRequestFixedData,
}

#[repr(packed(8), C)]
pub struct SecurityDefinitionForSymbolRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    symbol: [u8; 64],
    exchange: [u8; 16],
}

impl SecurityDefinitionForSymbolRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 20u16.to_le(),
            r#type: SECURITY_DEFINITION_FOR_SYMBOL_REQUEST.to_le(),
            base_size: 20u16.to_le(),
            request_id: 0i32,
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
        }
    }
}

impl SecurityDefinitionForSymbolRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 88u16.to_le(),
            r#type: SECURITY_DEFINITION_FOR_SYMBOL_REQUEST.to_le(),
            request_id: 0i32,
            symbol: [0; 64],
            exchange: [0; 16],
        }
    }
}

unsafe impl Send for SecurityDefinitionForSymbolRequestFixed {}
unsafe impl Send for SecurityDefinitionForSymbolRequestFixedUnsafe {}
unsafe impl Send for SecurityDefinitionForSymbolRequestFixedData {}
unsafe impl Send for SecurityDefinitionForSymbolRequestVLS {}
unsafe impl Send for SecurityDefinitionForSymbolRequestVLSUnsafe {}
unsafe impl Send for SecurityDefinitionForSymbolRequestVLSData {}

impl Drop for SecurityDefinitionForSymbolRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SecurityDefinitionForSymbolRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SecurityDefinitionForSymbolRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SecurityDefinitionForSymbolRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for SecurityDefinitionForSymbolRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SecurityDefinitionForSymbolRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SecurityDefinitionForSymbolRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SecurityDefinitionForSymbolRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for SecurityDefinitionForSymbolRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SecurityDefinitionForSymbolRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SecurityDefinitionForSymbolRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SecurityDefinitionForSymbolRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for SecurityDefinitionForSymbolRequestFixed {
    type Target = SecurityDefinitionForSymbolRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionForSymbolRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SecurityDefinitionForSymbolRequestFixedUnsafe {
    type Target = SecurityDefinitionForSymbolRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionForSymbolRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SecurityDefinitionForSymbolRequestVLS {
    type Target = SecurityDefinitionForSymbolRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionForSymbolRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SecurityDefinitionForSymbolRequestVLSUnsafe {
    type Target = SecurityDefinitionForSymbolRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SecurityDefinitionForSymbolRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for SecurityDefinitionForSymbolRequestFixed {
    type Data = SecurityDefinitionForSymbolRequestFixedData;

    const BASE_SIZE: usize = 88;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                SecurityDefinitionForSymbolRequestFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionForSymbolRequestFixedData,
        }
    }
}
impl crate::Message for SecurityDefinitionForSymbolRequestFixedUnsafe {
    type Data = SecurityDefinitionForSymbolRequestFixedData;

    const BASE_SIZE: usize = 88;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                SecurityDefinitionForSymbolRequestFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionForSymbolRequestFixedData,
        }
    }
}
impl crate::Message for SecurityDefinitionForSymbolRequestVLS {
    type Data = SecurityDefinitionForSymbolRequestVLSData;

    const BASE_SIZE: usize = 20;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                SecurityDefinitionForSymbolRequestVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionForSymbolRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SecurityDefinitionForSymbolRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SecurityDefinitionForSymbolRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for SecurityDefinitionForSymbolRequestVLSUnsafe {
    type Data = SecurityDefinitionForSymbolRequestVLSData;

    const BASE_SIZE: usize = 20;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                SecurityDefinitionForSymbolRequestVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SecurityDefinitionForSymbolRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SecurityDefinitionForSymbolRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SecurityDefinitionForSymbolRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This is a message from the Client to the Server for requesting Security
/// Definition data for a specific symbol.
///
/// The Server will return a single SecurityDefinitionResponseVLS message
/// in response to this request.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server in order to obtain the IntegerToFloatPriceDivisor value
/// in case the Server uses the integer market data messages.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SecurityDefinitionForSymbolRequest for SecurityDefinitionForSymbolRequestVLS {
    type Safe = SecurityDefinitionForSymbolRequestVLS;
    type Unsafe = SecurityDefinitionForSymbolRequestVLSUnsafe;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The symbol to return a security definition for.
    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    /// The optional exchange for the Symbol.
    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// The symbol to return a security definition for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    /// The optional exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server for requesting Security
/// Definition data for a specific symbol.
///
/// The Server will return a single SecurityDefinitionResponseVLS message
/// in response to this request.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server in order to obtain the IntegerToFloatPriceDivisor value
/// in case the Server uses the integer market data messages.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SecurityDefinitionForSymbolRequest for SecurityDefinitionForSymbolRequestVLSUnsafe {
    type Safe = SecurityDefinitionForSymbolRequestVLS;
    type Unsafe = SecurityDefinitionForSymbolRequestVLSUnsafe;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The symbol to return a security definition for.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    /// The optional exchange for the Symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }

    /// The symbol to return a security definition for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    /// The optional exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This is a message from the Client to the Server for requesting Security
/// Definition data for a specific symbol.
///
/// The Server will return a single SecurityDefinitionResponseVLS message
/// in response to this request.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server in order to obtain the IntegerToFloatPriceDivisor value
/// in case the Server uses the integer market data messages.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SecurityDefinitionForSymbolRequest for SecurityDefinitionForSymbolRequestFixed {
    type Safe = SecurityDefinitionForSymbolRequestFixed;
    type Unsafe = SecurityDefinitionForSymbolRequestFixedUnsafe;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The symbol to return a security definition for.
    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    /// The optional exchange for the Symbol.
    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// The symbol to return a security definition for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    /// The optional exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server for requesting Security
/// Definition data for a specific symbol.
///
/// The Server will return a single SecurityDefinitionResponseVLS message
/// in response to this request.
///
/// The Client must always send a SecurityDefinitionForSymbolRequestVLS message
/// to the Server in order to obtain the IntegerToFloatPriceDivisor value
/// in case the Server uses the integer market data messages.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SecurityDefinitionForSymbolRequest for SecurityDefinitionForSymbolRequestFixedUnsafe {
    type Safe = SecurityDefinitionForSymbolRequestFixed;
    type Unsafe = SecurityDefinitionForSymbolRequestFixedUnsafe;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The symbol to return a security definition for.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(72) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    /// The optional exchange for the Symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(88) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    /// The symbol to return a security definition for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    /// The optional exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                88usize,
                core::mem::size_of::<SecurityDefinitionForSymbolRequestFixedData>(),
                "SecurityDefinitionForSymbolRequestFixedData sizeof expected {:} but was {:}",
                88usize,
                core::mem::size_of::<SecurityDefinitionForSymbolRequestFixedData>()
            );
            assert_eq!(
                88u16,
                SecurityDefinitionForSymbolRequestFixed::new().size(),
                "SecurityDefinitionForSymbolRequestFixed sizeof expected {:} but was {:}",
                88u16,
                SecurityDefinitionForSymbolRequestFixed::new().size(),
            );
            assert_eq!(
                SECURITY_DEFINITION_FOR_SYMBOL_REQUEST,
                SecurityDefinitionForSymbolRequestFixed::new().r#type(),
                "SecurityDefinitionForSymbolRequestFixed type expected {:} but was {:}",
                SECURITY_DEFINITION_FOR_SYMBOL_REQUEST,
                SecurityDefinitionForSymbolRequestFixed::new().r#type(),
            );
            assert_eq!(
                506u16,
                SecurityDefinitionForSymbolRequestFixed::new().r#type(),
                "SecurityDefinitionForSymbolRequestFixed type expected {:} but was {:}",
                506u16,
                SecurityDefinitionForSymbolRequestFixed::new().r#type(),
            );
            let d = SecurityDefinitionForSymbolRequestFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                20usize,
                core::mem::size_of::<SecurityDefinitionForSymbolRequestVLSData>(),
                "SecurityDefinitionForSymbolRequestVLSData sizeof expected {:} but was {:}",
                20usize,
                core::mem::size_of::<SecurityDefinitionForSymbolRequestVLSData>()
            );
            assert_eq!(
                20u16,
                SecurityDefinitionForSymbolRequestVLS::new().size(),
                "SecurityDefinitionForSymbolRequestVLS sizeof expected {:} but was {:}",
                20u16,
                SecurityDefinitionForSymbolRequestVLS::new().size(),
            );
            assert_eq!(
                SECURITY_DEFINITION_FOR_SYMBOL_REQUEST,
                SecurityDefinitionForSymbolRequestVLS::new().r#type(),
                "SecurityDefinitionForSymbolRequestVLS type expected {:} but was {:}",
                SECURITY_DEFINITION_FOR_SYMBOL_REQUEST,
                SecurityDefinitionForSymbolRequestVLS::new().r#type(),
            );
            assert_eq!(
                506u16,
                SecurityDefinitionForSymbolRequestVLS::new().r#type(),
                "SecurityDefinitionForSymbolRequestVLS type expected {:} but was {:}",
                506u16,
                SecurityDefinitionForSymbolRequestVLS::new().r#type(),
            );
            let d = SecurityDefinitionForSymbolRequestVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
        }
    }
}
