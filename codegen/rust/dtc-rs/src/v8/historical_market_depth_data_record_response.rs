// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE_FIXED_SIZE: usize = 32;

/// size             u16                          = HistoricalMarketDepthDataRecordResponseFixedSize  (32)
/// type             u16                          = HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE  (903)
/// request_id       i32                          = 0
/// start_date_time  DateTimeWithMicrosecondsInt  = 0
/// command          u8                           = 0
/// flags            u8                           = 0
/// num_orders       u16                          = 0
/// price            f32                          = 0
/// quantity         u32                          = 0
/// is_final_record  bool                         = false
pub(crate) const HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE_FIXED_DEFAULT: [u8; 32] = [
    32, 0, 135, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
];

pub trait HistoricalMarketDepthDataRecordResponse: Message {
    type Safe: HistoricalMarketDepthDataRecordResponse;
    type Unsafe: HistoricalMarketDepthDataRecordResponse;

    fn request_id(&self) -> i32;

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt;

    fn command(&self) -> u8;

    fn flags(&self) -> u8;

    fn num_orders(&self) -> u16;

    fn price(&self) -> f32;

    fn quantity(&self) -> u32;

    fn is_final_record(&self) -> bool;

    fn set_request_id(&mut self, value: i32) -> &mut Self;

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self;

    fn set_command(&mut self, value: u8) -> &mut Self;

    fn set_flags(&mut self, value: u8) -> &mut Self;

    fn set_num_orders(&mut self, value: u16) -> &mut Self;

    fn set_price(&mut self, value: f32) -> &mut Self;

    fn set_quantity(&mut self, value: u32) -> &mut Self;

    fn set_is_final_record(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalMarketDepthDataRecordResponse) {
        to.set_request_id(self.request_id());
        to.set_start_date_time(self.start_date_time());
        to.set_command(self.command());
        to.set_flags(self.flags());
        to.set_num_orders(self.num_orders());
        to.set_price(self.price());
        to.set_quantity(self.quantity());
        to.set_is_final_record(self.is_final_record());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 4 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct HistoricalMarketDepthDataRecordResponseFixed {
    data: *const HistoricalMarketDepthDataRecordResponseFixedData,
}

pub struct HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    data: *const HistoricalMarketDepthDataRecordResponseFixedData,
}

#[repr(packed(8), C)]
pub struct HistoricalMarketDepthDataRecordResponseFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    start_date_time: DateTimeWithMicrosecondsInt,
    command: u8,
    flags: u8,
    num_orders: u16,
    price: f32,
    quantity: u32,
    is_final_record: bool,
}

impl HistoricalMarketDepthDataRecordResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 32u16.to_le(),
            r#type: HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE.to_le(),
            request_id: 0i32,
            start_date_time: 0i64,
            command: 0u8,
            flags: 0u8,
            num_orders: 0u16,
            price: 0.0f32,
            quantity: 0u32,
            is_final_record: false,
        }
    }
}

unsafe impl Send for HistoricalMarketDepthDataRecordResponseFixed {}
unsafe impl Send for HistoricalMarketDepthDataRecordResponseFixedUnsafe {}
unsafe impl Send for HistoricalMarketDepthDataRecordResponseFixedData {}

impl Drop for HistoricalMarketDepthDataRecordResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalMarketDepthDataRecordResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataRecordResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataRecordResponseFixed {
    type Target = HistoricalMarketDepthDataRecordResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataRecordResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    type Target = HistoricalMarketDepthDataRecordResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for HistoricalMarketDepthDataRecordResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalMarketDepthDataRecordResponseFixed(size: {}, type: {}, request_id: {}, start_date_time: {}, command: {}, flags: {}, num_orders: {}, price: {}, quantity: {}, is_final_record: {})", self.size(), self.r#type(), self.request_id(), self.start_date_time(), self.command(), self.flags(), self.num_orders(), self.price(), self.quantity(), self.is_final_record()).as_str())
    }
}

impl core::fmt::Debug for HistoricalMarketDepthDataRecordResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalMarketDepthDataRecordResponseFixed(size: {}, type: {}, request_id: {}, start_date_time: {}, command: {}, flags: {}, num_orders: {}, price: {}, quantity: {}, is_final_record: {})", self.size(), self.r#type(), self.request_id(), self.start_date_time(), self.command(), self.flags(), self.num_orders(), self.price(), self.quantity(), self.is_final_record()).as_str())
    }
}

impl core::fmt::Display for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalMarketDepthDataRecordResponseFixedUnsafe(size: {}, type: {}, request_id: {}, start_date_time: {}, command: {}, flags: {}, num_orders: {}, price: {}, quantity: {}, is_final_record: {})", self.size(), self.r#type(), self.request_id(), self.start_date_time(), self.command(), self.flags(), self.num_orders(), self.price(), self.quantity(), self.is_final_record()).as_str())
    }
}

impl core::fmt::Debug for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalMarketDepthDataRecordResponseFixedUnsafe(size: {}, type: {}, request_id: {}, start_date_time: {}, command: {}, flags: {}, num_orders: {}, price: {}, quantity: {}, is_final_record: {})", self.size(), self.r#type(), self.request_id(), self.start_date_time(), self.command(), self.flags(), self.num_orders(), self.price(), self.quantity(), self.is_final_record()).as_str())
    }
}

impl crate::Message for HistoricalMarketDepthDataRecordResponseFixed {
    type Data = HistoricalMarketDepthDataRecordResponseFixedData;

    const TYPE: u16 = HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE;
    const BASE_SIZE: usize = 32;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalMarketDepthDataRecordResponseFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataRecordResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalMarketDepthDataRecordResponseFixedUnsafe {
    type Data = HistoricalMarketDepthDataRecordResponseFixedData;

    const TYPE: u16 = HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE;
    const BASE_SIZE: usize = 32;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalMarketDepthDataRecordResponseFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalMarketDepthDataRecordResponseFixedData,
        }
    }
}
impl HistoricalMarketDepthDataRecordResponse for HistoricalMarketDepthDataRecordResponseFixed {
    type Safe = HistoricalMarketDepthDataRecordResponseFixed;
    type Unsafe = HistoricalMarketDepthDataRecordResponseFixedUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.start_date_time)
    }

    fn command(&self) -> u8 {
        self.command
    }

    fn flags(&self) -> u8 {
        self.flags
    }

    fn num_orders(&self) -> u16 {
        u16::from_le(self.num_orders)
    }

    fn price(&self) -> f32 {
        f32_le(self.price)
    }

    fn quantity(&self) -> u32 {
        u32::from_le(self.quantity)
    }

    fn is_final_record(&self) -> bool {
        self.is_final_record
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.start_date_time = value.to_le();
        self
    }

    fn set_command(&mut self, value: u8) -> &mut Self {
        self.command = value;
        self
    }

    fn set_flags(&mut self, value: u8) -> &mut Self {
        self.flags = value;
        self
    }

    fn set_num_orders(&mut self, value: u16) -> &mut Self {
        self.num_orders = value.to_le();
        self
    }

    fn set_price(&mut self, value: f32) -> &mut Self {
        self.price = f32_le(value);
        self
    }

    fn set_quantity(&mut self, value: u32) -> &mut Self {
        self.quantity = value.to_le();
        self
    }

    fn set_is_final_record(&mut self, value: bool) -> &mut Self {
        self.is_final_record = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalMarketDepthDataRecordResponse
    for HistoricalMarketDepthDataRecordResponseFixedUnsafe
{
    type Safe = HistoricalMarketDepthDataRecordResponseFixed;
    type Unsafe = HistoricalMarketDepthDataRecordResponseFixedUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn start_date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(16) {
            0i64
        } else {
            i64::from_le(self.start_date_time)
        }
    }

    fn command(&self) -> u8 {
        if self.is_out_of_bounds(17) {
            0u8
        } else {
            self.command
        }
    }

    fn flags(&self) -> u8 {
        if self.is_out_of_bounds(18) {
            0u8
        } else {
            self.flags
        }
    }

    fn num_orders(&self) -> u16 {
        if self.is_out_of_bounds(20) {
            0u16
        } else {
            u16::from_le(self.num_orders)
        }
    }

    fn price(&self) -> f32 {
        if self.is_out_of_bounds(24) {
            0.0f32
        } else {
            f32_le(self.price)
        }
    }

    fn quantity(&self) -> u32 {
        if self.is_out_of_bounds(28) {
            0u32
        } else {
            u32::from_le(self.quantity)
        }
    }

    fn is_final_record(&self) -> bool {
        if self.is_out_of_bounds(29) {
            false
        } else {
            self.is_final_record
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_start_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.start_date_time = value.to_le();
        }
        self
    }

    fn set_command(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(17) {
            self.command = value;
        }
        self
    }

    fn set_flags(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.flags = value;
        }
        self
    }

    fn set_num_orders(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.num_orders = value.to_le();
        }
        self
    }

    fn set_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.price = f32_le(value);
        }
        self
    }

    fn set_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.quantity = value.to_le();
        }
        self
    }

    fn set_is_final_record(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(29) {
            self.is_final_record = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                32usize,
                core::mem::size_of::<HistoricalMarketDepthDataRecordResponseFixedData>(),
                "HistoricalMarketDepthDataRecordResponseFixedData sizeof expected {:} but was {:}",
                32usize,
                core::mem::size_of::<HistoricalMarketDepthDataRecordResponseFixedData>()
            );
            assert_eq!(
                32u16,
                HistoricalMarketDepthDataRecordResponseFixed::new().size(),
                "HistoricalMarketDepthDataRecordResponseFixed sizeof expected {:} but was {:}",
                32u16,
                HistoricalMarketDepthDataRecordResponseFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE,
                HistoricalMarketDepthDataRecordResponseFixed::new().r#type(),
                "HistoricalMarketDepthDataRecordResponseFixed type expected {:} but was {:}",
                HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE,
                HistoricalMarketDepthDataRecordResponseFixed::new().r#type(),
            );
            assert_eq!(
                903u16,
                HistoricalMarketDepthDataRecordResponseFixed::new().r#type(),
                "HistoricalMarketDepthDataRecordResponseFixed type expected {:} but was {:}",
                903u16,
                HistoricalMarketDepthDataRecordResponseFixed::new().r#type(),
            );
            let d = HistoricalMarketDepthDataRecordResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
                "start_date_time offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.command) as usize) - p,
                "command offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.command) as usize) - p,
            );
            assert_eq!(
                17usize,
                (core::ptr::addr_of!(d.flags) as usize) - p,
                "flags offset expected {:} but was {:}",
                17usize,
                (core::ptr::addr_of!(d.flags) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.num_orders) as usize) - p,
                "num_orders offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.num_orders) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                28usize,
                (core::ptr::addr_of!(d.is_final_record) as usize) - p,
                "is_final_record offset expected {:} but was {:}",
                28usize,
                (core::ptr::addr_of!(d.is_final_record) as usize) - p,
            );
        }
    }
}
