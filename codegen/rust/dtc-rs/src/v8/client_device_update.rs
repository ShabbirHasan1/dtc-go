// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const CLIENT_DEVICE_UPDATE_FIXED_SIZE: usize = 12;

/// size                      u16  = ClientDeviceUpdateFixedSize  (12)
/// type                      u16  = CLIENT_DEVICE_UPDATE  (10139)
/// client_device_identifier  i64  = 0
pub(crate) const CLIENT_DEVICE_UPDATE_FIXED_DEFAULT: [u8; 12] =
    [12, 0, 155, 39, 0, 0, 0, 0, 0, 0, 0, 0];

pub trait ClientDeviceUpdate: Message {
    type Safe: ClientDeviceUpdate;
    type Unsafe: ClientDeviceUpdate;

    fn client_device_identifier(&self) -> i64;

    fn set_client_device_identifier(&mut self, value: i64) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl ClientDeviceUpdate) {
        to.set_client_device_identifier(self.client_device_identifier());
    }
}

pub struct ClientDeviceUpdateFixed {
    data: *const ClientDeviceUpdateFixedData,
}

pub struct ClientDeviceUpdateFixedUnsafe {
    data: *const ClientDeviceUpdateFixedData,
}

#[repr(packed(1), C)]
pub struct ClientDeviceUpdateFixedData {
    size: u16,
    r#type: u16,
    client_device_identifier: i64,
}

impl ClientDeviceUpdateFixedData {
    pub fn new() -> Self {
        Self {
            size: 12u16.to_le(),
            r#type: CLIENT_DEVICE_UPDATE.to_le(),
            client_device_identifier: 0i64.to_le(),
        }
    }
}

unsafe impl Send for ClientDeviceUpdateFixed {}
unsafe impl Send for ClientDeviceUpdateFixedUnsafe {}
unsafe impl Send for ClientDeviceUpdateFixedData {}

impl Drop for ClientDeviceUpdateFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ClientDeviceUpdateFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for ClientDeviceUpdateFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ClientDeviceUpdateFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for ClientDeviceUpdateFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ClientDeviceUpdateFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for ClientDeviceUpdateFixed {
    type Target = ClientDeviceUpdateFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ClientDeviceUpdateFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ClientDeviceUpdateFixedUnsafe {
    type Target = ClientDeviceUpdateFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ClientDeviceUpdateFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for ClientDeviceUpdateFixed {
    type Data = ClientDeviceUpdateFixedData;

    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ClientDeviceUpdateFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const ClientDeviceUpdateFixedData,
        }
    }
}
impl crate::Message for ClientDeviceUpdateFixedUnsafe {
    type Data = ClientDeviceUpdateFixedData;

    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ClientDeviceUpdateFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const ClientDeviceUpdateFixedData,
        }
    }
}
impl ClientDeviceUpdate for ClientDeviceUpdateFixed {
    type Safe = ClientDeviceUpdateFixed;
    type Unsafe = ClientDeviceUpdateFixedUnsafe;

    fn client_device_identifier(&self) -> i64 {
        i64::from_le(self.client_device_identifier)
    }

    fn set_client_device_identifier(&mut self, value: i64) -> &mut Self {
        self.client_device_identifier = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl ClientDeviceUpdate for ClientDeviceUpdateFixedUnsafe {
    type Safe = ClientDeviceUpdateFixed;
    type Unsafe = ClientDeviceUpdateFixedUnsafe;

    fn client_device_identifier(&self) -> i64 {
        if self.is_out_of_bounds(12) {
            0i64.to_le()
        } else {
            i64::from_le(self.client_device_identifier)
        }
    }

    fn set_client_device_identifier(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.client_device_identifier = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                12usize,
                core::mem::size_of::<ClientDeviceUpdateFixedData>(),
                "ClientDeviceUpdateFixedData sizeof expected {:} but was {:}",
                12usize,
                core::mem::size_of::<ClientDeviceUpdateFixedData>()
            );
            assert_eq!(
                12u16,
                ClientDeviceUpdateFixed::new().size(),
                "ClientDeviceUpdateFixed sizeof expected {:} but was {:}",
                12u16,
                ClientDeviceUpdateFixed::new().size(),
            );
            assert_eq!(
                CLIENT_DEVICE_UPDATE,
                ClientDeviceUpdateFixed::new().r#type(),
                "ClientDeviceUpdateFixed type expected {:} but was {:}",
                CLIENT_DEVICE_UPDATE,
                ClientDeviceUpdateFixed::new().r#type(),
            );
            assert_eq!(
                10139u16,
                ClientDeviceUpdateFixed::new().r#type(),
                "ClientDeviceUpdateFixed type expected {:} but was {:}",
                10139u16,
                ClientDeviceUpdateFixed::new().r#type(),
            );
            let d = ClientDeviceUpdateFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.client_device_identifier) as usize) - p,
                "client_device_identifier offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.client_device_identifier) as usize) - p,
            );
        }
    }
}
