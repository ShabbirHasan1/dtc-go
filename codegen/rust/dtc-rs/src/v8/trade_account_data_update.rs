// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const TRADE_ACCOUNT_DATA_UPDATE_VLS_SIZE: usize = 232;

/// size                                                                                u16     = TradeAccountDataUpdateVLSSize  (232)
/// type                                                                                u16     = TRADE_ACCOUNT_DATA_UPDATE  (10117)
/// base_size                                                                           u16     = TradeAccountDataUpdateVLSSize  (232)
/// request_id                                                                          u32     = 0
/// is_new_account                                                                      bool    = false
/// new_account_authorized_username                                                     string  = ""
/// trade_account                                                                       string  = ""
/// currency_code_is_set                                                                bool    = false
/// currency_code                                                                       string  = ""
/// daily_net_loss_limit_in_account_currency_is_set                                     bool    = false
/// daily_net_loss_limit_in_account_currency                                            f32     = 0
/// percent_of_cash_balance_for_daily_net_loss_limit_is_set                             bool    = false
/// percent_of_cash_balance_for_daily_net_loss_limit                                    i32     = 0
/// use_trailing_account_value_to_not_allow_increase_in_positions_is_set                bool    = false
/// use_trailing_account_value_to_not_allow_increase_in_positions                       bool    = false
/// do_not_allow_increase_in_positions_at_daily_loss_limit_is_set                       bool    = false
/// do_not_allow_increase_in_positions_at_daily_loss_limit                              u8      = 0
/// flatten_positions_at_daily_loss_limit_is_set                                        bool    = false
/// flatten_positions_at_daily_loss_limit                                               u8      = 0
/// close_positions_at_end_of_day_is_set                                                bool    = false
/// close_positions_at_end_of_day                                                       u8      = 0
/// flatten_positions_when_under_margin_intraday_is_set                                 bool    = false
/// flatten_positions_when_under_margin_intraday                                        u8      = 0
/// flatten_positions_when_under_margin_at_end_of_day_is_set                            bool    = false
/// flatten_positions_when_under_margin_at_end_of_day                                   u8      = 0
/// sender_sub_id_is_set                                                                bool    = false
/// sender_sub_id                                                                       string  = ""
/// sender_location_id_is_set                                                           bool    = false
/// sender_location_id                                                                  string  = ""
/// self_match_prevention_id_is_set                                                     bool    = false
/// self_match_prevention_id                                                            string  = ""
/// cti_code_is_set                                                                     bool    = false
/// cti_code                                                                            i32     = 0
/// trade_account_is_read_only_is_set                                                   bool    = false
/// trade_account_is_read_only                                                          bool    = false
/// maximum_global_position_quantity_is_set                                             bool    = false
/// maximum_global_position_quantity                                                    i32     = 0
/// trade_fee_per_contract_is_set                                                       bool    = false
/// trade_fee_per_contract                                                              f64     = 0
/// trade_fee_per_share_is_set                                                          bool    = false
/// trade_fee_per_share                                                                 f64     = 0
/// require_sufficient_margin_for_new_positions_is_set                                  bool    = false
/// require_sufficient_margin_for_new_positions                                         u8      = 1
/// use_percent_of_margin_is_set                                                        bool    = false
/// use_percent_of_margin                                                               i32     = 100
/// use_percent_of_margin_for_day_trading_is_set                                        bool    = false
/// use_percent_of_margin_for_day_trading                                               i32     = 100
/// maximum_allowed_account_balance_for_positions_as_percentage_is_set                  bool    = false
/// maximum_allowed_account_balance_for_positions_as_percentage                         i32     = 100
/// firm_id_is_set                                                                      bool    = false
/// firm_id                                                                             string  = ""
/// trading_is_disabled_is_set                                                          bool    = false
/// trading_is_disabled                                                                 bool    = false
/// descriptive_name_is_set                                                             bool    = false
/// descriptive_name                                                                    string  = ""
/// is_master_firm_control_account_is_set                                               bool    = false
/// is_master_firm_control_account                                                      bool    = false
/// minimum_required_account_value_is_set                                               bool    = false
/// minimum_required_account_value                                                      f64     = 0
/// begin_time_for_day_margin_is_set                                                    bool    = false
/// begin_time_for_day_margin                                                           i64     = 0
/// end_time_for_day_margin_is_set                                                      bool    = false
/// end_time_for_day_margin                                                             i64     = 0
/// day_margin_time_zone_is_set                                                         bool    = false
/// day_margin_time_zone                                                                string  = ""
/// use_master_firm_flatten_positions_when_under_margin_intraday_is_set                 bool    = false
/// use_master_firm_flatten_positions_when_under_margin_intraday                        bool    = false
/// use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set            bool    = false
/// use_master_firm_flatten_positions_when_under_margin_at_end_of_day                   bool    = false
/// use_master_firm_symbol_limits_array_is_set                                          bool    = false
/// use_master_firm_symbol_limits_array                                                 bool    = false
/// use_master_firm_trade_fees_is_set                                                   bool    = false
/// use_master_firm_trade_fees                                                          bool    = false
/// use_master_firm_trade_fee_per_share_is_set                                          bool    = false
/// use_master_firm_trade_fee_per_share                                                 bool    = false
/// use_master_firm_require_sufficient_margin_for_new_positions_is_set                  bool    = false
/// use_master_firm_require_sufficient_margin_for_new_positions                         bool    = false
/// use_master_firm_use_percent_of_margin_is_set                                        bool    = false
/// use_master_firm_use_percent_of_margin                                               bool    = false
/// use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set  bool    = false
/// use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage         bool    = false
/// use_master_firm_minimum_required_account_value_is_set                               bool    = false
/// use_master_firm_minimum_required_account_value                                      bool    = false
/// use_master_firm_margin_time_settings_is_set                                         bool    = false
/// use_master_firm_margin_time_settings                                                bool    = false
/// use_master_firm_trading_is_disabled_is_set                                          bool    = false
/// use_master_firm_trading_is_disabled                                                 bool    = false
/// is_trade_statistics_publically_shared_is_set                                        bool    = false
/// is_trade_statistics_publically_shared                                               bool    = false
/// is_read_only_following_requests_allowed_is_set                                      bool    = false
/// is_read_only_following_requests_allowed                                             bool    = false
/// is_trade_account_sharing_allowed_is_set                                             bool    = false
/// is_trade_account_sharing_allowed                                                    bool    = false
/// read_only_share_to_all_sc_usernames_is_set                                          bool    = false
/// read_only_share_to_all_sc_usernames                                                 u8      = 0
/// use_master_firm_symbol_commissions_array_is_set                                     bool    = false
/// use_master_firm_symbol_commissions_array                                            bool    = false
/// use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set       bool    = false
/// use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit              bool    = false
/// use_master_firm_use_percent_of_margin_for_day_trading_is_set                        bool    = false
/// use_master_firm_use_percent_of_margin_for_day_trading                               bool    = false
/// use_master_firm_symbol_commissions_array_full_override_is_set                       bool    = false
/// use_master_firm_symbol_commissions_array_full_override                              bool    = false
/// use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set         bool    = false
/// use_master_firm_num_days_before_last_trading_date_to_disallow_orders                bool    = false
/// use_master_firm_use_percent_of_margin_full_override_is_set                          bool    = false
/// use_master_firm_use_percent_of_margin_full_override                                 bool    = false
/// use_master_firm_trade_fees_full_override_is_set                                     bool    = false
/// use_master_firm_trade_fees_full_override                                            bool    = false
/// use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set          bool    = false
/// use_master_firm_use_percent_of_margin_for_day_trading_full_override                 bool    = false
/// liquidation_only_mode_is_set                                                        bool    = false
/// liquidation_only_mode                                                               u8      = 0
/// customer_or_firm_is_set                                                             bool    = false
/// customer_or_firm                                                                    u8      = 0
/// master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set                 bool    = false
/// master_firm_flatten_cancel_account_when_daily_loss_limit_met                        u8      = 0
/// master_firm_flatten_cancel_when_under_minimum_account_value_is_set                  bool    = false
/// master_firm_flatten_cancel_when_under_minimum_account_value                         u8      = 0
/// master_firm_flatten_cancel_when_under_margin_intraday_is_set                        bool    = false
/// master_firm_flatten_cancel_when_under_margin_intraday                               u8      = 0
/// master_firm_flatten_cancel_when_under_margin_end_of_day_is_set                      bool    = false
/// master_firm_flatten_cancel_when_under_margin_end_of_day                             u8      = 0
/// master_firm_maximum_order_quantity_is_set                                           u32     = 0
/// master_firm_maximum_order_quantity                                                  u32     = 0
/// exchange_trader_id_is_set                                                           bool    = false
/// exchange_trader_id                                                                  string  = ""
/// use_fixed_cash_on_hand_balance_is_set                                               bool    = false
/// use_fixed_cash_on_hand_balance                                                      bool    = false
/// fixed_cash_on_hand_balance_is_set                                                   bool    = false
/// fixed_cash_on_hand_balance                                                          f32     = 0.000000
pub(crate) const TRADE_ACCOUNT_DATA_UPDATE_VLS_DEFAULT: [u8; 232] = [
    232, 0, 133, 39, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 100, 0, 0, 0, 0, 100, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait TradeAccountDataUpdate: Message {
    type Safe: TradeAccountDataUpdate;
    type Unsafe: TradeAccountDataUpdate;

    fn request_id(&self) -> u32;

    fn is_new_account(&self) -> bool;

    fn new_account_authorized_username(&self) -> &str;

    fn trade_account(&self) -> &str;

    fn currency_code_is_set(&self) -> bool;

    fn currency_code(&self) -> &str;

    fn daily_net_loss_limit_in_account_currency_is_set(&self) -> bool;

    fn daily_net_loss_limit_in_account_currency(&self) -> f32;

    fn percent_of_cash_balance_for_daily_net_loss_limit_is_set(&self) -> bool;

    fn percent_of_cash_balance_for_daily_net_loss_limit(&self) -> i32;

    fn use_trailing_account_value_to_not_allow_increase_in_positions_is_set(&self) -> bool;

    fn use_trailing_account_value_to_not_allow_increase_in_positions(&self) -> bool;

    fn do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(&self) -> bool;

    fn do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> u8;

    fn flatten_positions_at_daily_loss_limit_is_set(&self) -> bool;

    fn flatten_positions_at_daily_loss_limit(&self) -> u8;

    fn close_positions_at_end_of_day_is_set(&self) -> bool;

    fn close_positions_at_end_of_day(&self) -> u8;

    fn flatten_positions_when_under_margin_intraday_is_set(&self) -> bool;

    fn flatten_positions_when_under_margin_intraday(&self) -> u8;

    fn flatten_positions_when_under_margin_at_end_of_day_is_set(&self) -> bool;

    fn flatten_positions_when_under_margin_at_end_of_day(&self) -> u8;

    fn sender_sub_id_is_set(&self) -> bool;

    fn sender_sub_id(&self) -> &str;

    fn sender_location_id_is_set(&self) -> bool;

    fn sender_location_id(&self) -> &str;

    fn self_match_prevention_id_is_set(&self) -> bool;

    fn self_match_prevention_id(&self) -> &str;

    fn cti_code_is_set(&self) -> bool;

    fn cti_code(&self) -> i32;

    fn trade_account_is_read_only_is_set(&self) -> bool;

    fn trade_account_is_read_only(&self) -> bool;

    fn maximum_global_position_quantity_is_set(&self) -> bool;

    fn maximum_global_position_quantity(&self) -> i32;

    fn trade_fee_per_contract_is_set(&self) -> bool;

    fn trade_fee_per_contract(&self) -> f64;

    fn trade_fee_per_share_is_set(&self) -> bool;

    fn trade_fee_per_share(&self) -> f64;

    fn require_sufficient_margin_for_new_positions_is_set(&self) -> bool;

    fn require_sufficient_margin_for_new_positions(&self) -> u8;

    fn use_percent_of_margin_is_set(&self) -> bool;

    fn use_percent_of_margin(&self) -> i32;

    fn use_percent_of_margin_for_day_trading_is_set(&self) -> bool;

    fn use_percent_of_margin_for_day_trading(&self) -> i32;

    fn maximum_allowed_account_balance_for_positions_as_percentage_is_set(&self) -> bool;

    fn maximum_allowed_account_balance_for_positions_as_percentage(&self) -> i32;

    fn firm_id_is_set(&self) -> bool;

    fn firm_id(&self) -> &str;

    fn trading_is_disabled_is_set(&self) -> bool;

    fn trading_is_disabled(&self) -> bool;

    fn descriptive_name_is_set(&self) -> bool;

    fn descriptive_name(&self) -> &str;

    fn is_master_firm_control_account_is_set(&self) -> bool;

    fn is_master_firm_control_account(&self) -> bool;

    fn minimum_required_account_value_is_set(&self) -> bool;

    fn minimum_required_account_value(&self) -> f64;

    fn begin_time_for_day_margin_is_set(&self) -> bool;

    fn begin_time_for_day_margin(&self) -> i64;

    fn end_time_for_day_margin_is_set(&self) -> bool;

    fn end_time_for_day_margin(&self) -> i64;

    fn day_margin_time_zone_is_set(&self) -> bool;

    fn day_margin_time_zone(&self) -> &str;

    fn use_master_firm_flatten_positions_when_under_margin_intraday_is_set(&self) -> bool;

    fn use_master_firm_flatten_positions_when_under_margin_intraday(&self) -> bool;

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(&self) -> bool;

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day(&self) -> bool;

    fn use_master_firm_symbol_limits_array_is_set(&self) -> bool;

    fn use_master_firm_symbol_limits_array(&self) -> bool;

    fn use_master_firm_trade_fees_is_set(&self) -> bool;

    fn use_master_firm_trade_fees(&self) -> bool;

    fn use_master_firm_trade_fee_per_share_is_set(&self) -> bool;

    fn use_master_firm_trade_fee_per_share(&self) -> bool;

    fn use_master_firm_require_sufficient_margin_for_new_positions_is_set(&self) -> bool;

    fn use_master_firm_require_sufficient_margin_for_new_positions(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_is_set(&self) -> bool;

    fn use_master_firm_use_percent_of_margin(&self) -> bool;

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &self,
    ) -> bool;

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(&self) -> bool;

    fn use_master_firm_minimum_required_account_value_is_set(&self) -> bool;

    fn use_master_firm_minimum_required_account_value(&self) -> bool;

    fn use_master_firm_margin_time_settings_is_set(&self) -> bool;

    fn use_master_firm_margin_time_settings(&self) -> bool;

    fn use_master_firm_trading_is_disabled_is_set(&self) -> bool;

    fn use_master_firm_trading_is_disabled(&self) -> bool;

    fn is_trade_statistics_publically_shared_is_set(&self) -> bool;

    fn is_trade_statistics_publically_shared(&self) -> bool;

    fn is_read_only_following_requests_allowed_is_set(&self) -> bool;

    fn is_read_only_following_requests_allowed(&self) -> bool;

    fn is_trade_account_sharing_allowed_is_set(&self) -> bool;

    fn is_trade_account_sharing_allowed(&self) -> bool;

    fn read_only_share_to_all_sc_usernames_is_set(&self) -> bool;

    fn read_only_share_to_all_sc_usernames(&self) -> u8;

    fn use_master_firm_symbol_commissions_array_is_set(&self) -> bool;

    fn use_master_firm_symbol_commissions_array(&self) -> bool;

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(&self)
        -> bool;

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_for_day_trading_is_set(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_for_day_trading(&self) -> bool;

    fn use_master_firm_symbol_commissions_array_full_override_is_set(&self) -> bool;

    fn use_master_firm_symbol_commissions_array_full_override(&self) -> bool;

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(&self) -> bool;

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_full_override_is_set(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_full_override(&self) -> bool;

    fn use_master_firm_trade_fees_full_override_is_set(&self) -> bool;

    fn use_master_firm_trade_fees_full_override(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(&self) -> bool;

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override(&self) -> bool;

    fn liquidation_only_mode_is_set(&self) -> bool;

    fn liquidation_only_mode(&self) -> u8;

    fn customer_or_firm_is_set(&self) -> bool;

    fn customer_or_firm(&self) -> u8;

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(&self) -> bool;

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met(&self) -> u8;

    fn master_firm_flatten_cancel_when_under_minimum_account_value_is_set(&self) -> bool;

    fn master_firm_flatten_cancel_when_under_minimum_account_value(&self) -> u8;

    fn master_firm_flatten_cancel_when_under_margin_intraday_is_set(&self) -> bool;

    fn master_firm_flatten_cancel_when_under_margin_intraday(&self) -> u8;

    fn master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(&self) -> bool;

    fn master_firm_flatten_cancel_when_under_margin_end_of_day(&self) -> u8;

    fn master_firm_maximum_order_quantity_is_set(&self) -> u32;

    fn master_firm_maximum_order_quantity(&self) -> u32;

    fn exchange_trader_id_is_set(&self) -> bool;

    fn exchange_trader_id(&self) -> &str;

    fn use_fixed_cash_on_hand_balance_is_set(&self) -> bool;

    fn use_fixed_cash_on_hand_balance(&self) -> bool;

    fn fixed_cash_on_hand_balance_is_set(&self) -> bool;

    fn fixed_cash_on_hand_balance(&self) -> f32;

    fn set_request_id(&mut self, value: u32) -> &mut Self;

    fn set_is_new_account(&mut self, value: bool) -> &mut Self;

    fn set_new_account_authorized_username(&mut self, value: &str) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_currency_code_is_set(&mut self, value: bool) -> &mut Self;

    fn set_currency_code(&mut self, value: &str) -> &mut Self;

    fn set_daily_net_loss_limit_in_account_currency_is_set(&mut self, value: bool) -> &mut Self;

    fn set_daily_net_loss_limit_in_account_currency(&mut self, value: f32) -> &mut Self;

    fn set_percent_of_cash_balance_for_daily_net_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_percent_of_cash_balance_for_daily_net_loss_limit(&mut self, value: i32) -> &mut Self;

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_flatten_positions_at_daily_loss_limit_is_set(&mut self, value: bool) -> &mut Self;

    fn set_flatten_positions_at_daily_loss_limit(&mut self, value: u8) -> &mut Self;

    fn set_close_positions_at_end_of_day_is_set(&mut self, value: bool) -> &mut Self;

    fn set_close_positions_at_end_of_day(&mut self, value: u8) -> &mut Self;

    fn set_flatten_positions_when_under_margin_intraday_is_set(&mut self, value: bool)
        -> &mut Self;

    fn set_flatten_positions_when_under_margin_intraday(&mut self, value: u8) -> &mut Self;

    fn set_flatten_positions_when_under_margin_at_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_flatten_positions_when_under_margin_at_end_of_day(&mut self, value: u8) -> &mut Self;

    fn set_sender_sub_id_is_set(&mut self, value: bool) -> &mut Self;

    fn set_sender_sub_id(&mut self, value: &str) -> &mut Self;

    fn set_sender_location_id_is_set(&mut self, value: bool) -> &mut Self;

    fn set_sender_location_id(&mut self, value: &str) -> &mut Self;

    fn set_self_match_prevention_id_is_set(&mut self, value: bool) -> &mut Self;

    fn set_self_match_prevention_id(&mut self, value: &str) -> &mut Self;

    fn set_cti_code_is_set(&mut self, value: bool) -> &mut Self;

    fn set_cti_code(&mut self, value: i32) -> &mut Self;

    fn set_trade_account_is_read_only_is_set(&mut self, value: bool) -> &mut Self;

    fn set_trade_account_is_read_only(&mut self, value: bool) -> &mut Self;

    fn set_maximum_global_position_quantity_is_set(&mut self, value: bool) -> &mut Self;

    fn set_maximum_global_position_quantity(&mut self, value: i32) -> &mut Self;

    fn set_trade_fee_per_contract_is_set(&mut self, value: bool) -> &mut Self;

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self;

    fn set_trade_fee_per_share_is_set(&mut self, value: bool) -> &mut Self;

    fn set_trade_fee_per_share(&mut self, value: f64) -> &mut Self;

    fn set_require_sufficient_margin_for_new_positions_is_set(&mut self, value: bool) -> &mut Self;

    fn set_require_sufficient_margin_for_new_positions(&mut self, value: u8) -> &mut Self;

    fn set_use_percent_of_margin_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self;

    fn set_use_percent_of_margin_for_day_trading_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self;

    fn set_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: i32,
    ) -> &mut Self;

    fn set_firm_id_is_set(&mut self, value: bool) -> &mut Self;

    fn set_firm_id(&mut self, value: &str) -> &mut Self;

    fn set_trading_is_disabled_is_set(&mut self, value: bool) -> &mut Self;

    fn set_trading_is_disabled(&mut self, value: bool) -> &mut Self;

    fn set_descriptive_name_is_set(&mut self, value: bool) -> &mut Self;

    fn set_descriptive_name(&mut self, value: &str) -> &mut Self;

    fn set_is_master_firm_control_account_is_set(&mut self, value: bool) -> &mut Self;

    fn set_is_master_firm_control_account(&mut self, value: bool) -> &mut Self;

    fn set_minimum_required_account_value_is_set(&mut self, value: bool) -> &mut Self;

    fn set_minimum_required_account_value(&mut self, value: f64) -> &mut Self;

    fn set_begin_time_for_day_margin_is_set(&mut self, value: bool) -> &mut Self;

    fn set_begin_time_for_day_margin(&mut self, value: i64) -> &mut Self;

    fn set_end_time_for_day_margin_is_set(&mut self, value: bool) -> &mut Self;

    fn set_end_time_for_day_margin(&mut self, value: i64) -> &mut Self;

    fn set_day_margin_time_zone_is_set(&mut self, value: bool) -> &mut Self;

    fn set_day_margin_time_zone(&mut self, value: &str) -> &mut Self;

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_symbol_limits_array_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_symbol_limits_array(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trade_fees_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trade_fees(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trade_fee_per_share_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trade_fee_per_share(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_require_sufficient_margin_for_new_positions_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_require_sufficient_margin_for_new_positions(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_minimum_required_account_value_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_minimum_required_account_value(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_margin_time_settings_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_margin_time_settings(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trading_is_disabled_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trading_is_disabled(&mut self, value: bool) -> &mut Self;

    fn set_is_trade_statistics_publically_shared_is_set(&mut self, value: bool) -> &mut Self;

    fn set_is_trade_statistics_publically_shared(&mut self, value: bool) -> &mut Self;

    fn set_is_read_only_following_requests_allowed_is_set(&mut self, value: bool) -> &mut Self;

    fn set_is_read_only_following_requests_allowed(&mut self, value: bool) -> &mut Self;

    fn set_is_trade_account_sharing_allowed_is_set(&mut self, value: bool) -> &mut Self;

    fn set_is_trade_account_sharing_allowed(&mut self, value: bool) -> &mut Self;

    fn set_read_only_share_to_all_sc_usernames_is_set(&mut self, value: bool) -> &mut Self;

    fn set_read_only_share_to_all_sc_usernames(&mut self, value: u8) -> &mut Self;

    fn set_use_master_firm_symbol_commissions_array_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_symbol_commissions_array(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_for_day_trading(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_symbol_commissions_array_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_symbol_commissions_array_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_full_override(&mut self, value: bool)
        -> &mut Self;

    fn set_use_master_firm_trade_fees_full_override_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_trade_fees_full_override(&mut self, value: bool) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_liquidation_only_mode_is_set(&mut self, value: bool) -> &mut Self;

    fn set_liquidation_only_mode(&mut self, value: u8) -> &mut Self;

    fn set_customer_or_firm_is_set(&mut self, value: bool) -> &mut Self;

    fn set_customer_or_firm(&mut self, value: u8) -> &mut Self;

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_margin_intraday(&mut self, value: u8)
        -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self;

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day(
        &mut self,
        value: u8,
    ) -> &mut Self;

    fn set_master_firm_maximum_order_quantity_is_set(&mut self, value: u32) -> &mut Self;

    fn set_master_firm_maximum_order_quantity(&mut self, value: u32) -> &mut Self;

    fn set_exchange_trader_id_is_set(&mut self, value: bool) -> &mut Self;

    fn set_exchange_trader_id(&mut self, value: &str) -> &mut Self;

    fn set_use_fixed_cash_on_hand_balance_is_set(&mut self, value: bool) -> &mut Self;

    fn set_use_fixed_cash_on_hand_balance(&mut self, value: bool) -> &mut Self;

    fn set_fixed_cash_on_hand_balance_is_set(&mut self, value: bool) -> &mut Self;

    fn set_fixed_cash_on_hand_balance(&mut self, value: f32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl TradeAccountDataUpdate) {
        to.set_request_id(self.request_id());
        to.set_is_new_account(self.is_new_account());
        to.set_new_account_authorized_username(self.new_account_authorized_username());
        to.set_trade_account(self.trade_account());
        to.set_currency_code_is_set(self.currency_code_is_set());
        to.set_currency_code(self.currency_code());
        to.set_daily_net_loss_limit_in_account_currency_is_set(
            self.daily_net_loss_limit_in_account_currency_is_set(),
        );
        to.set_daily_net_loss_limit_in_account_currency(
            self.daily_net_loss_limit_in_account_currency(),
        );
        to.set_percent_of_cash_balance_for_daily_net_loss_limit_is_set(
            self.percent_of_cash_balance_for_daily_net_loss_limit_is_set(),
        );
        to.set_percent_of_cash_balance_for_daily_net_loss_limit(
            self.percent_of_cash_balance_for_daily_net_loss_limit(),
        );
        to.set_use_trailing_account_value_to_not_allow_increase_in_positions_is_set(
            self.use_trailing_account_value_to_not_allow_increase_in_positions_is_set(),
        );
        to.set_use_trailing_account_value_to_not_allow_increase_in_positions(
            self.use_trailing_account_value_to_not_allow_increase_in_positions(),
        );
        to.set_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
            self.do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(),
        );
        to.set_do_not_allow_increase_in_positions_at_daily_loss_limit(
            self.do_not_allow_increase_in_positions_at_daily_loss_limit(),
        );
        to.set_flatten_positions_at_daily_loss_limit_is_set(
            self.flatten_positions_at_daily_loss_limit_is_set(),
        );
        to.set_flatten_positions_at_daily_loss_limit(self.flatten_positions_at_daily_loss_limit());
        to.set_close_positions_at_end_of_day_is_set(self.close_positions_at_end_of_day_is_set());
        to.set_close_positions_at_end_of_day(self.close_positions_at_end_of_day());
        to.set_flatten_positions_when_under_margin_intraday_is_set(
            self.flatten_positions_when_under_margin_intraday_is_set(),
        );
        to.set_flatten_positions_when_under_margin_intraday(
            self.flatten_positions_when_under_margin_intraday(),
        );
        to.set_flatten_positions_when_under_margin_at_end_of_day_is_set(
            self.flatten_positions_when_under_margin_at_end_of_day_is_set(),
        );
        to.set_flatten_positions_when_under_margin_at_end_of_day(
            self.flatten_positions_when_under_margin_at_end_of_day(),
        );
        to.set_sender_sub_id_is_set(self.sender_sub_id_is_set());
        to.set_sender_sub_id(self.sender_sub_id());
        to.set_sender_location_id_is_set(self.sender_location_id_is_set());
        to.set_sender_location_id(self.sender_location_id());
        to.set_self_match_prevention_id_is_set(self.self_match_prevention_id_is_set());
        to.set_self_match_prevention_id(self.self_match_prevention_id());
        to.set_cti_code_is_set(self.cti_code_is_set());
        to.set_cti_code(self.cti_code());
        to.set_trade_account_is_read_only_is_set(self.trade_account_is_read_only_is_set());
        to.set_trade_account_is_read_only(self.trade_account_is_read_only());
        to.set_maximum_global_position_quantity_is_set(
            self.maximum_global_position_quantity_is_set(),
        );
        to.set_maximum_global_position_quantity(self.maximum_global_position_quantity());
        to.set_trade_fee_per_contract_is_set(self.trade_fee_per_contract_is_set());
        to.set_trade_fee_per_contract(self.trade_fee_per_contract());
        to.set_trade_fee_per_share_is_set(self.trade_fee_per_share_is_set());
        to.set_trade_fee_per_share(self.trade_fee_per_share());
        to.set_require_sufficient_margin_for_new_positions_is_set(
            self.require_sufficient_margin_for_new_positions_is_set(),
        );
        to.set_require_sufficient_margin_for_new_positions(
            self.require_sufficient_margin_for_new_positions(),
        );
        to.set_use_percent_of_margin_is_set(self.use_percent_of_margin_is_set());
        to.set_use_percent_of_margin(self.use_percent_of_margin());
        to.set_use_percent_of_margin_for_day_trading_is_set(
            self.use_percent_of_margin_for_day_trading_is_set(),
        );
        to.set_use_percent_of_margin_for_day_trading(self.use_percent_of_margin_for_day_trading());
        to.set_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
            self.maximum_allowed_account_balance_for_positions_as_percentage_is_set(),
        );
        to.set_maximum_allowed_account_balance_for_positions_as_percentage(
            self.maximum_allowed_account_balance_for_positions_as_percentage(),
        );
        to.set_firm_id_is_set(self.firm_id_is_set());
        to.set_firm_id(self.firm_id());
        to.set_trading_is_disabled_is_set(self.trading_is_disabled_is_set());
        to.set_trading_is_disabled(self.trading_is_disabled());
        to.set_descriptive_name_is_set(self.descriptive_name_is_set());
        to.set_descriptive_name(self.descriptive_name());
        to.set_is_master_firm_control_account_is_set(self.is_master_firm_control_account_is_set());
        to.set_is_master_firm_control_account(self.is_master_firm_control_account());
        to.set_minimum_required_account_value_is_set(self.minimum_required_account_value_is_set());
        to.set_minimum_required_account_value(self.minimum_required_account_value());
        to.set_begin_time_for_day_margin_is_set(self.begin_time_for_day_margin_is_set());
        to.set_begin_time_for_day_margin(self.begin_time_for_day_margin());
        to.set_end_time_for_day_margin_is_set(self.end_time_for_day_margin_is_set());
        to.set_end_time_for_day_margin(self.end_time_for_day_margin());
        to.set_day_margin_time_zone_is_set(self.day_margin_time_zone_is_set());
        to.set_day_margin_time_zone(self.day_margin_time_zone());
        to.set_use_master_firm_flatten_positions_when_under_margin_intraday_is_set(
            self.use_master_firm_flatten_positions_when_under_margin_intraday_is_set(),
        );
        to.set_use_master_firm_flatten_positions_when_under_margin_intraday(
            self.use_master_firm_flatten_positions_when_under_margin_intraday(),
        );
        to.set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(),
        );
        to.set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day(),
        );
        to.set_use_master_firm_symbol_limits_array_is_set(
            self.use_master_firm_symbol_limits_array_is_set(),
        );
        to.set_use_master_firm_symbol_limits_array(self.use_master_firm_symbol_limits_array());
        to.set_use_master_firm_trade_fees_is_set(self.use_master_firm_trade_fees_is_set());
        to.set_use_master_firm_trade_fees(self.use_master_firm_trade_fees());
        to.set_use_master_firm_trade_fee_per_share_is_set(
            self.use_master_firm_trade_fee_per_share_is_set(),
        );
        to.set_use_master_firm_trade_fee_per_share(self.use_master_firm_trade_fee_per_share());
        to.set_use_master_firm_require_sufficient_margin_for_new_positions_is_set(
            self.use_master_firm_require_sufficient_margin_for_new_positions_is_set(),
        );
        to.set_use_master_firm_require_sufficient_margin_for_new_positions(
            self.use_master_firm_require_sufficient_margin_for_new_positions(),
        );
        to.set_use_master_firm_use_percent_of_margin_is_set(
            self.use_master_firm_use_percent_of_margin_is_set(),
        );
        to.set_use_master_firm_use_percent_of_margin(self.use_master_firm_use_percent_of_margin());
        to.set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set(self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set());
        to.set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(),
        );
        to.set_use_master_firm_minimum_required_account_value_is_set(
            self.use_master_firm_minimum_required_account_value_is_set(),
        );
        to.set_use_master_firm_minimum_required_account_value(
            self.use_master_firm_minimum_required_account_value(),
        );
        to.set_use_master_firm_margin_time_settings_is_set(
            self.use_master_firm_margin_time_settings_is_set(),
        );
        to.set_use_master_firm_margin_time_settings(self.use_master_firm_margin_time_settings());
        to.set_use_master_firm_trading_is_disabled_is_set(
            self.use_master_firm_trading_is_disabled_is_set(),
        );
        to.set_use_master_firm_trading_is_disabled(self.use_master_firm_trading_is_disabled());
        to.set_is_trade_statistics_publically_shared_is_set(
            self.is_trade_statistics_publically_shared_is_set(),
        );
        to.set_is_trade_statistics_publically_shared(self.is_trade_statistics_publically_shared());
        to.set_is_read_only_following_requests_allowed_is_set(
            self.is_read_only_following_requests_allowed_is_set(),
        );
        to.set_is_read_only_following_requests_allowed(
            self.is_read_only_following_requests_allowed(),
        );
        to.set_is_trade_account_sharing_allowed_is_set(
            self.is_trade_account_sharing_allowed_is_set(),
        );
        to.set_is_trade_account_sharing_allowed(self.is_trade_account_sharing_allowed());
        to.set_read_only_share_to_all_sc_usernames_is_set(
            self.read_only_share_to_all_sc_usernames_is_set(),
        );
        to.set_read_only_share_to_all_sc_usernames(self.read_only_share_to_all_sc_usernames());
        to.set_use_master_firm_symbol_commissions_array_is_set(
            self.use_master_firm_symbol_commissions_array_is_set(),
        );
        to.set_use_master_firm_symbol_commissions_array(
            self.use_master_firm_symbol_commissions_array(),
        );
        to.set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(),
        );
        to.set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(),
        );
        to.set_use_master_firm_use_percent_of_margin_for_day_trading_is_set(
            self.use_master_firm_use_percent_of_margin_for_day_trading_is_set(),
        );
        to.set_use_master_firm_use_percent_of_margin_for_day_trading(
            self.use_master_firm_use_percent_of_margin_for_day_trading(),
        );
        to.set_use_master_firm_symbol_commissions_array_full_override_is_set(
            self.use_master_firm_symbol_commissions_array_full_override_is_set(),
        );
        to.set_use_master_firm_symbol_commissions_array_full_override(
            self.use_master_firm_symbol_commissions_array_full_override(),
        );
        to.set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(),
        );
        to.set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders(),
        );
        to.set_use_master_firm_use_percent_of_margin_full_override_is_set(
            self.use_master_firm_use_percent_of_margin_full_override_is_set(),
        );
        to.set_use_master_firm_use_percent_of_margin_full_override(
            self.use_master_firm_use_percent_of_margin_full_override(),
        );
        to.set_use_master_firm_trade_fees_full_override_is_set(
            self.use_master_firm_trade_fees_full_override_is_set(),
        );
        to.set_use_master_firm_trade_fees_full_override(
            self.use_master_firm_trade_fees_full_override(),
        );
        to.set_use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(),
        );
        to.set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override(),
        );
        to.set_liquidation_only_mode_is_set(self.liquidation_only_mode_is_set());
        to.set_liquidation_only_mode(self.liquidation_only_mode());
        to.set_customer_or_firm_is_set(self.customer_or_firm_is_set());
        to.set_customer_or_firm(self.customer_or_firm());
        to.set_master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(),
        );
        to.set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met(),
        );
        to.set_master_firm_flatten_cancel_when_under_minimum_account_value_is_set(
            self.master_firm_flatten_cancel_when_under_minimum_account_value_is_set(),
        );
        to.set_master_firm_flatten_cancel_when_under_minimum_account_value(
            self.master_firm_flatten_cancel_when_under_minimum_account_value(),
        );
        to.set_master_firm_flatten_cancel_when_under_margin_intraday_is_set(
            self.master_firm_flatten_cancel_when_under_margin_intraday_is_set(),
        );
        to.set_master_firm_flatten_cancel_when_under_margin_intraday(
            self.master_firm_flatten_cancel_when_under_margin_intraday(),
        );
        to.set_master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(
            self.master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(),
        );
        to.set_master_firm_flatten_cancel_when_under_margin_end_of_day(
            self.master_firm_flatten_cancel_when_under_margin_end_of_day(),
        );
        to.set_master_firm_maximum_order_quantity_is_set(
            self.master_firm_maximum_order_quantity_is_set(),
        );
        to.set_master_firm_maximum_order_quantity(self.master_firm_maximum_order_quantity());
        to.set_exchange_trader_id_is_set(self.exchange_trader_id_is_set());
        to.set_exchange_trader_id(self.exchange_trader_id());
        to.set_use_fixed_cash_on_hand_balance_is_set(self.use_fixed_cash_on_hand_balance_is_set());
        to.set_use_fixed_cash_on_hand_balance(self.use_fixed_cash_on_hand_balance());
        to.set_fixed_cash_on_hand_balance_is_set(self.fixed_cash_on_hand_balance_is_set());
        to.set_fixed_cash_on_hand_balance(self.fixed_cash_on_hand_balance());
    }
}

pub struct TradeAccountDataUpdateVLS {
    data: *const TradeAccountDataUpdateVLSData,
    capacity: usize,
}

pub struct TradeAccountDataUpdateVLSUnsafe {
    data: *const TradeAccountDataUpdateVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct TradeAccountDataUpdateVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: u32,
    is_new_account: bool,
    new_account_authorized_username: VLS,
    trade_account: VLS,
    currency_code_is_set: bool,
    currency_code: VLS,
    daily_net_loss_limit_in_account_currency_is_set: bool,
    daily_net_loss_limit_in_account_currency: f32,
    percent_of_cash_balance_for_daily_net_loss_limit_is_set: bool,
    percent_of_cash_balance_for_daily_net_loss_limit: i32,
    use_trailing_account_value_to_not_allow_increase_in_positions_is_set: bool,
    use_trailing_account_value_to_not_allow_increase_in_positions: bool,
    do_not_allow_increase_in_positions_at_daily_loss_limit_is_set: bool,
    do_not_allow_increase_in_positions_at_daily_loss_limit: u8,
    flatten_positions_at_daily_loss_limit_is_set: bool,
    flatten_positions_at_daily_loss_limit: u8,
    close_positions_at_end_of_day_is_set: bool,
    close_positions_at_end_of_day: u8,
    flatten_positions_when_under_margin_intraday_is_set: bool,
    flatten_positions_when_under_margin_intraday: u8,
    flatten_positions_when_under_margin_at_end_of_day_is_set: bool,
    flatten_positions_when_under_margin_at_end_of_day: u8,
    sender_sub_id_is_set: bool,
    sender_sub_id: VLS,
    sender_location_id_is_set: bool,
    sender_location_id: VLS,
    self_match_prevention_id_is_set: bool,
    self_match_prevention_id: VLS,
    cti_code_is_set: bool,
    cti_code: i32,
    trade_account_is_read_only_is_set: bool,
    trade_account_is_read_only: bool,
    maximum_global_position_quantity_is_set: bool,
    maximum_global_position_quantity: i32,
    trade_fee_per_contract_is_set: bool,
    trade_fee_per_contract: f64,
    trade_fee_per_share_is_set: bool,
    trade_fee_per_share: f64,
    require_sufficient_margin_for_new_positions_is_set: bool,
    require_sufficient_margin_for_new_positions: u8,
    use_percent_of_margin_is_set: bool,
    use_percent_of_margin: i32,
    use_percent_of_margin_for_day_trading_is_set: bool,
    use_percent_of_margin_for_day_trading: i32,
    maximum_allowed_account_balance_for_positions_as_percentage_is_set: bool,
    maximum_allowed_account_balance_for_positions_as_percentage: i32,
    firm_id_is_set: bool,
    firm_id: VLS,
    trading_is_disabled_is_set: bool,
    trading_is_disabled: bool,
    descriptive_name_is_set: bool,
    descriptive_name: VLS,
    is_master_firm_control_account_is_set: bool,
    is_master_firm_control_account: bool,
    minimum_required_account_value_is_set: bool,
    minimum_required_account_value: f64,
    begin_time_for_day_margin_is_set: bool,
    begin_time_for_day_margin: i64,
    end_time_for_day_margin_is_set: bool,
    end_time_for_day_margin: i64,
    day_margin_time_zone_is_set: bool,
    day_margin_time_zone: VLS,
    use_master_firm_flatten_positions_when_under_margin_intraday_is_set: bool,
    use_master_firm_flatten_positions_when_under_margin_intraday: bool,
    use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set: bool,
    use_master_firm_flatten_positions_when_under_margin_at_end_of_day: bool,
    use_master_firm_symbol_limits_array_is_set: bool,
    use_master_firm_symbol_limits_array: bool,
    use_master_firm_trade_fees_is_set: bool,
    use_master_firm_trade_fees: bool,
    use_master_firm_trade_fee_per_share_is_set: bool,
    use_master_firm_trade_fee_per_share: bool,
    use_master_firm_require_sufficient_margin_for_new_positions_is_set: bool,
    use_master_firm_require_sufficient_margin_for_new_positions: bool,
    use_master_firm_use_percent_of_margin_is_set: bool,
    use_master_firm_use_percent_of_margin: bool,
    use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set: bool,
    use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage: bool,
    use_master_firm_minimum_required_account_value_is_set: bool,
    use_master_firm_minimum_required_account_value: bool,
    use_master_firm_margin_time_settings_is_set: bool,
    use_master_firm_margin_time_settings: bool,
    use_master_firm_trading_is_disabled_is_set: bool,
    use_master_firm_trading_is_disabled: bool,
    is_trade_statistics_publically_shared_is_set: bool,
    is_trade_statistics_publically_shared: bool,
    is_read_only_following_requests_allowed_is_set: bool,
    is_read_only_following_requests_allowed: bool,
    is_trade_account_sharing_allowed_is_set: bool,
    is_trade_account_sharing_allowed: bool,
    read_only_share_to_all_sc_usernames_is_set: bool,
    read_only_share_to_all_sc_usernames: u8,
    use_master_firm_symbol_commissions_array_is_set: bool,
    use_master_firm_symbol_commissions_array: bool,
    use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set: bool,
    use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit: bool,
    use_master_firm_use_percent_of_margin_for_day_trading_is_set: bool,
    use_master_firm_use_percent_of_margin_for_day_trading: bool,
    use_master_firm_symbol_commissions_array_full_override_is_set: bool,
    use_master_firm_symbol_commissions_array_full_override: bool,
    use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set: bool,
    use_master_firm_num_days_before_last_trading_date_to_disallow_orders: bool,
    use_master_firm_use_percent_of_margin_full_override_is_set: bool,
    use_master_firm_use_percent_of_margin_full_override: bool,
    use_master_firm_trade_fees_full_override_is_set: bool,
    use_master_firm_trade_fees_full_override: bool,
    use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set: bool,
    use_master_firm_use_percent_of_margin_for_day_trading_full_override: bool,
    liquidation_only_mode_is_set: bool,
    liquidation_only_mode: u8,
    customer_or_firm_is_set: bool,
    customer_or_firm: u8,
    master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set: bool,
    master_firm_flatten_cancel_account_when_daily_loss_limit_met: u8,
    master_firm_flatten_cancel_when_under_minimum_account_value_is_set: bool,
    master_firm_flatten_cancel_when_under_minimum_account_value: u8,
    master_firm_flatten_cancel_when_under_margin_intraday_is_set: bool,
    master_firm_flatten_cancel_when_under_margin_intraday: u8,
    master_firm_flatten_cancel_when_under_margin_end_of_day_is_set: bool,
    master_firm_flatten_cancel_when_under_margin_end_of_day: u8,
    master_firm_maximum_order_quantity_is_set: u32,
    master_firm_maximum_order_quantity: u32,
    exchange_trader_id_is_set: bool,
    exchange_trader_id: VLS,
    use_fixed_cash_on_hand_balance_is_set: bool,
    use_fixed_cash_on_hand_balance: bool,
    fixed_cash_on_hand_balance_is_set: bool,
    fixed_cash_on_hand_balance: f32,
}

impl TradeAccountDataUpdateVLSData {
    pub fn new() -> Self {
        Self {
            size: 232u16.to_le(),
            r#type: TRADE_ACCOUNT_DATA_UPDATE.to_le(),
            base_size: 232u16.to_le(),
            request_id: 0u32.to_le(),
            is_new_account: false,
            new_account_authorized_username: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
            currency_code_is_set: false,
            currency_code: crate::message::VLS::new(),
            daily_net_loss_limit_in_account_currency_is_set: false,
            daily_net_loss_limit_in_account_currency: 0.0,
            percent_of_cash_balance_for_daily_net_loss_limit_is_set: false,
            percent_of_cash_balance_for_daily_net_loss_limit: 0i32.to_le(),
            use_trailing_account_value_to_not_allow_increase_in_positions_is_set: false,
            use_trailing_account_value_to_not_allow_increase_in_positions: false,
            do_not_allow_increase_in_positions_at_daily_loss_limit_is_set: false,
            do_not_allow_increase_in_positions_at_daily_loss_limit: 0,
            flatten_positions_at_daily_loss_limit_is_set: false,
            flatten_positions_at_daily_loss_limit: 0,
            close_positions_at_end_of_day_is_set: false,
            close_positions_at_end_of_day: 0,
            flatten_positions_when_under_margin_intraday_is_set: false,
            flatten_positions_when_under_margin_intraday: 0,
            flatten_positions_when_under_margin_at_end_of_day_is_set: false,
            flatten_positions_when_under_margin_at_end_of_day: 0,
            sender_sub_id_is_set: false,
            sender_sub_id: crate::message::VLS::new(),
            sender_location_id_is_set: false,
            sender_location_id: crate::message::VLS::new(),
            self_match_prevention_id_is_set: false,
            self_match_prevention_id: crate::message::VLS::new(),
            cti_code_is_set: false,
            cti_code: 0i32.to_le(),
            trade_account_is_read_only_is_set: false,
            trade_account_is_read_only: false,
            maximum_global_position_quantity_is_set: false,
            maximum_global_position_quantity: 0i32.to_le(),
            trade_fee_per_contract_is_set: false,
            trade_fee_per_contract: 0.0,
            trade_fee_per_share_is_set: false,
            trade_fee_per_share: 0.0,
            require_sufficient_margin_for_new_positions_is_set: false,
            require_sufficient_margin_for_new_positions: 1,
            use_percent_of_margin_is_set: false,
            use_percent_of_margin: 100i32.to_le(),
            use_percent_of_margin_for_day_trading_is_set: false,
            use_percent_of_margin_for_day_trading: 100i32.to_le(),
            maximum_allowed_account_balance_for_positions_as_percentage_is_set: false,
            maximum_allowed_account_balance_for_positions_as_percentage: 100i32.to_le(),
            firm_id_is_set: false,
            firm_id: crate::message::VLS::new(),
            trading_is_disabled_is_set: false,
            trading_is_disabled: false,
            descriptive_name_is_set: false,
            descriptive_name: crate::message::VLS::new(),
            is_master_firm_control_account_is_set: false,
            is_master_firm_control_account: false,
            minimum_required_account_value_is_set: false,
            minimum_required_account_value: 0.0,
            begin_time_for_day_margin_is_set: false,
            begin_time_for_day_margin: 0i64.to_le(),
            end_time_for_day_margin_is_set: false,
            end_time_for_day_margin: 0i64.to_le(),
            day_margin_time_zone_is_set: false,
            day_margin_time_zone: crate::message::VLS::new(),
            use_master_firm_flatten_positions_when_under_margin_intraday_is_set: false,
            use_master_firm_flatten_positions_when_under_margin_intraday: false,
            use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set: false,
            use_master_firm_flatten_positions_when_under_margin_at_end_of_day: false,
            use_master_firm_symbol_limits_array_is_set: false,
            use_master_firm_symbol_limits_array: false,
            use_master_firm_trade_fees_is_set: false,
            use_master_firm_trade_fees: false,
            use_master_firm_trade_fee_per_share_is_set: false,
            use_master_firm_trade_fee_per_share: false,
            use_master_firm_require_sufficient_margin_for_new_positions_is_set: false,
            use_master_firm_require_sufficient_margin_for_new_positions: false,
            use_master_firm_use_percent_of_margin_is_set: false,
            use_master_firm_use_percent_of_margin: false,
            use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set:
                false,
            use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage: false,
            use_master_firm_minimum_required_account_value_is_set: false,
            use_master_firm_minimum_required_account_value: false,
            use_master_firm_margin_time_settings_is_set: false,
            use_master_firm_margin_time_settings: false,
            use_master_firm_trading_is_disabled_is_set: false,
            use_master_firm_trading_is_disabled: false,
            is_trade_statistics_publically_shared_is_set: false,
            is_trade_statistics_publically_shared: false,
            is_read_only_following_requests_allowed_is_set: false,
            is_read_only_following_requests_allowed: false,
            is_trade_account_sharing_allowed_is_set: false,
            is_trade_account_sharing_allowed: false,
            read_only_share_to_all_sc_usernames_is_set: false,
            read_only_share_to_all_sc_usernames: 0,
            use_master_firm_symbol_commissions_array_is_set: false,
            use_master_firm_symbol_commissions_array: false,
            use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set: false,
            use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit: false,
            use_master_firm_use_percent_of_margin_for_day_trading_is_set: false,
            use_master_firm_use_percent_of_margin_for_day_trading: false,
            use_master_firm_symbol_commissions_array_full_override_is_set: false,
            use_master_firm_symbol_commissions_array_full_override: false,
            use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set: false,
            use_master_firm_num_days_before_last_trading_date_to_disallow_orders: false,
            use_master_firm_use_percent_of_margin_full_override_is_set: false,
            use_master_firm_use_percent_of_margin_full_override: false,
            use_master_firm_trade_fees_full_override_is_set: false,
            use_master_firm_trade_fees_full_override: false,
            use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set: false,
            use_master_firm_use_percent_of_margin_for_day_trading_full_override: false,
            liquidation_only_mode_is_set: false,
            liquidation_only_mode: 0,
            customer_or_firm_is_set: false,
            customer_or_firm: 0,
            master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set: false,
            master_firm_flatten_cancel_account_when_daily_loss_limit_met: 0,
            master_firm_flatten_cancel_when_under_minimum_account_value_is_set: false,
            master_firm_flatten_cancel_when_under_minimum_account_value: 0,
            master_firm_flatten_cancel_when_under_margin_intraday_is_set: false,
            master_firm_flatten_cancel_when_under_margin_intraday: 0,
            master_firm_flatten_cancel_when_under_margin_end_of_day_is_set: false,
            master_firm_flatten_cancel_when_under_margin_end_of_day: 0,
            master_firm_maximum_order_quantity_is_set: 0u32.to_le(),
            master_firm_maximum_order_quantity: 0u32.to_le(),
            exchange_trader_id_is_set: false,
            exchange_trader_id: crate::message::VLS::new(),
            use_fixed_cash_on_hand_balance_is_set: false,
            use_fixed_cash_on_hand_balance: false,
            fixed_cash_on_hand_balance_is_set: false,
            fixed_cash_on_hand_balance: 0.0,
        }
    }
}

unsafe impl Send for TradeAccountDataUpdateVLS {}
unsafe impl Send for TradeAccountDataUpdateVLSUnsafe {}
unsafe impl Send for TradeAccountDataUpdateVLSData {}

impl Drop for TradeAccountDataUpdateVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for TradeAccountDataUpdateVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for TradeAccountDataUpdateVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for TradeAccountDataUpdateVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for TradeAccountDataUpdateVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for TradeAccountDataUpdateVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for TradeAccountDataUpdateVLS {
    type Target = TradeAccountDataUpdateVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataUpdateVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for TradeAccountDataUpdateVLSUnsafe {
    type Target = TradeAccountDataUpdateVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataUpdateVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for TradeAccountDataUpdateVLS {
    type Data = TradeAccountDataUpdateVLSData;

    const BASE_SIZE: usize = 232;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradeAccountDataUpdateVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataUpdateVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataUpdateVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataUpdateVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for TradeAccountDataUpdateVLSUnsafe {
    type Data = TradeAccountDataUpdateVLSData;

    const BASE_SIZE: usize = 232;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradeAccountDataUpdateVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataUpdateVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataUpdateVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataUpdateVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl TradeAccountDataUpdate for TradeAccountDataUpdateVLS {
    type Safe = TradeAccountDataUpdateVLS;
    type Unsafe = TradeAccountDataUpdateVLSUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn is_new_account(&self) -> bool {
        self.is_new_account
    }

    fn new_account_authorized_username(&self) -> &str {
        get_vls(self, self.new_account_authorized_username)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn currency_code_is_set(&self) -> bool {
        self.currency_code_is_set
    }

    fn currency_code(&self) -> &str {
        get_vls(self, self.currency_code)
    }

    fn daily_net_loss_limit_in_account_currency_is_set(&self) -> bool {
        self.daily_net_loss_limit_in_account_currency_is_set
    }

    fn daily_net_loss_limit_in_account_currency(&self) -> f32 {
        f32_le(self.daily_net_loss_limit_in_account_currency)
    }

    fn percent_of_cash_balance_for_daily_net_loss_limit_is_set(&self) -> bool {
        self.percent_of_cash_balance_for_daily_net_loss_limit_is_set
    }

    fn percent_of_cash_balance_for_daily_net_loss_limit(&self) -> i32 {
        i32::from_le(self.percent_of_cash_balance_for_daily_net_loss_limit)
    }

    fn use_trailing_account_value_to_not_allow_increase_in_positions_is_set(&self) -> bool {
        self.use_trailing_account_value_to_not_allow_increase_in_positions_is_set
    }

    fn use_trailing_account_value_to_not_allow_increase_in_positions(&self) -> bool {
        self.use_trailing_account_value_to_not_allow_increase_in_positions
    }

    fn do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(&self) -> bool {
        self.do_not_allow_increase_in_positions_at_daily_loss_limit_is_set
    }

    fn do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> u8 {
        self.do_not_allow_increase_in_positions_at_daily_loss_limit
    }

    fn flatten_positions_at_daily_loss_limit_is_set(&self) -> bool {
        self.flatten_positions_at_daily_loss_limit_is_set
    }

    fn flatten_positions_at_daily_loss_limit(&self) -> u8 {
        self.flatten_positions_at_daily_loss_limit
    }

    fn close_positions_at_end_of_day_is_set(&self) -> bool {
        self.close_positions_at_end_of_day_is_set
    }

    fn close_positions_at_end_of_day(&self) -> u8 {
        self.close_positions_at_end_of_day
    }

    fn flatten_positions_when_under_margin_intraday_is_set(&self) -> bool {
        self.flatten_positions_when_under_margin_intraday_is_set
    }

    fn flatten_positions_when_under_margin_intraday(&self) -> u8 {
        self.flatten_positions_when_under_margin_intraday
    }

    fn flatten_positions_when_under_margin_at_end_of_day_is_set(&self) -> bool {
        self.flatten_positions_when_under_margin_at_end_of_day_is_set
    }

    fn flatten_positions_when_under_margin_at_end_of_day(&self) -> u8 {
        self.flatten_positions_when_under_margin_at_end_of_day
    }

    fn sender_sub_id_is_set(&self) -> bool {
        self.sender_sub_id_is_set
    }

    fn sender_sub_id(&self) -> &str {
        get_vls(self, self.sender_sub_id)
    }

    fn sender_location_id_is_set(&self) -> bool {
        self.sender_location_id_is_set
    }

    fn sender_location_id(&self) -> &str {
        get_vls(self, self.sender_location_id)
    }

    fn self_match_prevention_id_is_set(&self) -> bool {
        self.self_match_prevention_id_is_set
    }

    fn self_match_prevention_id(&self) -> &str {
        get_vls(self, self.self_match_prevention_id)
    }

    fn cti_code_is_set(&self) -> bool {
        self.cti_code_is_set
    }

    fn cti_code(&self) -> i32 {
        i32::from_le(self.cti_code)
    }

    fn trade_account_is_read_only_is_set(&self) -> bool {
        self.trade_account_is_read_only_is_set
    }

    fn trade_account_is_read_only(&self) -> bool {
        self.trade_account_is_read_only
    }

    fn maximum_global_position_quantity_is_set(&self) -> bool {
        self.maximum_global_position_quantity_is_set
    }

    fn maximum_global_position_quantity(&self) -> i32 {
        i32::from_le(self.maximum_global_position_quantity)
    }

    fn trade_fee_per_contract_is_set(&self) -> bool {
        self.trade_fee_per_contract_is_set
    }

    fn trade_fee_per_contract(&self) -> f64 {
        f64_le(self.trade_fee_per_contract)
    }

    fn trade_fee_per_share_is_set(&self) -> bool {
        self.trade_fee_per_share_is_set
    }

    fn trade_fee_per_share(&self) -> f64 {
        f64_le(self.trade_fee_per_share)
    }

    fn require_sufficient_margin_for_new_positions_is_set(&self) -> bool {
        self.require_sufficient_margin_for_new_positions_is_set
    }

    fn require_sufficient_margin_for_new_positions(&self) -> u8 {
        self.require_sufficient_margin_for_new_positions
    }

    fn use_percent_of_margin_is_set(&self) -> bool {
        self.use_percent_of_margin_is_set
    }

    fn use_percent_of_margin(&self) -> i32 {
        i32::from_le(self.use_percent_of_margin)
    }

    fn use_percent_of_margin_for_day_trading_is_set(&self) -> bool {
        self.use_percent_of_margin_for_day_trading_is_set
    }

    fn use_percent_of_margin_for_day_trading(&self) -> i32 {
        i32::from_le(self.use_percent_of_margin_for_day_trading)
    }

    fn maximum_allowed_account_balance_for_positions_as_percentage_is_set(&self) -> bool {
        self.maximum_allowed_account_balance_for_positions_as_percentage_is_set
    }

    fn maximum_allowed_account_balance_for_positions_as_percentage(&self) -> i32 {
        i32::from_le(self.maximum_allowed_account_balance_for_positions_as_percentage)
    }

    fn firm_id_is_set(&self) -> bool {
        self.firm_id_is_set
    }

    fn firm_id(&self) -> &str {
        get_vls(self, self.firm_id)
    }

    fn trading_is_disabled_is_set(&self) -> bool {
        self.trading_is_disabled_is_set
    }

    fn trading_is_disabled(&self) -> bool {
        self.trading_is_disabled
    }

    fn descriptive_name_is_set(&self) -> bool {
        self.descriptive_name_is_set
    }

    fn descriptive_name(&self) -> &str {
        get_vls(self, self.descriptive_name)
    }

    fn is_master_firm_control_account_is_set(&self) -> bool {
        self.is_master_firm_control_account_is_set
    }

    fn is_master_firm_control_account(&self) -> bool {
        self.is_master_firm_control_account
    }

    fn minimum_required_account_value_is_set(&self) -> bool {
        self.minimum_required_account_value_is_set
    }

    fn minimum_required_account_value(&self) -> f64 {
        f64_le(self.minimum_required_account_value)
    }

    fn begin_time_for_day_margin_is_set(&self) -> bool {
        self.begin_time_for_day_margin_is_set
    }

    fn begin_time_for_day_margin(&self) -> i64 {
        i64::from_le(self.begin_time_for_day_margin)
    }

    fn end_time_for_day_margin_is_set(&self) -> bool {
        self.end_time_for_day_margin_is_set
    }

    fn end_time_for_day_margin(&self) -> i64 {
        i64::from_le(self.end_time_for_day_margin)
    }

    fn day_margin_time_zone_is_set(&self) -> bool {
        self.day_margin_time_zone_is_set
    }

    fn day_margin_time_zone(&self) -> &str {
        get_vls(self, self.day_margin_time_zone)
    }

    fn use_master_firm_flatten_positions_when_under_margin_intraday_is_set(&self) -> bool {
        self.use_master_firm_flatten_positions_when_under_margin_intraday_is_set
    }

    fn use_master_firm_flatten_positions_when_under_margin_intraday(&self) -> bool {
        self.use_master_firm_flatten_positions_when_under_margin_intraday
    }

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(&self) -> bool {
        self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set
    }

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day(&self) -> bool {
        self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day
    }

    fn use_master_firm_symbol_limits_array_is_set(&self) -> bool {
        self.use_master_firm_symbol_limits_array_is_set
    }

    fn use_master_firm_symbol_limits_array(&self) -> bool {
        self.use_master_firm_symbol_limits_array
    }

    fn use_master_firm_trade_fees_is_set(&self) -> bool {
        self.use_master_firm_trade_fees_is_set
    }

    fn use_master_firm_trade_fees(&self) -> bool {
        self.use_master_firm_trade_fees
    }

    fn use_master_firm_trade_fee_per_share_is_set(&self) -> bool {
        self.use_master_firm_trade_fee_per_share_is_set
    }

    fn use_master_firm_trade_fee_per_share(&self) -> bool {
        self.use_master_firm_trade_fee_per_share
    }

    fn use_master_firm_require_sufficient_margin_for_new_positions_is_set(&self) -> bool {
        self.use_master_firm_require_sufficient_margin_for_new_positions_is_set
    }

    fn use_master_firm_require_sufficient_margin_for_new_positions(&self) -> bool {
        self.use_master_firm_require_sufficient_margin_for_new_positions
    }

    fn use_master_firm_use_percent_of_margin_is_set(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_is_set
    }

    fn use_master_firm_use_percent_of_margin(&self) -> bool {
        self.use_master_firm_use_percent_of_margin
    }

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &self,
    ) -> bool {
        self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set
    }

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(&self) -> bool {
        self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage
    }

    fn use_master_firm_minimum_required_account_value_is_set(&self) -> bool {
        self.use_master_firm_minimum_required_account_value_is_set
    }

    fn use_master_firm_minimum_required_account_value(&self) -> bool {
        self.use_master_firm_minimum_required_account_value
    }

    fn use_master_firm_margin_time_settings_is_set(&self) -> bool {
        self.use_master_firm_margin_time_settings_is_set
    }

    fn use_master_firm_margin_time_settings(&self) -> bool {
        self.use_master_firm_margin_time_settings
    }

    fn use_master_firm_trading_is_disabled_is_set(&self) -> bool {
        self.use_master_firm_trading_is_disabled_is_set
    }

    fn use_master_firm_trading_is_disabled(&self) -> bool {
        self.use_master_firm_trading_is_disabled
    }

    fn is_trade_statistics_publically_shared_is_set(&self) -> bool {
        self.is_trade_statistics_publically_shared_is_set
    }

    fn is_trade_statistics_publically_shared(&self) -> bool {
        self.is_trade_statistics_publically_shared
    }

    fn is_read_only_following_requests_allowed_is_set(&self) -> bool {
        self.is_read_only_following_requests_allowed_is_set
    }

    fn is_read_only_following_requests_allowed(&self) -> bool {
        self.is_read_only_following_requests_allowed
    }

    fn is_trade_account_sharing_allowed_is_set(&self) -> bool {
        self.is_trade_account_sharing_allowed_is_set
    }

    fn is_trade_account_sharing_allowed(&self) -> bool {
        self.is_trade_account_sharing_allowed
    }

    fn read_only_share_to_all_sc_usernames_is_set(&self) -> bool {
        self.read_only_share_to_all_sc_usernames_is_set
    }

    fn read_only_share_to_all_sc_usernames(&self) -> u8 {
        self.read_only_share_to_all_sc_usernames
    }

    fn use_master_firm_symbol_commissions_array_is_set(&self) -> bool {
        self.use_master_firm_symbol_commissions_array_is_set
    }

    fn use_master_firm_symbol_commissions_array(&self) -> bool {
        self.use_master_firm_symbol_commissions_array
    }

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &self,
    ) -> bool {
        self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set
    }

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> bool {
        self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_is_set(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_for_day_trading_is_set
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_for_day_trading
    }

    fn use_master_firm_symbol_commissions_array_full_override_is_set(&self) -> bool {
        self.use_master_firm_symbol_commissions_array_full_override_is_set
    }

    fn use_master_firm_symbol_commissions_array_full_override(&self) -> bool {
        self.use_master_firm_symbol_commissions_array_full_override
    }

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(&self) -> bool {
        self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set
    }

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders(&self) -> bool {
        self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders
    }

    fn use_master_firm_use_percent_of_margin_full_override_is_set(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_full_override_is_set
    }

    fn use_master_firm_use_percent_of_margin_full_override(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_full_override
    }

    fn use_master_firm_trade_fees_full_override_is_set(&self) -> bool {
        self.use_master_firm_trade_fees_full_override_is_set
    }

    fn use_master_firm_trade_fees_full_override(&self) -> bool {
        self.use_master_firm_trade_fees_full_override
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override(&self) -> bool {
        self.use_master_firm_use_percent_of_margin_for_day_trading_full_override
    }

    fn liquidation_only_mode_is_set(&self) -> bool {
        self.liquidation_only_mode_is_set
    }

    fn liquidation_only_mode(&self) -> u8 {
        self.liquidation_only_mode
    }

    fn customer_or_firm_is_set(&self) -> bool {
        self.customer_or_firm_is_set
    }

    fn customer_or_firm(&self) -> u8 {
        self.customer_or_firm
    }

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(&self) -> bool {
        self.master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set
    }

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met(&self) -> u8 {
        self.master_firm_flatten_cancel_account_when_daily_loss_limit_met
    }

    fn master_firm_flatten_cancel_when_under_minimum_account_value_is_set(&self) -> bool {
        self.master_firm_flatten_cancel_when_under_minimum_account_value_is_set
    }

    fn master_firm_flatten_cancel_when_under_minimum_account_value(&self) -> u8 {
        self.master_firm_flatten_cancel_when_under_minimum_account_value
    }

    fn master_firm_flatten_cancel_when_under_margin_intraday_is_set(&self) -> bool {
        self.master_firm_flatten_cancel_when_under_margin_intraday_is_set
    }

    fn master_firm_flatten_cancel_when_under_margin_intraday(&self) -> u8 {
        self.master_firm_flatten_cancel_when_under_margin_intraday
    }

    fn master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(&self) -> bool {
        self.master_firm_flatten_cancel_when_under_margin_end_of_day_is_set
    }

    fn master_firm_flatten_cancel_when_under_margin_end_of_day(&self) -> u8 {
        self.master_firm_flatten_cancel_when_under_margin_end_of_day
    }

    fn master_firm_maximum_order_quantity_is_set(&self) -> u32 {
        u32::from_le(self.master_firm_maximum_order_quantity_is_set)
    }

    fn master_firm_maximum_order_quantity(&self) -> u32 {
        u32::from_le(self.master_firm_maximum_order_quantity)
    }

    fn exchange_trader_id_is_set(&self) -> bool {
        self.exchange_trader_id_is_set
    }

    fn exchange_trader_id(&self) -> &str {
        get_vls(self, self.exchange_trader_id)
    }

    fn use_fixed_cash_on_hand_balance_is_set(&self) -> bool {
        self.use_fixed_cash_on_hand_balance_is_set
    }

    fn use_fixed_cash_on_hand_balance(&self) -> bool {
        self.use_fixed_cash_on_hand_balance
    }

    fn fixed_cash_on_hand_balance_is_set(&self) -> bool {
        self.fixed_cash_on_hand_balance_is_set
    }

    fn fixed_cash_on_hand_balance(&self) -> f32 {
        f32_le(self.fixed_cash_on_hand_balance)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_is_new_account(&mut self, value: bool) -> &mut Self {
        self.is_new_account = value;
        self
    }

    fn set_new_account_authorized_username(&mut self, value: &str) -> &mut Self {
        self.new_account_authorized_username =
            set_vls(self, self.new_account_authorized_username, value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_currency_code_is_set(&mut self, value: bool) -> &mut Self {
        self.currency_code_is_set = value;
        self
    }

    fn set_currency_code(&mut self, value: &str) -> &mut Self {
        self.currency_code = set_vls(self, self.currency_code, value);
        self
    }

    fn set_daily_net_loss_limit_in_account_currency_is_set(&mut self, value: bool) -> &mut Self {
        self.daily_net_loss_limit_in_account_currency_is_set = value;
        self
    }

    fn set_daily_net_loss_limit_in_account_currency(&mut self, value: f32) -> &mut Self {
        self.daily_net_loss_limit_in_account_currency = f32_le(value);
        self
    }

    fn set_percent_of_cash_balance_for_daily_net_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.percent_of_cash_balance_for_daily_net_loss_limit_is_set = value;
        self
    }

    fn set_percent_of_cash_balance_for_daily_net_loss_limit(&mut self, value: i32) -> &mut Self {
        self.percent_of_cash_balance_for_daily_net_loss_limit = value.to_le();
        self
    }

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_trailing_account_value_to_not_allow_increase_in_positions_is_set = value;
        self
    }

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_trailing_account_value_to_not_allow_increase_in_positions = value;
        self
    }

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.do_not_allow_increase_in_positions_at_daily_loss_limit_is_set = value;
        self
    }

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        self
    }

    fn set_flatten_positions_at_daily_loss_limit_is_set(&mut self, value: bool) -> &mut Self {
        self.flatten_positions_at_daily_loss_limit_is_set = value;
        self
    }

    fn set_flatten_positions_at_daily_loss_limit(&mut self, value: u8) -> &mut Self {
        self.flatten_positions_at_daily_loss_limit = value;
        self
    }

    fn set_close_positions_at_end_of_day_is_set(&mut self, value: bool) -> &mut Self {
        self.close_positions_at_end_of_day_is_set = value;
        self
    }

    fn set_close_positions_at_end_of_day(&mut self, value: u8) -> &mut Self {
        self.close_positions_at_end_of_day = value;
        self
    }

    fn set_flatten_positions_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.flatten_positions_when_under_margin_intraday_is_set = value;
        self
    }

    fn set_flatten_positions_when_under_margin_intraday(&mut self, value: u8) -> &mut Self {
        self.flatten_positions_when_under_margin_intraday = value;
        self
    }

    fn set_flatten_positions_when_under_margin_at_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.flatten_positions_when_under_margin_at_end_of_day_is_set = value;
        self
    }

    fn set_flatten_positions_when_under_margin_at_end_of_day(&mut self, value: u8) -> &mut Self {
        self.flatten_positions_when_under_margin_at_end_of_day = value;
        self
    }

    fn set_sender_sub_id_is_set(&mut self, value: bool) -> &mut Self {
        self.sender_sub_id_is_set = value;
        self
    }

    fn set_sender_sub_id(&mut self, value: &str) -> &mut Self {
        self.sender_sub_id = set_vls(self, self.sender_sub_id, value);
        self
    }

    fn set_sender_location_id_is_set(&mut self, value: bool) -> &mut Self {
        self.sender_location_id_is_set = value;
        self
    }

    fn set_sender_location_id(&mut self, value: &str) -> &mut Self {
        self.sender_location_id = set_vls(self, self.sender_location_id, value);
        self
    }

    fn set_self_match_prevention_id_is_set(&mut self, value: bool) -> &mut Self {
        self.self_match_prevention_id_is_set = value;
        self
    }

    fn set_self_match_prevention_id(&mut self, value: &str) -> &mut Self {
        self.self_match_prevention_id = set_vls(self, self.self_match_prevention_id, value);
        self
    }

    fn set_cti_code_is_set(&mut self, value: bool) -> &mut Self {
        self.cti_code_is_set = value;
        self
    }

    fn set_cti_code(&mut self, value: i32) -> &mut Self {
        self.cti_code = value.to_le();
        self
    }

    fn set_trade_account_is_read_only_is_set(&mut self, value: bool) -> &mut Self {
        self.trade_account_is_read_only_is_set = value;
        self
    }

    fn set_trade_account_is_read_only(&mut self, value: bool) -> &mut Self {
        self.trade_account_is_read_only = value;
        self
    }

    fn set_maximum_global_position_quantity_is_set(&mut self, value: bool) -> &mut Self {
        self.maximum_global_position_quantity_is_set = value;
        self
    }

    fn set_maximum_global_position_quantity(&mut self, value: i32) -> &mut Self {
        self.maximum_global_position_quantity = value.to_le();
        self
    }

    fn set_trade_fee_per_contract_is_set(&mut self, value: bool) -> &mut Self {
        self.trade_fee_per_contract_is_set = value;
        self
    }

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self {
        self.trade_fee_per_contract = f64_le(value);
        self
    }

    fn set_trade_fee_per_share_is_set(&mut self, value: bool) -> &mut Self {
        self.trade_fee_per_share_is_set = value;
        self
    }

    fn set_trade_fee_per_share(&mut self, value: f64) -> &mut Self {
        self.trade_fee_per_share = f64_le(value);
        self
    }

    fn set_require_sufficient_margin_for_new_positions_is_set(&mut self, value: bool) -> &mut Self {
        self.require_sufficient_margin_for_new_positions_is_set = value;
        self
    }

    fn set_require_sufficient_margin_for_new_positions(&mut self, value: u8) -> &mut Self {
        self.require_sufficient_margin_for_new_positions = value;
        self
    }

    fn set_use_percent_of_margin_is_set(&mut self, value: bool) -> &mut Self {
        self.use_percent_of_margin_is_set = value;
        self
    }

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self {
        self.use_percent_of_margin = value.to_le();
        self
    }

    fn set_use_percent_of_margin_for_day_trading_is_set(&mut self, value: bool) -> &mut Self {
        self.use_percent_of_margin_for_day_trading_is_set = value;
        self
    }

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self {
        self.use_percent_of_margin_for_day_trading = value.to_le();
        self
    }

    fn set_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.maximum_allowed_account_balance_for_positions_as_percentage_is_set = value;
        self
    }

    fn set_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: i32,
    ) -> &mut Self {
        self.maximum_allowed_account_balance_for_positions_as_percentage = value.to_le();
        self
    }

    fn set_firm_id_is_set(&mut self, value: bool) -> &mut Self {
        self.firm_id_is_set = value;
        self
    }

    fn set_firm_id(&mut self, value: &str) -> &mut Self {
        self.firm_id = set_vls(self, self.firm_id, value);
        self
    }

    fn set_trading_is_disabled_is_set(&mut self, value: bool) -> &mut Self {
        self.trading_is_disabled_is_set = value;
        self
    }

    fn set_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        self.trading_is_disabled = value;
        self
    }

    fn set_descriptive_name_is_set(&mut self, value: bool) -> &mut Self {
        self.descriptive_name_is_set = value;
        self
    }

    fn set_descriptive_name(&mut self, value: &str) -> &mut Self {
        self.descriptive_name = set_vls(self, self.descriptive_name, value);
        self
    }

    fn set_is_master_firm_control_account_is_set(&mut self, value: bool) -> &mut Self {
        self.is_master_firm_control_account_is_set = value;
        self
    }

    fn set_is_master_firm_control_account(&mut self, value: bool) -> &mut Self {
        self.is_master_firm_control_account = value;
        self
    }

    fn set_minimum_required_account_value_is_set(&mut self, value: bool) -> &mut Self {
        self.minimum_required_account_value_is_set = value;
        self
    }

    fn set_minimum_required_account_value(&mut self, value: f64) -> &mut Self {
        self.minimum_required_account_value = f64_le(value);
        self
    }

    fn set_begin_time_for_day_margin_is_set(&mut self, value: bool) -> &mut Self {
        self.begin_time_for_day_margin_is_set = value;
        self
    }

    fn set_begin_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        self.begin_time_for_day_margin = value.to_le();
        self
    }

    fn set_end_time_for_day_margin_is_set(&mut self, value: bool) -> &mut Self {
        self.end_time_for_day_margin_is_set = value;
        self
    }

    fn set_end_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        self.end_time_for_day_margin = value.to_le();
        self
    }

    fn set_day_margin_time_zone_is_set(&mut self, value: bool) -> &mut Self {
        self.day_margin_time_zone_is_set = value;
        self
    }

    fn set_day_margin_time_zone(&mut self, value: &str) -> &mut Self {
        self.day_margin_time_zone = set_vls(self, self.day_margin_time_zone, value);
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_flatten_positions_when_under_margin_intraday_is_set = value;
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_flatten_positions_when_under_margin_intraday = value;
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set = value;
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day = value;
        self
    }

    fn set_use_master_firm_symbol_limits_array_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_symbol_limits_array_is_set = value;
        self
    }

    fn set_use_master_firm_symbol_limits_array(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_symbol_limits_array = value;
        self
    }

    fn set_use_master_firm_trade_fees_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fees_is_set = value;
        self
    }

    fn set_use_master_firm_trade_fees(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fees = value;
        self
    }

    fn set_use_master_firm_trade_fee_per_share_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fee_per_share_is_set = value;
        self
    }

    fn set_use_master_firm_trade_fee_per_share(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fee_per_share = value;
        self
    }

    fn set_use_master_firm_require_sufficient_margin_for_new_positions_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_require_sufficient_margin_for_new_positions_is_set = value;
        self
    }

    fn set_use_master_firm_require_sufficient_margin_for_new_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_require_sufficient_margin_for_new_positions = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_is_set = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_use_percent_of_margin = value;
        self
    }

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set =
            value;
        self
    }

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage = value;
        self
    }

    fn set_use_master_firm_minimum_required_account_value_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_minimum_required_account_value_is_set = value;
        self
    }

    fn set_use_master_firm_minimum_required_account_value(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_minimum_required_account_value = value;
        self
    }

    fn set_use_master_firm_margin_time_settings_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_margin_time_settings_is_set = value;
        self
    }

    fn set_use_master_firm_margin_time_settings(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_margin_time_settings = value;
        self
    }

    fn set_use_master_firm_trading_is_disabled_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trading_is_disabled_is_set = value;
        self
    }

    fn set_use_master_firm_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trading_is_disabled = value;
        self
    }

    fn set_is_trade_statistics_publically_shared_is_set(&mut self, value: bool) -> &mut Self {
        self.is_trade_statistics_publically_shared_is_set = value;
        self
    }

    fn set_is_trade_statistics_publically_shared(&mut self, value: bool) -> &mut Self {
        self.is_trade_statistics_publically_shared = value;
        self
    }

    fn set_is_read_only_following_requests_allowed_is_set(&mut self, value: bool) -> &mut Self {
        self.is_read_only_following_requests_allowed_is_set = value;
        self
    }

    fn set_is_read_only_following_requests_allowed(&mut self, value: bool) -> &mut Self {
        self.is_read_only_following_requests_allowed = value;
        self
    }

    fn set_is_trade_account_sharing_allowed_is_set(&mut self, value: bool) -> &mut Self {
        self.is_trade_account_sharing_allowed_is_set = value;
        self
    }

    fn set_is_trade_account_sharing_allowed(&mut self, value: bool) -> &mut Self {
        self.is_trade_account_sharing_allowed = value;
        self
    }

    fn set_read_only_share_to_all_sc_usernames_is_set(&mut self, value: bool) -> &mut Self {
        self.read_only_share_to_all_sc_usernames_is_set = value;
        self
    }

    fn set_read_only_share_to_all_sc_usernames(&mut self, value: u8) -> &mut Self {
        self.read_only_share_to_all_sc_usernames = value;
        self
    }

    fn set_use_master_firm_symbol_commissions_array_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_symbol_commissions_array_is_set = value;
        self
    }

    fn set_use_master_firm_symbol_commissions_array(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_symbol_commissions_array = value;
        self
    }

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set = value;
        self
    }

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_for_day_trading_is_set = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_for_day_trading = value;
        self
    }

    fn set_use_master_firm_symbol_commissions_array_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_symbol_commissions_array_full_override_is_set = value;
        self
    }

    fn set_use_master_firm_symbol_commissions_array_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_symbol_commissions_array_full_override = value;
        self
    }

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set = value;
        self
    }

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_full_override_is_set = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_full_override = value;
        self
    }

    fn set_use_master_firm_trade_fees_full_override_is_set(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fees_full_override_is_set = value;
        self
    }

    fn set_use_master_firm_trade_fees_full_override(&mut self, value: bool) -> &mut Self {
        self.use_master_firm_trade_fees_full_override = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set = value;
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.use_master_firm_use_percent_of_margin_for_day_trading_full_override = value;
        self
    }

    fn set_liquidation_only_mode_is_set(&mut self, value: bool) -> &mut Self {
        self.liquidation_only_mode_is_set = value;
        self
    }

    fn set_liquidation_only_mode(&mut self, value: u8) -> &mut Self {
        self.liquidation_only_mode = value;
        self
    }

    fn set_customer_or_firm_is_set(&mut self, value: bool) -> &mut Self {
        self.customer_or_firm_is_set = value;
        self
    }

    fn set_customer_or_firm(&mut self, value: u8) -> &mut Self {
        self.customer_or_firm = value;
        self
    }

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set = value;
        self
    }

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_account_when_daily_loss_limit_met = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_minimum_account_value_is_set = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_minimum_account_value = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_margin_intraday_is_set = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_intraday(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_margin_intraday = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_margin_end_of_day_is_set = value;
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day(
        &mut self,
        value: u8,
    ) -> &mut Self {
        self.master_firm_flatten_cancel_when_under_margin_end_of_day = value;
        self
    }

    fn set_master_firm_maximum_order_quantity_is_set(&mut self, value: u32) -> &mut Self {
        self.master_firm_maximum_order_quantity_is_set = value.to_le();
        self
    }

    fn set_master_firm_maximum_order_quantity(&mut self, value: u32) -> &mut Self {
        self.master_firm_maximum_order_quantity = value.to_le();
        self
    }

    fn set_exchange_trader_id_is_set(&mut self, value: bool) -> &mut Self {
        self.exchange_trader_id_is_set = value;
        self
    }

    fn set_exchange_trader_id(&mut self, value: &str) -> &mut Self {
        self.exchange_trader_id = set_vls(self, self.exchange_trader_id, value);
        self
    }

    fn set_use_fixed_cash_on_hand_balance_is_set(&mut self, value: bool) -> &mut Self {
        self.use_fixed_cash_on_hand_balance_is_set = value;
        self
    }

    fn set_use_fixed_cash_on_hand_balance(&mut self, value: bool) -> &mut Self {
        self.use_fixed_cash_on_hand_balance = value;
        self
    }

    fn set_fixed_cash_on_hand_balance_is_set(&mut self, value: bool) -> &mut Self {
        self.fixed_cash_on_hand_balance_is_set = value;
        self
    }

    fn set_fixed_cash_on_hand_balance(&mut self, value: f32) -> &mut Self {
        self.fixed_cash_on_hand_balance = f32_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl TradeAccountDataUpdate for TradeAccountDataUpdateVLSUnsafe {
    type Safe = TradeAccountDataUpdateVLS;
    type Unsafe = TradeAccountDataUpdateVLSUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn is_new_account(&self) -> bool {
        if self.is_out_of_bounds(11) {
            false
        } else {
            self.is_new_account
        }
    }

    fn new_account_authorized_username(&self) -> &str {
        if self.is_out_of_bounds(15) {
            ""
        } else {
            get_vls(self, self.new_account_authorized_username)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(19) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn currency_code_is_set(&self) -> bool {
        if self.is_out_of_bounds(20) {
            false
        } else {
            self.currency_code_is_set
        }
    }

    fn currency_code(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            get_vls(self, self.currency_code)
        }
    }

    fn daily_net_loss_limit_in_account_currency_is_set(&self) -> bool {
        if self.is_out_of_bounds(25) {
            false
        } else {
            self.daily_net_loss_limit_in_account_currency_is_set
        }
    }

    fn daily_net_loss_limit_in_account_currency(&self) -> f32 {
        if self.is_out_of_bounds(29) {
            0.0
        } else {
            f32_le(self.daily_net_loss_limit_in_account_currency)
        }
    }

    fn percent_of_cash_balance_for_daily_net_loss_limit_is_set(&self) -> bool {
        if self.is_out_of_bounds(30) {
            false
        } else {
            self.percent_of_cash_balance_for_daily_net_loss_limit_is_set
        }
    }

    fn percent_of_cash_balance_for_daily_net_loss_limit(&self) -> i32 {
        if self.is_out_of_bounds(34) {
            0i32.to_le()
        } else {
            i32::from_le(self.percent_of_cash_balance_for_daily_net_loss_limit)
        }
    }

    fn use_trailing_account_value_to_not_allow_increase_in_positions_is_set(&self) -> bool {
        if self.is_out_of_bounds(35) {
            false
        } else {
            self.use_trailing_account_value_to_not_allow_increase_in_positions_is_set
        }
    }

    fn use_trailing_account_value_to_not_allow_increase_in_positions(&self) -> bool {
        if self.is_out_of_bounds(36) {
            false
        } else {
            self.use_trailing_account_value_to_not_allow_increase_in_positions
        }
    }

    fn do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(&self) -> bool {
        if self.is_out_of_bounds(37) {
            false
        } else {
            self.do_not_allow_increase_in_positions_at_daily_loss_limit_is_set
        }
    }

    fn do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> u8 {
        if self.is_out_of_bounds(38) {
            0
        } else {
            self.do_not_allow_increase_in_positions_at_daily_loss_limit
        }
    }

    fn flatten_positions_at_daily_loss_limit_is_set(&self) -> bool {
        if self.is_out_of_bounds(39) {
            false
        } else {
            self.flatten_positions_at_daily_loss_limit_is_set
        }
    }

    fn flatten_positions_at_daily_loss_limit(&self) -> u8 {
        if self.is_out_of_bounds(40) {
            0
        } else {
            self.flatten_positions_at_daily_loss_limit
        }
    }

    fn close_positions_at_end_of_day_is_set(&self) -> bool {
        if self.is_out_of_bounds(41) {
            false
        } else {
            self.close_positions_at_end_of_day_is_set
        }
    }

    fn close_positions_at_end_of_day(&self) -> u8 {
        if self.is_out_of_bounds(42) {
            0
        } else {
            self.close_positions_at_end_of_day
        }
    }

    fn flatten_positions_when_under_margin_intraday_is_set(&self) -> bool {
        if self.is_out_of_bounds(43) {
            false
        } else {
            self.flatten_positions_when_under_margin_intraday_is_set
        }
    }

    fn flatten_positions_when_under_margin_intraday(&self) -> u8 {
        if self.is_out_of_bounds(44) {
            0
        } else {
            self.flatten_positions_when_under_margin_intraday
        }
    }

    fn flatten_positions_when_under_margin_at_end_of_day_is_set(&self) -> bool {
        if self.is_out_of_bounds(45) {
            false
        } else {
            self.flatten_positions_when_under_margin_at_end_of_day_is_set
        }
    }

    fn flatten_positions_when_under_margin_at_end_of_day(&self) -> u8 {
        if self.is_out_of_bounds(46) {
            0
        } else {
            self.flatten_positions_when_under_margin_at_end_of_day
        }
    }

    fn sender_sub_id_is_set(&self) -> bool {
        if self.is_out_of_bounds(47) {
            false
        } else {
            self.sender_sub_id_is_set
        }
    }

    fn sender_sub_id(&self) -> &str {
        if self.is_out_of_bounds(51) {
            ""
        } else {
            get_vls(self, self.sender_sub_id)
        }
    }

    fn sender_location_id_is_set(&self) -> bool {
        if self.is_out_of_bounds(52) {
            false
        } else {
            self.sender_location_id_is_set
        }
    }

    fn sender_location_id(&self) -> &str {
        if self.is_out_of_bounds(56) {
            ""
        } else {
            get_vls(self, self.sender_location_id)
        }
    }

    fn self_match_prevention_id_is_set(&self) -> bool {
        if self.is_out_of_bounds(57) {
            false
        } else {
            self.self_match_prevention_id_is_set
        }
    }

    fn self_match_prevention_id(&self) -> &str {
        if self.is_out_of_bounds(61) {
            ""
        } else {
            get_vls(self, self.self_match_prevention_id)
        }
    }

    fn cti_code_is_set(&self) -> bool {
        if self.is_out_of_bounds(62) {
            false
        } else {
            self.cti_code_is_set
        }
    }

    fn cti_code(&self) -> i32 {
        if self.is_out_of_bounds(66) {
            0i32.to_le()
        } else {
            i32::from_le(self.cti_code)
        }
    }

    fn trade_account_is_read_only_is_set(&self) -> bool {
        if self.is_out_of_bounds(67) {
            false
        } else {
            self.trade_account_is_read_only_is_set
        }
    }

    fn trade_account_is_read_only(&self) -> bool {
        if self.is_out_of_bounds(68) {
            false
        } else {
            self.trade_account_is_read_only
        }
    }

    fn maximum_global_position_quantity_is_set(&self) -> bool {
        if self.is_out_of_bounds(69) {
            false
        } else {
            self.maximum_global_position_quantity_is_set
        }
    }

    fn maximum_global_position_quantity(&self) -> i32 {
        if self.is_out_of_bounds(73) {
            0i32.to_le()
        } else {
            i32::from_le(self.maximum_global_position_quantity)
        }
    }

    fn trade_fee_per_contract_is_set(&self) -> bool {
        if self.is_out_of_bounds(74) {
            false
        } else {
            self.trade_fee_per_contract_is_set
        }
    }

    fn trade_fee_per_contract(&self) -> f64 {
        if self.is_out_of_bounds(82) {
            0.0
        } else {
            f64_le(self.trade_fee_per_contract)
        }
    }

    fn trade_fee_per_share_is_set(&self) -> bool {
        if self.is_out_of_bounds(83) {
            false
        } else {
            self.trade_fee_per_share_is_set
        }
    }

    fn trade_fee_per_share(&self) -> f64 {
        if self.is_out_of_bounds(91) {
            0.0
        } else {
            f64_le(self.trade_fee_per_share)
        }
    }

    fn require_sufficient_margin_for_new_positions_is_set(&self) -> bool {
        if self.is_out_of_bounds(92) {
            false
        } else {
            self.require_sufficient_margin_for_new_positions_is_set
        }
    }

    fn require_sufficient_margin_for_new_positions(&self) -> u8 {
        if self.is_out_of_bounds(93) {
            1
        } else {
            self.require_sufficient_margin_for_new_positions
        }
    }

    fn use_percent_of_margin_is_set(&self) -> bool {
        if self.is_out_of_bounds(94) {
            false
        } else {
            self.use_percent_of_margin_is_set
        }
    }

    fn use_percent_of_margin(&self) -> i32 {
        if self.is_out_of_bounds(98) {
            100i32.to_le()
        } else {
            i32::from_le(self.use_percent_of_margin)
        }
    }

    fn use_percent_of_margin_for_day_trading_is_set(&self) -> bool {
        if self.is_out_of_bounds(99) {
            false
        } else {
            self.use_percent_of_margin_for_day_trading_is_set
        }
    }

    fn use_percent_of_margin_for_day_trading(&self) -> i32 {
        if self.is_out_of_bounds(103) {
            100i32.to_le()
        } else {
            i32::from_le(self.use_percent_of_margin_for_day_trading)
        }
    }

    fn maximum_allowed_account_balance_for_positions_as_percentage_is_set(&self) -> bool {
        if self.is_out_of_bounds(104) {
            false
        } else {
            self.maximum_allowed_account_balance_for_positions_as_percentage_is_set
        }
    }

    fn maximum_allowed_account_balance_for_positions_as_percentage(&self) -> i32 {
        if self.is_out_of_bounds(108) {
            100i32.to_le()
        } else {
            i32::from_le(self.maximum_allowed_account_balance_for_positions_as_percentage)
        }
    }

    fn firm_id_is_set(&self) -> bool {
        if self.is_out_of_bounds(109) {
            false
        } else {
            self.firm_id_is_set
        }
    }

    fn firm_id(&self) -> &str {
        if self.is_out_of_bounds(113) {
            ""
        } else {
            get_vls(self, self.firm_id)
        }
    }

    fn trading_is_disabled_is_set(&self) -> bool {
        if self.is_out_of_bounds(114) {
            false
        } else {
            self.trading_is_disabled_is_set
        }
    }

    fn trading_is_disabled(&self) -> bool {
        if self.is_out_of_bounds(115) {
            false
        } else {
            self.trading_is_disabled
        }
    }

    fn descriptive_name_is_set(&self) -> bool {
        if self.is_out_of_bounds(116) {
            false
        } else {
            self.descriptive_name_is_set
        }
    }

    fn descriptive_name(&self) -> &str {
        if self.is_out_of_bounds(120) {
            ""
        } else {
            get_vls(self, self.descriptive_name)
        }
    }

    fn is_master_firm_control_account_is_set(&self) -> bool {
        if self.is_out_of_bounds(121) {
            false
        } else {
            self.is_master_firm_control_account_is_set
        }
    }

    fn is_master_firm_control_account(&self) -> bool {
        if self.is_out_of_bounds(122) {
            false
        } else {
            self.is_master_firm_control_account
        }
    }

    fn minimum_required_account_value_is_set(&self) -> bool {
        if self.is_out_of_bounds(123) {
            false
        } else {
            self.minimum_required_account_value_is_set
        }
    }

    fn minimum_required_account_value(&self) -> f64 {
        if self.is_out_of_bounds(131) {
            0.0
        } else {
            f64_le(self.minimum_required_account_value)
        }
    }

    fn begin_time_for_day_margin_is_set(&self) -> bool {
        if self.is_out_of_bounds(132) {
            false
        } else {
            self.begin_time_for_day_margin_is_set
        }
    }

    fn begin_time_for_day_margin(&self) -> i64 {
        if self.is_out_of_bounds(140) {
            0i64.to_le()
        } else {
            i64::from_le(self.begin_time_for_day_margin)
        }
    }

    fn end_time_for_day_margin_is_set(&self) -> bool {
        if self.is_out_of_bounds(141) {
            false
        } else {
            self.end_time_for_day_margin_is_set
        }
    }

    fn end_time_for_day_margin(&self) -> i64 {
        if self.is_out_of_bounds(149) {
            0i64.to_le()
        } else {
            i64::from_le(self.end_time_for_day_margin)
        }
    }

    fn day_margin_time_zone_is_set(&self) -> bool {
        if self.is_out_of_bounds(150) {
            false
        } else {
            self.day_margin_time_zone_is_set
        }
    }

    fn day_margin_time_zone(&self) -> &str {
        if self.is_out_of_bounds(154) {
            ""
        } else {
            get_vls(self, self.day_margin_time_zone)
        }
    }

    fn use_master_firm_flatten_positions_when_under_margin_intraday_is_set(&self) -> bool {
        if self.is_out_of_bounds(155) {
            false
        } else {
            self.use_master_firm_flatten_positions_when_under_margin_intraday_is_set
        }
    }

    fn use_master_firm_flatten_positions_when_under_margin_intraday(&self) -> bool {
        if self.is_out_of_bounds(156) {
            false
        } else {
            self.use_master_firm_flatten_positions_when_under_margin_intraday
        }
    }

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(&self) -> bool {
        if self.is_out_of_bounds(157) {
            false
        } else {
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set
        }
    }

    fn use_master_firm_flatten_positions_when_under_margin_at_end_of_day(&self) -> bool {
        if self.is_out_of_bounds(158) {
            false
        } else {
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day
        }
    }

    fn use_master_firm_symbol_limits_array_is_set(&self) -> bool {
        if self.is_out_of_bounds(159) {
            false
        } else {
            self.use_master_firm_symbol_limits_array_is_set
        }
    }

    fn use_master_firm_symbol_limits_array(&self) -> bool {
        if self.is_out_of_bounds(160) {
            false
        } else {
            self.use_master_firm_symbol_limits_array
        }
    }

    fn use_master_firm_trade_fees_is_set(&self) -> bool {
        if self.is_out_of_bounds(161) {
            false
        } else {
            self.use_master_firm_trade_fees_is_set
        }
    }

    fn use_master_firm_trade_fees(&self) -> bool {
        if self.is_out_of_bounds(162) {
            false
        } else {
            self.use_master_firm_trade_fees
        }
    }

    fn use_master_firm_trade_fee_per_share_is_set(&self) -> bool {
        if self.is_out_of_bounds(163) {
            false
        } else {
            self.use_master_firm_trade_fee_per_share_is_set
        }
    }

    fn use_master_firm_trade_fee_per_share(&self) -> bool {
        if self.is_out_of_bounds(164) {
            false
        } else {
            self.use_master_firm_trade_fee_per_share
        }
    }

    fn use_master_firm_require_sufficient_margin_for_new_positions_is_set(&self) -> bool {
        if self.is_out_of_bounds(165) {
            false
        } else {
            self.use_master_firm_require_sufficient_margin_for_new_positions_is_set
        }
    }

    fn use_master_firm_require_sufficient_margin_for_new_positions(&self) -> bool {
        if self.is_out_of_bounds(166) {
            false
        } else {
            self.use_master_firm_require_sufficient_margin_for_new_positions
        }
    }

    fn use_master_firm_use_percent_of_margin_is_set(&self) -> bool {
        if self.is_out_of_bounds(167) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_is_set
        }
    }

    fn use_master_firm_use_percent_of_margin(&self) -> bool {
        if self.is_out_of_bounds(168) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin
        }
    }

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &self,
    ) -> bool {
        if self.is_out_of_bounds(169) {
            false
        } else {
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set
        }
    }

    fn use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(&self) -> bool {
        if self.is_out_of_bounds(170) {
            false
        } else {
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage
        }
    }

    fn use_master_firm_minimum_required_account_value_is_set(&self) -> bool {
        if self.is_out_of_bounds(171) {
            false
        } else {
            self.use_master_firm_minimum_required_account_value_is_set
        }
    }

    fn use_master_firm_minimum_required_account_value(&self) -> bool {
        if self.is_out_of_bounds(172) {
            false
        } else {
            self.use_master_firm_minimum_required_account_value
        }
    }

    fn use_master_firm_margin_time_settings_is_set(&self) -> bool {
        if self.is_out_of_bounds(173) {
            false
        } else {
            self.use_master_firm_margin_time_settings_is_set
        }
    }

    fn use_master_firm_margin_time_settings(&self) -> bool {
        if self.is_out_of_bounds(174) {
            false
        } else {
            self.use_master_firm_margin_time_settings
        }
    }

    fn use_master_firm_trading_is_disabled_is_set(&self) -> bool {
        if self.is_out_of_bounds(175) {
            false
        } else {
            self.use_master_firm_trading_is_disabled_is_set
        }
    }

    fn use_master_firm_trading_is_disabled(&self) -> bool {
        if self.is_out_of_bounds(176) {
            false
        } else {
            self.use_master_firm_trading_is_disabled
        }
    }

    fn is_trade_statistics_publically_shared_is_set(&self) -> bool {
        if self.is_out_of_bounds(177) {
            false
        } else {
            self.is_trade_statistics_publically_shared_is_set
        }
    }

    fn is_trade_statistics_publically_shared(&self) -> bool {
        if self.is_out_of_bounds(178) {
            false
        } else {
            self.is_trade_statistics_publically_shared
        }
    }

    fn is_read_only_following_requests_allowed_is_set(&self) -> bool {
        if self.is_out_of_bounds(179) {
            false
        } else {
            self.is_read_only_following_requests_allowed_is_set
        }
    }

    fn is_read_only_following_requests_allowed(&self) -> bool {
        if self.is_out_of_bounds(180) {
            false
        } else {
            self.is_read_only_following_requests_allowed
        }
    }

    fn is_trade_account_sharing_allowed_is_set(&self) -> bool {
        if self.is_out_of_bounds(181) {
            false
        } else {
            self.is_trade_account_sharing_allowed_is_set
        }
    }

    fn is_trade_account_sharing_allowed(&self) -> bool {
        if self.is_out_of_bounds(182) {
            false
        } else {
            self.is_trade_account_sharing_allowed
        }
    }

    fn read_only_share_to_all_sc_usernames_is_set(&self) -> bool {
        if self.is_out_of_bounds(183) {
            false
        } else {
            self.read_only_share_to_all_sc_usernames_is_set
        }
    }

    fn read_only_share_to_all_sc_usernames(&self) -> u8 {
        if self.is_out_of_bounds(184) {
            0
        } else {
            self.read_only_share_to_all_sc_usernames
        }
    }

    fn use_master_firm_symbol_commissions_array_is_set(&self) -> bool {
        if self.is_out_of_bounds(185) {
            false
        } else {
            self.use_master_firm_symbol_commissions_array_is_set
        }
    }

    fn use_master_firm_symbol_commissions_array(&self) -> bool {
        if self.is_out_of_bounds(186) {
            false
        } else {
            self.use_master_firm_symbol_commissions_array
        }
    }

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &self,
    ) -> bool {
        if self.is_out_of_bounds(187) {
            false
        } else {
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set
        }
    }

    fn use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(&self) -> bool {
        if self.is_out_of_bounds(188) {
            false
        } else {
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit
        }
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_is_set(&self) -> bool {
        if self.is_out_of_bounds(189) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_for_day_trading_is_set
        }
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading(&self) -> bool {
        if self.is_out_of_bounds(190) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_for_day_trading
        }
    }

    fn use_master_firm_symbol_commissions_array_full_override_is_set(&self) -> bool {
        if self.is_out_of_bounds(191) {
            false
        } else {
            self.use_master_firm_symbol_commissions_array_full_override_is_set
        }
    }

    fn use_master_firm_symbol_commissions_array_full_override(&self) -> bool {
        if self.is_out_of_bounds(192) {
            false
        } else {
            self.use_master_firm_symbol_commissions_array_full_override
        }
    }

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(&self) -> bool {
        if self.is_out_of_bounds(193) {
            false
        } else {
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set
        }
    }

    fn use_master_firm_num_days_before_last_trading_date_to_disallow_orders(&self) -> bool {
        if self.is_out_of_bounds(194) {
            false
        } else {
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders
        }
    }

    fn use_master_firm_use_percent_of_margin_full_override_is_set(&self) -> bool {
        if self.is_out_of_bounds(195) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_full_override_is_set
        }
    }

    fn use_master_firm_use_percent_of_margin_full_override(&self) -> bool {
        if self.is_out_of_bounds(196) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_full_override
        }
    }

    fn use_master_firm_trade_fees_full_override_is_set(&self) -> bool {
        if self.is_out_of_bounds(197) {
            false
        } else {
            self.use_master_firm_trade_fees_full_override_is_set
        }
    }

    fn use_master_firm_trade_fees_full_override(&self) -> bool {
        if self.is_out_of_bounds(198) {
            false
        } else {
            self.use_master_firm_trade_fees_full_override
        }
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(&self) -> bool {
        if self.is_out_of_bounds(199) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set
        }
    }

    fn use_master_firm_use_percent_of_margin_for_day_trading_full_override(&self) -> bool {
        if self.is_out_of_bounds(200) {
            false
        } else {
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override
        }
    }

    fn liquidation_only_mode_is_set(&self) -> bool {
        if self.is_out_of_bounds(201) {
            false
        } else {
            self.liquidation_only_mode_is_set
        }
    }

    fn liquidation_only_mode(&self) -> u8 {
        if self.is_out_of_bounds(202) {
            0
        } else {
            self.liquidation_only_mode
        }
    }

    fn customer_or_firm_is_set(&self) -> bool {
        if self.is_out_of_bounds(203) {
            false
        } else {
            self.customer_or_firm_is_set
        }
    }

    fn customer_or_firm(&self) -> u8 {
        if self.is_out_of_bounds(204) {
            0
        } else {
            self.customer_or_firm
        }
    }

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(&self) -> bool {
        if self.is_out_of_bounds(205) {
            false
        } else {
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set
        }
    }

    fn master_firm_flatten_cancel_account_when_daily_loss_limit_met(&self) -> u8 {
        if self.is_out_of_bounds(206) {
            0
        } else {
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met
        }
    }

    fn master_firm_flatten_cancel_when_under_minimum_account_value_is_set(&self) -> bool {
        if self.is_out_of_bounds(207) {
            false
        } else {
            self.master_firm_flatten_cancel_when_under_minimum_account_value_is_set
        }
    }

    fn master_firm_flatten_cancel_when_under_minimum_account_value(&self) -> u8 {
        if self.is_out_of_bounds(208) {
            0
        } else {
            self.master_firm_flatten_cancel_when_under_minimum_account_value
        }
    }

    fn master_firm_flatten_cancel_when_under_margin_intraday_is_set(&self) -> bool {
        if self.is_out_of_bounds(209) {
            false
        } else {
            self.master_firm_flatten_cancel_when_under_margin_intraday_is_set
        }
    }

    fn master_firm_flatten_cancel_when_under_margin_intraday(&self) -> u8 {
        if self.is_out_of_bounds(210) {
            0
        } else {
            self.master_firm_flatten_cancel_when_under_margin_intraday
        }
    }

    fn master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(&self) -> bool {
        if self.is_out_of_bounds(211) {
            false
        } else {
            self.master_firm_flatten_cancel_when_under_margin_end_of_day_is_set
        }
    }

    fn master_firm_flatten_cancel_when_under_margin_end_of_day(&self) -> u8 {
        if self.is_out_of_bounds(212) {
            0
        } else {
            self.master_firm_flatten_cancel_when_under_margin_end_of_day
        }
    }

    fn master_firm_maximum_order_quantity_is_set(&self) -> u32 {
        if self.is_out_of_bounds(216) {
            0u32.to_le()
        } else {
            u32::from_le(self.master_firm_maximum_order_quantity_is_set)
        }
    }

    fn master_firm_maximum_order_quantity(&self) -> u32 {
        if self.is_out_of_bounds(220) {
            0u32.to_le()
        } else {
            u32::from_le(self.master_firm_maximum_order_quantity)
        }
    }

    fn exchange_trader_id_is_set(&self) -> bool {
        if self.is_out_of_bounds(221) {
            false
        } else {
            self.exchange_trader_id_is_set
        }
    }

    fn exchange_trader_id(&self) -> &str {
        if self.is_out_of_bounds(225) {
            ""
        } else {
            get_vls(self, self.exchange_trader_id)
        }
    }

    fn use_fixed_cash_on_hand_balance_is_set(&self) -> bool {
        if self.is_out_of_bounds(226) {
            false
        } else {
            self.use_fixed_cash_on_hand_balance_is_set
        }
    }

    fn use_fixed_cash_on_hand_balance(&self) -> bool {
        if self.is_out_of_bounds(227) {
            false
        } else {
            self.use_fixed_cash_on_hand_balance
        }
    }

    fn fixed_cash_on_hand_balance_is_set(&self) -> bool {
        if self.is_out_of_bounds(228) {
            false
        } else {
            self.fixed_cash_on_hand_balance_is_set
        }
    }

    fn fixed_cash_on_hand_balance(&self) -> f32 {
        if self.is_out_of_bounds(232) {
            0.0
        } else {
            f32_le(self.fixed_cash_on_hand_balance)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_is_new_account(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(11) {
            self.is_new_account = value;
        }
        self
    }

    fn set_new_account_authorized_username(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(15) {
            self.new_account_authorized_username =
                set_vls(self, self.new_account_authorized_username, value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(19) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_currency_code_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.currency_code_is_set = value;
        }
        self
    }

    fn set_currency_code(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.currency_code = set_vls(self, self.currency_code, value);
        }
        self
    }

    fn set_daily_net_loss_limit_in_account_currency_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(25) {
            self.daily_net_loss_limit_in_account_currency_is_set = value;
        }
        self
    }

    fn set_daily_net_loss_limit_in_account_currency(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(29) {
            self.daily_net_loss_limit_in_account_currency = f32_le(value);
        }
        self
    }

    fn set_percent_of_cash_balance_for_daily_net_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(30) {
            self.percent_of_cash_balance_for_daily_net_loss_limit_is_set = value;
        }
        self
    }

    fn set_percent_of_cash_balance_for_daily_net_loss_limit(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(34) {
            self.percent_of_cash_balance_for_daily_net_loss_limit = value.to_le();
        }
        self
    }

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(35) {
            self.use_trailing_account_value_to_not_allow_increase_in_positions_is_set = value;
        }
        self
    }

    fn set_use_trailing_account_value_to_not_allow_increase_in_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.use_trailing_account_value_to_not_allow_increase_in_positions = value;
        }
        self
    }

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(37) {
            self.do_not_allow_increase_in_positions_at_daily_loss_limit_is_set = value;
        }
        self
    }

    fn set_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(38) {
            self.do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        }
        self
    }

    fn set_flatten_positions_at_daily_loss_limit_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(39) {
            self.flatten_positions_at_daily_loss_limit_is_set = value;
        }
        self
    }

    fn set_flatten_positions_at_daily_loss_limit(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.flatten_positions_at_daily_loss_limit = value;
        }
        self
    }

    fn set_close_positions_at_end_of_day_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(41) {
            self.close_positions_at_end_of_day_is_set = value;
        }
        self
    }

    fn set_close_positions_at_end_of_day(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(42) {
            self.close_positions_at_end_of_day = value;
        }
        self
    }

    fn set_flatten_positions_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(43) {
            self.flatten_positions_when_under_margin_intraday_is_set = value;
        }
        self
    }

    fn set_flatten_positions_when_under_margin_intraday(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(44) {
            self.flatten_positions_when_under_margin_intraday = value;
        }
        self
    }

    fn set_flatten_positions_when_under_margin_at_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(45) {
            self.flatten_positions_when_under_margin_at_end_of_day_is_set = value;
        }
        self
    }

    fn set_flatten_positions_when_under_margin_at_end_of_day(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(46) {
            self.flatten_positions_when_under_margin_at_end_of_day = value;
        }
        self
    }

    fn set_sender_sub_id_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(47) {
            self.sender_sub_id_is_set = value;
        }
        self
    }

    fn set_sender_sub_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(51) {
            self.sender_sub_id = set_vls(self, self.sender_sub_id, value);
        }
        self
    }

    fn set_sender_location_id_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.sender_location_id_is_set = value;
        }
        self
    }

    fn set_sender_location_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.sender_location_id = set_vls(self, self.sender_location_id, value);
        }
        self
    }

    fn set_self_match_prevention_id_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(57) {
            self.self_match_prevention_id_is_set = value;
        }
        self
    }

    fn set_self_match_prevention_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(61) {
            self.self_match_prevention_id = set_vls(self, self.self_match_prevention_id, value);
        }
        self
    }

    fn set_cti_code_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(62) {
            self.cti_code_is_set = value;
        }
        self
    }

    fn set_cti_code(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(66) {
            self.cti_code = value.to_le();
        }
        self
    }

    fn set_trade_account_is_read_only_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(67) {
            self.trade_account_is_read_only_is_set = value;
        }
        self
    }

    fn set_trade_account_is_read_only(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            self.trade_account_is_read_only = value;
        }
        self
    }

    fn set_maximum_global_position_quantity_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(69) {
            self.maximum_global_position_quantity_is_set = value;
        }
        self
    }

    fn set_maximum_global_position_quantity(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(73) {
            self.maximum_global_position_quantity = value.to_le();
        }
        self
    }

    fn set_trade_fee_per_contract_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(74) {
            self.trade_fee_per_contract_is_set = value;
        }
        self
    }

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(82) {
            self.trade_fee_per_contract = f64_le(value);
        }
        self
    }

    fn set_trade_fee_per_share_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(83) {
            self.trade_fee_per_share_is_set = value;
        }
        self
    }

    fn set_trade_fee_per_share(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(91) {
            self.trade_fee_per_share = f64_le(value);
        }
        self
    }

    fn set_require_sufficient_margin_for_new_positions_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(92) {
            self.require_sufficient_margin_for_new_positions_is_set = value;
        }
        self
    }

    fn set_require_sufficient_margin_for_new_positions(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(93) {
            self.require_sufficient_margin_for_new_positions = value;
        }
        self
    }

    fn set_use_percent_of_margin_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(94) {
            self.use_percent_of_margin_is_set = value;
        }
        self
    }

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(98) {
            self.use_percent_of_margin = value.to_le();
        }
        self
    }

    fn set_use_percent_of_margin_for_day_trading_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(99) {
            self.use_percent_of_margin_for_day_trading_is_set = value;
        }
        self
    }

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(103) {
            self.use_percent_of_margin_for_day_trading = value.to_le();
        }
        self
    }

    fn set_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.maximum_allowed_account_balance_for_positions_as_percentage_is_set = value;
        }
        self
    }

    fn set_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: i32,
    ) -> &mut Self {
        if !self.is_out_of_bounds(108) {
            self.maximum_allowed_account_balance_for_positions_as_percentage = value.to_le();
        }
        self
    }

    fn set_firm_id_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(109) {
            self.firm_id_is_set = value;
        }
        self
    }

    fn set_firm_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(113) {
            self.firm_id = set_vls(self, self.firm_id, value);
        }
        self
    }

    fn set_trading_is_disabled_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(114) {
            self.trading_is_disabled_is_set = value;
        }
        self
    }

    fn set_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(115) {
            self.trading_is_disabled = value;
        }
        self
    }

    fn set_descriptive_name_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(116) {
            self.descriptive_name_is_set = value;
        }
        self
    }

    fn set_descriptive_name(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.descriptive_name = set_vls(self, self.descriptive_name, value);
        }
        self
    }

    fn set_is_master_firm_control_account_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(121) {
            self.is_master_firm_control_account_is_set = value;
        }
        self
    }

    fn set_is_master_firm_control_account(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(122) {
            self.is_master_firm_control_account = value;
        }
        self
    }

    fn set_minimum_required_account_value_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(123) {
            self.minimum_required_account_value_is_set = value;
        }
        self
    }

    fn set_minimum_required_account_value(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(131) {
            self.minimum_required_account_value = f64_le(value);
        }
        self
    }

    fn set_begin_time_for_day_margin_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(132) {
            self.begin_time_for_day_margin_is_set = value;
        }
        self
    }

    fn set_begin_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(140) {
            self.begin_time_for_day_margin = value.to_le();
        }
        self
    }

    fn set_end_time_for_day_margin_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(141) {
            self.end_time_for_day_margin_is_set = value;
        }
        self
    }

    fn set_end_time_for_day_margin(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(149) {
            self.end_time_for_day_margin = value.to_le();
        }
        self
    }

    fn set_day_margin_time_zone_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(150) {
            self.day_margin_time_zone_is_set = value;
        }
        self
    }

    fn set_day_margin_time_zone(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(154) {
            self.day_margin_time_zone = set_vls(self, self.day_margin_time_zone, value);
        }
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(155) {
            self.use_master_firm_flatten_positions_when_under_margin_intraday_is_set = value;
        }
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_intraday(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(156) {
            self.use_master_firm_flatten_positions_when_under_margin_intraday = value;
        }
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(157) {
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set = value;
        }
        self
    }

    fn set_use_master_firm_flatten_positions_when_under_margin_at_end_of_day(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(158) {
            self.use_master_firm_flatten_positions_when_under_margin_at_end_of_day = value;
        }
        self
    }

    fn set_use_master_firm_symbol_limits_array_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(159) {
            self.use_master_firm_symbol_limits_array_is_set = value;
        }
        self
    }

    fn set_use_master_firm_symbol_limits_array(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(160) {
            self.use_master_firm_symbol_limits_array = value;
        }
        self
    }

    fn set_use_master_firm_trade_fees_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(161) {
            self.use_master_firm_trade_fees_is_set = value;
        }
        self
    }

    fn set_use_master_firm_trade_fees(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(162) {
            self.use_master_firm_trade_fees = value;
        }
        self
    }

    fn set_use_master_firm_trade_fee_per_share_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(163) {
            self.use_master_firm_trade_fee_per_share_is_set = value;
        }
        self
    }

    fn set_use_master_firm_trade_fee_per_share(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(164) {
            self.use_master_firm_trade_fee_per_share = value;
        }
        self
    }

    fn set_use_master_firm_require_sufficient_margin_for_new_positions_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(165) {
            self.use_master_firm_require_sufficient_margin_for_new_positions_is_set = value;
        }
        self
    }

    fn set_use_master_firm_require_sufficient_margin_for_new_positions(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(166) {
            self.use_master_firm_require_sufficient_margin_for_new_positions = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(167) {
            self.use_master_firm_use_percent_of_margin_is_set = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(168) {
            self.use_master_firm_use_percent_of_margin = value;
        }
        self
    }

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(169) {
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set = value;
        }
        self
    }

    fn set_use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(170) {
            self.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage =
                value;
        }
        self
    }

    fn set_use_master_firm_minimum_required_account_value_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(171) {
            self.use_master_firm_minimum_required_account_value_is_set = value;
        }
        self
    }

    fn set_use_master_firm_minimum_required_account_value(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(172) {
            self.use_master_firm_minimum_required_account_value = value;
        }
        self
    }

    fn set_use_master_firm_margin_time_settings_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(173) {
            self.use_master_firm_margin_time_settings_is_set = value;
        }
        self
    }

    fn set_use_master_firm_margin_time_settings(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(174) {
            self.use_master_firm_margin_time_settings = value;
        }
        self
    }

    fn set_use_master_firm_trading_is_disabled_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(175) {
            self.use_master_firm_trading_is_disabled_is_set = value;
        }
        self
    }

    fn set_use_master_firm_trading_is_disabled(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(176) {
            self.use_master_firm_trading_is_disabled = value;
        }
        self
    }

    fn set_is_trade_statistics_publically_shared_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(177) {
            self.is_trade_statistics_publically_shared_is_set = value;
        }
        self
    }

    fn set_is_trade_statistics_publically_shared(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(178) {
            self.is_trade_statistics_publically_shared = value;
        }
        self
    }

    fn set_is_read_only_following_requests_allowed_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(179) {
            self.is_read_only_following_requests_allowed_is_set = value;
        }
        self
    }

    fn set_is_read_only_following_requests_allowed(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(180) {
            self.is_read_only_following_requests_allowed = value;
        }
        self
    }

    fn set_is_trade_account_sharing_allowed_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(181) {
            self.is_trade_account_sharing_allowed_is_set = value;
        }
        self
    }

    fn set_is_trade_account_sharing_allowed(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(182) {
            self.is_trade_account_sharing_allowed = value;
        }
        self
    }

    fn set_read_only_share_to_all_sc_usernames_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(183) {
            self.read_only_share_to_all_sc_usernames_is_set = value;
        }
        self
    }

    fn set_read_only_share_to_all_sc_usernames(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(184) {
            self.read_only_share_to_all_sc_usernames = value;
        }
        self
    }

    fn set_use_master_firm_symbol_commissions_array_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(185) {
            self.use_master_firm_symbol_commissions_array_is_set = value;
        }
        self
    }

    fn set_use_master_firm_symbol_commissions_array(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(186) {
            self.use_master_firm_symbol_commissions_array = value;
        }
        self
    }

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(187) {
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set =
                value;
        }
        self
    }

    fn set_use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(188) {
            self.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(189) {
            self.use_master_firm_use_percent_of_margin_for_day_trading_is_set = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(190) {
            self.use_master_firm_use_percent_of_margin_for_day_trading = value;
        }
        self
    }

    fn set_use_master_firm_symbol_commissions_array_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(191) {
            self.use_master_firm_symbol_commissions_array_full_override_is_set = value;
        }
        self
    }

    fn set_use_master_firm_symbol_commissions_array_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(192) {
            self.use_master_firm_symbol_commissions_array_full_override = value;
        }
        self
    }

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(193) {
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set =
                value;
        }
        self
    }

    fn set_use_master_firm_num_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(194) {
            self.use_master_firm_num_days_before_last_trading_date_to_disallow_orders = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(195) {
            self.use_master_firm_use_percent_of_margin_full_override_is_set = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(196) {
            self.use_master_firm_use_percent_of_margin_full_override = value;
        }
        self
    }

    fn set_use_master_firm_trade_fees_full_override_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(197) {
            self.use_master_firm_trade_fees_full_override_is_set = value;
        }
        self
    }

    fn set_use_master_firm_trade_fees_full_override(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(198) {
            self.use_master_firm_trade_fees_full_override = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(199) {
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set = value;
        }
        self
    }

    fn set_use_master_firm_use_percent_of_margin_for_day_trading_full_override(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(200) {
            self.use_master_firm_use_percent_of_margin_for_day_trading_full_override = value;
        }
        self
    }

    fn set_liquidation_only_mode_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(201) {
            self.liquidation_only_mode_is_set = value;
        }
        self
    }

    fn set_liquidation_only_mode(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(202) {
            self.liquidation_only_mode = value;
        }
        self
    }

    fn set_customer_or_firm_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(203) {
            self.customer_or_firm_is_set = value;
        }
        self
    }

    fn set_customer_or_firm(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(204) {
            self.customer_or_firm = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(205) {
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_account_when_daily_loss_limit_met(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(206) {
            self.master_firm_flatten_cancel_account_when_daily_loss_limit_met = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(207) {
            self.master_firm_flatten_cancel_when_under_minimum_account_value_is_set = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_minimum_account_value(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(208) {
            self.master_firm_flatten_cancel_when_under_minimum_account_value = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_intraday_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(209) {
            self.master_firm_flatten_cancel_when_under_margin_intraday_is_set = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_intraday(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(210) {
            self.master_firm_flatten_cancel_when_under_margin_intraday = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day_is_set(
        &mut self,
        value: bool,
    ) -> &mut Self {
        if !self.is_out_of_bounds(211) {
            self.master_firm_flatten_cancel_when_under_margin_end_of_day_is_set = value;
        }
        self
    }

    fn set_master_firm_flatten_cancel_when_under_margin_end_of_day(
        &mut self,
        value: u8,
    ) -> &mut Self {
        if !self.is_out_of_bounds(212) {
            self.master_firm_flatten_cancel_when_under_margin_end_of_day = value;
        }
        self
    }

    fn set_master_firm_maximum_order_quantity_is_set(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(216) {
            self.master_firm_maximum_order_quantity_is_set = value.to_le();
        }
        self
    }

    fn set_master_firm_maximum_order_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(220) {
            self.master_firm_maximum_order_quantity = value.to_le();
        }
        self
    }

    fn set_exchange_trader_id_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(221) {
            self.exchange_trader_id_is_set = value;
        }
        self
    }

    fn set_exchange_trader_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(225) {
            self.exchange_trader_id = set_vls(self, self.exchange_trader_id, value);
        }
        self
    }

    fn set_use_fixed_cash_on_hand_balance_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(226) {
            self.use_fixed_cash_on_hand_balance_is_set = value;
        }
        self
    }

    fn set_use_fixed_cash_on_hand_balance(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(227) {
            self.use_fixed_cash_on_hand_balance = value;
        }
        self
    }

    fn set_fixed_cash_on_hand_balance_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(228) {
            self.fixed_cash_on_hand_balance_is_set = value;
        }
        self
    }

    fn set_fixed_cash_on_hand_balance(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(232) {
            self.fixed_cash_on_hand_balance = f32_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                232usize,
                core::mem::size_of::<TradeAccountDataUpdateVLSData>(),
                "TradeAccountDataUpdateVLSData sizeof expected {:} but was {:}",
                232usize,
                core::mem::size_of::<TradeAccountDataUpdateVLSData>()
            );
            assert_eq!(
                232u16,
                TradeAccountDataUpdateVLS::new().size(),
                "TradeAccountDataUpdateVLS sizeof expected {:} but was {:}",
                232u16,
                TradeAccountDataUpdateVLS::new().size(),
            );
            assert_eq!(
                TRADE_ACCOUNT_DATA_UPDATE,
                TradeAccountDataUpdateVLS::new().r#type(),
                "TradeAccountDataUpdateVLS type expected {:} but was {:}",
                TRADE_ACCOUNT_DATA_UPDATE,
                TradeAccountDataUpdateVLS::new().r#type(),
            );
            assert_eq!(
                10117u16,
                TradeAccountDataUpdateVLS::new().r#type(),
                "TradeAccountDataUpdateVLS type expected {:} but was {:}",
                10117u16,
                TradeAccountDataUpdateVLS::new().r#type(),
            );
            let d = TradeAccountDataUpdateVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.is_new_account) as usize) - p,
                "is_new_account offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.is_new_account) as usize) - p,
            );
            assert_eq!(
                11usize,
                (core::ptr::addr_of!(d.new_account_authorized_username) as usize) - p,
                "new_account_authorized_username offset expected {:} but was {:}",
                11usize,
                (core::ptr::addr_of!(d.new_account_authorized_username) as usize) - p,
            );
            assert_eq!(
                15usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                15usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                19usize,
                (core::ptr::addr_of!(d.currency_code_is_set) as usize) - p,
                "currency_code_is_set offset expected {:} but was {:}",
                19usize,
                (core::ptr::addr_of!(d.currency_code_is_set) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.currency_code) as usize) - p,
                "currency_code offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.currency_code) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_in_account_currency_is_set) as usize)
                    - p,
                "daily_net_loss_limit_in_account_currency_is_set offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_in_account_currency_is_set) as usize)
                    - p,
            );
            assert_eq!(
                25usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_in_account_currency) as usize) - p,
                "daily_net_loss_limit_in_account_currency offset expected {:} but was {:}",
                25usize,
                (core::ptr::addr_of!(d.daily_net_loss_limit_in_account_currency) as usize) - p,
            );
            assert_eq!(
                29usize,
                (core::ptr::addr_of!(d.percent_of_cash_balance_for_daily_net_loss_limit_is_set) as usize) - p,
                "percent_of_cash_balance_for_daily_net_loss_limit_is_set offset expected {:} but was {:}",
                29usize,
                (core::ptr::addr_of!(d.percent_of_cash_balance_for_daily_net_loss_limit_is_set) as usize) - p,
            );
            assert_eq!(
                30usize,
                (core::ptr::addr_of!(d.percent_of_cash_balance_for_daily_net_loss_limit) as usize)
                    - p,
                "percent_of_cash_balance_for_daily_net_loss_limit offset expected {:} but was {:}",
                30usize,
                (core::ptr::addr_of!(d.percent_of_cash_balance_for_daily_net_loss_limit) as usize)
                    - p,
            );
            assert_eq!(
                34usize,
                (core::ptr::addr_of!(d.use_trailing_account_value_to_not_allow_increase_in_positions_is_set) as usize) - p,
                "use_trailing_account_value_to_not_allow_increase_in_positions_is_set offset expected {:} but was {:}",
                34usize,
                (core::ptr::addr_of!(d.use_trailing_account_value_to_not_allow_increase_in_positions_is_set) as usize) - p,
            );
            assert_eq!(
                35usize,
                (core::ptr::addr_of!(d.use_trailing_account_value_to_not_allow_increase_in_positions) as usize) - p,
                "use_trailing_account_value_to_not_allow_increase_in_positions offset expected {:} but was {:}",
                35usize,
                (core::ptr::addr_of!(d.use_trailing_account_value_to_not_allow_increase_in_positions) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.do_not_allow_increase_in_positions_at_daily_loss_limit_is_set) as usize) - p,
                "do_not_allow_increase_in_positions_at_daily_loss_limit_is_set offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.do_not_allow_increase_in_positions_at_daily_loss_limit_is_set) as usize) - p,
            );
            assert_eq!(
                37usize,
                (core::ptr::addr_of!(d.do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
                "do_not_allow_increase_in_positions_at_daily_loss_limit offset expected {:} but was {:}",
                37usize,
                (core::ptr::addr_of!(d.do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
            );
            assert_eq!(
                38usize,
                (core::ptr::addr_of!(d.flatten_positions_at_daily_loss_limit_is_set) as usize) - p,
                "flatten_positions_at_daily_loss_limit_is_set offset expected {:} but was {:}",
                38usize,
                (core::ptr::addr_of!(d.flatten_positions_at_daily_loss_limit_is_set) as usize) - p,
            );
            assert_eq!(
                39usize,
                (core::ptr::addr_of!(d.flatten_positions_at_daily_loss_limit) as usize) - p,
                "flatten_positions_at_daily_loss_limit offset expected {:} but was {:}",
                39usize,
                (core::ptr::addr_of!(d.flatten_positions_at_daily_loss_limit) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.close_positions_at_end_of_day_is_set) as usize) - p,
                "close_positions_at_end_of_day_is_set offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.close_positions_at_end_of_day_is_set) as usize) - p,
            );
            assert_eq!(
                41usize,
                (core::ptr::addr_of!(d.close_positions_at_end_of_day) as usize) - p,
                "close_positions_at_end_of_day offset expected {:} but was {:}",
                41usize,
                (core::ptr::addr_of!(d.close_positions_at_end_of_day) as usize) - p,
            );
            assert_eq!(
                42usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday_is_set) as usize) - p,
                "flatten_positions_when_under_margin_intraday_is_set offset expected {:} but was {:}",
                42usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday_is_set) as usize) - p,
            );
            assert_eq!(
                43usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday) as usize) - p,
                "flatten_positions_when_under_margin_intraday offset expected {:} but was {:}",
                43usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_intraday) as usize) - p,
            );
            assert_eq!(
                44usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_at_end_of_day_is_set) as usize) - p,
                "flatten_positions_when_under_margin_at_end_of_day_is_set offset expected {:} but was {:}",
                44usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_at_end_of_day_is_set) as usize) - p,
            );
            assert_eq!(
                45usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_at_end_of_day) as usize)
                    - p,
                "flatten_positions_when_under_margin_at_end_of_day offset expected {:} but was {:}",
                45usize,
                (core::ptr::addr_of!(d.flatten_positions_when_under_margin_at_end_of_day) as usize)
                    - p,
            );
            assert_eq!(
                46usize,
                (core::ptr::addr_of!(d.sender_sub_id_is_set) as usize) - p,
                "sender_sub_id_is_set offset expected {:} but was {:}",
                46usize,
                (core::ptr::addr_of!(d.sender_sub_id_is_set) as usize) - p,
            );
            assert_eq!(
                47usize,
                (core::ptr::addr_of!(d.sender_sub_id) as usize) - p,
                "sender_sub_id offset expected {:} but was {:}",
                47usize,
                (core::ptr::addr_of!(d.sender_sub_id) as usize) - p,
            );
            assert_eq!(
                51usize,
                (core::ptr::addr_of!(d.sender_location_id_is_set) as usize) - p,
                "sender_location_id_is_set offset expected {:} but was {:}",
                51usize,
                (core::ptr::addr_of!(d.sender_location_id_is_set) as usize) - p,
            );
            assert_eq!(
                52usize,
                (core::ptr::addr_of!(d.sender_location_id) as usize) - p,
                "sender_location_id offset expected {:} but was {:}",
                52usize,
                (core::ptr::addr_of!(d.sender_location_id) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.self_match_prevention_id_is_set) as usize) - p,
                "self_match_prevention_id_is_set offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.self_match_prevention_id_is_set) as usize) - p,
            );
            assert_eq!(
                57usize,
                (core::ptr::addr_of!(d.self_match_prevention_id) as usize) - p,
                "self_match_prevention_id offset expected {:} but was {:}",
                57usize,
                (core::ptr::addr_of!(d.self_match_prevention_id) as usize) - p,
            );
            assert_eq!(
                61usize,
                (core::ptr::addr_of!(d.cti_code_is_set) as usize) - p,
                "cti_code_is_set offset expected {:} but was {:}",
                61usize,
                (core::ptr::addr_of!(d.cti_code_is_set) as usize) - p,
            );
            assert_eq!(
                62usize,
                (core::ptr::addr_of!(d.cti_code) as usize) - p,
                "cti_code offset expected {:} but was {:}",
                62usize,
                (core::ptr::addr_of!(d.cti_code) as usize) - p,
            );
            assert_eq!(
                66usize,
                (core::ptr::addr_of!(d.trade_account_is_read_only_is_set) as usize) - p,
                "trade_account_is_read_only_is_set offset expected {:} but was {:}",
                66usize,
                (core::ptr::addr_of!(d.trade_account_is_read_only_is_set) as usize) - p,
            );
            assert_eq!(
                67usize,
                (core::ptr::addr_of!(d.trade_account_is_read_only) as usize) - p,
                "trade_account_is_read_only offset expected {:} but was {:}",
                67usize,
                (core::ptr::addr_of!(d.trade_account_is_read_only) as usize) - p,
            );
            assert_eq!(
                68usize,
                (core::ptr::addr_of!(d.maximum_global_position_quantity_is_set) as usize) - p,
                "maximum_global_position_quantity_is_set offset expected {:} but was {:}",
                68usize,
                (core::ptr::addr_of!(d.maximum_global_position_quantity_is_set) as usize) - p,
            );
            assert_eq!(
                69usize,
                (core::ptr::addr_of!(d.maximum_global_position_quantity) as usize) - p,
                "maximum_global_position_quantity offset expected {:} but was {:}",
                69usize,
                (core::ptr::addr_of!(d.maximum_global_position_quantity) as usize) - p,
            );
            assert_eq!(
                73usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract_is_set) as usize) - p,
                "trade_fee_per_contract_is_set offset expected {:} but was {:}",
                73usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract_is_set) as usize) - p,
            );
            assert_eq!(
                74usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract) as usize) - p,
                "trade_fee_per_contract offset expected {:} but was {:}",
                74usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract) as usize) - p,
            );
            assert_eq!(
                82usize,
                (core::ptr::addr_of!(d.trade_fee_per_share_is_set) as usize) - p,
                "trade_fee_per_share_is_set offset expected {:} but was {:}",
                82usize,
                (core::ptr::addr_of!(d.trade_fee_per_share_is_set) as usize) - p,
            );
            assert_eq!(
                83usize,
                (core::ptr::addr_of!(d.trade_fee_per_share) as usize) - p,
                "trade_fee_per_share offset expected {:} but was {:}",
                83usize,
                (core::ptr::addr_of!(d.trade_fee_per_share) as usize) - p,
            );
            assert_eq!(
                91usize,
                (core::ptr::addr_of!(d.require_sufficient_margin_for_new_positions_is_set) as usize) - p,
                "require_sufficient_margin_for_new_positions_is_set offset expected {:} but was {:}",
                91usize,
                (core::ptr::addr_of!(d.require_sufficient_margin_for_new_positions_is_set) as usize) - p,
            );
            assert_eq!(
                92usize,
                (core::ptr::addr_of!(d.require_sufficient_margin_for_new_positions) as usize) - p,
                "require_sufficient_margin_for_new_positions offset expected {:} but was {:}",
                92usize,
                (core::ptr::addr_of!(d.require_sufficient_margin_for_new_positions) as usize) - p,
            );
            assert_eq!(
                93usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_is_set) as usize) - p,
                "use_percent_of_margin_is_set offset expected {:} but was {:}",
                93usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_is_set) as usize) - p,
            );
            assert_eq!(
                94usize,
                (core::ptr::addr_of!(d.use_percent_of_margin) as usize) - p,
                "use_percent_of_margin offset expected {:} but was {:}",
                94usize,
                (core::ptr::addr_of!(d.use_percent_of_margin) as usize) - p,
            );
            assert_eq!(
                98usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading_is_set) as usize) - p,
                "use_percent_of_margin_for_day_trading_is_set offset expected {:} but was {:}",
                98usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading_is_set) as usize) - p,
            );
            assert_eq!(
                99usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading) as usize) - p,
                "use_percent_of_margin_for_day_trading offset expected {:} but was {:}",
                99usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading) as usize) - p,
            );
            assert_eq!(
                103usize,
                (core::ptr::addr_of!(d.maximum_allowed_account_balance_for_positions_as_percentage_is_set) as usize) - p,
                "maximum_allowed_account_balance_for_positions_as_percentage_is_set offset expected {:} but was {:}",
                103usize,
                (core::ptr::addr_of!(d.maximum_allowed_account_balance_for_positions_as_percentage_is_set) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
                "maximum_allowed_account_balance_for_positions_as_percentage offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
            );
            assert_eq!(
                108usize,
                (core::ptr::addr_of!(d.firm_id_is_set) as usize) - p,
                "firm_id_is_set offset expected {:} but was {:}",
                108usize,
                (core::ptr::addr_of!(d.firm_id_is_set) as usize) - p,
            );
            assert_eq!(
                109usize,
                (core::ptr::addr_of!(d.firm_id) as usize) - p,
                "firm_id offset expected {:} but was {:}",
                109usize,
                (core::ptr::addr_of!(d.firm_id) as usize) - p,
            );
            assert_eq!(
                113usize,
                (core::ptr::addr_of!(d.trading_is_disabled_is_set) as usize) - p,
                "trading_is_disabled_is_set offset expected {:} but was {:}",
                113usize,
                (core::ptr::addr_of!(d.trading_is_disabled_is_set) as usize) - p,
            );
            assert_eq!(
                114usize,
                (core::ptr::addr_of!(d.trading_is_disabled) as usize) - p,
                "trading_is_disabled offset expected {:} but was {:}",
                114usize,
                (core::ptr::addr_of!(d.trading_is_disabled) as usize) - p,
            );
            assert_eq!(
                115usize,
                (core::ptr::addr_of!(d.descriptive_name_is_set) as usize) - p,
                "descriptive_name_is_set offset expected {:} but was {:}",
                115usize,
                (core::ptr::addr_of!(d.descriptive_name_is_set) as usize) - p,
            );
            assert_eq!(
                116usize,
                (core::ptr::addr_of!(d.descriptive_name) as usize) - p,
                "descriptive_name offset expected {:} but was {:}",
                116usize,
                (core::ptr::addr_of!(d.descriptive_name) as usize) - p,
            );
            assert_eq!(
                120usize,
                (core::ptr::addr_of!(d.is_master_firm_control_account_is_set) as usize) - p,
                "is_master_firm_control_account_is_set offset expected {:} but was {:}",
                120usize,
                (core::ptr::addr_of!(d.is_master_firm_control_account_is_set) as usize) - p,
            );
            assert_eq!(
                121usize,
                (core::ptr::addr_of!(d.is_master_firm_control_account) as usize) - p,
                "is_master_firm_control_account offset expected {:} but was {:}",
                121usize,
                (core::ptr::addr_of!(d.is_master_firm_control_account) as usize) - p,
            );
            assert_eq!(
                122usize,
                (core::ptr::addr_of!(d.minimum_required_account_value_is_set) as usize) - p,
                "minimum_required_account_value_is_set offset expected {:} but was {:}",
                122usize,
                (core::ptr::addr_of!(d.minimum_required_account_value_is_set) as usize) - p,
            );
            assert_eq!(
                123usize,
                (core::ptr::addr_of!(d.minimum_required_account_value) as usize) - p,
                "minimum_required_account_value offset expected {:} but was {:}",
                123usize,
                (core::ptr::addr_of!(d.minimum_required_account_value) as usize) - p,
            );
            assert_eq!(
                131usize,
                (core::ptr::addr_of!(d.begin_time_for_day_margin_is_set) as usize) - p,
                "begin_time_for_day_margin_is_set offset expected {:} but was {:}",
                131usize,
                (core::ptr::addr_of!(d.begin_time_for_day_margin_is_set) as usize) - p,
            );
            assert_eq!(
                132usize,
                (core::ptr::addr_of!(d.begin_time_for_day_margin) as usize) - p,
                "begin_time_for_day_margin offset expected {:} but was {:}",
                132usize,
                (core::ptr::addr_of!(d.begin_time_for_day_margin) as usize) - p,
            );
            assert_eq!(
                140usize,
                (core::ptr::addr_of!(d.end_time_for_day_margin_is_set) as usize) - p,
                "end_time_for_day_margin_is_set offset expected {:} but was {:}",
                140usize,
                (core::ptr::addr_of!(d.end_time_for_day_margin_is_set) as usize) - p,
            );
            assert_eq!(
                141usize,
                (core::ptr::addr_of!(d.end_time_for_day_margin) as usize) - p,
                "end_time_for_day_margin offset expected {:} but was {:}",
                141usize,
                (core::ptr::addr_of!(d.end_time_for_day_margin) as usize) - p,
            );
            assert_eq!(
                149usize,
                (core::ptr::addr_of!(d.day_margin_time_zone_is_set) as usize) - p,
                "day_margin_time_zone_is_set offset expected {:} but was {:}",
                149usize,
                (core::ptr::addr_of!(d.day_margin_time_zone_is_set) as usize) - p,
            );
            assert_eq!(
                150usize,
                (core::ptr::addr_of!(d.day_margin_time_zone) as usize) - p,
                "day_margin_time_zone offset expected {:} but was {:}",
                150usize,
                (core::ptr::addr_of!(d.day_margin_time_zone) as usize) - p,
            );
            assert_eq!(
                154usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_intraday_is_set) as usize) - p,
                "use_master_firm_flatten_positions_when_under_margin_intraday_is_set offset expected {:} but was {:}",
                154usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_intraday_is_set) as usize) - p,
            );
            assert_eq!(
                155usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_intraday) as usize) - p,
                "use_master_firm_flatten_positions_when_under_margin_intraday offset expected {:} but was {:}",
                155usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_intraday) as usize) - p,
            );
            assert_eq!(
                156usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set) as usize) - p,
                "use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set offset expected {:} but was {:}",
                156usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_at_end_of_day_is_set) as usize) - p,
            );
            assert_eq!(
                157usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_at_end_of_day) as usize) - p,
                "use_master_firm_flatten_positions_when_under_margin_at_end_of_day offset expected {:} but was {:}",
                157usize,
                (core::ptr::addr_of!(d.use_master_firm_flatten_positions_when_under_margin_at_end_of_day) as usize) - p,
            );
            assert_eq!(
                158usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_limits_array_is_set) as usize) - p,
                "use_master_firm_symbol_limits_array_is_set offset expected {:} but was {:}",
                158usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_limits_array_is_set) as usize) - p,
            );
            assert_eq!(
                159usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_limits_array) as usize) - p,
                "use_master_firm_symbol_limits_array offset expected {:} but was {:}",
                159usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_limits_array) as usize) - p,
            );
            assert_eq!(
                160usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_is_set) as usize) - p,
                "use_master_firm_trade_fees_is_set offset expected {:} but was {:}",
                160usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_is_set) as usize) - p,
            );
            assert_eq!(
                161usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees) as usize) - p,
                "use_master_firm_trade_fees offset expected {:} but was {:}",
                161usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees) as usize) - p,
            );
            assert_eq!(
                162usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fee_per_share_is_set) as usize) - p,
                "use_master_firm_trade_fee_per_share_is_set offset expected {:} but was {:}",
                162usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fee_per_share_is_set) as usize) - p,
            );
            assert_eq!(
                163usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fee_per_share) as usize) - p,
                "use_master_firm_trade_fee_per_share offset expected {:} but was {:}",
                163usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fee_per_share) as usize) - p,
            );
            assert_eq!(
                164usize,
                (core::ptr::addr_of!(d.use_master_firm_require_sufficient_margin_for_new_positions_is_set) as usize) - p,
                "use_master_firm_require_sufficient_margin_for_new_positions_is_set offset expected {:} but was {:}",
                164usize,
                (core::ptr::addr_of!(d.use_master_firm_require_sufficient_margin_for_new_positions_is_set) as usize) - p,
            );
            assert_eq!(
                165usize,
                (core::ptr::addr_of!(d.use_master_firm_require_sufficient_margin_for_new_positions) as usize) - p,
                "use_master_firm_require_sufficient_margin_for_new_positions offset expected {:} but was {:}",
                165usize,
                (core::ptr::addr_of!(d.use_master_firm_require_sufficient_margin_for_new_positions) as usize) - p,
            );
            assert_eq!(
                166usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_is_set) as usize) - p,
                "use_master_firm_use_percent_of_margin_is_set offset expected {:} but was {:}",
                166usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_is_set) as usize) - p,
            );
            assert_eq!(
                167usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin) as usize) - p,
                "use_master_firm_use_percent_of_margin offset expected {:} but was {:}",
                167usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin) as usize) - p,
            );
            assert_eq!(
                168usize,
                (core::ptr::addr_of!(d.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set) as usize) - p,
                "use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set offset expected {:} but was {:}",
                168usize,
                (core::ptr::addr_of!(d.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage_is_set) as usize) - p,
            );
            assert_eq!(
                169usize,
                (core::ptr::addr_of!(d.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
                "use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage offset expected {:} but was {:}",
                169usize,
                (core::ptr::addr_of!(d.use_master_firm_maximum_allowed_account_balance_for_positions_as_percentage) as usize) - p,
            );
            assert_eq!(
                170usize,
                (core::ptr::addr_of!(d.use_master_firm_minimum_required_account_value_is_set) as usize) - p,
                "use_master_firm_minimum_required_account_value_is_set offset expected {:} but was {:}",
                170usize,
                (core::ptr::addr_of!(d.use_master_firm_minimum_required_account_value_is_set) as usize) - p,
            );
            assert_eq!(
                171usize,
                (core::ptr::addr_of!(d.use_master_firm_minimum_required_account_value) as usize)
                    - p,
                "use_master_firm_minimum_required_account_value offset expected {:} but was {:}",
                171usize,
                (core::ptr::addr_of!(d.use_master_firm_minimum_required_account_value) as usize)
                    - p,
            );
            assert_eq!(
                172usize,
                (core::ptr::addr_of!(d.use_master_firm_margin_time_settings_is_set) as usize) - p,
                "use_master_firm_margin_time_settings_is_set offset expected {:} but was {:}",
                172usize,
                (core::ptr::addr_of!(d.use_master_firm_margin_time_settings_is_set) as usize) - p,
            );
            assert_eq!(
                173usize,
                (core::ptr::addr_of!(d.use_master_firm_margin_time_settings) as usize) - p,
                "use_master_firm_margin_time_settings offset expected {:} but was {:}",
                173usize,
                (core::ptr::addr_of!(d.use_master_firm_margin_time_settings) as usize) - p,
            );
            assert_eq!(
                174usize,
                (core::ptr::addr_of!(d.use_master_firm_trading_is_disabled_is_set) as usize) - p,
                "use_master_firm_trading_is_disabled_is_set offset expected {:} but was {:}",
                174usize,
                (core::ptr::addr_of!(d.use_master_firm_trading_is_disabled_is_set) as usize) - p,
            );
            assert_eq!(
                175usize,
                (core::ptr::addr_of!(d.use_master_firm_trading_is_disabled) as usize) - p,
                "use_master_firm_trading_is_disabled offset expected {:} but was {:}",
                175usize,
                (core::ptr::addr_of!(d.use_master_firm_trading_is_disabled) as usize) - p,
            );
            assert_eq!(
                176usize,
                (core::ptr::addr_of!(d.is_trade_statistics_publically_shared_is_set) as usize) - p,
                "is_trade_statistics_publically_shared_is_set offset expected {:} but was {:}",
                176usize,
                (core::ptr::addr_of!(d.is_trade_statistics_publically_shared_is_set) as usize) - p,
            );
            assert_eq!(
                177usize,
                (core::ptr::addr_of!(d.is_trade_statistics_publically_shared) as usize) - p,
                "is_trade_statistics_publically_shared offset expected {:} but was {:}",
                177usize,
                (core::ptr::addr_of!(d.is_trade_statistics_publically_shared) as usize) - p,
            );
            assert_eq!(
                178usize,
                (core::ptr::addr_of!(d.is_read_only_following_requests_allowed_is_set) as usize)
                    - p,
                "is_read_only_following_requests_allowed_is_set offset expected {:} but was {:}",
                178usize,
                (core::ptr::addr_of!(d.is_read_only_following_requests_allowed_is_set) as usize)
                    - p,
            );
            assert_eq!(
                179usize,
                (core::ptr::addr_of!(d.is_read_only_following_requests_allowed) as usize) - p,
                "is_read_only_following_requests_allowed offset expected {:} but was {:}",
                179usize,
                (core::ptr::addr_of!(d.is_read_only_following_requests_allowed) as usize) - p,
            );
            assert_eq!(
                180usize,
                (core::ptr::addr_of!(d.is_trade_account_sharing_allowed_is_set) as usize) - p,
                "is_trade_account_sharing_allowed_is_set offset expected {:} but was {:}",
                180usize,
                (core::ptr::addr_of!(d.is_trade_account_sharing_allowed_is_set) as usize) - p,
            );
            assert_eq!(
                181usize,
                (core::ptr::addr_of!(d.is_trade_account_sharing_allowed) as usize) - p,
                "is_trade_account_sharing_allowed offset expected {:} but was {:}",
                181usize,
                (core::ptr::addr_of!(d.is_trade_account_sharing_allowed) as usize) - p,
            );
            assert_eq!(
                182usize,
                (core::ptr::addr_of!(d.read_only_share_to_all_sc_usernames_is_set) as usize) - p,
                "read_only_share_to_all_sc_usernames_is_set offset expected {:} but was {:}",
                182usize,
                (core::ptr::addr_of!(d.read_only_share_to_all_sc_usernames_is_set) as usize) - p,
            );
            assert_eq!(
                183usize,
                (core::ptr::addr_of!(d.read_only_share_to_all_sc_usernames) as usize) - p,
                "read_only_share_to_all_sc_usernames offset expected {:} but was {:}",
                183usize,
                (core::ptr::addr_of!(d.read_only_share_to_all_sc_usernames) as usize) - p,
            );
            assert_eq!(
                184usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array_is_set) as usize)
                    - p,
                "use_master_firm_symbol_commissions_array_is_set offset expected {:} but was {:}",
                184usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array_is_set) as usize)
                    - p,
            );
            assert_eq!(
                185usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array) as usize) - p,
                "use_master_firm_symbol_commissions_array offset expected {:} but was {:}",
                185usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array) as usize) - p,
            );
            assert_eq!(
                186usize,
                (core::ptr::addr_of!(d.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set) as usize) - p,
                "use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set offset expected {:} but was {:}",
                186usize,
                (core::ptr::addr_of!(d.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit_is_set) as usize) - p,
            );
            assert_eq!(
                187usize,
                (core::ptr::addr_of!(d.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
                "use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit offset expected {:} but was {:}",
                187usize,
                (core::ptr::addr_of!(d.use_master_firm_do_not_allow_increase_in_positions_at_daily_loss_limit) as usize) - p,
            );
            assert_eq!(
                188usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_is_set) as usize) - p,
                "use_master_firm_use_percent_of_margin_for_day_trading_is_set offset expected {:} but was {:}",
                188usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_is_set) as usize) - p,
            );
            assert_eq!(
                189usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading) as usize) - p,
                "use_master_firm_use_percent_of_margin_for_day_trading offset expected {:} but was {:}",
                189usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading) as usize) - p,
            );
            assert_eq!(
                190usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array_full_override_is_set) as usize) - p,
                "use_master_firm_symbol_commissions_array_full_override_is_set offset expected {:} but was {:}",
                190usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array_full_override_is_set) as usize) - p,
            );
            assert_eq!(
                191usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array_full_override) as usize) - p,
                "use_master_firm_symbol_commissions_array_full_override offset expected {:} but was {:}",
                191usize,
                (core::ptr::addr_of!(d.use_master_firm_symbol_commissions_array_full_override) as usize) - p,
            );
            assert_eq!(
                192usize,
                (core::ptr::addr_of!(d.use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set) as usize) - p,
                "use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set offset expected {:} but was {:}",
                192usize,
                (core::ptr::addr_of!(d.use_master_firm_num_days_before_last_trading_date_to_disallow_orders_is_set) as usize) - p,
            );
            assert_eq!(
                193usize,
                (core::ptr::addr_of!(d.use_master_firm_num_days_before_last_trading_date_to_disallow_orders) as usize) - p,
                "use_master_firm_num_days_before_last_trading_date_to_disallow_orders offset expected {:} but was {:}",
                193usize,
                (core::ptr::addr_of!(d.use_master_firm_num_days_before_last_trading_date_to_disallow_orders) as usize) - p,
            );
            assert_eq!(
                194usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_full_override_is_set) as usize) - p,
                "use_master_firm_use_percent_of_margin_full_override_is_set offset expected {:} but was {:}",
                194usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_full_override_is_set) as usize) - p,
            );
            assert_eq!(
                195usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_full_override) as usize) - p,
                "use_master_firm_use_percent_of_margin_full_override offset expected {:} but was {:}",
                195usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_full_override) as usize) - p,
            );
            assert_eq!(
                196usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_full_override_is_set) as usize)
                    - p,
                "use_master_firm_trade_fees_full_override_is_set offset expected {:} but was {:}",
                196usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_full_override_is_set) as usize)
                    - p,
            );
            assert_eq!(
                197usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_full_override) as usize) - p,
                "use_master_firm_trade_fees_full_override offset expected {:} but was {:}",
                197usize,
                (core::ptr::addr_of!(d.use_master_firm_trade_fees_full_override) as usize) - p,
            );
            assert_eq!(
                198usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set) as usize) - p,
                "use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set offset expected {:} but was {:}",
                198usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_full_override_is_set) as usize) - p,
            );
            assert_eq!(
                199usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_full_override) as usize) - p,
                "use_master_firm_use_percent_of_margin_for_day_trading_full_override offset expected {:} but was {:}",
                199usize,
                (core::ptr::addr_of!(d.use_master_firm_use_percent_of_margin_for_day_trading_full_override) as usize) - p,
            );
            assert_eq!(
                200usize,
                (core::ptr::addr_of!(d.liquidation_only_mode_is_set) as usize) - p,
                "liquidation_only_mode_is_set offset expected {:} but was {:}",
                200usize,
                (core::ptr::addr_of!(d.liquidation_only_mode_is_set) as usize) - p,
            );
            assert_eq!(
                201usize,
                (core::ptr::addr_of!(d.liquidation_only_mode) as usize) - p,
                "liquidation_only_mode offset expected {:} but was {:}",
                201usize,
                (core::ptr::addr_of!(d.liquidation_only_mode) as usize) - p,
            );
            assert_eq!(
                202usize,
                (core::ptr::addr_of!(d.customer_or_firm_is_set) as usize) - p,
                "customer_or_firm_is_set offset expected {:} but was {:}",
                202usize,
                (core::ptr::addr_of!(d.customer_or_firm_is_set) as usize) - p,
            );
            assert_eq!(
                203usize,
                (core::ptr::addr_of!(d.customer_or_firm) as usize) - p,
                "customer_or_firm offset expected {:} but was {:}",
                203usize,
                (core::ptr::addr_of!(d.customer_or_firm) as usize) - p,
            );
            assert_eq!(
                204usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set) as usize) - p,
                "master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set offset expected {:} but was {:}",
                204usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_account_when_daily_loss_limit_met_is_set) as usize) - p,
            );
            assert_eq!(
                205usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_account_when_daily_loss_limit_met) as usize) - p,
                "master_firm_flatten_cancel_account_when_daily_loss_limit_met offset expected {:} but was {:}",
                205usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_account_when_daily_loss_limit_met) as usize) - p,
            );
            assert_eq!(
                206usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_minimum_account_value_is_set) as usize) - p,
                "master_firm_flatten_cancel_when_under_minimum_account_value_is_set offset expected {:} but was {:}",
                206usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_minimum_account_value_is_set) as usize) - p,
            );
            assert_eq!(
                207usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_minimum_account_value) as usize) - p,
                "master_firm_flatten_cancel_when_under_minimum_account_value offset expected {:} but was {:}",
                207usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_minimum_account_value) as usize) - p,
            );
            assert_eq!(
                208usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_intraday_is_set) as usize) - p,
                "master_firm_flatten_cancel_when_under_margin_intraday_is_set offset expected {:} but was {:}",
                208usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_intraday_is_set) as usize) - p,
            );
            assert_eq!(
                209usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_intraday) as usize) - p,
                "master_firm_flatten_cancel_when_under_margin_intraday offset expected {:} but was {:}",
                209usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_intraday) as usize) - p,
            );
            assert_eq!(
                210usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_end_of_day_is_set) as usize) - p,
                "master_firm_flatten_cancel_when_under_margin_end_of_day_is_set offset expected {:} but was {:}",
                210usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_end_of_day_is_set) as usize) - p,
            );
            assert_eq!(
                211usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_end_of_day) as usize) - p,
                "master_firm_flatten_cancel_when_under_margin_end_of_day offset expected {:} but was {:}",
                211usize,
                (core::ptr::addr_of!(d.master_firm_flatten_cancel_when_under_margin_end_of_day) as usize) - p,
            );
            assert_eq!(
                212usize,
                (core::ptr::addr_of!(d.master_firm_maximum_order_quantity_is_set) as usize) - p,
                "master_firm_maximum_order_quantity_is_set offset expected {:} but was {:}",
                212usize,
                (core::ptr::addr_of!(d.master_firm_maximum_order_quantity_is_set) as usize) - p,
            );
            assert_eq!(
                216usize,
                (core::ptr::addr_of!(d.master_firm_maximum_order_quantity) as usize) - p,
                "master_firm_maximum_order_quantity offset expected {:} but was {:}",
                216usize,
                (core::ptr::addr_of!(d.master_firm_maximum_order_quantity) as usize) - p,
            );
            assert_eq!(
                220usize,
                (core::ptr::addr_of!(d.exchange_trader_id_is_set) as usize) - p,
                "exchange_trader_id_is_set offset expected {:} but was {:}",
                220usize,
                (core::ptr::addr_of!(d.exchange_trader_id_is_set) as usize) - p,
            );
            assert_eq!(
                221usize,
                (core::ptr::addr_of!(d.exchange_trader_id) as usize) - p,
                "exchange_trader_id offset expected {:} but was {:}",
                221usize,
                (core::ptr::addr_of!(d.exchange_trader_id) as usize) - p,
            );
            assert_eq!(
                225usize,
                (core::ptr::addr_of!(d.use_fixed_cash_on_hand_balance_is_set) as usize) - p,
                "use_fixed_cash_on_hand_balance_is_set offset expected {:} but was {:}",
                225usize,
                (core::ptr::addr_of!(d.use_fixed_cash_on_hand_balance_is_set) as usize) - p,
            );
            assert_eq!(
                226usize,
                (core::ptr::addr_of!(d.use_fixed_cash_on_hand_balance) as usize) - p,
                "use_fixed_cash_on_hand_balance offset expected {:} but was {:}",
                226usize,
                (core::ptr::addr_of!(d.use_fixed_cash_on_hand_balance) as usize) - p,
            );
            assert_eq!(
                227usize,
                (core::ptr::addr_of!(d.fixed_cash_on_hand_balance_is_set) as usize) - p,
                "fixed_cash_on_hand_balance_is_set offset expected {:} but was {:}",
                227usize,
                (core::ptr::addr_of!(d.fixed_cash_on_hand_balance_is_set) as usize) - p,
            );
            assert_eq!(
                228usize,
                (core::ptr::addr_of!(d.fixed_cash_on_hand_balance) as usize) - p,
                "fixed_cash_on_hand_balance offset expected {:} but was {:}",
                228usize,
                (core::ptr::addr_of!(d.fixed_cash_on_hand_balance) as usize) - p,
            );
        }
    }
}
