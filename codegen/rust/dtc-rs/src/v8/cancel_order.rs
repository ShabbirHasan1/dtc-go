// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const CANCEL_ORDER_VLS_SIZE: usize = 18;

pub(crate) const CANCEL_ORDER_FIXED_SIZE: usize = 100;

/// size             u16     = CancelOrderVLSSize  (18)
/// type             u16     = CANCEL_ORDER  (203)
/// base_size        u16     = CancelOrderVLSSize  (18)
/// server_order_id  string  = ""
/// client_order_id  string  = ""
/// trade_account    string  = ""
pub(crate) const CANCEL_ORDER_VLS_DEFAULT: [u8; 18] =
    [18, 0, 203, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size             u16       = CancelOrderFixedSize  (100)
/// type             u16       = CANCEL_ORDER  (203)
/// server_order_id  string32  = ""
/// client_order_id  string32  = ""
/// trade_account    string32  = ""
pub(crate) const CANCEL_ORDER_FIXED_DEFAULT: [u8; 100] = [
    100, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
];

/// This is a message from the Client to the Server requesting a previously
/// sent order to be canceled.
pub trait CancelOrder: Message {
    type Safe: CancelOrder;
    type Unsafe: CancelOrder;

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn server_order_id(&self) -> &str;

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str;

    fn trade_account(&self) -> &str;

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self;

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl CancelOrder) {
        to.set_server_order_id(self.server_order_id());
        to.set_client_order_id(self.client_order_id());
        to.set_trade_account(self.trade_account());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

/// This is a message from the Client to the Server requesting a previously
/// sent order to be canceled.
pub struct CancelOrderVLS {
    data: *const CancelOrderVLSData,
    capacity: usize,
}

pub struct CancelOrderVLSUnsafe {
    data: *const CancelOrderVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct CancelOrderVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    server_order_id: VLS,
    client_order_id: VLS,
    trade_account: VLS,
}

/// This is a message from the Client to the Server requesting a previously
/// sent order to be canceled.
pub struct CancelOrderFixed {
    data: *const CancelOrderFixedData,
}

pub struct CancelOrderFixedUnsafe {
    data: *const CancelOrderFixedData,
}

#[repr(packed(8), C)]
pub struct CancelOrderFixedData {
    size: u16,
    r#type: u16,
    server_order_id: [u8; 32],
    client_order_id: [u8; 32],
    trade_account: [u8; 32],
}

impl CancelOrderVLSData {
    pub fn new() -> Self {
        Self {
            size: 18u16.to_le(),
            r#type: CANCEL_ORDER.to_le(),
            base_size: 18u16.to_le(),
            server_order_id: crate::message::VLS::new(),
            client_order_id: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
        }
    }
}

impl CancelOrderFixedData {
    pub fn new() -> Self {
        Self {
            size: 100u16.to_le(),
            r#type: CANCEL_ORDER.to_le(),
            server_order_id: [0; 32],
            client_order_id: [0; 32],
            trade_account: [0; 32],
        }
    }
}

unsafe impl Send for CancelOrderFixed {}
unsafe impl Send for CancelOrderFixedUnsafe {}
unsafe impl Send for CancelOrderFixedData {}
unsafe impl Send for CancelOrderVLS {}
unsafe impl Send for CancelOrderVLSUnsafe {}
unsafe impl Send for CancelOrderVLSData {}

impl Drop for CancelOrderFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CancelOrderFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CancelOrderVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CancelOrderVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for CancelOrderFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CancelOrderFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CancelOrderVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CancelOrderVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for CancelOrderFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CancelOrderFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CancelOrderVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CancelOrderVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for CancelOrderFixed {
    type Target = CancelOrderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelOrderFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CancelOrderFixedUnsafe {
    type Target = CancelOrderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelOrderFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CancelOrderVLS {
    type Target = CancelOrderVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelOrderVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CancelOrderVLSUnsafe {
    type Target = CancelOrderVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelOrderVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for CancelOrderFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderFixed(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl core::fmt::Debug for CancelOrderFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderFixed(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl core::fmt::Display for CancelOrderFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderFixedUnsafe(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl core::fmt::Debug for CancelOrderFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderFixedUnsafe(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl core::fmt::Display for CancelOrderVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderVLS(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl core::fmt::Debug for CancelOrderVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderVLS(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl core::fmt::Display for CancelOrderVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderVLSUnsafe(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl core::fmt::Debug for CancelOrderVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelOrderVLSUnsafe(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", trade_account: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.trade_account()).as_str())
    }
}

impl crate::Message for CancelOrderFixed {
    type Data = CancelOrderFixedData;

    const TYPE: u16 = CANCEL_ORDER;
    const BASE_SIZE: usize = 100;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelOrderFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CancelOrderFixedData,
        }
    }
}
impl crate::Message for CancelOrderFixedUnsafe {
    type Data = CancelOrderFixedData;

    const TYPE: u16 = CANCEL_ORDER;
    const BASE_SIZE: usize = 100;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelOrderFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CancelOrderFixedData,
        }
    }
}
impl crate::Message for CancelOrderVLS {
    type Data = CancelOrderVLSData;

    const TYPE: u16 = CANCEL_ORDER;
    const BASE_SIZE: usize = 18;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelOrderVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CancelOrderVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for CancelOrderVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CancelOrderVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for CancelOrderVLSUnsafe {
    type Data = CancelOrderVLSData;

    const TYPE: u16 = CANCEL_ORDER;
    const BASE_SIZE: usize = 18;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelOrderVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CancelOrderVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for CancelOrderVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CancelOrderVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This is a message from the Client to the Server requesting a previously
/// sent order to be canceled.
impl CancelOrder for CancelOrderVLS {
    type Safe = CancelOrderVLS;
    type Unsafe = CancelOrderVLSUnsafe;

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn server_order_id(&self) -> &str {
        get_vls(self, self.server_order_id)
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        get_vls(self, self.client_order_id)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        self.server_order_id = set_vls(self, self.server_order_id, value);
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        self.client_order_id = set_vls(self, self.client_order_id, value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server requesting a previously
/// sent order to be canceled.
impl CancelOrder for CancelOrderVLSUnsafe {
    type Safe = CancelOrderVLS;
    type Unsafe = CancelOrderVLSUnsafe;

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.server_order_id)
        }
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.client_order_id)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.server_order_id = set_vls(self, self.server_order_id, value);
        }
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.client_order_id = set_vls(self, self.client_order_id, value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This is a message from the Client to the Server requesting a previously
/// sent order to be canceled.
impl CancelOrder for CancelOrderFixed {
    type Safe = CancelOrderFixed;
    type Unsafe = CancelOrderFixedUnsafe;

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn server_order_id(&self) -> &str {
        get_fixed(&self.server_order_id[..])
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        get_fixed(&self.client_order_id[..])
    }

    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.server_order_id[..], value);
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.client_order_id[..], value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server requesting a previously
/// sent order to be canceled.
impl CancelOrder for CancelOrderFixedUnsafe {
    type Safe = CancelOrderFixed;
    type Unsafe = CancelOrderFixedUnsafe;

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(36) {
            ""
        } else {
            get_fixed(&self.server_order_id[..])
        }
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(68) {
            ""
        } else {
            get_fixed(&self.client_order_id[..])
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(100) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    /// This is the order identifier for the order to cancel. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order. The only case in which a ServerOrderID
    /// would change is in the case of a successful order Cancel and Replace operation.
    /// would change is in the case of a successful order Cancel and Replace operation.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled. Although the given ClientOrderID
    /// from the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            set_fixed(&mut self.server_order_id[..], value);
        }
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID
    /// , then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REJECTED.
    ///
    /// In the case where the order cancellation cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            set_fixed(&mut self.client_order_id[..], value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(100) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                100usize,
                core::mem::size_of::<CancelOrderFixedData>(),
                "CancelOrderFixedData sizeof expected {:} but was {:}",
                100usize,
                core::mem::size_of::<CancelOrderFixedData>()
            );
            assert_eq!(
                100u16,
                CancelOrderFixed::new().size(),
                "CancelOrderFixed sizeof expected {:} but was {:}",
                100u16,
                CancelOrderFixed::new().size(),
            );
            assert_eq!(
                CANCEL_ORDER,
                CancelOrderFixed::new().r#type(),
                "CancelOrderFixed type expected {:} but was {:}",
                CANCEL_ORDER,
                CancelOrderFixed::new().r#type(),
            );
            assert_eq!(
                203u16,
                CancelOrderFixed::new().r#type(),
                "CancelOrderFixed type expected {:} but was {:}",
                203u16,
                CancelOrderFixed::new().r#type(),
            );
            let d = CancelOrderFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
                "server_order_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                68usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                68usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                18usize,
                core::mem::size_of::<CancelOrderVLSData>(),
                "CancelOrderVLSData sizeof expected {:} but was {:}",
                18usize,
                core::mem::size_of::<CancelOrderVLSData>()
            );
            assert_eq!(
                18u16,
                CancelOrderVLS::new().size(),
                "CancelOrderVLS sizeof expected {:} but was {:}",
                18u16,
                CancelOrderVLS::new().size(),
            );
            assert_eq!(
                CANCEL_ORDER,
                CancelOrderVLS::new().r#type(),
                "CancelOrderVLS type expected {:} but was {:}",
                CANCEL_ORDER,
                CancelOrderVLS::new().r#type(),
            );
            assert_eq!(
                203u16,
                CancelOrderVLS::new().r#type(),
                "CancelOrderVLS type expected {:} but was {:}",
                203u16,
                CancelOrderVLS::new().r#type(),
            );
            let d = CancelOrderVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
                "server_order_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
        }
    }
}
