// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP_FIXED_SIZE: usize = 19;

/// size                       u16                          = MarketDataUpdateTradeNoTimestampFixedSize  (19)
/// type                       u16                          = MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP  (142)
/// symbol_id                  u32                          = 0
/// price                      f32                          = 0
/// volume                     u32                          = 0
/// at_bid_or_ask              AtBidOrAskEnum8              = BID_ASK_UNSET_8  (0)
/// unbundled_trade_indicator  UnbundledTradeIndicatorEnum  = UNBUNDLED_TRADE_NONE  (0)
/// trade_condition            TradeConditionEnum           = TRADE_CONDITION_NONE  (0)
pub(crate) const MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP_FIXED_DEFAULT: [u8; 19] =
    [19, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// This message is optional.
///
/// Sent by the Server to the Client when a trade occurs. This message is
/// identical to the MarketDataUpdateTradeFixed_WITH_UNBUNDLED_INDICATOR_2
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the trade as compared to the
/// prior trade.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received trade timestamp to know what the timestamp is for
/// this message.
pub trait MarketDataUpdateTradeNoTimestamp: Message {
    type Safe: MarketDataUpdateTradeNoTimestamp;
    type Unsafe: MarketDataUpdateTradeNoTimestamp;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The price of the trade.
    fn price(&self) -> f32;

    /// The volume of the trade.
    fn volume(&self) -> u32;

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum8;

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn unbundled_trade_indicator(&self) -> UnbundledTradeIndicatorEnum;

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn trade_condition(&self) -> TradeConditionEnum;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The price of the trade.
    fn set_price(&mut self, value: f32) -> &mut Self;

    /// The volume of the trade.
    fn set_volume(&mut self, value: u32) -> &mut Self;

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum8) -> &mut Self;

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn set_unbundled_trade_indicator(&mut self, value: UnbundledTradeIndicatorEnum) -> &mut Self;

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn set_trade_condition(&mut self, value: TradeConditionEnum) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDataUpdateTradeNoTimestamp) {
        to.set_symbol_id(self.symbol_id());
        to.set_price(self.price());
        to.set_volume(self.volume());
        to.set_at_bid_or_ask(self.at_bid_or_ask());
        to.set_unbundled_trade_indicator(self.unbundled_trade_indicator());
        to.set_trade_condition(self.trade_condition());
    }
}

/// This message is optional.
///
/// Sent by the Server to the Client when a trade occurs. This message is
/// identical to the MarketDataUpdateTradeFixed_WITH_UNBUNDLED_INDICATOR_2
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the trade as compared to the
/// prior trade.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received trade timestamp to know what the timestamp is for
/// this message.
pub struct MarketDataUpdateTradeNoTimestampFixed {
    data: *const MarketDataUpdateTradeNoTimestampFixedData,
}

pub struct MarketDataUpdateTradeNoTimestampFixedUnsafe {
    data: *const MarketDataUpdateTradeNoTimestampFixedData,
}

#[repr(packed(1), C)]
pub struct MarketDataUpdateTradeNoTimestampFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    price: f32,
    volume: u32,
    at_bid_or_ask: AtBidOrAskEnum8,
    unbundled_trade_indicator: UnbundledTradeIndicatorEnum,
    trade_condition: TradeConditionEnum,
}

impl MarketDataUpdateTradeNoTimestampFixedData {
    pub fn new() -> Self {
        Self {
            size: 19u16.to_le(),
            r#type: MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP.to_le(),
            symbol_id: 0u32,
            price: 0.0f32,
            volume: 0u32,
            at_bid_or_ask: AtBidOrAskEnum8::BidAskUnset8.to_le(),
            unbundled_trade_indicator: UnbundledTradeIndicatorEnum::UnbundledTradeNone.to_le(),
            trade_condition: TradeConditionEnum::TradeConditionNone.to_le(),
        }
    }
}

unsafe impl Send for MarketDataUpdateTradeNoTimestampFixed {}
unsafe impl Send for MarketDataUpdateTradeNoTimestampFixedUnsafe {}
unsafe impl Send for MarketDataUpdateTradeNoTimestampFixedData {}

impl Drop for MarketDataUpdateTradeNoTimestampFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataUpdateTradeNoTimestampFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataUpdateTradeNoTimestampFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataUpdateTradeNoTimestampFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataUpdateTradeNoTimestampFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataUpdateTradeNoTimestampFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataUpdateTradeNoTimestampFixed {
    type Target = MarketDataUpdateTradeNoTimestampFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateTradeNoTimestampFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataUpdateTradeNoTimestampFixedUnsafe {
    type Target = MarketDataUpdateTradeNoTimestampFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateTradeNoTimestampFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataUpdateTradeNoTimestampFixed {
    type Data = MarketDataUpdateTradeNoTimestampFixedData;

    const BASE_SIZE: usize = 19;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateTradeNoTimestampFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateTradeNoTimestampFixedData,
        }
    }
}
impl crate::Message for MarketDataUpdateTradeNoTimestampFixedUnsafe {
    type Data = MarketDataUpdateTradeNoTimestampFixedData;

    const BASE_SIZE: usize = 19;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateTradeNoTimestampFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateTradeNoTimestampFixedData,
        }
    }
}
/// This message is optional.
///
/// Sent by the Server to the Client when a trade occurs. This message is
/// identical to the MarketDataUpdateTradeFixed_WITH_UNBUNDLED_INDICATOR_2
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the trade as compared to the
/// prior trade.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received trade timestamp to know what the timestamp is for
/// this message.
impl MarketDataUpdateTradeNoTimestamp for MarketDataUpdateTradeNoTimestampFixed {
    type Safe = MarketDataUpdateTradeNoTimestampFixed;
    type Unsafe = MarketDataUpdateTradeNoTimestampFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The price of the trade.
    fn price(&self) -> f32 {
        f32_le(self.price)
    }

    /// The volume of the trade.
    fn volume(&self) -> u32 {
        u32::from_le(self.volume)
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum8 {
        AtBidOrAskEnum8::from_le(self.at_bid_or_ask)
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn unbundled_trade_indicator(&self) -> UnbundledTradeIndicatorEnum {
        UnbundledTradeIndicatorEnum::from_le(self.unbundled_trade_indicator)
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn trade_condition(&self) -> TradeConditionEnum {
        TradeConditionEnum::from_le(self.trade_condition)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The price of the trade.
    fn set_price(&mut self, value: f32) -> &mut Self {
        self.price = f32_le(value);
        self
    }

    /// The volume of the trade.
    fn set_volume(&mut self, value: u32) -> &mut Self {
        self.volume = value.to_le();
        self
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum8) -> &mut Self {
        self.at_bid_or_ask = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn set_unbundled_trade_indicator(&mut self, value: UnbundledTradeIndicatorEnum) -> &mut Self {
        self.unbundled_trade_indicator = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn set_trade_condition(&mut self, value: TradeConditionEnum) -> &mut Self {
        self.trade_condition = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This message is optional.
///
/// Sent by the Server to the Client when a trade occurs. This message is
/// identical to the MarketDataUpdateTradeFixed_WITH_UNBUNDLED_INDICATOR_2
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the trade as compared to the
/// prior trade.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received trade timestamp to know what the timestamp is for
/// this message.
impl MarketDataUpdateTradeNoTimestamp for MarketDataUpdateTradeNoTimestampFixedUnsafe {
    type Safe = MarketDataUpdateTradeNoTimestampFixed;
    type Unsafe = MarketDataUpdateTradeNoTimestampFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The price of the trade.
    fn price(&self) -> f32 {
        if self.is_out_of_bounds(12) {
            0.0f32
        } else {
            f32_le(self.price)
        }
    }

    /// The volume of the trade.
    fn volume(&self) -> u32 {
        if self.is_out_of_bounds(16) {
            0u32
        } else {
            u32::from_le(self.volume)
        }
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum8 {
        if self.is_out_of_bounds(17) {
            AtBidOrAskEnum8::BidAskUnset8.to_le()
        } else {
            AtBidOrAskEnum8::from_le(self.at_bid_or_ask)
        }
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn unbundled_trade_indicator(&self) -> UnbundledTradeIndicatorEnum {
        if self.is_out_of_bounds(18) {
            UnbundledTradeIndicatorEnum::UnbundledTradeNone.to_le()
        } else {
            UnbundledTradeIndicatorEnum::from_le(self.unbundled_trade_indicator)
        }
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn trade_condition(&self) -> TradeConditionEnum {
        if self.is_out_of_bounds(19) {
            TradeConditionEnum::TradeConditionNone.to_le()
        } else {
            TradeConditionEnum::from_le(self.trade_condition)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The price of the trade.
    fn set_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.price = f32_le(value);
        }
        self
    }

    /// The volume of the trade.
    fn set_volume(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.volume = value.to_le();
        }
        self
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum8) -> &mut Self {
        if !self.is_out_of_bounds(17) {
            self.at_bid_or_ask = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn set_unbundled_trade_indicator(&mut self, value: UnbundledTradeIndicatorEnum) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.unbundled_trade_indicator = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn set_trade_condition(&mut self, value: TradeConditionEnum) -> &mut Self {
        if !self.is_out_of_bounds(19) {
            self.trade_condition = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                19usize,
                core::mem::size_of::<MarketDataUpdateTradeNoTimestampFixedData>(),
                "MarketDataUpdateTradeNoTimestampFixedData sizeof expected {:} but was {:}",
                19usize,
                core::mem::size_of::<MarketDataUpdateTradeNoTimestampFixedData>()
            );
            assert_eq!(
                19u16,
                MarketDataUpdateTradeNoTimestampFixed::new().size(),
                "MarketDataUpdateTradeNoTimestampFixed sizeof expected {:} but was {:}",
                19u16,
                MarketDataUpdateTradeNoTimestampFixed::new().size(),
            );
            assert_eq!(
                MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP,
                MarketDataUpdateTradeNoTimestampFixed::new().r#type(),
                "MarketDataUpdateTradeNoTimestampFixed type expected {:} but was {:}",
                MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP,
                MarketDataUpdateTradeNoTimestampFixed::new().r#type(),
            );
            assert_eq!(
                142u16,
                MarketDataUpdateTradeNoTimestampFixed::new().r#type(),
                "MarketDataUpdateTradeNoTimestampFixed type expected {:} but was {:}",
                142u16,
                MarketDataUpdateTradeNoTimestampFixed::new().r#type(),
            );
            let d = MarketDataUpdateTradeNoTimestampFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
                "volume offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.at_bid_or_ask) as usize) - p,
                "at_bid_or_ask offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.at_bid_or_ask) as usize) - p,
            );
            assert_eq!(
                17usize,
                (core::ptr::addr_of!(d.unbundled_trade_indicator) as usize) - p,
                "unbundled_trade_indicator offset expected {:} but was {:}",
                17usize,
                (core::ptr::addr_of!(d.unbundled_trade_indicator) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.trade_condition) as usize) - p,
                "trade_condition offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.trade_condition) as usize) - p,
            );
        }
    }
}
