// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const CANCEL_REPLACE_ORDER_VLS_SIZE: usize = 80;

pub(crate) const CANCEL_REPLACE_ORDER_FIXED_SIZE: usize = 192;

/// size                            u16              = CancelReplaceOrderVLSSize  (80)
/// type                            u16              = CANCEL_REPLACE_ORDER  (204)
/// base_size                       u16              = CancelReplaceOrderVLSSize  (80)
/// server_order_id                 string           = ""
/// client_order_id                 string           = ""
/// price1                          f64              = 0
/// price2                          f64              = 0
/// quantity                        f64              = 0
/// price1_is_set                   bool             = true
/// price2_is_set                   bool             = true
/// unused                          i32              = 0
/// time_in_force                   TimeInForceEnum  = TIF_UNSET  (0)
/// good_till_date_time             DateTime         = 0
/// update_price1_offset_to_parent  u8               = 0
/// trade_account                   string           = ""
/// price1_as_string                string           = ""
/// price2_as_string                string           = ""
pub(crate) const CANCEL_REPLACE_ORDER_VLS_DEFAULT: [u8; 80] = [
    80, 0, 204, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                            u16              = CancelReplaceOrderFixedSize  (192)
/// type                            u16              = CANCEL_REPLACE_ORDER  (204)
/// server_order_id                 string32         = ""
/// client_order_id                 string32         = ""
/// price1                          f64              = 0
/// price2                          f64              = 0
/// quantity                        f64              = 0
/// price1_is_set                   bool             = true
/// price2_is_set                   bool             = true
/// unused                          i32              = 0
/// time_in_force                   TimeInForceEnum  = TIF_UNSET  (0)
/// good_till_date_time             DateTime         = 0
/// update_price1_offset_to_parent  u8               = 0
/// trade_account                   string32         = ""
/// price1_as_string                string16         = ""
/// price2_as_string                string16         = ""
pub(crate) const CANCEL_REPLACE_ORDER_FIXED_DEFAULT: [u8; 192] = [
    192, 0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
];

/// This message is sent by the Client to the Server to cancel and replace
/// an existing order. This is also known as an order modification.
///
/// When the cancel and replace operation is completed, an OrderUpdate message
/// is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE.
/// If the cancel and replace operation cannot be completed, an OrderUpdate
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
pub trait CancelReplaceOrder: Message {
    type Safe: CancelReplaceOrder;
    type Unsafe: CancelReplaceOrder;

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn server_order_id(&self) -> &str;

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str;

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn price1(&self) -> f64;

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn price2(&self) -> f64;

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn quantity(&self) -> f64;

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price1_is_set(&self) -> bool;

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price2_is_set(&self) -> bool;

    fn unused(&self) -> i32;

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn time_in_force(&self) -> TimeInForceEnum;

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn good_till_date_time(&self) -> DateTime;

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn update_price1_offset_to_parent(&self) -> u8;

    fn trade_account(&self) -> &str;

    fn price1_as_string(&self) -> &str;

    fn price2_as_string(&self) -> &str;

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self;

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self;

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn set_price1(&mut self, value: f64) -> &mut Self;

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn set_price2(&mut self, value: f64) -> &mut Self;

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn set_quantity(&mut self, value: f64) -> &mut Self;

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price1_is_set(&mut self, value: bool) -> &mut Self;

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price2_is_set(&mut self, value: bool) -> &mut Self;

    fn set_unused(&mut self, value: i32) -> &mut Self;

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self;

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self;

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn set_update_price1_offset_to_parent(&mut self, value: u8) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_price1_as_string(&mut self, value: &str) -> &mut Self;

    fn set_price2_as_string(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl CancelReplaceOrder) {
        to.set_server_order_id(self.server_order_id());
        to.set_client_order_id(self.client_order_id());
        to.set_price1(self.price1());
        to.set_price2(self.price2());
        to.set_quantity(self.quantity());
        to.set_price1_is_set(self.price1_is_set());
        to.set_price2_is_set(self.price2_is_set());
        to.set_unused(self.unused());
        to.set_time_in_force(self.time_in_force());
        to.set_good_till_date_time(self.good_till_date_time());
        to.set_update_price1_offset_to_parent(self.update_price1_offset_to_parent());
        to.set_trade_account(self.trade_account());
        to.set_price1_as_string(self.price1_as_string());
        to.set_price2_as_string(self.price2_as_string());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

/// This message is sent by the Client to the Server to cancel and replace
/// an existing order. This is also known as an order modification.
///
/// When the cancel and replace operation is completed, an OrderUpdate message
/// is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE.
/// If the cancel and replace operation cannot be completed, an OrderUpdate
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
pub struct CancelReplaceOrderVLS {
    data: *const CancelReplaceOrderVLSData,
    capacity: usize,
}

pub struct CancelReplaceOrderVLSUnsafe {
    data: *const CancelReplaceOrderVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct CancelReplaceOrderVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    server_order_id: VLS,
    client_order_id: VLS,
    price1: f64,
    price2: f64,
    quantity: f64,
    price1_is_set: bool,
    price2_is_set: bool,
    unused: i32,
    time_in_force: TimeInForceEnum,
    good_till_date_time: DateTime,
    update_price1_offset_to_parent: u8,
    trade_account: VLS,
    price1_as_string: VLS,
    price2_as_string: VLS,
}

/// This message is sent by the Client to the Server to cancel and replace
/// an existing order. This is also known as an order modification.
///
/// When the cancel and replace operation is completed, an OrderUpdate message
/// is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE.
/// If the cancel and replace operation cannot be completed, an OrderUpdate
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
pub struct CancelReplaceOrderFixed {
    data: *const CancelReplaceOrderFixedData,
}

pub struct CancelReplaceOrderFixedUnsafe {
    data: *const CancelReplaceOrderFixedData,
}

#[repr(packed(8), C)]
pub struct CancelReplaceOrderFixedData {
    size: u16,
    r#type: u16,
    server_order_id: [u8; 32],
    client_order_id: [u8; 32],
    price1: f64,
    price2: f64,
    quantity: f64,
    price1_is_set: bool,
    price2_is_set: bool,
    unused: i32,
    time_in_force: TimeInForceEnum,
    good_till_date_time: DateTime,
    update_price1_offset_to_parent: u8,
    trade_account: [u8; 32],
    price1_as_string: [u8; 16],
    price2_as_string: [u8; 16],
}

impl CancelReplaceOrderVLSData {
    pub fn new() -> Self {
        Self {
            size: 80u16.to_le(),
            r#type: CANCEL_REPLACE_ORDER.to_le(),
            base_size: 80u16.to_le(),
            server_order_id: crate::message::VLS::new(),
            client_order_id: crate::message::VLS::new(),
            price1: 0.0f64,
            price2: 0.0f64,
            quantity: 0.0f64,
            price1_is_set: true,
            price2_is_set: true,
            unused: 0i32,
            time_in_force: TimeInForceEnum::TifUnset.to_le(),
            good_till_date_time: 0i64,
            update_price1_offset_to_parent: 0u8,
            trade_account: crate::message::VLS::new(),
            price1_as_string: crate::message::VLS::new(),
            price2_as_string: crate::message::VLS::new(),
        }
    }
}

impl CancelReplaceOrderFixedData {
    pub fn new() -> Self {
        Self {
            size: 192u16.to_le(),
            r#type: CANCEL_REPLACE_ORDER.to_le(),
            server_order_id: [0; 32],
            client_order_id: [0; 32],
            price1: 0.0f64,
            price2: 0.0f64,
            quantity: 0.0f64,
            price1_is_set: true,
            price2_is_set: true,
            unused: 0i32,
            time_in_force: TimeInForceEnum::TifUnset.to_le(),
            good_till_date_time: 0i64,
            update_price1_offset_to_parent: 0u8,
            trade_account: [0; 32],
            price1_as_string: [0; 16],
            price2_as_string: [0; 16],
        }
    }
}

unsafe impl Send for CancelReplaceOrderFixed {}
unsafe impl Send for CancelReplaceOrderFixedUnsafe {}
unsafe impl Send for CancelReplaceOrderFixedData {}
unsafe impl Send for CancelReplaceOrderVLS {}
unsafe impl Send for CancelReplaceOrderVLSUnsafe {}
unsafe impl Send for CancelReplaceOrderVLSData {}

impl Drop for CancelReplaceOrderFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CancelReplaceOrderFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CancelReplaceOrderVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CancelReplaceOrderVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for CancelReplaceOrderFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CancelReplaceOrderFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CancelReplaceOrderVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CancelReplaceOrderVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for CancelReplaceOrderFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CancelReplaceOrderFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CancelReplaceOrderVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CancelReplaceOrderVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for CancelReplaceOrderFixed {
    type Target = CancelReplaceOrderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelReplaceOrderFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CancelReplaceOrderFixedUnsafe {
    type Target = CancelReplaceOrderFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelReplaceOrderFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CancelReplaceOrderVLS {
    type Target = CancelReplaceOrderVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelReplaceOrderVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CancelReplaceOrderVLSUnsafe {
    type Target = CancelReplaceOrderVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CancelReplaceOrderVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for CancelReplaceOrderFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderFixed(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl core::fmt::Debug for CancelReplaceOrderFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderFixed(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl core::fmt::Display for CancelReplaceOrderFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderFixedUnsafe(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl core::fmt::Debug for CancelReplaceOrderFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderFixedUnsafe(size: {}, type: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl core::fmt::Display for CancelReplaceOrderVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderVLS(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl core::fmt::Debug for CancelReplaceOrderVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderVLS(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl core::fmt::Display for CancelReplaceOrderVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderVLSUnsafe(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl core::fmt::Debug for CancelReplaceOrderVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CancelReplaceOrderVLSUnsafe(size: {}, type: {}, base_size: {}, server_order_id: \"{}\", client_order_id: \"{}\", price1: {}, price2: {}, quantity: {}, price1_is_set: {}, price2_is_set: {}, unused: {}, time_in_force: {}, good_till_date_time: {}, update_price1_offset_to_parent: {}, trade_account: \"{}\", price1_as_string: \"{}\", price2_as_string: \"{}\")", self.size(), self.r#type(), self.base_size(), self.server_order_id(), self.client_order_id(), self.price1(), self.price2(), self.quantity(), self.price1_is_set(), self.price2_is_set(), self.unused(), self.time_in_force(), self.good_till_date_time(), self.update_price1_offset_to_parent(), self.trade_account(), self.price1_as_string(), self.price2_as_string()).as_str())
    }
}

impl crate::Message for CancelReplaceOrderFixed {
    type Data = CancelReplaceOrderFixedData;

    const TYPE: u16 = CANCEL_REPLACE_ORDER;
    const BASE_SIZE: usize = 192;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelReplaceOrderFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CancelReplaceOrderFixedData,
        }
    }
}
impl crate::Message for CancelReplaceOrderFixedUnsafe {
    type Data = CancelReplaceOrderFixedData;

    const TYPE: u16 = CANCEL_REPLACE_ORDER;
    const BASE_SIZE: usize = 192;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelReplaceOrderFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CancelReplaceOrderFixedData,
        }
    }
}
impl crate::Message for CancelReplaceOrderVLS {
    type Data = CancelReplaceOrderVLSData;

    const TYPE: u16 = CANCEL_REPLACE_ORDER;
    const BASE_SIZE: usize = 80;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelReplaceOrderVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CancelReplaceOrderVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for CancelReplaceOrderVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CancelReplaceOrderVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for CancelReplaceOrderVLSUnsafe {
    type Data = CancelReplaceOrderVLSData;

    const TYPE: u16 = CANCEL_REPLACE_ORDER;
    const BASE_SIZE: usize = 80;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CancelReplaceOrderVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CancelReplaceOrderVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for CancelReplaceOrderVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CancelReplaceOrderVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This message is sent by the Client to the Server to cancel and replace
/// an existing order. This is also known as an order modification.
///
/// When the cancel and replace operation is completed, an OrderUpdate message
/// is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE.
/// If the cancel and replace operation cannot be completed, an OrderUpdate
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
impl CancelReplaceOrder for CancelReplaceOrderVLS {
    type Safe = CancelReplaceOrderVLS;
    type Unsafe = CancelReplaceOrderVLSUnsafe;

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn server_order_id(&self) -> &str {
        get_vls(self, self.server_order_id)
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        get_vls(self, self.client_order_id)
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn price1(&self) -> f64 {
        f64_le(self.price1)
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn price2(&self) -> f64 {
        f64_le(self.price2)
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn quantity(&self) -> f64 {
        f64_le(self.quantity)
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price1_is_set(&self) -> bool {
        self.price1_is_set
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price2_is_set(&self) -> bool {
        self.price2_is_set
    }

    fn unused(&self) -> i32 {
        i32::from_le(self.unused)
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn time_in_force(&self) -> TimeInForceEnum {
        TimeInForceEnum::from_le(self.time_in_force)
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn good_till_date_time(&self) -> DateTime {
        i64::from_le(self.good_till_date_time)
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn update_price1_offset_to_parent(&self) -> u8 {
        self.update_price1_offset_to_parent
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn price1_as_string(&self) -> &str {
        get_vls(self, self.price1_as_string)
    }

    fn price2_as_string(&self) -> &str {
        get_vls(self, self.price2_as_string)
    }

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        self.server_order_id = set_vls(self, self.server_order_id, value);
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        self.client_order_id = set_vls(self, self.client_order_id, value);
        self
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn set_price1(&mut self, value: f64) -> &mut Self {
        self.price1 = f64_le(value);
        self
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn set_price2(&mut self, value: f64) -> &mut Self {
        self.price2 = f64_le(value);
        self
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price1_is_set(&mut self, value: bool) -> &mut Self {
        self.price1_is_set = value;
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price2_is_set(&mut self, value: bool) -> &mut Self {
        self.price2_is_set = value;
        self
    }

    fn set_unused(&mut self, value: i32) -> &mut Self {
        self.unused = value.to_le();
        self
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        self.good_till_date_time = value.to_le();
        self
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn set_update_price1_offset_to_parent(&mut self, value: u8) -> &mut Self {
        self.update_price1_offset_to_parent = value;
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_price1_as_string(&mut self, value: &str) -> &mut Self {
        self.price1_as_string = set_vls(self, self.price1_as_string, value);
        self
    }

    fn set_price2_as_string(&mut self, value: &str) -> &mut Self {
        self.price2_as_string = set_vls(self, self.price2_as_string, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This message is sent by the Client to the Server to cancel and replace
/// an existing order. This is also known as an order modification.
///
/// When the cancel and replace operation is completed, an OrderUpdate message
/// is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE.
/// If the cancel and replace operation cannot be completed, an OrderUpdate
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
impl CancelReplaceOrder for CancelReplaceOrderVLSUnsafe {
    type Safe = CancelReplaceOrderVLS;
    type Unsafe = CancelReplaceOrderVLSUnsafe;

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.server_order_id)
        }
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.client_order_id)
        }
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn price1(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            0.0f64
        } else {
            f64_le(self.price1)
        }
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn price2(&self) -> f64 {
        if self.is_out_of_bounds(32) {
            0.0f64
        } else {
            f64_le(self.price2)
        }
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(40) {
            0.0f64
        } else {
            f64_le(self.quantity)
        }
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price1_is_set(&self) -> bool {
        if self.is_out_of_bounds(41) {
            true
        } else {
            self.price1_is_set
        }
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price2_is_set(&self) -> bool {
        if self.is_out_of_bounds(42) {
            true
        } else {
            self.price2_is_set
        }
    }

    fn unused(&self) -> i32 {
        if self.is_out_of_bounds(48) {
            0i32
        } else {
            i32::from_le(self.unused)
        }
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn time_in_force(&self) -> TimeInForceEnum {
        if self.is_out_of_bounds(52) {
            TimeInForceEnum::TifUnset.to_le()
        } else {
            TimeInForceEnum::from_le(self.time_in_force)
        }
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn good_till_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(64) {
            0i64
        } else {
            i64::from_le(self.good_till_date_time)
        }
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn update_price1_offset_to_parent(&self) -> u8 {
        if self.is_out_of_bounds(65) {
            0u8
        } else {
            self.update_price1_offset_to_parent
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(70) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn price1_as_string(&self) -> &str {
        if self.is_out_of_bounds(74) {
            ""
        } else {
            get_vls(self, self.price1_as_string)
        }
    }

    fn price2_as_string(&self) -> &str {
        if self.is_out_of_bounds(78) {
            ""
        } else {
            get_vls(self, self.price2_as_string)
        }
    }

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.server_order_id = set_vls(self, self.server_order_id, value);
        }
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.client_order_id = set_vls(self, self.client_order_id, value);
        }
        self
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn set_price1(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.price1 = f64_le(value);
        }
        self
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn set_price2(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.price2 = f64_le(value);
        }
        self
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.quantity = f64_le(value);
        }
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price1_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(41) {
            self.price1_is_set = value;
        }
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price2_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(42) {
            self.price2_is_set = value;
        }
        self
    }

    fn set_unused(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.unused = value.to_le();
        }
        self
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            self.good_till_date_time = value.to_le();
        }
        self
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn set_update_price1_offset_to_parent(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(65) {
            self.update_price1_offset_to_parent = value;
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(70) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_price1_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(74) {
            self.price1_as_string = set_vls(self, self.price1_as_string, value);
        }
        self
    }

    fn set_price2_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(78) {
            self.price2_as_string = set_vls(self, self.price2_as_string, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This message is sent by the Client to the Server to cancel and replace
/// an existing order. This is also known as an order modification.
///
/// When the cancel and replace operation is completed, an OrderUpdate message
/// is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE.
/// If the cancel and replace operation cannot be completed, an OrderUpdate
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
impl CancelReplaceOrder for CancelReplaceOrderFixed {
    type Safe = CancelReplaceOrderFixed;
    type Unsafe = CancelReplaceOrderFixedUnsafe;

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn server_order_id(&self) -> &str {
        get_fixed(&self.server_order_id[..])
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        get_fixed(&self.client_order_id[..])
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn price1(&self) -> f64 {
        f64_le(self.price1)
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn price2(&self) -> f64 {
        f64_le(self.price2)
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn quantity(&self) -> f64 {
        f64_le(self.quantity)
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price1_is_set(&self) -> bool {
        self.price1_is_set
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price2_is_set(&self) -> bool {
        self.price2_is_set
    }

    fn unused(&self) -> i32 {
        i32::from_le(self.unused)
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn time_in_force(&self) -> TimeInForceEnum {
        TimeInForceEnum::from_le(self.time_in_force)
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn good_till_date_time(&self) -> DateTime {
        i64::from_le(self.good_till_date_time)
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn update_price1_offset_to_parent(&self) -> u8 {
        self.update_price1_offset_to_parent
    }

    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    fn price1_as_string(&self) -> &str {
        get_fixed(&self.price1_as_string[..])
    }

    fn price2_as_string(&self) -> &str {
        get_fixed(&self.price2_as_string[..])
    }

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.server_order_id[..], value);
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.client_order_id[..], value);
        self
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn set_price1(&mut self, value: f64) -> &mut Self {
        self.price1 = f64_le(value);
        self
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn set_price2(&mut self, value: f64) -> &mut Self {
        self.price2 = f64_le(value);
        self
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price1_is_set(&mut self, value: bool) -> &mut Self {
        self.price1_is_set = value;
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price2_is_set(&mut self, value: bool) -> &mut Self {
        self.price2_is_set = value;
        self
    }

    fn set_unused(&mut self, value: i32) -> &mut Self {
        self.unused = value.to_le();
        self
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        self.good_till_date_time = value.to_le();
        self
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn set_update_price1_offset_to_parent(&mut self, value: u8) -> &mut Self {
        self.update_price1_offset_to_parent = value;
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    fn set_price1_as_string(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.price1_as_string[..], value);
        self
    }

    fn set_price2_as_string(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.price2_as_string[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This message is sent by the Client to the Server to cancel and replace
/// an existing order. This is also known as an order modification.
///
/// When the cancel and replace operation is completed, an OrderUpdate message
/// is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE.
/// If the cancel and replace operation cannot be completed, an OrderUpdate
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
/// message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
impl CancelReplaceOrder for CancelReplaceOrderFixedUnsafe {
    type Safe = CancelReplaceOrderFixed;
    type Unsafe = CancelReplaceOrderFixedUnsafe;

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(36) {
            ""
        } else {
            get_fixed(&self.server_order_id[..])
        }
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(68) {
            ""
        } else {
            get_fixed(&self.client_order_id[..])
        }
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn price1(&self) -> f64 {
        if self.is_out_of_bounds(80) {
            0.0f64
        } else {
            f64_le(self.price1)
        }
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn price2(&self) -> f64 {
        if self.is_out_of_bounds(88) {
            0.0f64
        } else {
            f64_le(self.price2)
        }
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(96) {
            0.0f64
        } else {
            f64_le(self.quantity)
        }
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price1_is_set(&self) -> bool {
        if self.is_out_of_bounds(97) {
            true
        } else {
            self.price1_is_set
        }
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn price2_is_set(&self) -> bool {
        if self.is_out_of_bounds(98) {
            true
        } else {
            self.price2_is_set
        }
    }

    fn unused(&self) -> i32 {
        if self.is_out_of_bounds(104) {
            0i32
        } else {
            i32::from_le(self.unused)
        }
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn time_in_force(&self) -> TimeInForceEnum {
        if self.is_out_of_bounds(108) {
            TimeInForceEnum::TifUnset.to_le()
        } else {
            TimeInForceEnum::from_le(self.time_in_force)
        }
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn good_till_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(120) {
            0i64
        } else {
            i64::from_le(self.good_till_date_time)
        }
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn update_price1_offset_to_parent(&self) -> u8 {
        if self.is_out_of_bounds(121) {
            0u8
        } else {
            self.update_price1_offset_to_parent
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(153) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    fn price1_as_string(&self) -> &str {
        if self.is_out_of_bounds(169) {
            ""
        } else {
            get_fixed(&self.price1_as_string[..])
        }
    }

    fn price2_as_string(&self) -> &str {
        if self.is_out_of_bounds(185) {
            ""
        } else {
            get_fixed(&self.price2_as_string[..])
        }
    }

    /// This is the order identifier for the order to modify. The Client needs
    /// to set this to the ServerOrderID field received back in the most recent
    /// OrderUpdateVLS message for the order.
    ///
    /// The Server will rely upon this ServerOrderID and only this order identifier
    /// to identify the order to be canceled and replaced. Although the given
    /// ClientOrderID by the Client must not change.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            set_fixed(&mut self.server_order_id[..], value);
        }
        self
    }

    /// This is the Client's own order identifier for the order.
    ///
    /// This must be the same throughout the life of the order. If the Server
    /// sees that this order identifier has changed in relation to the ServerOrderID,
    /// then it should reject this message with a OrderUpdateVLS message with
    /// the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED
    ///
    /// In the case where the order modification cannot be performed because the
    /// ServerOrderID does not exist, the Server will send a OrderUpdateVLS message
    /// with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID
    /// set to the given ClientOrderID in this message. ServerOrderID will be
    /// unset because an invalid server order identifier was given.
    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            set_fixed(&mut self.client_order_id[..], value);
        }
        self
    }

    /// For orders that require a price, this is the new order price.
    ///
    /// This value can be left unset indicating to the Server that Price1 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price1IsSet to a 0 value.
    fn set_price1(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(80) {
            self.price1 = f64_le(value);
        }
        self
    }

    /// For Stop-Limit orders this is the new Limit price. For other order types
    /// it is not used.
    ///
    /// This value can be left unset indicating to the Server that Price2 must
    /// not change and only the Quantity. In this case it is necessary to set
    /// Price2IsSet to a 0 value.
    fn set_price2(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            self.price2 = f64_le(value);
        }
        self
    }

    /// This is the new order quantity. It this is 0, then this means the order
    /// quantity must not be changed by the Server.
    ///
    /// If the order has partially filled, then this is going to be the order
    /// quantity which also includes the amount which has partially filled.
    ///
    /// For example, if the original quantity was 10 and there has been a partial
    /// fill of 3, the Client wants a fill of 2 more making a total of 5, then
    /// the Client will set this to 5.
    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.quantity = f64_le(value);
        }
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price1 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price1_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(97) {
            self.price1_is_set = value;
        }
        self
    }

    /// When this field is set to a nonzero value, it indicates that Price2 is
    /// set and the server should use the value, if it applies to the order type.
    /// set and the server should use the value, if it applies to the order type.
    ///
    /// The default value is 1.
    fn set_price2_is_set(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(98) {
            self.price2_is_set = value;
        }
        self
    }

    fn set_unused(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.unused = value.to_le();
        }
        self
    }

    /// The Time in Force for the order. For a list of Time in Force values, refer
    /// to TimeInForceEnum.
    ///
    /// The default value is TIF_UNSET.
    ///
    /// When this field is set to a value other than TIF_UNSET, it indicates that
    /// the TimeInForce is being changed.
    ///
    /// If the server does not support changing the Time in Force of the order,
    /// it needs to reject this CancelReplaceOrderVLS message and send an OrderUpdateVLS
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    /// message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.
    ///
    /// The server is under no obligation to support changing the Time in Force.
    /// The server is under no obligation to support changing the Time in Force.
    fn set_time_in_force(&mut self, value: TimeInForceEnum) -> &mut Self {
        if !self.is_out_of_bounds(108) {
            self.time_in_force = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME,
    /// this specifies the expiration Date-Time of the order.
    fn set_good_till_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.good_till_date_time = value.to_le();
        }
        self
    }

    /// This is an optional field. If modifying a child order which is part of
    /// a Server managed bracket order, then when this variable is set to 1 it
    /// provides an indication to the Server to update the internal server managed
    /// price offset to the parent order that this child order has to the parent.
    /// price offset to the parent order that this child order has to the parent.
    ///
    /// This will ensure the Server will maintain the proper offset of the child
    /// order to the fill price of the parent order when the parent order fills.
    /// order to the fill price of the parent order when the parent order fills.
    fn set_update_price1_offset_to_parent(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(121) {
            self.update_price1_offset_to_parent = value;
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(153) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    fn set_price1_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(169) {
            set_fixed(&mut self.price1_as_string[..], value);
        }
        self
    }

    fn set_price2_as_string(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(185) {
            set_fixed(&mut self.price2_as_string[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                192usize,
                core::mem::size_of::<CancelReplaceOrderFixedData>(),
                "CancelReplaceOrderFixedData sizeof expected {:} but was {:}",
                192usize,
                core::mem::size_of::<CancelReplaceOrderFixedData>()
            );
            assert_eq!(
                192u16,
                CancelReplaceOrderFixed::new().size(),
                "CancelReplaceOrderFixed sizeof expected {:} but was {:}",
                192u16,
                CancelReplaceOrderFixed::new().size(),
            );
            assert_eq!(
                CANCEL_REPLACE_ORDER,
                CancelReplaceOrderFixed::new().r#type(),
                "CancelReplaceOrderFixed type expected {:} but was {:}",
                CANCEL_REPLACE_ORDER,
                CancelReplaceOrderFixed::new().r#type(),
            );
            assert_eq!(
                204u16,
                CancelReplaceOrderFixed::new().r#type(),
                "CancelReplaceOrderFixed type expected {:} but was {:}",
                204u16,
                CancelReplaceOrderFixed::new().r#type(),
            );
            let d = CancelReplaceOrderFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
                "server_order_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.price1) as usize) - p,
                "price1 offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.price1) as usize) - p,
            );
            assert_eq!(
                80usize,
                (core::ptr::addr_of!(d.price2) as usize) - p,
                "price2 offset expected {:} but was {:}",
                80usize,
                (core::ptr::addr_of!(d.price2) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.price1_is_set) as usize) - p,
                "price1_is_set offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.price1_is_set) as usize) - p,
            );
            assert_eq!(
                97usize,
                (core::ptr::addr_of!(d.price2_is_set) as usize) - p,
                "price2_is_set offset expected {:} but was {:}",
                97usize,
                (core::ptr::addr_of!(d.price2_is_set) as usize) - p,
            );
            assert_eq!(
                100usize,
                (core::ptr::addr_of!(d.unused) as usize) - p,
                "unused offset expected {:} but was {:}",
                100usize,
                (core::ptr::addr_of!(d.unused) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
                "time_in_force offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
            );
            assert_eq!(
                112usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
                "good_till_date_time offset expected {:} but was {:}",
                112usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
            );
            assert_eq!(
                120usize,
                (core::ptr::addr_of!(d.update_price1_offset_to_parent) as usize) - p,
                "update_price1_offset_to_parent offset expected {:} but was {:}",
                120usize,
                (core::ptr::addr_of!(d.update_price1_offset_to_parent) as usize) - p,
            );
            assert_eq!(
                121usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                121usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                153usize,
                (core::ptr::addr_of!(d.price1_as_string) as usize) - p,
                "price1_as_string offset expected {:} but was {:}",
                153usize,
                (core::ptr::addr_of!(d.price1_as_string) as usize) - p,
            );
            assert_eq!(
                169usize,
                (core::ptr::addr_of!(d.price2_as_string) as usize) - p,
                "price2_as_string offset expected {:} but was {:}",
                169usize,
                (core::ptr::addr_of!(d.price2_as_string) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                80usize,
                core::mem::size_of::<CancelReplaceOrderVLSData>(),
                "CancelReplaceOrderVLSData sizeof expected {:} but was {:}",
                80usize,
                core::mem::size_of::<CancelReplaceOrderVLSData>()
            );
            assert_eq!(
                80u16,
                CancelReplaceOrderVLS::new().size(),
                "CancelReplaceOrderVLS sizeof expected {:} but was {:}",
                80u16,
                CancelReplaceOrderVLS::new().size(),
            );
            assert_eq!(
                CANCEL_REPLACE_ORDER,
                CancelReplaceOrderVLS::new().r#type(),
                "CancelReplaceOrderVLS type expected {:} but was {:}",
                CANCEL_REPLACE_ORDER,
                CancelReplaceOrderVLS::new().r#type(),
            );
            assert_eq!(
                204u16,
                CancelReplaceOrderVLS::new().r#type(),
                "CancelReplaceOrderVLS type expected {:} but was {:}",
                204u16,
                CancelReplaceOrderVLS::new().r#type(),
            );
            let d = CancelReplaceOrderVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
                "server_order_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.server_order_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.price1) as usize) - p,
                "price1 offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.price1) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.price2) as usize) - p,
                "price2 offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.price2) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.price1_is_set) as usize) - p,
                "price1_is_set offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.price1_is_set) as usize) - p,
            );
            assert_eq!(
                41usize,
                (core::ptr::addr_of!(d.price2_is_set) as usize) - p,
                "price2_is_set offset expected {:} but was {:}",
                41usize,
                (core::ptr::addr_of!(d.price2_is_set) as usize) - p,
            );
            assert_eq!(
                44usize,
                (core::ptr::addr_of!(d.unused) as usize) - p,
                "unused offset expected {:} but was {:}",
                44usize,
                (core::ptr::addr_of!(d.unused) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
                "time_in_force offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
                "good_till_date_time offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.good_till_date_time) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.update_price1_offset_to_parent) as usize) - p,
                "update_price1_offset_to_parent offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.update_price1_offset_to_parent) as usize) - p,
            );
            assert_eq!(
                66usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                66usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                70usize,
                (core::ptr::addr_of!(d.price1_as_string) as usize) - p,
                "price1_as_string offset expected {:} but was {:}",
                70usize,
                (core::ptr::addr_of!(d.price1_as_string) as usize) - p,
            );
            assert_eq!(
                74usize,
                (core::ptr::addr_of!(d.price2_as_string) as usize) - p,
                "price2_as_string offset expected {:} but was {:}",
                74usize,
                (core::ptr::addr_of!(d.price2_as_string) as usize) - p,
            );
        }
    }
}
