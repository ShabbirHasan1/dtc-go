// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-24 10:12:33.526761 +0800 WITA m=+0.004576126
use super::*;
use crate::message::*;

const SYMBOLS_FOR_UNDERLYING_REQUEST_VLS_SIZE: usize = 24;

const SYMBOLS_FOR_UNDERLYING_REQUEST_FIXED_SIZE: usize = 60;

/// size               u16               = SymbolsForUnderlyingRequestVLSSize  (24)
/// type               u16               = SYMBOLS_FOR_UNDERLYING_REQUEST  (504)
/// base_size          u16               = SymbolsForUnderlyingRequestVLSSize  (24)
/// request_id         i32               = 0
/// underlying_symbol  string            = ""
/// exchange           string            = ""
/// security_type      SecurityTypeEnum  = SECURITY_TYPE_UNSET  (0)
const SYMBOLS_FOR_UNDERLYING_REQUEST_VLS_DEFAULT: [u8; 24] = [24, 0, 248, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size               u16               = SymbolsForUnderlyingRequestFixedSize  (60)
/// type               u16               = SYMBOLS_FOR_UNDERLYING_REQUEST  (504)
/// request_id         i32               = 0
/// underlying_symbol  string32          = ""
/// exchange           string16          = ""
/// security_type      SecurityTypeEnum  = SECURITY_TYPE_UNSET  (0)
const SYMBOLS_FOR_UNDERLYING_REQUEST_FIXED_DEFAULT: [u8; 60] = [60, 0, 248, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// This is a message from the Client to the Server for requesting all of
/// the symbols for a particular underlying symbol.
///
/// For example, all of the futures contracts for a particular underlying
/// futures symbol or all of the option symbols for a specific futures or
/// stock symbol.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub trait SymbolsForUnderlyingRequest {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32;

    /// The underlying symbol.
    fn underlying_symbol(&self) -> &str;

    /// The exchange of the symbols to search for.
    fn exchange(&self) -> &str;

    /// The security type of the symbols to search for.
    fn security_type(&self) -> SecurityTypeEnum;

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// The underlying symbol.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self;

    /// The exchange of the symbols to search for.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// The security type of the symbols to search for.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self;

    fn copy_to(&self, to: &mut impl SymbolsForUnderlyingRequest) {
        to.set_request_id(self.request_id());
        to.set_underlying_symbol(self.underlying_symbol());
        to.set_exchange(self.exchange());
        to.set_security_type(self.security_type());
    }
}

/// This is a message from the Client to the Server for requesting all of
/// the symbols for a particular underlying symbol.
///
/// For example, all of the futures contracts for a particular underlying
/// futures symbol or all of the option symbols for a specific futures or
/// stock symbol.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub struct SymbolsForUnderlyingRequestVLS {
    data: *const SymbolsForUnderlyingRequestVLSData,
    capacity: usize
}

pub struct SymbolsForUnderlyingRequestVLSUnsafe {
    data: *const SymbolsForUnderlyingRequestVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct SymbolsForUnderlyingRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    underlying_symbol: VLS,
    exchange: VLS,
    security_type: SecurityTypeEnum,
}

/// This is a message from the Client to the Server for requesting all of
/// the symbols for a particular underlying symbol.
///
/// For example, all of the futures contracts for a particular underlying
/// futures symbol or all of the option symbols for a specific futures or
/// stock symbol.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
pub struct SymbolsForUnderlyingRequestFixed {
    data: *const SymbolsForUnderlyingRequestFixedData
}

pub struct SymbolsForUnderlyingRequestFixedUnsafe {
    data: *const SymbolsForUnderlyingRequestFixedData
}

#[repr(packed, C)]
pub struct SymbolsForUnderlyingRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    underlying_symbol: [u8; 32],
    exchange: [u8; 16],
    security_type: SecurityTypeEnum,
}

impl SymbolsForUnderlyingRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 24u16.to_le(),
            r#type: SYMBOLS_FOR_UNDERLYING_REQUEST.to_le(),
            base_size: 24u16.to_le(),
            request_id: 0i32,
            underlying_symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            security_type: SecurityTypeEnum::SecurityTypeUnset.to_le(),
        }
    }
}

impl SymbolsForUnderlyingRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 60u16.to_le(),
            r#type: SYMBOLS_FOR_UNDERLYING_REQUEST.to_le(),
            request_id: 0i32,
            underlying_symbol: [0; 32],
            exchange: [0; 16],
            security_type: SecurityTypeEnum::SecurityTypeUnset.to_le(),
        }
    }
}

unsafe impl Send for SymbolsForUnderlyingRequestFixed {}
unsafe impl Send for SymbolsForUnderlyingRequestFixedUnsafe {}
unsafe impl Send for SymbolsForUnderlyingRequestFixedData {}
unsafe impl Send for SymbolsForUnderlyingRequestVLS {}
unsafe impl Send for SymbolsForUnderlyingRequestVLSUnsafe {}
unsafe impl Send for SymbolsForUnderlyingRequestVLSData {}

impl Drop for SymbolsForUnderlyingRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SymbolsForUnderlyingRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SymbolsForUnderlyingRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SymbolsForUnderlyingRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for SymbolsForUnderlyingRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SymbolsForUnderlyingRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SymbolsForUnderlyingRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SymbolsForUnderlyingRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for SymbolsForUnderlyingRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SymbolsForUnderlyingRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SymbolsForUnderlyingRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SymbolsForUnderlyingRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for SymbolsForUnderlyingRequestFixed {
    type Target = SymbolsForUnderlyingRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForUnderlyingRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SymbolsForUnderlyingRequestFixedUnsafe {
    type Target = SymbolsForUnderlyingRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForUnderlyingRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SymbolsForUnderlyingRequestVLS {
    type Target = SymbolsForUnderlyingRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForUnderlyingRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SymbolsForUnderlyingRequestVLSUnsafe {
    type Target = SymbolsForUnderlyingRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SymbolsForUnderlyingRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for SymbolsForUnderlyingRequestFixed {
    type Safe = SymbolsForUnderlyingRequestFixed;
    type Unsafe = SymbolsForUnderlyingRequestFixedUnsafe;
    type Data = SymbolsForUnderlyingRequestFixedData;
    const BASE_SIZE: usize = 60;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForUnderlyingRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SymbolsForUnderlyingRequestFixedData
        }
    }

}

impl crate::Message for SymbolsForUnderlyingRequestFixedUnsafe {
    type Safe = SymbolsForUnderlyingRequestFixed;
    type Unsafe = SymbolsForUnderlyingRequestFixedUnsafe;
    type Data = SymbolsForUnderlyingRequestFixedData;
    const BASE_SIZE: usize = 60;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForUnderlyingRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const SymbolsForUnderlyingRequestFixedData
        }
    }

}

impl crate::Message for SymbolsForUnderlyingRequestVLS {
    type Safe = SymbolsForUnderlyingRequestVLS;
    type Unsafe = SymbolsForUnderlyingRequestVLSUnsafe;
    type Data = SymbolsForUnderlyingRequestVLSData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForUnderlyingRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SymbolsForUnderlyingRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for SymbolsForUnderlyingRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SymbolsForUnderlyingRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for SymbolsForUnderlyingRequestVLSUnsafe {
    type Safe = SymbolsForUnderlyingRequestVLS;
    type Unsafe = SymbolsForUnderlyingRequestVLSUnsafe;
    type Data = SymbolsForUnderlyingRequestVLSData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, SymbolsForUnderlyingRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SymbolsForUnderlyingRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for SymbolsForUnderlyingRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SymbolsForUnderlyingRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// This is a message from the Client to the Server for requesting all of
/// the symbols for a particular underlying symbol.
///
/// For example, all of the futures contracts for a particular underlying
/// futures symbol or all of the option symbols for a specific futures or
/// stock symbol.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForUnderlyingRequest for SymbolsForUnderlyingRequestVLS {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The underlying symbol.
    fn underlying_symbol(&self) -> &str {
        crate::get_vls(self, self.underlying_symbol)
    }

    /// The exchange of the symbols to search for.
    fn exchange(&self) -> &str {
        crate::get_vls(self, self.exchange)
    }

    /// The security type of the symbols to search for.
    fn security_type(&self) -> SecurityTypeEnum {
        SecurityTypeEnum::from_le(self.security_type)
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// The underlying symbol.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        self.underlying_symbol = crate::set_vls(self, self.underlying_symbol, value);
        self
    }


    /// The exchange of the symbols to search for.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = crate::set_vls(self, self.exchange, value);
        self
    }


    /// The security type of the symbols to search for.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

}

/// This is a message from the Client to the Server for requesting all of
/// the symbols for a particular underlying symbol.
///
/// For example, all of the futures contracts for a particular underlying
/// futures symbol or all of the option symbols for a specific futures or
/// stock symbol.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForUnderlyingRequest for SymbolsForUnderlyingRequestVLSUnsafe {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The underlying symbol.
    fn underlying_symbol(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            crate::get_vls(self, self.underlying_symbol)
        }
    }

    /// The exchange of the symbols to search for.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            crate::get_vls(self, self.exchange)
        }
    }

    /// The security type of the symbols to search for.
    fn security_type(&self) -> SecurityTypeEnum {
        if self.is_out_of_bounds(24) {
            SecurityTypeEnum::SecurityTypeUnset.to_le()
        } else {
            SecurityTypeEnum::from_le(self.security_type)
        }
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }


    /// The underlying symbol.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.underlying_symbol = crate::set_vls(self, self.underlying_symbol, value);
        }
        self
    }


    /// The exchange of the symbols to search for.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.exchange = crate::set_vls(self, self.exchange, value);
        }
        self
    }


    /// The security type of the symbols to search for.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

}

/// This is a message from the Client to the Server for requesting all of
/// the symbols for a particular underlying symbol.
///
/// For example, all of the futures contracts for a particular underlying
/// futures symbol or all of the option symbols for a specific futures or
/// stock symbol.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForUnderlyingRequest for SymbolsForUnderlyingRequestFixed {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The underlying symbol.
    fn underlying_symbol(&self) -> &str {
        crate::get_fixed(&self.underlying_symbol[..])
    }

    /// The exchange of the symbols to search for.
    fn exchange(&self) -> &str {
        crate::get_fixed(&self.exchange[..])
    }

    /// The security type of the symbols to search for.
    fn security_type(&self) -> SecurityTypeEnum {
        SecurityTypeEnum::from_le(self.security_type)
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// The underlying symbol.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.underlying_symbol[..], value);
        self
    }


    /// The exchange of the symbols to search for.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.exchange[..], value);
        self
    }


    /// The security type of the symbols to search for.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

}

/// This is a message from the Client to the Server for requesting all of
/// the symbols for a particular underlying symbol.
///
/// For example, all of the futures contracts for a particular underlying
/// futures symbol or all of the option symbols for a specific futures or
/// stock symbol.
///
/// The server will return a SecurityDefinitionResponseVLS message to the
/// Client for each Symbol returned.
///
/// If the Server is rejecting this request, then it needs to send a SecurityDefinitionRejectVLS
/// message to the Client.
impl SymbolsForUnderlyingRequest for SymbolsForUnderlyingRequestFixedUnsafe {
    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The underlying symbol.
    fn underlying_symbol(&self) -> &str {
        if self.is_out_of_bounds(40) {
            ""
        } else {
            crate::get_fixed(&self.underlying_symbol[..])
        }
    }

    /// The exchange of the symbols to search for.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(56) {
            ""
        } else {
            crate::get_fixed(&self.exchange[..])
        }
    }

    /// The security type of the symbols to search for.
    fn security_type(&self) -> SecurityTypeEnum {
        if self.is_out_of_bounds(60) {
            SecurityTypeEnum::SecurityTypeUnset.to_le()
        } else {
            SecurityTypeEnum::from_le(self.security_type)
        }
    }

    /// The unique identifier for this request. This same identifier will be returned
    /// in the SecurityDefinitionResponseVLS message.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// The underlying symbol.
    fn set_underlying_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            crate::set_fixed(&mut self.underlying_symbol[..], value);
        }
        self
    }


    /// The exchange of the symbols to search for.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            crate::set_fixed(&mut self.exchange[..], value);
        }
        self
    }


    /// The security type of the symbols to search for.
    fn set_security_type(&mut self, value: SecurityTypeEnum) -> &mut Self {
        if !self.is_out_of_bounds(60) {
            self.security_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

}

