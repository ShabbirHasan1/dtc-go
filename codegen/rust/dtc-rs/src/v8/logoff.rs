// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-24 10:12:33.526761 +0800 WITA m=+0.004576126
use super::*;
use crate::message::*;

const LOGOFF_VLS_SIZE: usize = 12;

const LOGOFF_FIXED_SIZE: usize = 102;

/// size              u16     = LogoffVLSSize  (12)
/// type              u16     = LOGOFF  (5)
/// base_size         u16     = LogoffVLSSize  (12)
/// reason            string  = ""
/// do_not_reconnect  u8      = 0
const LOGOFF_VLS_DEFAULT: [u8; 12] = [12, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0, 0];

/// size              u16       = LogoffFixedSize  (102)
/// type              u16       = LOGOFF  (5)
/// reason            string96  = ""
/// do_not_reconnect  u8        = 0
const LOGOFF_FIXED_DEFAULT: [u8; 102] = [102, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// A LogoffVLS is a message which can be sent either by the Client or the
/// Server to the other side. It indicates that the Client or the Server is
/// logging off and going to be closing the connection.
///
/// When one side receives this message, it should expect the connection will
/// be closed. It should not be expected that any messages will follow the
/// LogoffVLS message, and it should close the network connection and consider
/// it finished. The side receiving this message can send a LogoffVLS message
/// to the other side before closing the connection.
pub trait Logoff {
    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn reason(&self) -> &str;

    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn do_not_reconnect(&self) -> u8;

    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn set_reason(&mut self, value: &str) -> &mut Self;

    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn set_do_not_reconnect(&mut self, value: u8) -> &mut Self;

    fn copy_to(&self, to: &mut impl Logoff) {
        to.set_reason(self.reason());
        to.set_do_not_reconnect(self.do_not_reconnect());
    }
}

/// A LogoffVLS is a message which can be sent either by the Client or the
/// Server to the other side. It indicates that the Client or the Server is
/// logging off and going to be closing the connection.
///
/// When one side receives this message, it should expect the connection will
/// be closed. It should not be expected that any messages will follow the
/// LogoffVLS message, and it should close the network connection and consider
/// it finished. The side receiving this message can send a LogoffVLS message
/// to the other side before closing the connection.
pub struct LogoffVLS {
    data: *const LogoffVLSData,
    capacity: usize
}

pub struct LogoffVLSUnsafe {
    data: *const LogoffVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct LogoffVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    reason: VLS,
    do_not_reconnect: u8,
}

/// A LogoffVLS is a message which can be sent either by the Client or the
/// Server to the other side. It indicates that the Client or the Server is
/// logging off and going to be closing the connection.
///
/// When one side receives this message, it should expect the connection will
/// be closed. It should not be expected that any messages will follow the
/// LogoffVLS message, and it should close the network connection and consider
/// it finished. The side receiving this message can send a LogoffVLS message
/// to the other side before closing the connection.
pub struct LogoffFixed {
    data: *const LogoffFixedData
}

pub struct LogoffFixedUnsafe {
    data: *const LogoffFixedData
}

#[repr(packed, C)]
pub struct LogoffFixedData {
    size: u16,
    r#type: u16,
    reason: [u8; 96],
    do_not_reconnect: u8,
}

impl LogoffVLSData {
    pub fn new() -> Self {
        Self {
            size: 12u16.to_le(),
            r#type: LOGOFF.to_le(),
            base_size: 12u16.to_le(),
            reason: crate::message::VLS::new(),
            do_not_reconnect: 0u8,
        }
    }
}

impl LogoffFixedData {
    pub fn new() -> Self {
        Self {
            size: 102u16.to_le(),
            r#type: LOGOFF.to_le(),
            reason: [0; 96],
            do_not_reconnect: 0u8,
        }
    }
}

unsafe impl Send for LogoffFixed {}
unsafe impl Send for LogoffFixedUnsafe {}
unsafe impl Send for LogoffFixedData {}
unsafe impl Send for LogoffVLS {}
unsafe impl Send for LogoffVLSUnsafe {}
unsafe impl Send for LogoffVLSData {}

impl Drop for LogoffFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for LogoffFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for LogoffVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for LogoffVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for LogoffFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for LogoffFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for LogoffVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for LogoffVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for LogoffFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for LogoffFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for LogoffVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for LogoffVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for LogoffFixed {
    type Target = LogoffFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogoffFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for LogoffFixedUnsafe {
    type Target = LogoffFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogoffFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for LogoffVLS {
    type Target = LogoffVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogoffVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for LogoffVLSUnsafe {
    type Target = LogoffVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for LogoffVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for LogoffFixed {
    type Safe = LogoffFixed;
    type Unsafe = LogoffFixedUnsafe;
    type Data = LogoffFixedData;
    const BASE_SIZE: usize = 102;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogoffFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const LogoffFixedData
        }
    }

}

impl crate::Message for LogoffFixedUnsafe {
    type Safe = LogoffFixed;
    type Unsafe = LogoffFixedUnsafe;
    type Data = LogoffFixedData;
    const BASE_SIZE: usize = 102;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogoffFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const LogoffFixedData
        }
    }

}

impl crate::Message for LogoffVLS {
    type Safe = LogoffVLS;
    type Unsafe = LogoffVLSUnsafe;
    type Data = LogoffVLSData;
    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogoffVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const LogoffVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for LogoffVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const LogoffVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for LogoffVLSUnsafe {
    type Safe = LogoffVLS;
    type Unsafe = LogoffVLSUnsafe;
    type Data = LogoffVLSData;
    const BASE_SIZE: usize = 12;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, LogoffVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const LogoffVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for LogoffVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const LogoffVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// A LogoffVLS is a message which can be sent either by the Client or the
/// Server to the other side. It indicates that the Client or the Server is
/// logging off and going to be closing the connection.
///
/// When one side receives this message, it should expect the connection will
/// be closed. It should not be expected that any messages will follow the
/// LogoffVLS message, and it should close the network connection and consider
/// it finished. The side receiving this message can send a LogoffVLS message
/// to the other side before closing the connection.
impl Logoff for LogoffVLS {
    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn reason(&self) -> &str {
        crate::get_vls(self, self.reason)
    }

    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn do_not_reconnect(&self) -> u8 {
        self.do_not_reconnect
    }

    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn set_reason(&mut self, value: &str) -> &mut Self {
        self.reason = crate::set_vls(self, self.reason, value);
        self
    }


    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn set_do_not_reconnect(&mut self, value: u8) -> &mut Self {
        self.do_not_reconnect = value;
        self
    }

}

/// A LogoffVLS is a message which can be sent either by the Client or the
/// Server to the other side. It indicates that the Client or the Server is
/// logging off and going to be closing the connection.
///
/// When one side receives this message, it should expect the connection will
/// be closed. It should not be expected that any messages will follow the
/// LogoffVLS message, and it should close the network connection and consider
/// it finished. The side receiving this message can send a LogoffVLS message
/// to the other side before closing the connection.
impl Logoff for LogoffVLSUnsafe {
    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn reason(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            crate::get_vls(self, self.reason)
        }
    }

    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn do_not_reconnect(&self) -> u8 {
        if self.is_out_of_bounds(11) {
            0u8
        } else {
            self.do_not_reconnect
        }
    }

    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn set_reason(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.reason = crate::set_vls(self, self.reason, value);
        }
        self
    }


    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn set_do_not_reconnect(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(11) {
            self.do_not_reconnect = value;
        }
        self
    }

}

/// A LogoffVLS is a message which can be sent either by the Client or the
/// Server to the other side. It indicates that the Client or the Server is
/// logging off and going to be closing the connection.
///
/// When one side receives this message, it should expect the connection will
/// be closed. It should not be expected that any messages will follow the
/// LogoffVLS message, and it should close the network connection and consider
/// it finished. The side receiving this message can send a LogoffVLS message
/// to the other side before closing the connection.
impl Logoff for LogoffFixed {
    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn reason(&self) -> &str {
        crate::get_fixed(&self.reason[..])
    }

    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn do_not_reconnect(&self) -> u8 {
        self.do_not_reconnect
    }

    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn set_reason(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.reason[..], value);
        self
    }


    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn set_do_not_reconnect(&mut self, value: u8) -> &mut Self {
        self.do_not_reconnect = value;
        self
    }

}

/// A LogoffVLS is a message which can be sent either by the Client or the
/// Server to the other side. It indicates that the Client or the Server is
/// logging off and going to be closing the connection.
///
/// When one side receives this message, it should expect the connection will
/// be closed. It should not be expected that any messages will follow the
/// LogoffVLS message, and it should close the network connection and consider
/// it finished. The side receiving this message can send a LogoffVLS message
/// to the other side before closing the connection.
impl Logoff for LogoffFixedUnsafe {
    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn reason(&self) -> &str {
        if self.is_out_of_bounds(100) {
            ""
        } else {
            crate::get_fixed(&self.reason[..])
        }
    }

    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn do_not_reconnect(&self) -> u8 {
        if self.is_out_of_bounds(101) {
            0u8
        } else {
            self.do_not_reconnect
        }
    }

    /// Reason is a character string indicating the reason for the log off from
    /// either the Client or the Server.
    fn set_reason(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(100) {
            crate::set_fixed(&mut self.reason[..], value);
        }
        self
    }


    /// When DoNotReconnect is set to a 1, this indicates to the other side that
    /// a reconnect to the opposite side should not occur automatically.
    fn set_do_not_reconnect(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(101) {
            self.do_not_reconnect = value;
        }
        self
    }

}

