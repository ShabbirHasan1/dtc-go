// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const TRADE_ACCOUNT_DATA_SYMBOL_LIMITS_RESPONSE_VLS_SIZE: usize = 51;

/// size                                                        u16     = TradeAccountDataSymbolLimitsResponseVLSSize  (51)
/// type                                                        u16     = TRADE_ACCOUNT_DATA_SYMBOL_LIMITS_RESPONSE  (10121)
/// base_size                                                   u16     = TradeAccountDataSymbolLimitsResponseVLSSize  (51)
/// request_id                                                  u32     = 0
/// trade_account                                               string  = ""
/// symbol                                                      string  = ""
/// trade_position_limit                                        f64     = 0
/// order_quantity_limit                                        f64     = 0
/// use_percent_of_margin                                       i32     = 0
/// override_margin_other_accounts                              u8      = 0
/// use_percent_of_margin_for_day_trading                       i32     = 0
/// number_of_days_before_last_trading_date_to_disallow_orders  i32     = 0
/// fixed_margin_cash_value                                     f32     = 0
pub(crate) const TRADE_ACCOUNT_DATA_SYMBOL_LIMITS_RESPONSE_VLS_DEFAULT: [u8; 51] = [
    51, 0, 137, 39, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait TradeAccountDataSymbolLimitsResponse: Message {
    type Safe: TradeAccountDataSymbolLimitsResponse;
    type Unsafe: TradeAccountDataSymbolLimitsResponse;

    fn request_id(&self) -> u32;

    fn trade_account(&self) -> &str;

    fn symbol(&self) -> &str;

    fn trade_position_limit(&self) -> f64;

    fn order_quantity_limit(&self) -> f64;

    fn use_percent_of_margin(&self) -> i32;

    fn override_margin_other_accounts(&self) -> u8;

    fn use_percent_of_margin_for_day_trading(&self) -> i32;

    fn number_of_days_before_last_trading_date_to_disallow_orders(&self) -> i32;

    fn fixed_margin_cash_value(&self) -> f32;

    fn set_request_id(&mut self, value: u32) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_trade_position_limit(&mut self, value: f64) -> &mut Self;

    fn set_order_quantity_limit(&mut self, value: f64) -> &mut Self;

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self;

    fn set_override_margin_other_accounts(&mut self, value: u8) -> &mut Self;

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self;

    fn set_number_of_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: i32,
    ) -> &mut Self;

    fn set_fixed_margin_cash_value(&mut self, value: f32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl TradeAccountDataSymbolLimitsResponse) {
        to.set_request_id(self.request_id());
        to.set_trade_account(self.trade_account());
        to.set_symbol(self.symbol());
        to.set_trade_position_limit(self.trade_position_limit());
        to.set_order_quantity_limit(self.order_quantity_limit());
        to.set_use_percent_of_margin(self.use_percent_of_margin());
        to.set_override_margin_other_accounts(self.override_margin_other_accounts());
        to.set_use_percent_of_margin_for_day_trading(self.use_percent_of_margin_for_day_trading());
        to.set_number_of_days_before_last_trading_date_to_disallow_orders(
            self.number_of_days_before_last_trading_date_to_disallow_orders(),
        );
        to.set_fixed_margin_cash_value(self.fixed_margin_cash_value());
    }
}

pub struct TradeAccountDataSymbolLimitsResponseVLS {
    data: *const TradeAccountDataSymbolLimitsResponseVLSData,
    capacity: usize,
}

pub struct TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    data: *const TradeAccountDataSymbolLimitsResponseVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct TradeAccountDataSymbolLimitsResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: u32,
    trade_account: VLS,
    symbol: VLS,
    trade_position_limit: f64,
    order_quantity_limit: f64,
    use_percent_of_margin: i32,
    override_margin_other_accounts: u8,
    use_percent_of_margin_for_day_trading: i32,
    number_of_days_before_last_trading_date_to_disallow_orders: i32,
    fixed_margin_cash_value: f32,
}

impl TradeAccountDataSymbolLimitsResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 51u16.to_le(),
            r#type: TRADE_ACCOUNT_DATA_SYMBOL_LIMITS_RESPONSE.to_le(),
            base_size: 51u16.to_le(),
            request_id: 0u32.to_le(),
            trade_account: crate::message::VLS::new(),
            symbol: crate::message::VLS::new(),
            trade_position_limit: 0.0,
            order_quantity_limit: 0.0,
            use_percent_of_margin: 0i32.to_le(),
            override_margin_other_accounts: 0,
            use_percent_of_margin_for_day_trading: 0i32.to_le(),
            number_of_days_before_last_trading_date_to_disallow_orders: 0i32.to_le(),
            fixed_margin_cash_value: 0.0,
        }
    }
}

unsafe impl Send for TradeAccountDataSymbolLimitsResponseVLS {}
unsafe impl Send for TradeAccountDataSymbolLimitsResponseVLSUnsafe {}
unsafe impl Send for TradeAccountDataSymbolLimitsResponseVLSData {}

impl Drop for TradeAccountDataSymbolLimitsResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for TradeAccountDataSymbolLimitsResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for TradeAccountDataSymbolLimitsResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for TradeAccountDataSymbolLimitsResponseVLS {
    type Target = TradeAccountDataSymbolLimitsResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataSymbolLimitsResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    type Target = TradeAccountDataSymbolLimitsResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for TradeAccountDataSymbolLimitsResponseVLS {
    type Data = TradeAccountDataSymbolLimitsResponseVLSData;

    const BASE_SIZE: usize = 51;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                TradeAccountDataSymbolLimitsResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataSymbolLimitsResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataSymbolLimitsResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataSymbolLimitsResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    type Data = TradeAccountDataSymbolLimitsResponseVLSData;

    const BASE_SIZE: usize = 51;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                TradeAccountDataSymbolLimitsResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataSymbolLimitsResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataSymbolLimitsResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl TradeAccountDataSymbolLimitsResponse for TradeAccountDataSymbolLimitsResponseVLS {
    type Safe = TradeAccountDataSymbolLimitsResponseVLS;
    type Unsafe = TradeAccountDataSymbolLimitsResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn trade_position_limit(&self) -> f64 {
        f64_le(self.trade_position_limit)
    }

    fn order_quantity_limit(&self) -> f64 {
        f64_le(self.order_quantity_limit)
    }

    fn use_percent_of_margin(&self) -> i32 {
        i32::from_le(self.use_percent_of_margin)
    }

    fn override_margin_other_accounts(&self) -> u8 {
        self.override_margin_other_accounts
    }

    fn use_percent_of_margin_for_day_trading(&self) -> i32 {
        i32::from_le(self.use_percent_of_margin_for_day_trading)
    }

    fn number_of_days_before_last_trading_date_to_disallow_orders(&self) -> i32 {
        i32::from_le(self.number_of_days_before_last_trading_date_to_disallow_orders)
    }

    fn fixed_margin_cash_value(&self) -> f32 {
        f32_le(self.fixed_margin_cash_value)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_trade_position_limit(&mut self, value: f64) -> &mut Self {
        self.trade_position_limit = f64_le(value);
        self
    }

    fn set_order_quantity_limit(&mut self, value: f64) -> &mut Self {
        self.order_quantity_limit = f64_le(value);
        self
    }

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self {
        self.use_percent_of_margin = value.to_le();
        self
    }

    fn set_override_margin_other_accounts(&mut self, value: u8) -> &mut Self {
        self.override_margin_other_accounts = value;
        self
    }

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self {
        self.use_percent_of_margin_for_day_trading = value.to_le();
        self
    }

    fn set_number_of_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: i32,
    ) -> &mut Self {
        self.number_of_days_before_last_trading_date_to_disallow_orders = value.to_le();
        self
    }

    fn set_fixed_margin_cash_value(&mut self, value: f32) -> &mut Self {
        self.fixed_margin_cash_value = f32_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl TradeAccountDataSymbolLimitsResponse for TradeAccountDataSymbolLimitsResponseVLSUnsafe {
    type Safe = TradeAccountDataSymbolLimitsResponseVLS;
    type Unsafe = TradeAccountDataSymbolLimitsResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn trade_position_limit(&self) -> f64 {
        if self.is_out_of_bounds(26) {
            0.0
        } else {
            f64_le(self.trade_position_limit)
        }
    }

    fn order_quantity_limit(&self) -> f64 {
        if self.is_out_of_bounds(34) {
            0.0
        } else {
            f64_le(self.order_quantity_limit)
        }
    }

    fn use_percent_of_margin(&self) -> i32 {
        if self.is_out_of_bounds(38) {
            0i32.to_le()
        } else {
            i32::from_le(self.use_percent_of_margin)
        }
    }

    fn override_margin_other_accounts(&self) -> u8 {
        if self.is_out_of_bounds(39) {
            0
        } else {
            self.override_margin_other_accounts
        }
    }

    fn use_percent_of_margin_for_day_trading(&self) -> i32 {
        if self.is_out_of_bounds(43) {
            0i32.to_le()
        } else {
            i32::from_le(self.use_percent_of_margin_for_day_trading)
        }
    }

    fn number_of_days_before_last_trading_date_to_disallow_orders(&self) -> i32 {
        if self.is_out_of_bounds(47) {
            0i32.to_le()
        } else {
            i32::from_le(self.number_of_days_before_last_trading_date_to_disallow_orders)
        }
    }

    fn fixed_margin_cash_value(&self) -> f32 {
        if self.is_out_of_bounds(51) {
            0.0
        } else {
            f32_le(self.fixed_margin_cash_value)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_trade_position_limit(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(26) {
            self.trade_position_limit = f64_le(value);
        }
        self
    }

    fn set_order_quantity_limit(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(34) {
            self.order_quantity_limit = f64_le(value);
        }
        self
    }

    fn set_use_percent_of_margin(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(38) {
            self.use_percent_of_margin = value.to_le();
        }
        self
    }

    fn set_override_margin_other_accounts(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(39) {
            self.override_margin_other_accounts = value;
        }
        self
    }

    fn set_use_percent_of_margin_for_day_trading(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(43) {
            self.use_percent_of_margin_for_day_trading = value.to_le();
        }
        self
    }

    fn set_number_of_days_before_last_trading_date_to_disallow_orders(
        &mut self,
        value: i32,
    ) -> &mut Self {
        if !self.is_out_of_bounds(47) {
            self.number_of_days_before_last_trading_date_to_disallow_orders = value.to_le();
        }
        self
    }

    fn set_fixed_margin_cash_value(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(51) {
            self.fixed_margin_cash_value = f32_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                51usize,
                core::mem::size_of::<TradeAccountDataSymbolLimitsResponseVLSData>(),
                "TradeAccountDataSymbolLimitsResponseVLSData sizeof expected {:} but was {:}",
                51usize,
                core::mem::size_of::<TradeAccountDataSymbolLimitsResponseVLSData>()
            );
            assert_eq!(
                51u16,
                TradeAccountDataSymbolLimitsResponseVLS::new().size(),
                "TradeAccountDataSymbolLimitsResponseVLS sizeof expected {:} but was {:}",
                51u16,
                TradeAccountDataSymbolLimitsResponseVLS::new().size(),
            );
            assert_eq!(
                TRADE_ACCOUNT_DATA_SYMBOL_LIMITS_RESPONSE,
                TradeAccountDataSymbolLimitsResponseVLS::new().r#type(),
                "TradeAccountDataSymbolLimitsResponseVLS type expected {:} but was {:}",
                TRADE_ACCOUNT_DATA_SYMBOL_LIMITS_RESPONSE,
                TradeAccountDataSymbolLimitsResponseVLS::new().r#type(),
            );
            assert_eq!(
                10121u16,
                TradeAccountDataSymbolLimitsResponseVLS::new().r#type(),
                "TradeAccountDataSymbolLimitsResponseVLS type expected {:} but was {:}",
                10121u16,
                TradeAccountDataSymbolLimitsResponseVLS::new().r#type(),
            );
            let d = TradeAccountDataSymbolLimitsResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.trade_position_limit) as usize) - p,
                "trade_position_limit offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.trade_position_limit) as usize) - p,
            );
            assert_eq!(
                26usize,
                (core::ptr::addr_of!(d.order_quantity_limit) as usize) - p,
                "order_quantity_limit offset expected {:} but was {:}",
                26usize,
                (core::ptr::addr_of!(d.order_quantity_limit) as usize) - p,
            );
            assert_eq!(
                34usize,
                (core::ptr::addr_of!(d.use_percent_of_margin) as usize) - p,
                "use_percent_of_margin offset expected {:} but was {:}",
                34usize,
                (core::ptr::addr_of!(d.use_percent_of_margin) as usize) - p,
            );
            assert_eq!(
                38usize,
                (core::ptr::addr_of!(d.override_margin_other_accounts) as usize) - p,
                "override_margin_other_accounts offset expected {:} but was {:}",
                38usize,
                (core::ptr::addr_of!(d.override_margin_other_accounts) as usize) - p,
            );
            assert_eq!(
                39usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading) as usize) - p,
                "use_percent_of_margin_for_day_trading offset expected {:} but was {:}",
                39usize,
                (core::ptr::addr_of!(d.use_percent_of_margin_for_day_trading) as usize) - p,
            );
            assert_eq!(
                43usize,
                (core::ptr::addr_of!(d.number_of_days_before_last_trading_date_to_disallow_orders) as usize) - p,
                "number_of_days_before_last_trading_date_to_disallow_orders offset expected {:} but was {:}",
                43usize,
                (core::ptr::addr_of!(d.number_of_days_before_last_trading_date_to_disallow_orders) as usize) - p,
            );
            assert_eq!(
                47usize,
                (core::ptr::addr_of!(d.fixed_margin_cash_value) as usize) - p,
                "fixed_margin_cash_value offset expected {:} but was {:}",
                47usize,
                (core::ptr::addr_of!(d.fixed_margin_cash_value) as usize) - p,
            );
        }
    }
}
