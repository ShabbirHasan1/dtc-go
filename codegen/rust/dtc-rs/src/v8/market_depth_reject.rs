// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-24 10:12:33.526761 +0800 WITA m=+0.004576126
use super::*;
use crate::message::*;

const MARKET_DEPTH_REJECT_VLS_SIZE: usize = 16;

const MARKET_DEPTH_REJECT_FIXED_SIZE: usize = 104;

/// size         u16     = MarketDepthRejectVLSSize  (16)
/// type         u16     = MARKET_DEPTH_REJECT  (121)
/// base_size    u16     = MarketDepthRejectVLSSize  (16)
/// symbol_id    u32     = 0
/// reject_text  string  = ""
const MARKET_DEPTH_REJECT_VLS_DEFAULT: [u8; 16] = [16, 0, 121, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size         u16       = MarketDepthRejectFixedSize  (104)
/// type         u16       = MARKET_DEPTH_REJECT  (121)
/// symbol_id    u32       = 0
/// reject_text  string96  = ""
const MARKET_DEPTH_REJECT_FIXED_DEFAULT: [u8; 104] = [104, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// The MarketDepthRejectVLS message is sent by the Server to the Client to
/// reject a MarketDepthRequestVLS message for any reason.
pub trait MarketDepthReject {
    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// Free-form text explaining the reason for the reject.
    fn reject_text(&self) -> &str;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// Free-form text explaining the reason for the reject.
    fn set_reject_text(&mut self, value: &str) -> &mut Self;

    fn copy_to(&self, to: &mut impl MarketDepthReject) {
        to.set_symbol_id(self.symbol_id());
        to.set_reject_text(self.reject_text());
    }
}

/// The MarketDepthRejectVLS message is sent by the Server to the Client to
/// reject a MarketDepthRequestVLS message for any reason.
pub struct MarketDepthRejectVLS {
    data: *const MarketDepthRejectVLSData,
    capacity: usize
}

pub struct MarketDepthRejectVLSUnsafe {
    data: *const MarketDepthRejectVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct MarketDepthRejectVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    symbol_id: u32,
    reject_text: VLS,
}

/// The MarketDepthRejectVLS message is sent by the Server to the Client to
/// reject a MarketDepthRequestVLS message for any reason.
pub struct MarketDepthRejectFixed {
    data: *const MarketDepthRejectFixedData
}

pub struct MarketDepthRejectFixedUnsafe {
    data: *const MarketDepthRejectFixedData
}

#[repr(packed, C)]
pub struct MarketDepthRejectFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    reject_text: [u8; 96],
}

impl MarketDepthRejectVLSData {
    pub fn new() -> Self {
        Self {
            size: 16u16.to_le(),
            r#type: MARKET_DEPTH_REJECT.to_le(),
            base_size: 16u16.to_le(),
            symbol_id: 0u32.to_le(),
            reject_text: crate::message::VLS::new(),
        }
    }
}

impl MarketDepthRejectFixedData {
    pub fn new() -> Self {
        Self {
            size: 104u16.to_le(),
            r#type: MARKET_DEPTH_REJECT.to_le(),
            symbol_id: 0u32,
            reject_text: [0; 96],
        }
    }
}

unsafe impl Send for MarketDepthRejectFixed {}
unsafe impl Send for MarketDepthRejectFixedUnsafe {}
unsafe impl Send for MarketDepthRejectFixedData {}
unsafe impl Send for MarketDepthRejectVLS {}
unsafe impl Send for MarketDepthRejectVLSUnsafe {}
unsafe impl Send for MarketDepthRejectVLSData {}

impl Drop for MarketDepthRejectFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthRejectFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthRejectVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthRejectVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDepthRejectFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthRejectFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthRejectVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthRejectVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDepthRejectFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthRejectFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthRejectVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthRejectVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDepthRejectFixed {
    type Target = MarketDepthRejectFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRejectFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthRejectFixedUnsafe {
    type Target = MarketDepthRejectFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRejectFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthRejectVLS {
    type Target = MarketDepthRejectVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRejectVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthRejectVLSUnsafe {
    type Target = MarketDepthRejectVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthRejectVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDepthRejectFixed {
    type Safe = MarketDepthRejectFixed;
    type Unsafe = MarketDepthRejectFixedUnsafe;
    type Data = MarketDepthRejectFixedData;
    const BASE_SIZE: usize = 104;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRejectFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthRejectFixedData
        }
    }

}

impl crate::Message for MarketDepthRejectFixedUnsafe {
    type Safe = MarketDepthRejectFixed;
    type Unsafe = MarketDepthRejectFixedUnsafe;
    type Data = MarketDepthRejectFixedData;
    const BASE_SIZE: usize = 104;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRejectFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthRejectFixedData
        }
    }

}

impl crate::Message for MarketDepthRejectVLS {
    type Safe = MarketDepthRejectVLS;
    type Unsafe = MarketDepthRejectVLSUnsafe;
    type Data = MarketDepthRejectVLSData;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRejectVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const MarketDepthRejectVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for MarketDepthRejectVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const MarketDepthRejectVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for MarketDepthRejectVLSUnsafe {
    type Safe = MarketDepthRejectVLS;
    type Unsafe = MarketDepthRejectVLSUnsafe;
    type Data = MarketDepthRejectVLSData;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDepthRejectVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const MarketDepthRejectVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for MarketDepthRejectVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const MarketDepthRejectVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// The MarketDepthRejectVLS message is sent by the Server to the Client to
/// reject a MarketDepthRequestVLS message for any reason.
impl MarketDepthReject for MarketDepthRejectVLS {
    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// Free-form text explaining the reason for the reject.
    fn reject_text(&self) -> &str {
        crate::get_vls(self, self.reject_text)
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    /// Free-form text explaining the reason for the reject.
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        self.reject_text = crate::set_vls(self, self.reject_text, value);
        self
    }

}

/// The MarketDepthRejectVLS message is sent by the Server to the Client to
/// reject a MarketDepthRequestVLS message for any reason.
impl MarketDepthReject for MarketDepthRejectVLSUnsafe {
    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(12) {
            0u32.to_le()
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// Free-form text explaining the reason for the reject.
    fn reject_text(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            crate::get_vls(self, self.reject_text)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.symbol_id = value.to_le();
        }
        self
    }


    /// Free-form text explaining the reason for the reject.
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.reject_text = crate::set_vls(self, self.reject_text, value);
        }
        self
    }

}

/// The MarketDepthRejectVLS message is sent by the Server to the Client to
/// reject a MarketDepthRequestVLS message for any reason.
impl MarketDepthReject for MarketDepthRejectFixed {
    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// Free-form text explaining the reason for the reject.
    fn reject_text(&self) -> &str {
        crate::get_fixed(&self.reject_text[..])
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    /// Free-form text explaining the reason for the reject.
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.reject_text[..], value);
        self
    }

}

/// The MarketDepthRejectVLS message is sent by the Server to the Client to
/// reject a MarketDepthRequestVLS message for any reason.
impl MarketDepthReject for MarketDepthRejectFixedUnsafe {
    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// Free-form text explaining the reason for the reject.
    fn reject_text(&self) -> &str {
        if self.is_out_of_bounds(104) {
            ""
        } else {
            crate::get_fixed(&self.reject_text[..])
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }


    /// Free-form text explaining the reason for the reject.
    fn set_reject_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            crate::set_fixed(&mut self.reject_text[..], value);
        }
        self
    }

}

