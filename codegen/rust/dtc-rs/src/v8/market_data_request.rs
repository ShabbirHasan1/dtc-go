// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const MARKET_DATA_REQUEST_VLS_SIZE: usize = 28;

pub(crate) const MARKET_DATA_REQUEST_FIXED_SIZE: usize = 96;

/// size                                           u16                = MarketDataRequestVLSSize  (28)
/// type                                           u16                = MARKET_DATA_REQUEST  (101)
/// base_size                                      u16                = MarketDataRequestVLSSize  (28)
/// request_action                                 RequestActionEnum  = SUBSCRIBE  (1)
/// symbol_id                                      u32                = 0
/// symbol                                         string             = ""
/// exchange                                       string             = ""
/// interval_for_snapshot_updates_in_milliseconds  u32                = 0
pub(crate) const MARKET_DATA_REQUEST_VLS_DEFAULT: [u8; 28] = [
    28, 0, 101, 0, 28, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                                           u16                = MarketDataRequestFixedSize  (96)
/// type                                           u16                = MARKET_DATA_REQUEST  (101)
/// request_action                                 RequestActionEnum  = SUBSCRIBE  (1)
/// symbol_id                                      u32                = 0
/// symbol                                         string64           = ""
/// exchange                                       string16           = ""
/// interval_for_snapshot_updates_in_milliseconds  u32                = 0
pub(crate) const MARKET_DATA_REQUEST_FIXED_DEFAULT: [u8; 96] = [
    96, 0, 101, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
];

/// The MarketDataRequestVLS message will subscribe to market data for a particular
/// Symbol or request a market data snapshot.
///
/// The Server can also send market depth data in response to this message
/// and not require a MarketDepthRequestVLS.
pub trait MarketDataRequest: Message {
    type Safe: MarketDataRequest;
    type Unsafe: MarketDataRequest;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn request_action(&self) -> RequestActionEnum;

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn symbol_id(&self) -> u32;

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn symbol(&self) -> &str;

    /// Optional Exchange. Not set when unsubscribing.
    fn exchange(&self) -> &str;

    fn interval_for_snapshot_updates_in_milliseconds(&self) -> u32;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self;

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// Optional Exchange. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    fn set_interval_for_snapshot_updates_in_milliseconds(&mut self, value: u32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDataRequest) {
        to.set_request_action(self.request_action());
        to.set_symbol_id(self.symbol_id());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_interval_for_snapshot_updates_in_milliseconds(
            self.interval_for_snapshot_updates_in_milliseconds(),
        );
    }
}

/// The MarketDataRequestVLS message will subscribe to market data for a particular
/// Symbol or request a market data snapshot.
///
/// The Server can also send market depth data in response to this message
/// and not require a MarketDepthRequestVLS.
pub struct MarketDataRequestVLS {
    data: *const MarketDataRequestVLSData,
    capacity: usize,
}

pub struct MarketDataRequestVLSUnsafe {
    data: *const MarketDataRequestVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct MarketDataRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_action: RequestActionEnum,
    symbol_id: u32,
    symbol: VLS,
    exchange: VLS,
    interval_for_snapshot_updates_in_milliseconds: u32,
}

/// The MarketDataRequestVLS message will subscribe to market data for a particular
/// Symbol or request a market data snapshot.
///
/// The Server can also send market depth data in response to this message
/// and not require a MarketDepthRequestVLS.
pub struct MarketDataRequestFixed {
    data: *const MarketDataRequestFixedData,
}

pub struct MarketDataRequestFixedUnsafe {
    data: *const MarketDataRequestFixedData,
}

#[repr(packed(8), C)]
pub struct MarketDataRequestFixedData {
    size: u16,
    r#type: u16,
    request_action: RequestActionEnum,
    symbol_id: u32,
    symbol: [u8; 64],
    exchange: [u8; 16],
    interval_for_snapshot_updates_in_milliseconds: u32,
}

impl MarketDataRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 28u16.to_le(),
            r#type: MARKET_DATA_REQUEST.to_le(),
            base_size: 28u16.to_le(),
            request_action: RequestActionEnum::Subscribe.to_le(),
            symbol_id: 0u32,
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            interval_for_snapshot_updates_in_milliseconds: 0u32,
        }
    }
}

impl MarketDataRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 96u16.to_le(),
            r#type: MARKET_DATA_REQUEST.to_le(),
            request_action: RequestActionEnum::Subscribe.to_le(),
            symbol_id: 0u32,
            symbol: [0; 64],
            exchange: [0; 16],
            interval_for_snapshot_updates_in_milliseconds: 0u32,
        }
    }
}

unsafe impl Send for MarketDataRequestFixed {}
unsafe impl Send for MarketDataRequestFixedUnsafe {}
unsafe impl Send for MarketDataRequestFixedData {}
unsafe impl Send for MarketDataRequestVLS {}
unsafe impl Send for MarketDataRequestVLSUnsafe {}
unsafe impl Send for MarketDataRequestVLSData {}

impl Drop for MarketDataRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataRequestFixed {
    type Target = MarketDataRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataRequestFixedUnsafe {
    type Target = MarketDataRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataRequestVLS {
    type Target = MarketDataRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataRequestVLSUnsafe {
    type Target = MarketDataRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataRequestFixed {
    type Data = MarketDataRequestFixedData;

    const BASE_SIZE: usize = 96;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataRequestFixedData,
        }
    }
}
impl crate::Message for MarketDataRequestFixedUnsafe {
    type Data = MarketDataRequestFixedData;

    const BASE_SIZE: usize = 96;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataRequestFixedData,
        }
    }
}
impl crate::Message for MarketDataRequestVLS {
    type Data = MarketDataRequestVLSData;

    const BASE_SIZE: usize = 28;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const MarketDataRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for MarketDataRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const MarketDataRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for MarketDataRequestVLSUnsafe {
    type Data = MarketDataRequestVLSData;

    const BASE_SIZE: usize = 28;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const MarketDataRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for MarketDataRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const MarketDataRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// The MarketDataRequestVLS message will subscribe to market data for a particular
/// Symbol or request a market data snapshot.
///
/// The Server can also send market depth data in response to this message
/// and not require a MarketDepthRequestVLS.
impl MarketDataRequest for MarketDataRequestVLS {
    type Safe = MarketDataRequestVLS;
    type Unsafe = MarketDataRequestVLSUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn request_action(&self) -> RequestActionEnum {
        RequestActionEnum::from_le(self.request_action)
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    fn interval_for_snapshot_updates_in_milliseconds(&self) -> u32 {
        u32::from_le(self.interval_for_snapshot_updates_in_milliseconds)
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    fn set_interval_for_snapshot_updates_in_milliseconds(&mut self, value: u32) -> &mut Self {
        self.interval_for_snapshot_updates_in_milliseconds = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// The MarketDataRequestVLS message will subscribe to market data for a particular
/// Symbol or request a market data snapshot.
///
/// The Server can also send market depth data in response to this message
/// and not require a MarketDepthRequestVLS.
impl MarketDataRequest for MarketDataRequestVLSUnsafe {
    type Safe = MarketDataRequestVLS;
    type Unsafe = MarketDataRequestVLSUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn request_action(&self) -> RequestActionEnum {
        if self.is_out_of_bounds(12) {
            RequestActionEnum::Subscribe.to_le()
        } else {
            RequestActionEnum::from_le(self.request_action)
        }
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(16) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    fn interval_for_snapshot_updates_in_milliseconds(&self) -> u32 {
        if self.is_out_of_bounds(28) {
            0u32
        } else {
            u32::from_le(self.interval_for_snapshot_updates_in_milliseconds)
        }
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    fn set_interval_for_snapshot_updates_in_milliseconds(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.interval_for_snapshot_updates_in_milliseconds = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// The MarketDataRequestVLS message will subscribe to market data for a particular
/// Symbol or request a market data snapshot.
///
/// The Server can also send market depth data in response to this message
/// and not require a MarketDepthRequestVLS.
impl MarketDataRequest for MarketDataRequestFixed {
    type Safe = MarketDataRequestFixed;
    type Unsafe = MarketDataRequestFixedUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn request_action(&self) -> RequestActionEnum {
        RequestActionEnum::from_le(self.request_action)
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    fn interval_for_snapshot_updates_in_milliseconds(&self) -> u32 {
        u32::from_le(self.interval_for_snapshot_updates_in_milliseconds)
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    fn set_interval_for_snapshot_updates_in_milliseconds(&mut self, value: u32) -> &mut Self {
        self.interval_for_snapshot_updates_in_milliseconds = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// The MarketDataRequestVLS message will subscribe to market data for a particular
/// Symbol or request a market data snapshot.
///
/// The Server can also send market depth data in response to this message
/// and not require a MarketDepthRequestVLS.
impl MarketDataRequest for MarketDataRequestFixedUnsafe {
    type Safe = MarketDataRequestFixed;
    type Unsafe = MarketDataRequestFixedUnsafe;

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn request_action(&self) -> RequestActionEnum {
        if self.is_out_of_bounds(8) {
            RequestActionEnum::Subscribe.to_le()
        } else {
            RequestActionEnum::from_le(self.request_action)
        }
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(12) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(76) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(92) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    fn interval_for_snapshot_updates_in_milliseconds(&self) -> u32 {
        if self.is_out_of_bounds(96) {
            0u32
        } else {
            u32::from_le(self.interval_for_snapshot_updates_in_milliseconds)
        }
    }

    /// This needs to be set to SUBSCRIBE to subscribe to market data for the
    /// Symbol from the Server. The Server will respond with an initial MarketDataSnapshotFixed
    /// message and then provide MARKET_DATA_UPDATE_* updates as necessary.
    ///
    /// To unsubscribe, use UNSUBSCRIBE.
    ///
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    /// To request only a MarketDataSnapshotFixed message, set this to SNAPSHOT.
    fn set_request_action(&mut self, value: RequestActionEnum) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_action = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// This is the identifier which will be used in all of the market data response
    /// messages. This identifier is used so that the Symbol and Exchange do not
    /// have to be passed back in response messages from the Server. This makes
    /// the market data feed bandwidth efficient.
    ///
    /// If the Server receives a MarketDataRequestVLS for a Symbol and Exchange
    /// to subscribe to data for, that is currently subscribed to and this SymbolID
    /// is different, then the Server needs to reject it.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The Symbol that market data is requested for. Not set when unsubscribing.
    /// The Symbol that market data is requested for. Not set when unsubscribing.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(76) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    /// Optional Exchange. Not set when unsubscribing.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(92) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    fn set_interval_for_snapshot_updates_in_milliseconds(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.interval_for_snapshot_updates_in_milliseconds = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                96usize,
                core::mem::size_of::<MarketDataRequestFixedData>(),
                "MarketDataRequestFixedData sizeof expected {:} but was {:}",
                96usize,
                core::mem::size_of::<MarketDataRequestFixedData>()
            );
            assert_eq!(
                96u16,
                MarketDataRequestFixed::new().size(),
                "MarketDataRequestFixed sizeof expected {:} but was {:}",
                96u16,
                MarketDataRequestFixed::new().size(),
            );
            assert_eq!(
                MARKET_DATA_REQUEST,
                MarketDataRequestFixed::new().r#type(),
                "MarketDataRequestFixed type expected {:} but was {:}",
                MARKET_DATA_REQUEST,
                MarketDataRequestFixed::new().r#type(),
            );
            assert_eq!(
                101u16,
                MarketDataRequestFixed::new().r#type(),
                "MarketDataRequestFixed type expected {:} but was {:}",
                101u16,
                MarketDataRequestFixed::new().r#type(),
            );
            let d = MarketDataRequestFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
                "request_action offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                76usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                76usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                92usize,
                (core::ptr::addr_of!(d.interval_for_snapshot_updates_in_milliseconds) as usize) - p,
                "interval_for_snapshot_updates_in_milliseconds offset expected {:} but was {:}",
                92usize,
                (core::ptr::addr_of!(d.interval_for_snapshot_updates_in_milliseconds) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                28usize,
                core::mem::size_of::<MarketDataRequestVLSData>(),
                "MarketDataRequestVLSData sizeof expected {:} but was {:}",
                28usize,
                core::mem::size_of::<MarketDataRequestVLSData>()
            );
            assert_eq!(
                28u16,
                MarketDataRequestVLS::new().size(),
                "MarketDataRequestVLS sizeof expected {:} but was {:}",
                28u16,
                MarketDataRequestVLS::new().size(),
            );
            assert_eq!(
                MARKET_DATA_REQUEST,
                MarketDataRequestVLS::new().r#type(),
                "MarketDataRequestVLS type expected {:} but was {:}",
                MARKET_DATA_REQUEST,
                MarketDataRequestVLS::new().r#type(),
            );
            assert_eq!(
                101u16,
                MarketDataRequestVLS::new().r#type(),
                "MarketDataRequestVLS type expected {:} but was {:}",
                101u16,
                MarketDataRequestVLS::new().r#type(),
            );
            let d = MarketDataRequestVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
                "request_action offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_action) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.interval_for_snapshot_updates_in_milliseconds) as usize) - p,
                "interval_for_snapshot_updates_in_milliseconds offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.interval_for_snapshot_updates_in_milliseconds) as usize) - p,
            );
        }
    }
}
