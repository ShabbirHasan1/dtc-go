// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const ADD_CORRECTING_ORDER_FILL_VLS_SIZE: usize = 56;

pub(crate) const ADD_CORRECTING_ORDER_FILL_FIXED_SIZE: usize = 216;

/// size             u16          = AddCorrectingOrderFillVLSSize  (56)
/// type             u16          = ADD_CORRECTING_ORDER_FILL  (309)
/// base_size        u16          = AddCorrectingOrderFillVLSSize  (56)
/// symbol           string       = ""
/// exchange         string       = ""
/// trade_account    string       = ""
/// client_order_id  string       = ""
/// buy_sell         BuySellEnum  = BUY_SELL_UNSET  (0)
/// fill_price       f64          = 0
/// fill_quantity    f64          = 0
/// free_form_text   string       = ""
pub(crate) const ADD_CORRECTING_ORDER_FILL_VLS_DEFAULT: [u8; 56] = [
    56, 0, 53, 1, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size             u16          = AddCorrectingOrderFillFixedSize  (216)
/// type             u16          = ADD_CORRECTING_ORDER_FILL  (309)
/// symbol           string64     = ""
/// exchange         string16     = ""
/// trade_account    string32     = ""
/// client_order_id  string32     = ""
/// buy_sell         BuySellEnum  = BUY_SELL_UNSET  (0)
/// fill_price       f64          = 0
/// fill_quantity    f64          = 0
/// free_form_text   string48     = ""
pub(crate) const ADD_CORRECTING_ORDER_FILL_FIXED_DEFAULT: [u8; 216] = [
    216, 0, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait AddCorrectingOrderFill: Message {
    type Safe: AddCorrectingOrderFill;
    type Unsafe: AddCorrectingOrderFill;

    fn symbol(&self) -> &str;

    fn exchange(&self) -> &str;

    fn trade_account(&self) -> &str;

    fn client_order_id(&self) -> &str;

    fn buy_sell(&self) -> BuySellEnum;

    fn fill_price(&self) -> f64;

    fn fill_quantity(&self) -> f64;

    fn free_form_text(&self) -> &str;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_exchange(&mut self, value: &str) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_client_order_id(&mut self, value: &str) -> &mut Self;

    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self;

    fn set_fill_price(&mut self, value: f64) -> &mut Self;

    fn set_fill_quantity(&mut self, value: f64) -> &mut Self;

    fn set_free_form_text(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl AddCorrectingOrderFill) {
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_trade_account(self.trade_account());
        to.set_client_order_id(self.client_order_id());
        to.set_buy_sell(self.buy_sell());
        to.set_fill_price(self.fill_price());
        to.set_fill_quantity(self.fill_quantity());
        to.set_free_form_text(self.free_form_text());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct AddCorrectingOrderFillVLS {
    data: *const AddCorrectingOrderFillVLSData,
    capacity: usize,
}

pub struct AddCorrectingOrderFillVLSUnsafe {
    data: *const AddCorrectingOrderFillVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct AddCorrectingOrderFillVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    symbol: VLS,
    exchange: VLS,
    trade_account: VLS,
    client_order_id: VLS,
    buy_sell: BuySellEnum,
    fill_price: f64,
    fill_quantity: f64,
    free_form_text: VLS,
}

pub struct AddCorrectingOrderFillFixed {
    data: *const AddCorrectingOrderFillFixedData,
}

pub struct AddCorrectingOrderFillFixedUnsafe {
    data: *const AddCorrectingOrderFillFixedData,
}

#[repr(packed(8), C)]
pub struct AddCorrectingOrderFillFixedData {
    size: u16,
    r#type: u16,
    symbol: [u8; 64],
    exchange: [u8; 16],
    trade_account: [u8; 32],
    client_order_id: [u8; 32],
    buy_sell: BuySellEnum,
    fill_price: f64,
    fill_quantity: f64,
    free_form_text: [u8; 48],
}

impl AddCorrectingOrderFillVLSData {
    pub fn new() -> Self {
        Self {
            size: 56u16.to_le(),
            r#type: ADD_CORRECTING_ORDER_FILL.to_le(),
            base_size: 56u16.to_le(),
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
            client_order_id: crate::message::VLS::new(),
            buy_sell: BuySellEnum::BuySellUnset.to_le(),
            fill_price: 0.0,
            fill_quantity: 0.0,
            free_form_text: crate::message::VLS::new(),
        }
    }
}

impl AddCorrectingOrderFillFixedData {
    pub fn new() -> Self {
        Self {
            size: 216u16.to_le(),
            r#type: ADD_CORRECTING_ORDER_FILL.to_le(),
            symbol: [0; 64],
            exchange: [0; 16],
            trade_account: [0; 32],
            client_order_id: [0; 32],
            buy_sell: BuySellEnum::BuySellUnset.to_le(),
            fill_price: 0.0f64,
            fill_quantity: 0.0f64,
            free_form_text: [0; 48],
        }
    }
}

unsafe impl Send for AddCorrectingOrderFillFixed {}
unsafe impl Send for AddCorrectingOrderFillFixedUnsafe {}
unsafe impl Send for AddCorrectingOrderFillFixedData {}
unsafe impl Send for AddCorrectingOrderFillVLS {}
unsafe impl Send for AddCorrectingOrderFillVLSUnsafe {}
unsafe impl Send for AddCorrectingOrderFillVLSData {}

impl Drop for AddCorrectingOrderFillFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for AddCorrectingOrderFillFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for AddCorrectingOrderFillVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for AddCorrectingOrderFillVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for AddCorrectingOrderFillFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for AddCorrectingOrderFillFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for AddCorrectingOrderFillVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for AddCorrectingOrderFillVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for AddCorrectingOrderFillFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for AddCorrectingOrderFillFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for AddCorrectingOrderFillVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for AddCorrectingOrderFillVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for AddCorrectingOrderFillFixed {
    type Target = AddCorrectingOrderFillFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AddCorrectingOrderFillFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for AddCorrectingOrderFillFixedUnsafe {
    type Target = AddCorrectingOrderFillFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AddCorrectingOrderFillFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for AddCorrectingOrderFillVLS {
    type Target = AddCorrectingOrderFillVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AddCorrectingOrderFillVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for AddCorrectingOrderFillVLSUnsafe {
    type Target = AddCorrectingOrderFillVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AddCorrectingOrderFillVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for AddCorrectingOrderFillFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillFixed(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl core::fmt::Debug for AddCorrectingOrderFillFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillFixed(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl core::fmt::Display for AddCorrectingOrderFillFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillFixedUnsafe(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl core::fmt::Debug for AddCorrectingOrderFillFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillFixedUnsafe(size: {}, type: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl core::fmt::Display for AddCorrectingOrderFillVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillVLS(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl core::fmt::Debug for AddCorrectingOrderFillVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillVLS(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl core::fmt::Display for AddCorrectingOrderFillVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillVLSUnsafe(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl core::fmt::Debug for AddCorrectingOrderFillVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("AddCorrectingOrderFillVLSUnsafe(size: {}, type: {}, base_size: {}, symbol: \"{}\", exchange: \"{}\", trade_account: \"{}\", client_order_id: \"{}\", buy_sell: {}, fill_price: {}, fill_quantity: {}, free_form_text: \"{}\")", self.size(), self.r#type(), self.base_size(), self.symbol(), self.exchange(), self.trade_account(), self.client_order_id(), self.buy_sell(), self.fill_price(), self.fill_quantity(), self.free_form_text()).as_str())
    }
}

impl crate::Message for AddCorrectingOrderFillFixed {
    type Data = AddCorrectingOrderFillFixedData;

    const TYPE: u16 = ADD_CORRECTING_ORDER_FILL;
    const BASE_SIZE: usize = 216;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AddCorrectingOrderFillFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const AddCorrectingOrderFillFixedData,
        }
    }
}
impl crate::Message for AddCorrectingOrderFillFixedUnsafe {
    type Data = AddCorrectingOrderFillFixedData;

    const TYPE: u16 = ADD_CORRECTING_ORDER_FILL;
    const BASE_SIZE: usize = 216;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AddCorrectingOrderFillFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const AddCorrectingOrderFillFixedData,
        }
    }
}
impl crate::Message for AddCorrectingOrderFillVLS {
    type Data = AddCorrectingOrderFillVLSData;

    const TYPE: u16 = ADD_CORRECTING_ORDER_FILL;
    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AddCorrectingOrderFillVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const AddCorrectingOrderFillVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for AddCorrectingOrderFillVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const AddCorrectingOrderFillVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for AddCorrectingOrderFillVLSUnsafe {
    type Data = AddCorrectingOrderFillVLSData;

    const TYPE: u16 = ADD_CORRECTING_ORDER_FILL;
    const BASE_SIZE: usize = 56;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AddCorrectingOrderFillVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const AddCorrectingOrderFillVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for AddCorrectingOrderFillVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const AddCorrectingOrderFillVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl AddCorrectingOrderFill for AddCorrectingOrderFillVLS {
    type Safe = AddCorrectingOrderFillVLS;
    type Unsafe = AddCorrectingOrderFillVLSUnsafe;

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn client_order_id(&self) -> &str {
        get_vls(self, self.client_order_id)
    }

    fn buy_sell(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell)
    }

    fn fill_price(&self) -> f64 {
        f64_le(self.fill_price)
    }

    fn fill_quantity(&self) -> f64 {
        f64_le(self.fill_quantity)
    }

    fn free_form_text(&self) -> &str {
        get_vls(self, self.free_form_text)
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        self.client_order_id = set_vls(self, self.client_order_id, value);
        self
    }

    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_fill_price(&mut self, value: f64) -> &mut Self {
        self.fill_price = f64_le(value);
        self
    }

    fn set_fill_quantity(&mut self, value: f64) -> &mut Self {
        self.fill_quantity = f64_le(value);
        self
    }

    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        self.free_form_text = set_vls(self, self.free_form_text, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl AddCorrectingOrderFill for AddCorrectingOrderFillVLSUnsafe {
    type Safe = AddCorrectingOrderFillVLS;
    type Unsafe = AddCorrectingOrderFillVLSUnsafe;

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(22) {
            ""
        } else {
            get_vls(self, self.client_order_id)
        }
    }

    fn buy_sell(&self) -> BuySellEnum {
        if self.is_out_of_bounds(28) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell)
        }
    }

    fn fill_price(&self) -> f64 {
        if self.is_out_of_bounds(40) {
            0.0
        } else {
            f64_le(self.fill_price)
        }
    }

    fn fill_quantity(&self) -> f64 {
        if self.is_out_of_bounds(48) {
            0.0
        } else {
            f64_le(self.fill_quantity)
        }
    }

    fn free_form_text(&self) -> &str {
        if self.is_out_of_bounds(52) {
            ""
        } else {
            get_vls(self, self.free_form_text)
        }
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(22) {
            self.client_order_id = set_vls(self, self.client_order_id, value);
        }
        self
    }

    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(28) {
            self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_fill_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.fill_price = f64_le(value);
        }
        self
    }

    fn set_fill_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.fill_quantity = f64_le(value);
        }
        self
    }

    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.free_form_text = set_vls(self, self.free_form_text, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl AddCorrectingOrderFill for AddCorrectingOrderFillFixed {
    type Safe = AddCorrectingOrderFillFixed;
    type Unsafe = AddCorrectingOrderFillFixedUnsafe;

    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    fn client_order_id(&self) -> &str {
        get_fixed(&self.client_order_id[..])
    }

    fn buy_sell(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.buy_sell)
    }

    fn fill_price(&self) -> f64 {
        f64_le(self.fill_price)
    }

    fn fill_quantity(&self) -> f64 {
        f64_le(self.fill_quantity)
    }

    fn free_form_text(&self) -> &str {
        get_fixed(&self.free_form_text[..])
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.client_order_id[..], value);
        self
    }

    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_fill_price(&mut self, value: f64) -> &mut Self {
        self.fill_price = f64_le(value);
        self
    }

    fn set_fill_quantity(&mut self, value: f64) -> &mut Self {
        self.fill_quantity = f64_le(value);
        self
    }

    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.free_form_text[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl AddCorrectingOrderFill for AddCorrectingOrderFillFixedUnsafe {
    type Safe = AddCorrectingOrderFillFixed;
    type Unsafe = AddCorrectingOrderFillFixedUnsafe;

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(68) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(84) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(116) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(148) {
            ""
        } else {
            get_fixed(&self.client_order_id[..])
        }
    }

    fn buy_sell(&self) -> BuySellEnum {
        if self.is_out_of_bounds(152) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.buy_sell)
        }
    }

    fn fill_price(&self) -> f64 {
        if self.is_out_of_bounds(160) {
            0.0f64
        } else {
            f64_le(self.fill_price)
        }
    }

    fn fill_quantity(&self) -> f64 {
        if self.is_out_of_bounds(168) {
            0.0f64
        } else {
            f64_le(self.fill_quantity)
        }
    }

    fn free_form_text(&self) -> &str {
        if self.is_out_of_bounds(216) {
            ""
        } else {
            get_fixed(&self.free_form_text[..])
        }
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(68) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(84) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(116) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(148) {
            set_fixed(&mut self.client_order_id[..], value);
        }
        self
    }

    fn set_buy_sell(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(152) {
            self.buy_sell = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_fill_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(160) {
            self.fill_price = f64_le(value);
        }
        self
    }

    fn set_fill_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(168) {
            self.fill_quantity = f64_le(value);
        }
        self
    }

    fn set_free_form_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(216) {
            set_fixed(&mut self.free_form_text[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                216usize,
                core::mem::size_of::<AddCorrectingOrderFillFixedData>(),
                "AddCorrectingOrderFillFixedData sizeof expected {:} but was {:}",
                216usize,
                core::mem::size_of::<AddCorrectingOrderFillFixedData>()
            );
            assert_eq!(
                216u16,
                AddCorrectingOrderFillFixed::new().size(),
                "AddCorrectingOrderFillFixed sizeof expected {:} but was {:}",
                216u16,
                AddCorrectingOrderFillFixed::new().size(),
            );
            assert_eq!(
                ADD_CORRECTING_ORDER_FILL,
                AddCorrectingOrderFillFixed::new().r#type(),
                "AddCorrectingOrderFillFixed type expected {:} but was {:}",
                ADD_CORRECTING_ORDER_FILL,
                AddCorrectingOrderFillFixed::new().r#type(),
            );
            assert_eq!(
                309u16,
                AddCorrectingOrderFillFixed::new().r#type(),
                "AddCorrectingOrderFillFixed type expected {:} but was {:}",
                309u16,
                AddCorrectingOrderFillFixed::new().r#type(),
            );
            let d = AddCorrectingOrderFillFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                68usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                68usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                84usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                84usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                116usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                116usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                148usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
                "buy_sell offset expected {:} but was {:}",
                148usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
            );
            assert_eq!(
                152usize,
                (core::ptr::addr_of!(d.fill_price) as usize) - p,
                "fill_price offset expected {:} but was {:}",
                152usize,
                (core::ptr::addr_of!(d.fill_price) as usize) - p,
            );
            assert_eq!(
                160usize,
                (core::ptr::addr_of!(d.fill_quantity) as usize) - p,
                "fill_quantity offset expected {:} but was {:}",
                160usize,
                (core::ptr::addr_of!(d.fill_quantity) as usize) - p,
            );
            assert_eq!(
                168usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
                "free_form_text offset expected {:} but was {:}",
                168usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                56usize,
                core::mem::size_of::<AddCorrectingOrderFillVLSData>(),
                "AddCorrectingOrderFillVLSData sizeof expected {:} but was {:}",
                56usize,
                core::mem::size_of::<AddCorrectingOrderFillVLSData>()
            );
            assert_eq!(
                56u16,
                AddCorrectingOrderFillVLS::new().size(),
                "AddCorrectingOrderFillVLS sizeof expected {:} but was {:}",
                56u16,
                AddCorrectingOrderFillVLS::new().size(),
            );
            assert_eq!(
                ADD_CORRECTING_ORDER_FILL,
                AddCorrectingOrderFillVLS::new().r#type(),
                "AddCorrectingOrderFillVLS type expected {:} but was {:}",
                ADD_CORRECTING_ORDER_FILL,
                AddCorrectingOrderFillVLS::new().r#type(),
            );
            assert_eq!(
                309u16,
                AddCorrectingOrderFillVLS::new().r#type(),
                "AddCorrectingOrderFillVLS type expected {:} but was {:}",
                309u16,
                AddCorrectingOrderFillVLS::new().r#type(),
            );
            let d = AddCorrectingOrderFillVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
                "buy_sell offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.fill_price) as usize) - p,
                "fill_price offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.fill_price) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.fill_quantity) as usize) - p,
                "fill_quantity offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.fill_quantity) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
                "free_form_text offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.free_form_text) as usize) - p,
            );
        }
    }
}
