// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const TRADE_ACTIVITY_DATA_VLS_SIZE: usize = 280;

/// size                                  u16     = TradeActivityDataVLSSize  (280)
/// type                                  u16     = TRADE_ACTIVITY_DATA  (10114)
/// base_size                             u16     = TradeActivityDataVLSSize  (280)
/// activity_type                         u8      = 0
/// data_date_time_utc                    i64     = 0
/// symbol                                string  = ""
/// order_action_source                   string  = ""
/// internal_order_id                     u64     = 0
/// service_order_id                      string  = ""
/// exchange_order_id                     string  = ""
/// fix_client_order_id                   string  = ""
/// order_type_name                       string  = ""
/// quantity                              f64     = 0
/// buy_sell                              u8      = 0
/// price1                                f64     = 0
/// price2                                f64     = 0
/// new_order_status                      u8      = 0
/// fill_price                            f64     = 0.000000
/// order_filled_quantity                 f64     = 0
/// high_price_during_position            f64     = 0
/// low_price_during_position             f64     = 0
/// last_price_during_position            f64     = 0
/// trade_account                         string  = ""
/// parent_internal_order_id              u64     = 0
/// open_close                            u8      = 0
/// is_simulated                          bool    = false
/// is_automated_order                    bool    = false
/// is_chart_replaying                    bool    = false
/// fill_execution_service_id             string  = ""
/// position_quantity                     f64     = 0
/// source_chart_number                   i32     = 0
/// source_chartbook_file_name            string  = ""
/// time_in_force                         i32     = 0
/// symbol_service_code                   string  = ""
/// note                                  string  = ""
/// originating_client_username           string  = ""
/// trade_account_balance                 f64     = 0
/// supports_position_quantity_field      u8      = 0
/// is_billable                           bool    = false
/// quantity_for_billing                  i32     = 0
/// order_routing_service_code            string  = ""
/// sub_account_identifier                u32     = 0
/// audit_trail_transact_date_time_utc    i64     = 0
/// audit_trail_message_direction         i32     = 0
/// audit_trail_operator_id               string  = ""
/// audit_trail_self_match_prevention_id  string  = ""
/// audit_trail_session_id                string  = ""
/// audit_trail_executing_firm_id         string  = ""
/// audit_trail_fix_message_type          string  = ""
/// audit_trail_customer_type_indicator   i16     = 0
/// audit_trail_customer_or_firm          i16     = 0
/// audit_trail_execution_report_id       string  = ""
/// audit_trail_spread_leg_link_id        string  = ""
/// audit_trail_security_desc             string  = ""
/// audit_trail_market_segment_id         string  = ""
/// audit_trail_ifm_flag                  u8      = 0
/// audit_trail_display_quantity          f64     = 0
/// audit_trail_country_of_origin         string  = ""
/// audit_trail_fill_quantity             f64     = 0
/// audit_trail_remaining_quantity        f64     = 0
/// audit_trail_aggressor_flag            u8      = 0
/// audit_trail_source_of_cancellation    i32     = 0
/// audit_trail_ord_rej_reason            string  = ""
/// is_snapshot                           bool    = false
/// is_first_message_in_batch             bool    = false
/// is_last_message_in_batch              bool    = false
pub(crate) const TRADE_ACTIVITY_DATA_VLS_DEFAULT: [u8; 280] = [
    24, 1, 130, 39, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait TradeActivityData: Message {
    type Safe: TradeActivityData;
    type Unsafe: TradeActivityData;

    fn activity_type(&self) -> u8;

    fn data_date_time_utc(&self) -> i64;

    fn symbol(&self) -> &str;

    fn order_action_source(&self) -> &str;

    fn internal_order_id(&self) -> u64;

    fn service_order_id(&self) -> &str;

    fn exchange_order_id(&self) -> &str;

    fn fix_client_order_id(&self) -> &str;

    fn order_type_name(&self) -> &str;

    fn quantity(&self) -> f64;

    fn buy_sell(&self) -> u8;

    fn price1(&self) -> f64;

    fn price2(&self) -> f64;

    fn new_order_status(&self) -> u8;

    fn fill_price(&self) -> f64;

    fn order_filled_quantity(&self) -> f64;

    fn high_price_during_position(&self) -> f64;

    fn low_price_during_position(&self) -> f64;

    fn last_price_during_position(&self) -> f64;

    fn trade_account(&self) -> &str;

    fn parent_internal_order_id(&self) -> u64;

    fn open_close(&self) -> u8;

    fn is_simulated(&self) -> bool;

    fn is_automated_order(&self) -> bool;

    fn is_chart_replaying(&self) -> bool;

    fn fill_execution_service_id(&self) -> &str;

    fn position_quantity(&self) -> f64;

    fn source_chart_number(&self) -> i32;

    fn source_chartbook_file_name(&self) -> &str;

    fn time_in_force(&self) -> i32;

    fn symbol_service_code(&self) -> &str;

    fn note(&self) -> &str;

    fn originating_client_username(&self) -> &str;

    fn trade_account_balance(&self) -> f64;

    fn supports_position_quantity_field(&self) -> u8;

    fn is_billable(&self) -> bool;

    fn quantity_for_billing(&self) -> i32;

    fn order_routing_service_code(&self) -> &str;

    fn sub_account_identifier(&self) -> u32;

    fn audit_trail_transact_date_time_utc(&self) -> i64;

    fn audit_trail_message_direction(&self) -> i32;

    fn audit_trail_operator_id(&self) -> &str;

    fn audit_trail_self_match_prevention_id(&self) -> &str;

    fn audit_trail_session_id(&self) -> &str;

    fn audit_trail_executing_firm_id(&self) -> &str;

    fn audit_trail_fix_message_type(&self) -> &str;

    fn audit_trail_customer_type_indicator(&self) -> i16;

    fn audit_trail_customer_or_firm(&self) -> i16;

    fn audit_trail_execution_report_id(&self) -> &str;

    fn audit_trail_spread_leg_link_id(&self) -> &str;

    fn audit_trail_security_desc(&self) -> &str;

    fn audit_trail_market_segment_id(&self) -> &str;

    fn audit_trail_ifm_flag(&self) -> u8;

    fn audit_trail_display_quantity(&self) -> f64;

    fn audit_trail_country_of_origin(&self) -> &str;

    fn audit_trail_fill_quantity(&self) -> f64;

    fn audit_trail_remaining_quantity(&self) -> f64;

    fn audit_trail_aggressor_flag(&self) -> u8;

    fn audit_trail_source_of_cancellation(&self) -> i32;

    fn audit_trail_ord_rej_reason(&self) -> &str;

    fn is_snapshot(&self) -> bool;

    fn is_first_message_in_batch(&self) -> bool;

    fn is_last_message_in_batch(&self) -> bool;

    fn set_activity_type(&mut self, value: u8) -> &mut Self;

    fn set_data_date_time_utc(&mut self, value: i64) -> &mut Self;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_order_action_source(&mut self, value: &str) -> &mut Self;

    fn set_internal_order_id(&mut self, value: u64) -> &mut Self;

    fn set_service_order_id(&mut self, value: &str) -> &mut Self;

    fn set_exchange_order_id(&mut self, value: &str) -> &mut Self;

    fn set_fix_client_order_id(&mut self, value: &str) -> &mut Self;

    fn set_order_type_name(&mut self, value: &str) -> &mut Self;

    fn set_quantity(&mut self, value: f64) -> &mut Self;

    fn set_buy_sell(&mut self, value: u8) -> &mut Self;

    fn set_price1(&mut self, value: f64) -> &mut Self;

    fn set_price2(&mut self, value: f64) -> &mut Self;

    fn set_new_order_status(&mut self, value: u8) -> &mut Self;

    fn set_fill_price(&mut self, value: f64) -> &mut Self;

    fn set_order_filled_quantity(&mut self, value: f64) -> &mut Self;

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self;

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self;

    fn set_last_price_during_position(&mut self, value: f64) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_parent_internal_order_id(&mut self, value: u64) -> &mut Self;

    fn set_open_close(&mut self, value: u8) -> &mut Self;

    fn set_is_simulated(&mut self, value: bool) -> &mut Self;

    fn set_is_automated_order(&mut self, value: bool) -> &mut Self;

    fn set_is_chart_replaying(&mut self, value: bool) -> &mut Self;

    fn set_fill_execution_service_id(&mut self, value: &str) -> &mut Self;

    fn set_position_quantity(&mut self, value: f64) -> &mut Self;

    fn set_source_chart_number(&mut self, value: i32) -> &mut Self;

    fn set_source_chartbook_file_name(&mut self, value: &str) -> &mut Self;

    fn set_time_in_force(&mut self, value: i32) -> &mut Self;

    fn set_symbol_service_code(&mut self, value: &str) -> &mut Self;

    fn set_note(&mut self, value: &str) -> &mut Self;

    fn set_originating_client_username(&mut self, value: &str) -> &mut Self;

    fn set_trade_account_balance(&mut self, value: f64) -> &mut Self;

    fn set_supports_position_quantity_field(&mut self, value: u8) -> &mut Self;

    fn set_is_billable(&mut self, value: bool) -> &mut Self;

    fn set_quantity_for_billing(&mut self, value: i32) -> &mut Self;

    fn set_order_routing_service_code(&mut self, value: &str) -> &mut Self;

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self;

    fn set_audit_trail_transact_date_time_utc(&mut self, value: i64) -> &mut Self;

    fn set_audit_trail_message_direction(&mut self, value: i32) -> &mut Self;

    fn set_audit_trail_operator_id(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_self_match_prevention_id(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_session_id(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_executing_firm_id(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_fix_message_type(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_customer_type_indicator(&mut self, value: i16) -> &mut Self;

    fn set_audit_trail_customer_or_firm(&mut self, value: i16) -> &mut Self;

    fn set_audit_trail_execution_report_id(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_spread_leg_link_id(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_security_desc(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_market_segment_id(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_ifm_flag(&mut self, value: u8) -> &mut Self;

    fn set_audit_trail_display_quantity(&mut self, value: f64) -> &mut Self;

    fn set_audit_trail_country_of_origin(&mut self, value: &str) -> &mut Self;

    fn set_audit_trail_fill_quantity(&mut self, value: f64) -> &mut Self;

    fn set_audit_trail_remaining_quantity(&mut self, value: f64) -> &mut Self;

    fn set_audit_trail_aggressor_flag(&mut self, value: u8) -> &mut Self;

    fn set_audit_trail_source_of_cancellation(&mut self, value: i32) -> &mut Self;

    fn set_audit_trail_ord_rej_reason(&mut self, value: &str) -> &mut Self;

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self;

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl TradeActivityData) {
        to.set_activity_type(self.activity_type());
        to.set_data_date_time_utc(self.data_date_time_utc());
        to.set_symbol(self.symbol());
        to.set_order_action_source(self.order_action_source());
        to.set_internal_order_id(self.internal_order_id());
        to.set_service_order_id(self.service_order_id());
        to.set_exchange_order_id(self.exchange_order_id());
        to.set_fix_client_order_id(self.fix_client_order_id());
        to.set_order_type_name(self.order_type_name());
        to.set_quantity(self.quantity());
        to.set_buy_sell(self.buy_sell());
        to.set_price1(self.price1());
        to.set_price2(self.price2());
        to.set_new_order_status(self.new_order_status());
        to.set_fill_price(self.fill_price());
        to.set_order_filled_quantity(self.order_filled_quantity());
        to.set_high_price_during_position(self.high_price_during_position());
        to.set_low_price_during_position(self.low_price_during_position());
        to.set_last_price_during_position(self.last_price_during_position());
        to.set_trade_account(self.trade_account());
        to.set_parent_internal_order_id(self.parent_internal_order_id());
        to.set_open_close(self.open_close());
        to.set_is_simulated(self.is_simulated());
        to.set_is_automated_order(self.is_automated_order());
        to.set_is_chart_replaying(self.is_chart_replaying());
        to.set_fill_execution_service_id(self.fill_execution_service_id());
        to.set_position_quantity(self.position_quantity());
        to.set_source_chart_number(self.source_chart_number());
        to.set_source_chartbook_file_name(self.source_chartbook_file_name());
        to.set_time_in_force(self.time_in_force());
        to.set_symbol_service_code(self.symbol_service_code());
        to.set_note(self.note());
        to.set_originating_client_username(self.originating_client_username());
        to.set_trade_account_balance(self.trade_account_balance());
        to.set_supports_position_quantity_field(self.supports_position_quantity_field());
        to.set_is_billable(self.is_billable());
        to.set_quantity_for_billing(self.quantity_for_billing());
        to.set_order_routing_service_code(self.order_routing_service_code());
        to.set_sub_account_identifier(self.sub_account_identifier());
        to.set_audit_trail_transact_date_time_utc(self.audit_trail_transact_date_time_utc());
        to.set_audit_trail_message_direction(self.audit_trail_message_direction());
        to.set_audit_trail_operator_id(self.audit_trail_operator_id());
        to.set_audit_trail_self_match_prevention_id(self.audit_trail_self_match_prevention_id());
        to.set_audit_trail_session_id(self.audit_trail_session_id());
        to.set_audit_trail_executing_firm_id(self.audit_trail_executing_firm_id());
        to.set_audit_trail_fix_message_type(self.audit_trail_fix_message_type());
        to.set_audit_trail_customer_type_indicator(self.audit_trail_customer_type_indicator());
        to.set_audit_trail_customer_or_firm(self.audit_trail_customer_or_firm());
        to.set_audit_trail_execution_report_id(self.audit_trail_execution_report_id());
        to.set_audit_trail_spread_leg_link_id(self.audit_trail_spread_leg_link_id());
        to.set_audit_trail_security_desc(self.audit_trail_security_desc());
        to.set_audit_trail_market_segment_id(self.audit_trail_market_segment_id());
        to.set_audit_trail_ifm_flag(self.audit_trail_ifm_flag());
        to.set_audit_trail_display_quantity(self.audit_trail_display_quantity());
        to.set_audit_trail_country_of_origin(self.audit_trail_country_of_origin());
        to.set_audit_trail_fill_quantity(self.audit_trail_fill_quantity());
        to.set_audit_trail_remaining_quantity(self.audit_trail_remaining_quantity());
        to.set_audit_trail_aggressor_flag(self.audit_trail_aggressor_flag());
        to.set_audit_trail_source_of_cancellation(self.audit_trail_source_of_cancellation());
        to.set_audit_trail_ord_rej_reason(self.audit_trail_ord_rej_reason());
        to.set_is_snapshot(self.is_snapshot());
        to.set_is_first_message_in_batch(self.is_first_message_in_batch());
        to.set_is_last_message_in_batch(self.is_last_message_in_batch());
    }
}

pub struct TradeActivityDataVLS {
    data: *const TradeActivityDataVLSData,
    capacity: usize,
}

pub struct TradeActivityDataVLSUnsafe {
    data: *const TradeActivityDataVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct TradeActivityDataVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    activity_type: u8,
    data_date_time_utc: i64,
    symbol: VLS,
    order_action_source: VLS,
    internal_order_id: u64,
    service_order_id: VLS,
    exchange_order_id: VLS,
    fix_client_order_id: VLS,
    order_type_name: VLS,
    quantity: f64,
    buy_sell: u8,
    price1: f64,
    price2: f64,
    new_order_status: u8,
    fill_price: f64,
    order_filled_quantity: f64,
    high_price_during_position: f64,
    low_price_during_position: f64,
    last_price_during_position: f64,
    trade_account: VLS,
    parent_internal_order_id: u64,
    open_close: u8,
    is_simulated: bool,
    is_automated_order: bool,
    is_chart_replaying: bool,
    fill_execution_service_id: VLS,
    position_quantity: f64,
    source_chart_number: i32,
    source_chartbook_file_name: VLS,
    time_in_force: i32,
    symbol_service_code: VLS,
    note: VLS,
    originating_client_username: VLS,
    trade_account_balance: f64,
    supports_position_quantity_field: u8,
    is_billable: bool,
    quantity_for_billing: i32,
    order_routing_service_code: VLS,
    sub_account_identifier: u32,
    audit_trail_transact_date_time_utc: i64,
    audit_trail_message_direction: i32,
    audit_trail_operator_id: VLS,
    audit_trail_self_match_prevention_id: VLS,
    audit_trail_session_id: VLS,
    audit_trail_executing_firm_id: VLS,
    audit_trail_fix_message_type: VLS,
    audit_trail_customer_type_indicator: i16,
    audit_trail_customer_or_firm: i16,
    audit_trail_execution_report_id: VLS,
    audit_trail_spread_leg_link_id: VLS,
    audit_trail_security_desc: VLS,
    audit_trail_market_segment_id: VLS,
    audit_trail_ifm_flag: u8,
    audit_trail_display_quantity: f64,
    audit_trail_country_of_origin: VLS,
    audit_trail_fill_quantity: f64,
    audit_trail_remaining_quantity: f64,
    audit_trail_aggressor_flag: u8,
    audit_trail_source_of_cancellation: i32,
    audit_trail_ord_rej_reason: VLS,
    is_snapshot: bool,
    is_first_message_in_batch: bool,
    is_last_message_in_batch: bool,
}

impl TradeActivityDataVLSData {
    pub fn new() -> Self {
        Self {
            size: 280u16.to_le(),
            r#type: TRADE_ACTIVITY_DATA.to_le(),
            base_size: 280u16.to_le(),
            activity_type: 0,
            data_date_time_utc: 0i64.to_le(),
            symbol: crate::message::VLS::new(),
            order_action_source: crate::message::VLS::new(),
            internal_order_id: 0u64.to_le(),
            service_order_id: crate::message::VLS::new(),
            exchange_order_id: crate::message::VLS::new(),
            fix_client_order_id: crate::message::VLS::new(),
            order_type_name: crate::message::VLS::new(),
            quantity: 0.0,
            buy_sell: 0,
            price1: 0.0,
            price2: 0.0,
            new_order_status: 0,
            fill_price: 0.0,
            order_filled_quantity: 0.0,
            high_price_during_position: 0.0,
            low_price_during_position: 0.0,
            last_price_during_position: 0.0,
            trade_account: crate::message::VLS::new(),
            parent_internal_order_id: 0u64.to_le(),
            open_close: 0,
            is_simulated: false,
            is_automated_order: false,
            is_chart_replaying: false,
            fill_execution_service_id: crate::message::VLS::new(),
            position_quantity: 0.0,
            source_chart_number: 0i32.to_le(),
            source_chartbook_file_name: crate::message::VLS::new(),
            time_in_force: 0i32.to_le(),
            symbol_service_code: crate::message::VLS::new(),
            note: crate::message::VLS::new(),
            originating_client_username: crate::message::VLS::new(),
            trade_account_balance: 0.0,
            supports_position_quantity_field: 0,
            is_billable: false,
            quantity_for_billing: 0i32.to_le(),
            order_routing_service_code: crate::message::VLS::new(),
            sub_account_identifier: 0u32.to_le(),
            audit_trail_transact_date_time_utc: 0i64.to_le(),
            audit_trail_message_direction: 0i32.to_le(),
            audit_trail_operator_id: crate::message::VLS::new(),
            audit_trail_self_match_prevention_id: crate::message::VLS::new(),
            audit_trail_session_id: crate::message::VLS::new(),
            audit_trail_executing_firm_id: crate::message::VLS::new(),
            audit_trail_fix_message_type: crate::message::VLS::new(),
            audit_trail_customer_type_indicator: 0i16.to_le(),
            audit_trail_customer_or_firm: 0i16.to_le(),
            audit_trail_execution_report_id: crate::message::VLS::new(),
            audit_trail_spread_leg_link_id: crate::message::VLS::new(),
            audit_trail_security_desc: crate::message::VLS::new(),
            audit_trail_market_segment_id: crate::message::VLS::new(),
            audit_trail_ifm_flag: 0,
            audit_trail_display_quantity: 0.0,
            audit_trail_country_of_origin: crate::message::VLS::new(),
            audit_trail_fill_quantity: 0.0,
            audit_trail_remaining_quantity: 0.0,
            audit_trail_aggressor_flag: 0,
            audit_trail_source_of_cancellation: 0i32.to_le(),
            audit_trail_ord_rej_reason: crate::message::VLS::new(),
            is_snapshot: false,
            is_first_message_in_batch: false,
            is_last_message_in_batch: false,
        }
    }
}

unsafe impl Send for TradeActivityDataVLS {}
unsafe impl Send for TradeActivityDataVLSUnsafe {}
unsafe impl Send for TradeActivityDataVLSData {}

impl Drop for TradeActivityDataVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for TradeActivityDataVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for TradeActivityDataVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for TradeActivityDataVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for TradeActivityDataVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for TradeActivityDataVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for TradeActivityDataVLS {
    type Target = TradeActivityDataVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeActivityDataVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for TradeActivityDataVLSUnsafe {
    type Target = TradeActivityDataVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeActivityDataVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for TradeActivityDataVLS {
    type Data = TradeActivityDataVLSData;

    const BASE_SIZE: usize = 280;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradeActivityDataVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeActivityDataVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeActivityDataVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeActivityDataVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for TradeActivityDataVLSUnsafe {
    type Data = TradeActivityDataVLSData;

    const BASE_SIZE: usize = 280;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, TradeActivityDataVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeActivityDataVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeActivityDataVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeActivityDataVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl TradeActivityData for TradeActivityDataVLS {
    type Safe = TradeActivityDataVLS;
    type Unsafe = TradeActivityDataVLSUnsafe;

    fn activity_type(&self) -> u8 {
        self.activity_type
    }

    fn data_date_time_utc(&self) -> i64 {
        i64::from_le(self.data_date_time_utc)
    }

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn order_action_source(&self) -> &str {
        get_vls(self, self.order_action_source)
    }

    fn internal_order_id(&self) -> u64 {
        u64::from_le(self.internal_order_id)
    }

    fn service_order_id(&self) -> &str {
        get_vls(self, self.service_order_id)
    }

    fn exchange_order_id(&self) -> &str {
        get_vls(self, self.exchange_order_id)
    }

    fn fix_client_order_id(&self) -> &str {
        get_vls(self, self.fix_client_order_id)
    }

    fn order_type_name(&self) -> &str {
        get_vls(self, self.order_type_name)
    }

    fn quantity(&self) -> f64 {
        f64_le(self.quantity)
    }

    fn buy_sell(&self) -> u8 {
        self.buy_sell
    }

    fn price1(&self) -> f64 {
        f64_le(self.price1)
    }

    fn price2(&self) -> f64 {
        f64_le(self.price2)
    }

    fn new_order_status(&self) -> u8 {
        self.new_order_status
    }

    fn fill_price(&self) -> f64 {
        f64_le(self.fill_price)
    }

    fn order_filled_quantity(&self) -> f64 {
        f64_le(self.order_filled_quantity)
    }

    fn high_price_during_position(&self) -> f64 {
        f64_le(self.high_price_during_position)
    }

    fn low_price_during_position(&self) -> f64 {
        f64_le(self.low_price_during_position)
    }

    fn last_price_during_position(&self) -> f64 {
        f64_le(self.last_price_during_position)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn parent_internal_order_id(&self) -> u64 {
        u64::from_le(self.parent_internal_order_id)
    }

    fn open_close(&self) -> u8 {
        self.open_close
    }

    fn is_simulated(&self) -> bool {
        self.is_simulated
    }

    fn is_automated_order(&self) -> bool {
        self.is_automated_order
    }

    fn is_chart_replaying(&self) -> bool {
        self.is_chart_replaying
    }

    fn fill_execution_service_id(&self) -> &str {
        get_vls(self, self.fill_execution_service_id)
    }

    fn position_quantity(&self) -> f64 {
        f64_le(self.position_quantity)
    }

    fn source_chart_number(&self) -> i32 {
        i32::from_le(self.source_chart_number)
    }

    fn source_chartbook_file_name(&self) -> &str {
        get_vls(self, self.source_chartbook_file_name)
    }

    fn time_in_force(&self) -> i32 {
        i32::from_le(self.time_in_force)
    }

    fn symbol_service_code(&self) -> &str {
        get_vls(self, self.symbol_service_code)
    }

    fn note(&self) -> &str {
        get_vls(self, self.note)
    }

    fn originating_client_username(&self) -> &str {
        get_vls(self, self.originating_client_username)
    }

    fn trade_account_balance(&self) -> f64 {
        f64_le(self.trade_account_balance)
    }

    fn supports_position_quantity_field(&self) -> u8 {
        self.supports_position_quantity_field
    }

    fn is_billable(&self) -> bool {
        self.is_billable
    }

    fn quantity_for_billing(&self) -> i32 {
        i32::from_le(self.quantity_for_billing)
    }

    fn order_routing_service_code(&self) -> &str {
        get_vls(self, self.order_routing_service_code)
    }

    fn sub_account_identifier(&self) -> u32 {
        u32::from_le(self.sub_account_identifier)
    }

    fn audit_trail_transact_date_time_utc(&self) -> i64 {
        i64::from_le(self.audit_trail_transact_date_time_utc)
    }

    fn audit_trail_message_direction(&self) -> i32 {
        i32::from_le(self.audit_trail_message_direction)
    }

    fn audit_trail_operator_id(&self) -> &str {
        get_vls(self, self.audit_trail_operator_id)
    }

    fn audit_trail_self_match_prevention_id(&self) -> &str {
        get_vls(self, self.audit_trail_self_match_prevention_id)
    }

    fn audit_trail_session_id(&self) -> &str {
        get_vls(self, self.audit_trail_session_id)
    }

    fn audit_trail_executing_firm_id(&self) -> &str {
        get_vls(self, self.audit_trail_executing_firm_id)
    }

    fn audit_trail_fix_message_type(&self) -> &str {
        get_vls(self, self.audit_trail_fix_message_type)
    }

    fn audit_trail_customer_type_indicator(&self) -> i16 {
        i16::from_le(self.audit_trail_customer_type_indicator)
    }

    fn audit_trail_customer_or_firm(&self) -> i16 {
        i16::from_le(self.audit_trail_customer_or_firm)
    }

    fn audit_trail_execution_report_id(&self) -> &str {
        get_vls(self, self.audit_trail_execution_report_id)
    }

    fn audit_trail_spread_leg_link_id(&self) -> &str {
        get_vls(self, self.audit_trail_spread_leg_link_id)
    }

    fn audit_trail_security_desc(&self) -> &str {
        get_vls(self, self.audit_trail_security_desc)
    }

    fn audit_trail_market_segment_id(&self) -> &str {
        get_vls(self, self.audit_trail_market_segment_id)
    }

    fn audit_trail_ifm_flag(&self) -> u8 {
        self.audit_trail_ifm_flag
    }

    fn audit_trail_display_quantity(&self) -> f64 {
        f64_le(self.audit_trail_display_quantity)
    }

    fn audit_trail_country_of_origin(&self) -> &str {
        get_vls(self, self.audit_trail_country_of_origin)
    }

    fn audit_trail_fill_quantity(&self) -> f64 {
        f64_le(self.audit_trail_fill_quantity)
    }

    fn audit_trail_remaining_quantity(&self) -> f64 {
        f64_le(self.audit_trail_remaining_quantity)
    }

    fn audit_trail_aggressor_flag(&self) -> u8 {
        self.audit_trail_aggressor_flag
    }

    fn audit_trail_source_of_cancellation(&self) -> i32 {
        i32::from_le(self.audit_trail_source_of_cancellation)
    }

    fn audit_trail_ord_rej_reason(&self) -> &str {
        get_vls(self, self.audit_trail_ord_rej_reason)
    }

    fn is_snapshot(&self) -> bool {
        self.is_snapshot
    }

    fn is_first_message_in_batch(&self) -> bool {
        self.is_first_message_in_batch
    }

    fn is_last_message_in_batch(&self) -> bool {
        self.is_last_message_in_batch
    }

    fn set_activity_type(&mut self, value: u8) -> &mut Self {
        self.activity_type = value;
        self
    }

    fn set_data_date_time_utc(&mut self, value: i64) -> &mut Self {
        self.data_date_time_utc = value.to_le();
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_order_action_source(&mut self, value: &str) -> &mut Self {
        self.order_action_source = set_vls(self, self.order_action_source, value);
        self
    }

    fn set_internal_order_id(&mut self, value: u64) -> &mut Self {
        self.internal_order_id = value.to_le();
        self
    }

    fn set_service_order_id(&mut self, value: &str) -> &mut Self {
        self.service_order_id = set_vls(self, self.service_order_id, value);
        self
    }

    fn set_exchange_order_id(&mut self, value: &str) -> &mut Self {
        self.exchange_order_id = set_vls(self, self.exchange_order_id, value);
        self
    }

    fn set_fix_client_order_id(&mut self, value: &str) -> &mut Self {
        self.fix_client_order_id = set_vls(self, self.fix_client_order_id, value);
        self
    }

    fn set_order_type_name(&mut self, value: &str) -> &mut Self {
        self.order_type_name = set_vls(self, self.order_type_name, value);
        self
    }

    fn set_quantity(&mut self, value: f64) -> &mut Self {
        self.quantity = f64_le(value);
        self
    }

    fn set_buy_sell(&mut self, value: u8) -> &mut Self {
        self.buy_sell = value;
        self
    }

    fn set_price1(&mut self, value: f64) -> &mut Self {
        self.price1 = f64_le(value);
        self
    }

    fn set_price2(&mut self, value: f64) -> &mut Self {
        self.price2 = f64_le(value);
        self
    }

    fn set_new_order_status(&mut self, value: u8) -> &mut Self {
        self.new_order_status = value;
        self
    }

    fn set_fill_price(&mut self, value: f64) -> &mut Self {
        self.fill_price = f64_le(value);
        self
    }

    fn set_order_filled_quantity(&mut self, value: f64) -> &mut Self {
        self.order_filled_quantity = f64_le(value);
        self
    }

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        self.high_price_during_position = f64_le(value);
        self
    }

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        self.low_price_during_position = f64_le(value);
        self
    }

    fn set_last_price_during_position(&mut self, value: f64) -> &mut Self {
        self.last_price_during_position = f64_le(value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_parent_internal_order_id(&mut self, value: u64) -> &mut Self {
        self.parent_internal_order_id = value.to_le();
        self
    }

    fn set_open_close(&mut self, value: u8) -> &mut Self {
        self.open_close = value;
        self
    }

    fn set_is_simulated(&mut self, value: bool) -> &mut Self {
        self.is_simulated = value;
        self
    }

    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        self.is_automated_order = value;
        self
    }

    fn set_is_chart_replaying(&mut self, value: bool) -> &mut Self {
        self.is_chart_replaying = value;
        self
    }

    fn set_fill_execution_service_id(&mut self, value: &str) -> &mut Self {
        self.fill_execution_service_id = set_vls(self, self.fill_execution_service_id, value);
        self
    }

    fn set_position_quantity(&mut self, value: f64) -> &mut Self {
        self.position_quantity = f64_le(value);
        self
    }

    fn set_source_chart_number(&mut self, value: i32) -> &mut Self {
        self.source_chart_number = value.to_le();
        self
    }

    fn set_source_chartbook_file_name(&mut self, value: &str) -> &mut Self {
        self.source_chartbook_file_name = set_vls(self, self.source_chartbook_file_name, value);
        self
    }

    fn set_time_in_force(&mut self, value: i32) -> &mut Self {
        self.time_in_force = value.to_le();
        self
    }

    fn set_symbol_service_code(&mut self, value: &str) -> &mut Self {
        self.symbol_service_code = set_vls(self, self.symbol_service_code, value);
        self
    }

    fn set_note(&mut self, value: &str) -> &mut Self {
        self.note = set_vls(self, self.note, value);
        self
    }

    fn set_originating_client_username(&mut self, value: &str) -> &mut Self {
        self.originating_client_username = set_vls(self, self.originating_client_username, value);
        self
    }

    fn set_trade_account_balance(&mut self, value: f64) -> &mut Self {
        self.trade_account_balance = f64_le(value);
        self
    }

    fn set_supports_position_quantity_field(&mut self, value: u8) -> &mut Self {
        self.supports_position_quantity_field = value;
        self
    }

    fn set_is_billable(&mut self, value: bool) -> &mut Self {
        self.is_billable = value;
        self
    }

    fn set_quantity_for_billing(&mut self, value: i32) -> &mut Self {
        self.quantity_for_billing = value.to_le();
        self
    }

    fn set_order_routing_service_code(&mut self, value: &str) -> &mut Self {
        self.order_routing_service_code = set_vls(self, self.order_routing_service_code, value);
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        self.sub_account_identifier = value.to_le();
        self
    }

    fn set_audit_trail_transact_date_time_utc(&mut self, value: i64) -> &mut Self {
        self.audit_trail_transact_date_time_utc = value.to_le();
        self
    }

    fn set_audit_trail_message_direction(&mut self, value: i32) -> &mut Self {
        self.audit_trail_message_direction = value.to_le();
        self
    }

    fn set_audit_trail_operator_id(&mut self, value: &str) -> &mut Self {
        self.audit_trail_operator_id = set_vls(self, self.audit_trail_operator_id, value);
        self
    }

    fn set_audit_trail_self_match_prevention_id(&mut self, value: &str) -> &mut Self {
        self.audit_trail_self_match_prevention_id =
            set_vls(self, self.audit_trail_self_match_prevention_id, value);
        self
    }

    fn set_audit_trail_session_id(&mut self, value: &str) -> &mut Self {
        self.audit_trail_session_id = set_vls(self, self.audit_trail_session_id, value);
        self
    }

    fn set_audit_trail_executing_firm_id(&mut self, value: &str) -> &mut Self {
        self.audit_trail_executing_firm_id =
            set_vls(self, self.audit_trail_executing_firm_id, value);
        self
    }

    fn set_audit_trail_fix_message_type(&mut self, value: &str) -> &mut Self {
        self.audit_trail_fix_message_type = set_vls(self, self.audit_trail_fix_message_type, value);
        self
    }

    fn set_audit_trail_customer_type_indicator(&mut self, value: i16) -> &mut Self {
        self.audit_trail_customer_type_indicator = value.to_le();
        self
    }

    fn set_audit_trail_customer_or_firm(&mut self, value: i16) -> &mut Self {
        self.audit_trail_customer_or_firm = value.to_le();
        self
    }

    fn set_audit_trail_execution_report_id(&mut self, value: &str) -> &mut Self {
        self.audit_trail_execution_report_id =
            set_vls(self, self.audit_trail_execution_report_id, value);
        self
    }

    fn set_audit_trail_spread_leg_link_id(&mut self, value: &str) -> &mut Self {
        self.audit_trail_spread_leg_link_id =
            set_vls(self, self.audit_trail_spread_leg_link_id, value);
        self
    }

    fn set_audit_trail_security_desc(&mut self, value: &str) -> &mut Self {
        self.audit_trail_security_desc = set_vls(self, self.audit_trail_security_desc, value);
        self
    }

    fn set_audit_trail_market_segment_id(&mut self, value: &str) -> &mut Self {
        self.audit_trail_market_segment_id =
            set_vls(self, self.audit_trail_market_segment_id, value);
        self
    }

    fn set_audit_trail_ifm_flag(&mut self, value: u8) -> &mut Self {
        self.audit_trail_ifm_flag = value;
        self
    }

    fn set_audit_trail_display_quantity(&mut self, value: f64) -> &mut Self {
        self.audit_trail_display_quantity = f64_le(value);
        self
    }

    fn set_audit_trail_country_of_origin(&mut self, value: &str) -> &mut Self {
        self.audit_trail_country_of_origin =
            set_vls(self, self.audit_trail_country_of_origin, value);
        self
    }

    fn set_audit_trail_fill_quantity(&mut self, value: f64) -> &mut Self {
        self.audit_trail_fill_quantity = f64_le(value);
        self
    }

    fn set_audit_trail_remaining_quantity(&mut self, value: f64) -> &mut Self {
        self.audit_trail_remaining_quantity = f64_le(value);
        self
    }

    fn set_audit_trail_aggressor_flag(&mut self, value: u8) -> &mut Self {
        self.audit_trail_aggressor_flag = value;
        self
    }

    fn set_audit_trail_source_of_cancellation(&mut self, value: i32) -> &mut Self {
        self.audit_trail_source_of_cancellation = value.to_le();
        self
    }

    fn set_audit_trail_ord_rej_reason(&mut self, value: &str) -> &mut Self {
        self.audit_trail_ord_rej_reason = set_vls(self, self.audit_trail_ord_rej_reason, value);
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        self.is_snapshot = value;
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_first_message_in_batch = value;
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_last_message_in_batch = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl TradeActivityData for TradeActivityDataVLSUnsafe {
    type Safe = TradeActivityDataVLS;
    type Unsafe = TradeActivityDataVLSUnsafe;

    fn activity_type(&self) -> u8 {
        if self.is_out_of_bounds(7) {
            0
        } else {
            self.activity_type
        }
    }

    fn data_date_time_utc(&self) -> i64 {
        if self.is_out_of_bounds(15) {
            0i64.to_le()
        } else {
            i64::from_le(self.data_date_time_utc)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(19) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn order_action_source(&self) -> &str {
        if self.is_out_of_bounds(23) {
            ""
        } else {
            get_vls(self, self.order_action_source)
        }
    }

    fn internal_order_id(&self) -> u64 {
        if self.is_out_of_bounds(31) {
            0u64.to_le()
        } else {
            u64::from_le(self.internal_order_id)
        }
    }

    fn service_order_id(&self) -> &str {
        if self.is_out_of_bounds(35) {
            ""
        } else {
            get_vls(self, self.service_order_id)
        }
    }

    fn exchange_order_id(&self) -> &str {
        if self.is_out_of_bounds(39) {
            ""
        } else {
            get_vls(self, self.exchange_order_id)
        }
    }

    fn fix_client_order_id(&self) -> &str {
        if self.is_out_of_bounds(43) {
            ""
        } else {
            get_vls(self, self.fix_client_order_id)
        }
    }

    fn order_type_name(&self) -> &str {
        if self.is_out_of_bounds(47) {
            ""
        } else {
            get_vls(self, self.order_type_name)
        }
    }

    fn quantity(&self) -> f64 {
        if self.is_out_of_bounds(55) {
            0.0
        } else {
            f64_le(self.quantity)
        }
    }

    fn buy_sell(&self) -> u8 {
        if self.is_out_of_bounds(56) {
            0
        } else {
            self.buy_sell
        }
    }

    fn price1(&self) -> f64 {
        if self.is_out_of_bounds(64) {
            0.0
        } else {
            f64_le(self.price1)
        }
    }

    fn price2(&self) -> f64 {
        if self.is_out_of_bounds(72) {
            0.0
        } else {
            f64_le(self.price2)
        }
    }

    fn new_order_status(&self) -> u8 {
        if self.is_out_of_bounds(73) {
            0
        } else {
            self.new_order_status
        }
    }

    fn fill_price(&self) -> f64 {
        if self.is_out_of_bounds(81) {
            0.0
        } else {
            f64_le(self.fill_price)
        }
    }

    fn order_filled_quantity(&self) -> f64 {
        if self.is_out_of_bounds(89) {
            0.0
        } else {
            f64_le(self.order_filled_quantity)
        }
    }

    fn high_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(97) {
            0.0
        } else {
            f64_le(self.high_price_during_position)
        }
    }

    fn low_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(105) {
            0.0
        } else {
            f64_le(self.low_price_during_position)
        }
    }

    fn last_price_during_position(&self) -> f64 {
        if self.is_out_of_bounds(113) {
            0.0
        } else {
            f64_le(self.last_price_during_position)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(117) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn parent_internal_order_id(&self) -> u64 {
        if self.is_out_of_bounds(125) {
            0u64.to_le()
        } else {
            u64::from_le(self.parent_internal_order_id)
        }
    }

    fn open_close(&self) -> u8 {
        if self.is_out_of_bounds(126) {
            0
        } else {
            self.open_close
        }
    }

    fn is_simulated(&self) -> bool {
        if self.is_out_of_bounds(127) {
            false
        } else {
            self.is_simulated
        }
    }

    fn is_automated_order(&self) -> bool {
        if self.is_out_of_bounds(128) {
            false
        } else {
            self.is_automated_order
        }
    }

    fn is_chart_replaying(&self) -> bool {
        if self.is_out_of_bounds(129) {
            false
        } else {
            self.is_chart_replaying
        }
    }

    fn fill_execution_service_id(&self) -> &str {
        if self.is_out_of_bounds(133) {
            ""
        } else {
            get_vls(self, self.fill_execution_service_id)
        }
    }

    fn position_quantity(&self) -> f64 {
        if self.is_out_of_bounds(141) {
            0.0
        } else {
            f64_le(self.position_quantity)
        }
    }

    fn source_chart_number(&self) -> i32 {
        if self.is_out_of_bounds(145) {
            0i32.to_le()
        } else {
            i32::from_le(self.source_chart_number)
        }
    }

    fn source_chartbook_file_name(&self) -> &str {
        if self.is_out_of_bounds(149) {
            ""
        } else {
            get_vls(self, self.source_chartbook_file_name)
        }
    }

    fn time_in_force(&self) -> i32 {
        if self.is_out_of_bounds(153) {
            0i32.to_le()
        } else {
            i32::from_le(self.time_in_force)
        }
    }

    fn symbol_service_code(&self) -> &str {
        if self.is_out_of_bounds(157) {
            ""
        } else {
            get_vls(self, self.symbol_service_code)
        }
    }

    fn note(&self) -> &str {
        if self.is_out_of_bounds(161) {
            ""
        } else {
            get_vls(self, self.note)
        }
    }

    fn originating_client_username(&self) -> &str {
        if self.is_out_of_bounds(165) {
            ""
        } else {
            get_vls(self, self.originating_client_username)
        }
    }

    fn trade_account_balance(&self) -> f64 {
        if self.is_out_of_bounds(173) {
            0.0
        } else {
            f64_le(self.trade_account_balance)
        }
    }

    fn supports_position_quantity_field(&self) -> u8 {
        if self.is_out_of_bounds(174) {
            0
        } else {
            self.supports_position_quantity_field
        }
    }

    fn is_billable(&self) -> bool {
        if self.is_out_of_bounds(175) {
            false
        } else {
            self.is_billable
        }
    }

    fn quantity_for_billing(&self) -> i32 {
        if self.is_out_of_bounds(179) {
            0i32.to_le()
        } else {
            i32::from_le(self.quantity_for_billing)
        }
    }

    fn order_routing_service_code(&self) -> &str {
        if self.is_out_of_bounds(183) {
            ""
        } else {
            get_vls(self, self.order_routing_service_code)
        }
    }

    fn sub_account_identifier(&self) -> u32 {
        if self.is_out_of_bounds(187) {
            0u32.to_le()
        } else {
            u32::from_le(self.sub_account_identifier)
        }
    }

    fn audit_trail_transact_date_time_utc(&self) -> i64 {
        if self.is_out_of_bounds(195) {
            0i64.to_le()
        } else {
            i64::from_le(self.audit_trail_transact_date_time_utc)
        }
    }

    fn audit_trail_message_direction(&self) -> i32 {
        if self.is_out_of_bounds(199) {
            0i32.to_le()
        } else {
            i32::from_le(self.audit_trail_message_direction)
        }
    }

    fn audit_trail_operator_id(&self) -> &str {
        if self.is_out_of_bounds(203) {
            ""
        } else {
            get_vls(self, self.audit_trail_operator_id)
        }
    }

    fn audit_trail_self_match_prevention_id(&self) -> &str {
        if self.is_out_of_bounds(207) {
            ""
        } else {
            get_vls(self, self.audit_trail_self_match_prevention_id)
        }
    }

    fn audit_trail_session_id(&self) -> &str {
        if self.is_out_of_bounds(211) {
            ""
        } else {
            get_vls(self, self.audit_trail_session_id)
        }
    }

    fn audit_trail_executing_firm_id(&self) -> &str {
        if self.is_out_of_bounds(215) {
            ""
        } else {
            get_vls(self, self.audit_trail_executing_firm_id)
        }
    }

    fn audit_trail_fix_message_type(&self) -> &str {
        if self.is_out_of_bounds(219) {
            ""
        } else {
            get_vls(self, self.audit_trail_fix_message_type)
        }
    }

    fn audit_trail_customer_type_indicator(&self) -> i16 {
        if self.is_out_of_bounds(221) {
            0i16.to_le()
        } else {
            i16::from_le(self.audit_trail_customer_type_indicator)
        }
    }

    fn audit_trail_customer_or_firm(&self) -> i16 {
        if self.is_out_of_bounds(223) {
            0i16.to_le()
        } else {
            i16::from_le(self.audit_trail_customer_or_firm)
        }
    }

    fn audit_trail_execution_report_id(&self) -> &str {
        if self.is_out_of_bounds(227) {
            ""
        } else {
            get_vls(self, self.audit_trail_execution_report_id)
        }
    }

    fn audit_trail_spread_leg_link_id(&self) -> &str {
        if self.is_out_of_bounds(231) {
            ""
        } else {
            get_vls(self, self.audit_trail_spread_leg_link_id)
        }
    }

    fn audit_trail_security_desc(&self) -> &str {
        if self.is_out_of_bounds(235) {
            ""
        } else {
            get_vls(self, self.audit_trail_security_desc)
        }
    }

    fn audit_trail_market_segment_id(&self) -> &str {
        if self.is_out_of_bounds(239) {
            ""
        } else {
            get_vls(self, self.audit_trail_market_segment_id)
        }
    }

    fn audit_trail_ifm_flag(&self) -> u8 {
        if self.is_out_of_bounds(240) {
            0
        } else {
            self.audit_trail_ifm_flag
        }
    }

    fn audit_trail_display_quantity(&self) -> f64 {
        if self.is_out_of_bounds(248) {
            0.0
        } else {
            f64_le(self.audit_trail_display_quantity)
        }
    }

    fn audit_trail_country_of_origin(&self) -> &str {
        if self.is_out_of_bounds(252) {
            ""
        } else {
            get_vls(self, self.audit_trail_country_of_origin)
        }
    }

    fn audit_trail_fill_quantity(&self) -> f64 {
        if self.is_out_of_bounds(260) {
            0.0
        } else {
            f64_le(self.audit_trail_fill_quantity)
        }
    }

    fn audit_trail_remaining_quantity(&self) -> f64 {
        if self.is_out_of_bounds(268) {
            0.0
        } else {
            f64_le(self.audit_trail_remaining_quantity)
        }
    }

    fn audit_trail_aggressor_flag(&self) -> u8 {
        if self.is_out_of_bounds(269) {
            0
        } else {
            self.audit_trail_aggressor_flag
        }
    }

    fn audit_trail_source_of_cancellation(&self) -> i32 {
        if self.is_out_of_bounds(273) {
            0i32.to_le()
        } else {
            i32::from_le(self.audit_trail_source_of_cancellation)
        }
    }

    fn audit_trail_ord_rej_reason(&self) -> &str {
        if self.is_out_of_bounds(277) {
            ""
        } else {
            get_vls(self, self.audit_trail_ord_rej_reason)
        }
    }

    fn is_snapshot(&self) -> bool {
        if self.is_out_of_bounds(278) {
            false
        } else {
            self.is_snapshot
        }
    }

    fn is_first_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(279) {
            false
        } else {
            self.is_first_message_in_batch
        }
    }

    fn is_last_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(280) {
            false
        } else {
            self.is_last_message_in_batch
        }
    }

    fn set_activity_type(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(7) {
            self.activity_type = value;
        }
        self
    }

    fn set_data_date_time_utc(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(15) {
            self.data_date_time_utc = value.to_le();
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(19) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_order_action_source(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(23) {
            self.order_action_source = set_vls(self, self.order_action_source, value);
        }
        self
    }

    fn set_internal_order_id(&mut self, value: u64) -> &mut Self {
        if !self.is_out_of_bounds(31) {
            self.internal_order_id = value.to_le();
        }
        self
    }

    fn set_service_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(35) {
            self.service_order_id = set_vls(self, self.service_order_id, value);
        }
        self
    }

    fn set_exchange_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(39) {
            self.exchange_order_id = set_vls(self, self.exchange_order_id, value);
        }
        self
    }

    fn set_fix_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(43) {
            self.fix_client_order_id = set_vls(self, self.fix_client_order_id, value);
        }
        self
    }

    fn set_order_type_name(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(47) {
            self.order_type_name = set_vls(self, self.order_type_name, value);
        }
        self
    }

    fn set_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(55) {
            self.quantity = f64_le(value);
        }
        self
    }

    fn set_buy_sell(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.buy_sell = value;
        }
        self
    }

    fn set_price1(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            self.price1 = f64_le(value);
        }
        self
    }

    fn set_price2(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            self.price2 = f64_le(value);
        }
        self
    }

    fn set_new_order_status(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(73) {
            self.new_order_status = value;
        }
        self
    }

    fn set_fill_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(81) {
            self.fill_price = f64_le(value);
        }
        self
    }

    fn set_order_filled_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(89) {
            self.order_filled_quantity = f64_le(value);
        }
        self
    }

    fn set_high_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(97) {
            self.high_price_during_position = f64_le(value);
        }
        self
    }

    fn set_low_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(105) {
            self.low_price_during_position = f64_le(value);
        }
        self
    }

    fn set_last_price_during_position(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(113) {
            self.last_price_during_position = f64_le(value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(117) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_parent_internal_order_id(&mut self, value: u64) -> &mut Self {
        if !self.is_out_of_bounds(125) {
            self.parent_internal_order_id = value.to_le();
        }
        self
    }

    fn set_open_close(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(126) {
            self.open_close = value;
        }
        self
    }

    fn set_is_simulated(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(127) {
            self.is_simulated = value;
        }
        self
    }

    fn set_is_automated_order(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(128) {
            self.is_automated_order = value;
        }
        self
    }

    fn set_is_chart_replaying(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(129) {
            self.is_chart_replaying = value;
        }
        self
    }

    fn set_fill_execution_service_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(133) {
            self.fill_execution_service_id = set_vls(self, self.fill_execution_service_id, value);
        }
        self
    }

    fn set_position_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(141) {
            self.position_quantity = f64_le(value);
        }
        self
    }

    fn set_source_chart_number(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(145) {
            self.source_chart_number = value.to_le();
        }
        self
    }

    fn set_source_chartbook_file_name(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(149) {
            self.source_chartbook_file_name = set_vls(self, self.source_chartbook_file_name, value);
        }
        self
    }

    fn set_time_in_force(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(153) {
            self.time_in_force = value.to_le();
        }
        self
    }

    fn set_symbol_service_code(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(157) {
            self.symbol_service_code = set_vls(self, self.symbol_service_code, value);
        }
        self
    }

    fn set_note(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(161) {
            self.note = set_vls(self, self.note, value);
        }
        self
    }

    fn set_originating_client_username(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(165) {
            self.originating_client_username =
                set_vls(self, self.originating_client_username, value);
        }
        self
    }

    fn set_trade_account_balance(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(173) {
            self.trade_account_balance = f64_le(value);
        }
        self
    }

    fn set_supports_position_quantity_field(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(174) {
            self.supports_position_quantity_field = value;
        }
        self
    }

    fn set_is_billable(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(175) {
            self.is_billable = value;
        }
        self
    }

    fn set_quantity_for_billing(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(179) {
            self.quantity_for_billing = value.to_le();
        }
        self
    }

    fn set_order_routing_service_code(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(183) {
            self.order_routing_service_code = set_vls(self, self.order_routing_service_code, value);
        }
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(187) {
            self.sub_account_identifier = value.to_le();
        }
        self
    }

    fn set_audit_trail_transact_date_time_utc(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(195) {
            self.audit_trail_transact_date_time_utc = value.to_le();
        }
        self
    }

    fn set_audit_trail_message_direction(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(199) {
            self.audit_trail_message_direction = value.to_le();
        }
        self
    }

    fn set_audit_trail_operator_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(203) {
            self.audit_trail_operator_id = set_vls(self, self.audit_trail_operator_id, value);
        }
        self
    }

    fn set_audit_trail_self_match_prevention_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(207) {
            self.audit_trail_self_match_prevention_id =
                set_vls(self, self.audit_trail_self_match_prevention_id, value);
        }
        self
    }

    fn set_audit_trail_session_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(211) {
            self.audit_trail_session_id = set_vls(self, self.audit_trail_session_id, value);
        }
        self
    }

    fn set_audit_trail_executing_firm_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(215) {
            self.audit_trail_executing_firm_id =
                set_vls(self, self.audit_trail_executing_firm_id, value);
        }
        self
    }

    fn set_audit_trail_fix_message_type(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(219) {
            self.audit_trail_fix_message_type =
                set_vls(self, self.audit_trail_fix_message_type, value);
        }
        self
    }

    fn set_audit_trail_customer_type_indicator(&mut self, value: i16) -> &mut Self {
        if !self.is_out_of_bounds(221) {
            self.audit_trail_customer_type_indicator = value.to_le();
        }
        self
    }

    fn set_audit_trail_customer_or_firm(&mut self, value: i16) -> &mut Self {
        if !self.is_out_of_bounds(223) {
            self.audit_trail_customer_or_firm = value.to_le();
        }
        self
    }

    fn set_audit_trail_execution_report_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(227) {
            self.audit_trail_execution_report_id =
                set_vls(self, self.audit_trail_execution_report_id, value);
        }
        self
    }

    fn set_audit_trail_spread_leg_link_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(231) {
            self.audit_trail_spread_leg_link_id =
                set_vls(self, self.audit_trail_spread_leg_link_id, value);
        }
        self
    }

    fn set_audit_trail_security_desc(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(235) {
            self.audit_trail_security_desc = set_vls(self, self.audit_trail_security_desc, value);
        }
        self
    }

    fn set_audit_trail_market_segment_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(239) {
            self.audit_trail_market_segment_id =
                set_vls(self, self.audit_trail_market_segment_id, value);
        }
        self
    }

    fn set_audit_trail_ifm_flag(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(240) {
            self.audit_trail_ifm_flag = value;
        }
        self
    }

    fn set_audit_trail_display_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(248) {
            self.audit_trail_display_quantity = f64_le(value);
        }
        self
    }

    fn set_audit_trail_country_of_origin(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(252) {
            self.audit_trail_country_of_origin =
                set_vls(self, self.audit_trail_country_of_origin, value);
        }
        self
    }

    fn set_audit_trail_fill_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(260) {
            self.audit_trail_fill_quantity = f64_le(value);
        }
        self
    }

    fn set_audit_trail_remaining_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(268) {
            self.audit_trail_remaining_quantity = f64_le(value);
        }
        self
    }

    fn set_audit_trail_aggressor_flag(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(269) {
            self.audit_trail_aggressor_flag = value;
        }
        self
    }

    fn set_audit_trail_source_of_cancellation(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(273) {
            self.audit_trail_source_of_cancellation = value.to_le();
        }
        self
    }

    fn set_audit_trail_ord_rej_reason(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(277) {
            self.audit_trail_ord_rej_reason = set_vls(self, self.audit_trail_ord_rej_reason, value);
        }
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(278) {
            self.is_snapshot = value;
        }
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(279) {
            self.is_first_message_in_batch = value;
        }
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(280) {
            self.is_last_message_in_batch = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                280usize,
                core::mem::size_of::<TradeActivityDataVLSData>(),
                "TradeActivityDataVLSData sizeof expected {:} but was {:}",
                280usize,
                core::mem::size_of::<TradeActivityDataVLSData>()
            );
            assert_eq!(
                280u16,
                TradeActivityDataVLS::new().size(),
                "TradeActivityDataVLS sizeof expected {:} but was {:}",
                280u16,
                TradeActivityDataVLS::new().size(),
            );
            assert_eq!(
                TRADE_ACTIVITY_DATA,
                TradeActivityDataVLS::new().r#type(),
                "TradeActivityDataVLS type expected {:} but was {:}",
                TRADE_ACTIVITY_DATA,
                TradeActivityDataVLS::new().r#type(),
            );
            assert_eq!(
                10114u16,
                TradeActivityDataVLS::new().r#type(),
                "TradeActivityDataVLS type expected {:} but was {:}",
                10114u16,
                TradeActivityDataVLS::new().r#type(),
            );
            let d = TradeActivityDataVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.activity_type) as usize) - p,
                "activity_type offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.activity_type) as usize) - p,
            );
            assert_eq!(
                7usize,
                (core::ptr::addr_of!(d.data_date_time_utc) as usize) - p,
                "data_date_time_utc offset expected {:} but was {:}",
                7usize,
                (core::ptr::addr_of!(d.data_date_time_utc) as usize) - p,
            );
            assert_eq!(
                15usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                15usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                19usize,
                (core::ptr::addr_of!(d.order_action_source) as usize) - p,
                "order_action_source offset expected {:} but was {:}",
                19usize,
                (core::ptr::addr_of!(d.order_action_source) as usize) - p,
            );
            assert_eq!(
                23usize,
                (core::ptr::addr_of!(d.internal_order_id) as usize) - p,
                "internal_order_id offset expected {:} but was {:}",
                23usize,
                (core::ptr::addr_of!(d.internal_order_id) as usize) - p,
            );
            assert_eq!(
                31usize,
                (core::ptr::addr_of!(d.service_order_id) as usize) - p,
                "service_order_id offset expected {:} but was {:}",
                31usize,
                (core::ptr::addr_of!(d.service_order_id) as usize) - p,
            );
            assert_eq!(
                35usize,
                (core::ptr::addr_of!(d.exchange_order_id) as usize) - p,
                "exchange_order_id offset expected {:} but was {:}",
                35usize,
                (core::ptr::addr_of!(d.exchange_order_id) as usize) - p,
            );
            assert_eq!(
                39usize,
                (core::ptr::addr_of!(d.fix_client_order_id) as usize) - p,
                "fix_client_order_id offset expected {:} but was {:}",
                39usize,
                (core::ptr::addr_of!(d.fix_client_order_id) as usize) - p,
            );
            assert_eq!(
                43usize,
                (core::ptr::addr_of!(d.order_type_name) as usize) - p,
                "order_type_name offset expected {:} but was {:}",
                43usize,
                (core::ptr::addr_of!(d.order_type_name) as usize) - p,
            );
            assert_eq!(
                47usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                47usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                55usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
                "buy_sell offset expected {:} but was {:}",
                55usize,
                (core::ptr::addr_of!(d.buy_sell) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.price1) as usize) - p,
                "price1 offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.price1) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.price2) as usize) - p,
                "price2 offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.price2) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.new_order_status) as usize) - p,
                "new_order_status offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.new_order_status) as usize) - p,
            );
            assert_eq!(
                73usize,
                (core::ptr::addr_of!(d.fill_price) as usize) - p,
                "fill_price offset expected {:} but was {:}",
                73usize,
                (core::ptr::addr_of!(d.fill_price) as usize) - p,
            );
            assert_eq!(
                81usize,
                (core::ptr::addr_of!(d.order_filled_quantity) as usize) - p,
                "order_filled_quantity offset expected {:} but was {:}",
                81usize,
                (core::ptr::addr_of!(d.order_filled_quantity) as usize) - p,
            );
            assert_eq!(
                89usize,
                (core::ptr::addr_of!(d.high_price_during_position) as usize) - p,
                "high_price_during_position offset expected {:} but was {:}",
                89usize,
                (core::ptr::addr_of!(d.high_price_during_position) as usize) - p,
            );
            assert_eq!(
                97usize,
                (core::ptr::addr_of!(d.low_price_during_position) as usize) - p,
                "low_price_during_position offset expected {:} but was {:}",
                97usize,
                (core::ptr::addr_of!(d.low_price_during_position) as usize) - p,
            );
            assert_eq!(
                105usize,
                (core::ptr::addr_of!(d.last_price_during_position) as usize) - p,
                "last_price_during_position offset expected {:} but was {:}",
                105usize,
                (core::ptr::addr_of!(d.last_price_during_position) as usize) - p,
            );
            assert_eq!(
                113usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                113usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                117usize,
                (core::ptr::addr_of!(d.parent_internal_order_id) as usize) - p,
                "parent_internal_order_id offset expected {:} but was {:}",
                117usize,
                (core::ptr::addr_of!(d.parent_internal_order_id) as usize) - p,
            );
            assert_eq!(
                125usize,
                (core::ptr::addr_of!(d.open_close) as usize) - p,
                "open_close offset expected {:} but was {:}",
                125usize,
                (core::ptr::addr_of!(d.open_close) as usize) - p,
            );
            assert_eq!(
                126usize,
                (core::ptr::addr_of!(d.is_simulated) as usize) - p,
                "is_simulated offset expected {:} but was {:}",
                126usize,
                (core::ptr::addr_of!(d.is_simulated) as usize) - p,
            );
            assert_eq!(
                127usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
                "is_automated_order offset expected {:} but was {:}",
                127usize,
                (core::ptr::addr_of!(d.is_automated_order) as usize) - p,
            );
            assert_eq!(
                128usize,
                (core::ptr::addr_of!(d.is_chart_replaying) as usize) - p,
                "is_chart_replaying offset expected {:} but was {:}",
                128usize,
                (core::ptr::addr_of!(d.is_chart_replaying) as usize) - p,
            );
            assert_eq!(
                129usize,
                (core::ptr::addr_of!(d.fill_execution_service_id) as usize) - p,
                "fill_execution_service_id offset expected {:} but was {:}",
                129usize,
                (core::ptr::addr_of!(d.fill_execution_service_id) as usize) - p,
            );
            assert_eq!(
                133usize,
                (core::ptr::addr_of!(d.position_quantity) as usize) - p,
                "position_quantity offset expected {:} but was {:}",
                133usize,
                (core::ptr::addr_of!(d.position_quantity) as usize) - p,
            );
            assert_eq!(
                141usize,
                (core::ptr::addr_of!(d.source_chart_number) as usize) - p,
                "source_chart_number offset expected {:} but was {:}",
                141usize,
                (core::ptr::addr_of!(d.source_chart_number) as usize) - p,
            );
            assert_eq!(
                145usize,
                (core::ptr::addr_of!(d.source_chartbook_file_name) as usize) - p,
                "source_chartbook_file_name offset expected {:} but was {:}",
                145usize,
                (core::ptr::addr_of!(d.source_chartbook_file_name) as usize) - p,
            );
            assert_eq!(
                149usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
                "time_in_force offset expected {:} but was {:}",
                149usize,
                (core::ptr::addr_of!(d.time_in_force) as usize) - p,
            );
            assert_eq!(
                153usize,
                (core::ptr::addr_of!(d.symbol_service_code) as usize) - p,
                "symbol_service_code offset expected {:} but was {:}",
                153usize,
                (core::ptr::addr_of!(d.symbol_service_code) as usize) - p,
            );
            assert_eq!(
                157usize,
                (core::ptr::addr_of!(d.note) as usize) - p,
                "note offset expected {:} but was {:}",
                157usize,
                (core::ptr::addr_of!(d.note) as usize) - p,
            );
            assert_eq!(
                161usize,
                (core::ptr::addr_of!(d.originating_client_username) as usize) - p,
                "originating_client_username offset expected {:} but was {:}",
                161usize,
                (core::ptr::addr_of!(d.originating_client_username) as usize) - p,
            );
            assert_eq!(
                165usize,
                (core::ptr::addr_of!(d.trade_account_balance) as usize) - p,
                "trade_account_balance offset expected {:} but was {:}",
                165usize,
                (core::ptr::addr_of!(d.trade_account_balance) as usize) - p,
            );
            assert_eq!(
                173usize,
                (core::ptr::addr_of!(d.supports_position_quantity_field) as usize) - p,
                "supports_position_quantity_field offset expected {:} but was {:}",
                173usize,
                (core::ptr::addr_of!(d.supports_position_quantity_field) as usize) - p,
            );
            assert_eq!(
                174usize,
                (core::ptr::addr_of!(d.is_billable) as usize) - p,
                "is_billable offset expected {:} but was {:}",
                174usize,
                (core::ptr::addr_of!(d.is_billable) as usize) - p,
            );
            assert_eq!(
                175usize,
                (core::ptr::addr_of!(d.quantity_for_billing) as usize) - p,
                "quantity_for_billing offset expected {:} but was {:}",
                175usize,
                (core::ptr::addr_of!(d.quantity_for_billing) as usize) - p,
            );
            assert_eq!(
                179usize,
                (core::ptr::addr_of!(d.order_routing_service_code) as usize) - p,
                "order_routing_service_code offset expected {:} but was {:}",
                179usize,
                (core::ptr::addr_of!(d.order_routing_service_code) as usize) - p,
            );
            assert_eq!(
                183usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
                "sub_account_identifier offset expected {:} but was {:}",
                183usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
            );
            assert_eq!(
                187usize,
                (core::ptr::addr_of!(d.audit_trail_transact_date_time_utc) as usize) - p,
                "audit_trail_transact_date_time_utc offset expected {:} but was {:}",
                187usize,
                (core::ptr::addr_of!(d.audit_trail_transact_date_time_utc) as usize) - p,
            );
            assert_eq!(
                195usize,
                (core::ptr::addr_of!(d.audit_trail_message_direction) as usize) - p,
                "audit_trail_message_direction offset expected {:} but was {:}",
                195usize,
                (core::ptr::addr_of!(d.audit_trail_message_direction) as usize) - p,
            );
            assert_eq!(
                199usize,
                (core::ptr::addr_of!(d.audit_trail_operator_id) as usize) - p,
                "audit_trail_operator_id offset expected {:} but was {:}",
                199usize,
                (core::ptr::addr_of!(d.audit_trail_operator_id) as usize) - p,
            );
            assert_eq!(
                203usize,
                (core::ptr::addr_of!(d.audit_trail_self_match_prevention_id) as usize) - p,
                "audit_trail_self_match_prevention_id offset expected {:} but was {:}",
                203usize,
                (core::ptr::addr_of!(d.audit_trail_self_match_prevention_id) as usize) - p,
            );
            assert_eq!(
                207usize,
                (core::ptr::addr_of!(d.audit_trail_session_id) as usize) - p,
                "audit_trail_session_id offset expected {:} but was {:}",
                207usize,
                (core::ptr::addr_of!(d.audit_trail_session_id) as usize) - p,
            );
            assert_eq!(
                211usize,
                (core::ptr::addr_of!(d.audit_trail_executing_firm_id) as usize) - p,
                "audit_trail_executing_firm_id offset expected {:} but was {:}",
                211usize,
                (core::ptr::addr_of!(d.audit_trail_executing_firm_id) as usize) - p,
            );
            assert_eq!(
                215usize,
                (core::ptr::addr_of!(d.audit_trail_fix_message_type) as usize) - p,
                "audit_trail_fix_message_type offset expected {:} but was {:}",
                215usize,
                (core::ptr::addr_of!(d.audit_trail_fix_message_type) as usize) - p,
            );
            assert_eq!(
                219usize,
                (core::ptr::addr_of!(d.audit_trail_customer_type_indicator) as usize) - p,
                "audit_trail_customer_type_indicator offset expected {:} but was {:}",
                219usize,
                (core::ptr::addr_of!(d.audit_trail_customer_type_indicator) as usize) - p,
            );
            assert_eq!(
                221usize,
                (core::ptr::addr_of!(d.audit_trail_customer_or_firm) as usize) - p,
                "audit_trail_customer_or_firm offset expected {:} but was {:}",
                221usize,
                (core::ptr::addr_of!(d.audit_trail_customer_or_firm) as usize) - p,
            );
            assert_eq!(
                223usize,
                (core::ptr::addr_of!(d.audit_trail_execution_report_id) as usize) - p,
                "audit_trail_execution_report_id offset expected {:} but was {:}",
                223usize,
                (core::ptr::addr_of!(d.audit_trail_execution_report_id) as usize) - p,
            );
            assert_eq!(
                227usize,
                (core::ptr::addr_of!(d.audit_trail_spread_leg_link_id) as usize) - p,
                "audit_trail_spread_leg_link_id offset expected {:} but was {:}",
                227usize,
                (core::ptr::addr_of!(d.audit_trail_spread_leg_link_id) as usize) - p,
            );
            assert_eq!(
                231usize,
                (core::ptr::addr_of!(d.audit_trail_security_desc) as usize) - p,
                "audit_trail_security_desc offset expected {:} but was {:}",
                231usize,
                (core::ptr::addr_of!(d.audit_trail_security_desc) as usize) - p,
            );
            assert_eq!(
                235usize,
                (core::ptr::addr_of!(d.audit_trail_market_segment_id) as usize) - p,
                "audit_trail_market_segment_id offset expected {:} but was {:}",
                235usize,
                (core::ptr::addr_of!(d.audit_trail_market_segment_id) as usize) - p,
            );
            assert_eq!(
                239usize,
                (core::ptr::addr_of!(d.audit_trail_ifm_flag) as usize) - p,
                "audit_trail_ifm_flag offset expected {:} but was {:}",
                239usize,
                (core::ptr::addr_of!(d.audit_trail_ifm_flag) as usize) - p,
            );
            assert_eq!(
                240usize,
                (core::ptr::addr_of!(d.audit_trail_display_quantity) as usize) - p,
                "audit_trail_display_quantity offset expected {:} but was {:}",
                240usize,
                (core::ptr::addr_of!(d.audit_trail_display_quantity) as usize) - p,
            );
            assert_eq!(
                248usize,
                (core::ptr::addr_of!(d.audit_trail_country_of_origin) as usize) - p,
                "audit_trail_country_of_origin offset expected {:} but was {:}",
                248usize,
                (core::ptr::addr_of!(d.audit_trail_country_of_origin) as usize) - p,
            );
            assert_eq!(
                252usize,
                (core::ptr::addr_of!(d.audit_trail_fill_quantity) as usize) - p,
                "audit_trail_fill_quantity offset expected {:} but was {:}",
                252usize,
                (core::ptr::addr_of!(d.audit_trail_fill_quantity) as usize) - p,
            );
            assert_eq!(
                260usize,
                (core::ptr::addr_of!(d.audit_trail_remaining_quantity) as usize) - p,
                "audit_trail_remaining_quantity offset expected {:} but was {:}",
                260usize,
                (core::ptr::addr_of!(d.audit_trail_remaining_quantity) as usize) - p,
            );
            assert_eq!(
                268usize,
                (core::ptr::addr_of!(d.audit_trail_aggressor_flag) as usize) - p,
                "audit_trail_aggressor_flag offset expected {:} but was {:}",
                268usize,
                (core::ptr::addr_of!(d.audit_trail_aggressor_flag) as usize) - p,
            );
            assert_eq!(
                269usize,
                (core::ptr::addr_of!(d.audit_trail_source_of_cancellation) as usize) - p,
                "audit_trail_source_of_cancellation offset expected {:} but was {:}",
                269usize,
                (core::ptr::addr_of!(d.audit_trail_source_of_cancellation) as usize) - p,
            );
            assert_eq!(
                273usize,
                (core::ptr::addr_of!(d.audit_trail_ord_rej_reason) as usize) - p,
                "audit_trail_ord_rej_reason offset expected {:} but was {:}",
                273usize,
                (core::ptr::addr_of!(d.audit_trail_ord_rej_reason) as usize) - p,
            );
            assert_eq!(
                277usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
                "is_snapshot offset expected {:} but was {:}",
                277usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
            );
            assert_eq!(
                278usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
                "is_first_message_in_batch offset expected {:} but was {:}",
                278usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
            );
            assert_eq!(
                279usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
                "is_last_message_in_batch offset expected {:} but was {:}",
                279usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
            );
        }
    }
}
