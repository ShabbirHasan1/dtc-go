// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP_FIXED_SIZE: usize = 21;

/// size                   u16                     = MarketDepthUpdateLevelNoTimestampFixedSize  (21)
/// type                   u16                     = MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP  (141)
/// symbol_id              u32                     = 0
/// price                  f32                     = 0
/// quantity               f32                     = 0
/// num_orders             u16                     = 0
/// side                   i8                      = 0
/// update_type            i8                      = 0
/// final_update_in_batch  FinalUpdateInBatchEnum  = FINAL_UPDATE_UNSET  (0)
pub(crate) const MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP_FIXED_DEFAULT: [u8; 21] = [
    21, 0, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// This message is identical to the MarketDepthUpdateLevelFixed message except
/// it has no timestamp field. It needs to be sent when there is no change
/// with the timestamp for the market depth update as compared to the prior
/// update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received market depth update timestamp to know what the
/// timestamp is for this message.
pub trait MarketDepthUpdateLevelNoTimestamp: Message {
    type Safe: MarketDepthUpdateLevelNoTimestamp;
    type Unsafe: MarketDepthUpdateLevelNoTimestamp;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The price level to insert, update or delete.
    fn price(&self) -> f32;

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn quantity(&self) -> f32;

    /// The number of orders at the Price.
    fn num_orders(&self) -> u16;

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn side(&self) -> i8;

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn update_type(&self) -> i8;

    /// An indicator whether this is the beginning or final update in a batch
    /// of updates.
    fn final_update_in_batch(&self) -> FinalUpdateInBatchEnum;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The price level to insert, update or delete.
    fn set_price(&mut self, value: f32) -> &mut Self;

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn set_quantity(&mut self, value: f32) -> &mut Self;

    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u16) -> &mut Self;

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn set_side(&mut self, value: i8) -> &mut Self;

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn set_update_type(&mut self, value: i8) -> &mut Self;

    /// An indicator whether this is the beginning or final update in a batch
    /// of updates.
    fn set_final_update_in_batch(&mut self, value: FinalUpdateInBatchEnum) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDepthUpdateLevelNoTimestamp) {
        to.set_symbol_id(self.symbol_id());
        to.set_price(self.price());
        to.set_quantity(self.quantity());
        to.set_num_orders(self.num_orders());
        to.set_side(self.side());
        to.set_update_type(self.update_type());
        to.set_final_update_in_batch(self.final_update_in_batch());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 4 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// This message is identical to the MarketDepthUpdateLevelFixed message except
/// it has no timestamp field. It needs to be sent when there is no change
/// with the timestamp for the market depth update as compared to the prior
/// update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received market depth update timestamp to know what the
/// timestamp is for this message.
pub struct MarketDepthUpdateLevelNoTimestampFixed {
    data: *const MarketDepthUpdateLevelNoTimestampFixedData,
}

pub struct MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    data: *const MarketDepthUpdateLevelNoTimestampFixedData,
}

#[repr(packed(1), C)]
pub struct MarketDepthUpdateLevelNoTimestampFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    price: f32,
    quantity: f32,
    num_orders: u16,
    side: i8,
    update_type: i8,
    final_update_in_batch: FinalUpdateInBatchEnum,
}

impl MarketDepthUpdateLevelNoTimestampFixedData {
    pub fn new() -> Self {
        Self {
            size: 21u16.to_le(),
            r#type: MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP.to_le(),
            symbol_id: 0u32,
            price: 0.0f32,
            quantity: 0.0f32,
            num_orders: 0u16,
            side: 0i8,
            update_type: 0i8,
            final_update_in_batch: FinalUpdateInBatchEnum::FinalUpdateUnset.to_le(),
        }
    }
}

unsafe impl Send for MarketDepthUpdateLevelNoTimestampFixed {}
unsafe impl Send for MarketDepthUpdateLevelNoTimestampFixedUnsafe {}
unsafe impl Send for MarketDepthUpdateLevelNoTimestampFixedData {}

impl Drop for MarketDepthUpdateLevelNoTimestampFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDepthUpdateLevelNoTimestampFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDepthUpdateLevelNoTimestampFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDepthUpdateLevelNoTimestampFixed {
    type Target = MarketDepthUpdateLevelNoTimestampFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthUpdateLevelNoTimestampFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    type Target = MarketDepthUpdateLevelNoTimestampFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for MarketDepthUpdateLevelNoTimestampFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthUpdateLevelNoTimestampFixed(size: {}, type: {}, symbol_id: {}, price: {}, quantity: {}, num_orders: {}, side: {}, update_type: {}, final_update_in_batch: {})", self.size(), self.r#type(), self.symbol_id(), self.price(), self.quantity(), self.num_orders(), self.side(), self.update_type(), self.final_update_in_batch()).as_str())
    }
}

impl core::fmt::Debug for MarketDepthUpdateLevelNoTimestampFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthUpdateLevelNoTimestampFixed(size: {}, type: {}, symbol_id: {}, price: {}, quantity: {}, num_orders: {}, side: {}, update_type: {}, final_update_in_batch: {})", self.size(), self.r#type(), self.symbol_id(), self.price(), self.quantity(), self.num_orders(), self.side(), self.update_type(), self.final_update_in_batch()).as_str())
    }
}

impl core::fmt::Display for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthUpdateLevelNoTimestampFixedUnsafe(size: {}, type: {}, symbol_id: {}, price: {}, quantity: {}, num_orders: {}, side: {}, update_type: {}, final_update_in_batch: {})", self.size(), self.r#type(), self.symbol_id(), self.price(), self.quantity(), self.num_orders(), self.side(), self.update_type(), self.final_update_in_batch()).as_str())
    }
}

impl core::fmt::Debug for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDepthUpdateLevelNoTimestampFixedUnsafe(size: {}, type: {}, symbol_id: {}, price: {}, quantity: {}, num_orders: {}, side: {}, update_type: {}, final_update_in_batch: {})", self.size(), self.r#type(), self.symbol_id(), self.price(), self.quantity(), self.num_orders(), self.side(), self.update_type(), self.final_update_in_batch()).as_str())
    }
}

impl crate::Message for MarketDepthUpdateLevelNoTimestampFixed {
    type Data = MarketDepthUpdateLevelNoTimestampFixedData;

    const TYPE: u16 = MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP;
    const BASE_SIZE: usize = 21;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDepthUpdateLevelNoTimestampFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthUpdateLevelNoTimestampFixedData,
        }
    }
}
impl crate::Message for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    type Data = MarketDepthUpdateLevelNoTimestampFixedData;

    const TYPE: u16 = MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP;
    const BASE_SIZE: usize = 21;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDepthUpdateLevelNoTimestampFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDepthUpdateLevelNoTimestampFixedData,
        }
    }
}
/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// This message is identical to the MarketDepthUpdateLevelFixed message except
/// it has no timestamp field. It needs to be sent when there is no change
/// with the timestamp for the market depth update as compared to the prior
/// update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received market depth update timestamp to know what the
/// timestamp is for this message.
impl MarketDepthUpdateLevelNoTimestamp for MarketDepthUpdateLevelNoTimestampFixed {
    type Safe = MarketDepthUpdateLevelNoTimestampFixed;
    type Unsafe = MarketDepthUpdateLevelNoTimestampFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The price level to insert, update or delete.
    fn price(&self) -> f32 {
        f32_le(self.price)
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn quantity(&self) -> f32 {
        f32_le(self.quantity)
    }

    /// The number of orders at the Price.
    fn num_orders(&self) -> u16 {
        u16::from_le(self.num_orders)
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn side(&self) -> i8 {
        self.side
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn update_type(&self) -> i8 {
        self.update_type
    }

    /// An indicator whether this is the beginning or final update in a batch
    /// of updates.
    fn final_update_in_batch(&self) -> FinalUpdateInBatchEnum {
        FinalUpdateInBatchEnum::from_le(self.final_update_in_batch)
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The price level to insert, update or delete.
    fn set_price(&mut self, value: f32) -> &mut Self {
        self.price = f32_le(value);
        self
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn set_quantity(&mut self, value: f32) -> &mut Self {
        self.quantity = f32_le(value);
        self
    }

    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u16) -> &mut Self {
        self.num_orders = value.to_le();
        self
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn set_side(&mut self, value: i8) -> &mut Self {
        self.side = value;
        self
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn set_update_type(&mut self, value: i8) -> &mut Self {
        self.update_type = value;
        self
    }

    /// An indicator whether this is the beginning or final update in a batch
    /// of updates.
    fn set_final_update_in_batch(&mut self, value: FinalUpdateInBatchEnum) -> &mut Self {
        self.final_update_in_batch = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// Sent by the Server to the Client to Update/Insert or Delete a particular
/// market depth price level in the market depth book maintained by the Client.
/// market depth price level in the market depth book maintained by the Client.
///
/// This message is identical to the MarketDepthUpdateLevelFixed message except
/// it has no timestamp field. It needs to be sent when there is no change
/// with the timestamp for the market depth update as compared to the prior
/// update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received market depth update timestamp to know what the
/// timestamp is for this message.
impl MarketDepthUpdateLevelNoTimestamp for MarketDepthUpdateLevelNoTimestampFixedUnsafe {
    type Safe = MarketDepthUpdateLevelNoTimestampFixed;
    type Unsafe = MarketDepthUpdateLevelNoTimestampFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The price level to insert, update or delete.
    fn price(&self) -> f32 {
        if self.is_out_of_bounds(12) {
            0.0f32
        } else {
            f32_le(self.price)
        }
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn quantity(&self) -> f32 {
        if self.is_out_of_bounds(16) {
            0.0f32
        } else {
            f32_le(self.quantity)
        }
    }

    /// The number of orders at the Price.
    fn num_orders(&self) -> u16 {
        if self.is_out_of_bounds(18) {
            0u16
        } else {
            u16::from_le(self.num_orders)
        }
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn side(&self) -> i8 {
        if self.is_out_of_bounds(19) {
            0i8
        } else {
            self.side
        }
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn update_type(&self) -> i8 {
        if self.is_out_of_bounds(20) {
            0i8
        } else {
            self.update_type
        }
    }

    /// An indicator whether this is the beginning or final update in a batch
    /// of updates.
    fn final_update_in_batch(&self) -> FinalUpdateInBatchEnum {
        if self.is_out_of_bounds(21) {
            FinalUpdateInBatchEnum::FinalUpdateUnset.to_le()
        } else {
            FinalUpdateInBatchEnum::from_le(self.final_update_in_batch)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDepthRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The price level to insert, update or delete.
    fn set_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.price = f32_le(value);
        }
        self
    }

    /// The number of shares/contracts at the Price level. This will be 0 in the
    /// case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL.
    fn set_quantity(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.quantity = f32_le(value);
        }
        self
    }

    /// The number of orders at the Price.
    fn set_num_orders(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.num_orders = value.to_le();
        }
        self
    }

    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    /// Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK).
    fn set_side(&mut self, value: i8) -> &mut Self {
        if !self.is_out_of_bounds(19) {
            self.side = value;
        }
        self
    }

    /// Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation
    /// or a MARKET_DEPTH_DELETE_LEVEL operation.
    ///
    /// MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth
    /// book on the specified side, the particular Price and Volume specified.
    /// It is an insert operation of the price level does not exist. It is an
    /// update operation if the price level already exists. In the case of insert,
    /// the other levels in the market depth book need to be shifted to make room
    /// for the new level.
    ///
    /// MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified
    /// side, the specified Price level. The other levels need to be shifted to
    /// fill in the missing level. In this particular case the Quantity is ignored
    /// and will be 0.
    fn set_update_type(&mut self, value: i8) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.update_type = value;
        }
        self
    }

    /// An indicator whether this is the beginning or final update in a batch
    /// of updates.
    fn set_final_update_in_batch(&mut self, value: FinalUpdateInBatchEnum) -> &mut Self {
        if !self.is_out_of_bounds(21) {
            self.final_update_in_batch = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                21usize,
                core::mem::size_of::<MarketDepthUpdateLevelNoTimestampFixedData>(),
                "MarketDepthUpdateLevelNoTimestampFixedData sizeof expected {:} but was {:}",
                21usize,
                core::mem::size_of::<MarketDepthUpdateLevelNoTimestampFixedData>()
            );
            assert_eq!(
                21u16,
                MarketDepthUpdateLevelNoTimestampFixed::new().size(),
                "MarketDepthUpdateLevelNoTimestampFixed sizeof expected {:} but was {:}",
                21u16,
                MarketDepthUpdateLevelNoTimestampFixed::new().size(),
            );
            assert_eq!(
                MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP,
                MarketDepthUpdateLevelNoTimestampFixed::new().r#type(),
                "MarketDepthUpdateLevelNoTimestampFixed type expected {:} but was {:}",
                MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP,
                MarketDepthUpdateLevelNoTimestampFixed::new().r#type(),
            );
            assert_eq!(
                141u16,
                MarketDepthUpdateLevelNoTimestampFixed::new().r#type(),
                "MarketDepthUpdateLevelNoTimestampFixed type expected {:} but was {:}",
                141u16,
                MarketDepthUpdateLevelNoTimestampFixed::new().r#type(),
            );
            let d = MarketDepthUpdateLevelNoTimestampFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.num_orders) as usize) - p,
                "num_orders offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.num_orders) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.side) as usize) - p,
                "side offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.side) as usize) - p,
            );
            assert_eq!(
                19usize,
                (core::ptr::addr_of!(d.update_type) as usize) - p,
                "update_type offset expected {:} but was {:}",
                19usize,
                (core::ptr::addr_of!(d.update_type) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.final_update_in_batch) as usize) - p,
                "final_update_in_batch offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.final_update_in_batch) as usize) - p,
            );
        }
    }
}
