// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-24 10:12:33.526761 +0800 WITA m=+0.004576126
use super::*;
use crate::message::*;

const MARKET_DATA_UPDATE_BID_ASK_NO_TIME_STAMP_FIXED_SIZE: usize = 24;

/// size          u16  = MarketDataUpdateBidAskNoTimeStampFixedSize  (24)
/// type          u16  = MARKET_DATA_UPDATE_BID_ASK_NO_TIMESTAMP  (143)
/// symbol_id     u32  = 0
/// bid_price     f32  = f32.MAX
/// bid_quantity  u32  = 0
/// ask_price     f32  = f32.MAX
/// ask_quantity  u32  = 0
const MARKET_DATA_UPDATE_BID_ASK_NO_TIME_STAMP_FIXED_DEFAULT: [u8; 24] = [24, 0, 143, 0, 0, 0, 0, 0, 255, 255, 127, 127, 0, 0, 0, 0, 255, 255, 127, 127, 0, 0, 0, 0];

/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
pub trait MarketDataUpdateBidAskNoTimeStamp {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The current Bid price. Leave unset if there is no price available.
    fn bid_price(&self) -> f32;

    /// The current number of contracts/shares at the Bid price.
    fn bid_quantity(&self) -> u32;

    /// The current Ask or offer price. Leave unset if there is no price available.
    /// The current Ask or offer price. Leave unset if there is no price available.
    fn ask_price(&self) -> f32;

    /// The current number of contracts/shares at the Ask price.
    fn ask_quantity(&self) -> u32;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The current Bid price. Leave unset if there is no price available.
    fn set_bid_price(&mut self, value: f32) -> &mut Self;

    /// The current number of contracts/shares at the Bid price.
    fn set_bid_quantity(&mut self, value: u32) -> &mut Self;

    /// The current Ask or offer price. Leave unset if there is no price available.
    /// The current Ask or offer price. Leave unset if there is no price available.
    fn set_ask_price(&mut self, value: f32) -> &mut Self;

    /// The current number of contracts/shares at the Ask price.
    fn set_ask_quantity(&mut self, value: u32) -> &mut Self;

    fn copy_to(&self, to: &mut impl MarketDataUpdateBidAskNoTimeStamp) {
        to.set_symbol_id(self.symbol_id());
        to.set_bid_price(self.bid_price());
        to.set_bid_quantity(self.bid_quantity());
        to.set_ask_price(self.ask_price());
        to.set_ask_quantity(self.ask_quantity());
    }
}

/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
pub struct MarketDataUpdateBidAskNoTimeStampFixed {
    data: *const MarketDataUpdateBidAskNoTimeStampFixedData
}

pub struct MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    data: *const MarketDataUpdateBidAskNoTimeStampFixedData
}

#[repr(packed, C)]
pub struct MarketDataUpdateBidAskNoTimeStampFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    bid_price: f32,
    bid_quantity: u32,
    ask_price: f32,
    ask_quantity: u32,
}

impl MarketDataUpdateBidAskNoTimeStampFixedData {
    pub fn new() -> Self {
        Self {
            size: 24u16.to_le(),
            r#type: MARKET_DATA_UPDATE_BID_ASK_NO_TIMESTAMP.to_le(),
            symbol_id: 0u32,
            bid_price: f32_le(f32::MAX),
            bid_quantity: 0u32,
            ask_price: f32_le(f32::MAX),
            ask_quantity: 0u32,
        }
    }
}

unsafe impl Send for MarketDataUpdateBidAskNoTimeStampFixed {}
unsafe impl Send for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {}
unsafe impl Send for MarketDataUpdateBidAskNoTimeStampFixedData {}

impl Drop for MarketDataUpdateBidAskNoTimeStampFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataUpdateBidAskNoTimeStampFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataUpdateBidAskNoTimeStampFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataUpdateBidAskNoTimeStampFixed {
    type Target = MarketDataUpdateBidAskNoTimeStampFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateBidAskNoTimeStampFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    type Target = MarketDataUpdateBidAskNoTimeStampFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataUpdateBidAskNoTimeStampFixed {
    type Safe = MarketDataUpdateBidAskNoTimeStampFixed;
    type Unsafe = MarketDataUpdateBidAskNoTimeStampFixedUnsafe;
    type Data = MarketDataUpdateBidAskNoTimeStampFixedData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataUpdateBidAskNoTimeStampFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateBidAskNoTimeStampFixedData
        }
    }

}

impl crate::Message for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    type Safe = MarketDataUpdateBidAskNoTimeStampFixed;
    type Unsafe = MarketDataUpdateBidAskNoTimeStampFixedUnsafe;
    type Data = MarketDataUpdateBidAskNoTimeStampFixedData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataUpdateBidAskNoTimeStampFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateBidAskNoTimeStampFixedData
        }
    }

}

/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
impl MarketDataUpdateBidAskNoTimeStamp for MarketDataUpdateBidAskNoTimeStampFixed {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The current Bid price. Leave unset if there is no price available.
    fn bid_price(&self) -> f32 {
        crate::f32_le(self.bid_price)
    }

    /// The current number of contracts/shares at the Bid price.
    fn bid_quantity(&self) -> u32 {
        u32::from_le(self.bid_quantity)
    }

    /// The current Ask or offer price. Leave unset if there is no price available.
    /// The current Ask or offer price. Leave unset if there is no price available.
    fn ask_price(&self) -> f32 {
        crate::f32_le(self.ask_price)
    }

    /// The current number of contracts/shares at the Ask price.
    fn ask_quantity(&self) -> u32 {
        u32::from_le(self.ask_quantity)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }


    /// The current Bid price. Leave unset if there is no price available.
    fn set_bid_price(&mut self, value: f32) -> &mut Self {
        self.bid_price = f32_le(value);
        self
    }


    /// The current number of contracts/shares at the Bid price.
    fn set_bid_quantity(&mut self, value: u32) -> &mut Self {
        self.bid_quantity = value.to_le();
        self
    }


    /// The current Ask or offer price. Leave unset if there is no price available.
    /// The current Ask or offer price. Leave unset if there is no price available.
    fn set_ask_price(&mut self, value: f32) -> &mut Self {
        self.ask_price = f32_le(value);
        self
    }


    /// The current number of contracts/shares at the Ask price.
    fn set_ask_quantity(&mut self, value: u32) -> &mut Self {
        self.ask_quantity = value.to_le();
        self
    }

}

/// This message is optional.
///
/// Sent by the Server to the Client when there is an update to the Bid Ask
/// prices and/or quantities. This message is identical to the MarketDataUpdateBidAskFixed
/// message except it does not have a timestamp. It needs to be sent when
/// there is no change with the timestamp for the Bid Ask update as compared
/// to the prior update.
///
/// When the Server sends this message to the Client, the Client needs to
/// use the prior received Bid Ask update timestamp to know what the timestamp
/// is for this message.
impl MarketDataUpdateBidAskNoTimeStamp for MarketDataUpdateBidAskNoTimeStampFixedUnsafe {
    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The current Bid price. Leave unset if there is no price available.
    fn bid_price(&self) -> f32 {
        if self.is_out_of_bounds(12) {
            f32_le(f32::MAX)
        } else {
            crate::f32_le(self.bid_price)
        }
    }

    /// The current number of contracts/shares at the Bid price.
    fn bid_quantity(&self) -> u32 {
        if self.is_out_of_bounds(16) {
            0u32
        } else {
            u32::from_le(self.bid_quantity)
        }
    }

    /// The current Ask or offer price. Leave unset if there is no price available.
    /// The current Ask or offer price. Leave unset if there is no price available.
    fn ask_price(&self) -> f32 {
        if self.is_out_of_bounds(20) {
            f32_le(f32::MAX)
        } else {
            crate::f32_le(self.ask_price)
        }
    }

    /// The current number of contracts/shares at the Ask price.
    fn ask_quantity(&self) -> u32 {
        if self.is_out_of_bounds(24) {
            0u32
        } else {
            u32::from_le(self.ask_quantity)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }


    /// The current Bid price. Leave unset if there is no price available.
    fn set_bid_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.bid_price = f32_le(value);
        }
        self
    }


    /// The current number of contracts/shares at the Bid price.
    fn set_bid_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.bid_quantity = value.to_le();
        }
        self
    }


    /// The current Ask or offer price. Leave unset if there is no price available.
    /// The current Ask or offer price. Leave unset if there is no price available.
    fn set_ask_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.ask_price = f32_le(value);
        }
        self
    }


    /// The current number of contracts/shares at the Ask price.
    fn set_ask_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.ask_quantity = value.to_le();
        }
        self
    }

}

