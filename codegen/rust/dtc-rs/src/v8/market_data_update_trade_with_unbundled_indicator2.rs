// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR2_FIXED_SIZE: usize = 27;

/// size                       u16                          = MarketDataUpdateTradeWithUnbundledIndicator2FixedSize  (27)
/// type                       u16                          = MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2  (146)
/// symbol_id                  u32                          = 0
/// price                      f32                          = 0
/// volume                     u32                          = 0
/// date_time                  DateTimeWithMicrosecondsInt  = 0
/// at_bid_or_ask              AtBidOrAskEnum8              = BID_ASK_UNSET_8  (0)
/// unbundled_trade_indicator  UnbundledTradeIndicatorEnum  = UNBUNDLED_TRADE_NONE  (0)
/// trade_condition            TradeConditionEnum           = TRADE_CONDITION_NONE  (0)
pub(crate) const MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR2_FIXED_DEFAULT: [u8; 27] = [
    27, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// Sent by the Server to the Client when a trade occurs. This message has
/// additional fields as compared to the MarketDataUpdateTradeFixed message
/// and also supports microsecond time stamping.
pub trait MarketDataUpdateTradeWithUnbundledIndicator2: Message {
    type Safe: MarketDataUpdateTradeWithUnbundledIndicator2;
    type Unsafe: MarketDataUpdateTradeWithUnbundledIndicator2;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The price of the trade.
    fn price(&self) -> f32;

    /// The volume of the trade.
    fn volume(&self) -> u32;

    /// The timestamp of the trade in UNIX microseconds time format.
    fn date_time(&self) -> DateTimeWithMicrosecondsInt;

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum8;

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn unbundled_trade_indicator(&self) -> UnbundledTradeIndicatorEnum;

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn trade_condition(&self) -> TradeConditionEnum;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The price of the trade.
    fn set_price(&mut self, value: f32) -> &mut Self;

    /// The volume of the trade.
    fn set_volume(&mut self, value: u32) -> &mut Self;

    /// The timestamp of the trade in UNIX microseconds time format.
    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self;

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum8) -> &mut Self;

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn set_unbundled_trade_indicator(&mut self, value: UnbundledTradeIndicatorEnum) -> &mut Self;

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn set_trade_condition(&mut self, value: TradeConditionEnum) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDataUpdateTradeWithUnbundledIndicator2) {
        to.set_symbol_id(self.symbol_id());
        to.set_price(self.price());
        to.set_volume(self.volume());
        to.set_date_time(self.date_time());
        to.set_at_bid_or_ask(self.at_bid_or_ask());
        to.set_unbundled_trade_indicator(self.unbundled_trade_indicator());
        to.set_trade_condition(self.trade_condition());
    }
}

/// Sent by the Server to the Client when a trade occurs. This message has
/// additional fields as compared to the MarketDataUpdateTradeFixed message
/// and also supports microsecond time stamping.
pub struct MarketDataUpdateTradeWithUnbundledIndicator2Fixed {
    data: *const MarketDataUpdateTradeWithUnbundledIndicator2FixedData,
}

pub struct MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {
    data: *const MarketDataUpdateTradeWithUnbundledIndicator2FixedData,
}

#[repr(packed(1), C)]
pub struct MarketDataUpdateTradeWithUnbundledIndicator2FixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    price: f32,
    volume: u32,
    date_time: DateTimeWithMicrosecondsInt,
    at_bid_or_ask: AtBidOrAskEnum8,
    unbundled_trade_indicator: UnbundledTradeIndicatorEnum,
    trade_condition: TradeConditionEnum,
}

impl MarketDataUpdateTradeWithUnbundledIndicator2FixedData {
    pub fn new() -> Self {
        Self {
            size: 27u16.to_le(),
            r#type: MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2.to_le(),
            symbol_id: 0u32,
            price: 0.0f32,
            volume: 0u32,
            date_time: 0i64,
            at_bid_or_ask: AtBidOrAskEnum8::BidAskUnset8.to_le(),
            unbundled_trade_indicator: UnbundledTradeIndicatorEnum::UnbundledTradeNone.to_le(),
            trade_condition: TradeConditionEnum::TradeConditionNone.to_le(),
        }
    }
}

unsafe impl Send for MarketDataUpdateTradeWithUnbundledIndicator2Fixed {}
unsafe impl Send for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {}
unsafe impl Send for MarketDataUpdateTradeWithUnbundledIndicator2FixedData {}

impl Drop for MarketDataUpdateTradeWithUnbundledIndicator2Fixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataUpdateTradeWithUnbundledIndicator2Fixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataUpdateTradeWithUnbundledIndicator2Fixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataUpdateTradeWithUnbundledIndicator2Fixed {
    type Target = MarketDataUpdateTradeWithUnbundledIndicator2FixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateTradeWithUnbundledIndicator2Fixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {
    type Target = MarketDataUpdateTradeWithUnbundledIndicator2FixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataUpdateTradeWithUnbundledIndicator2Fixed {
    type Data = MarketDataUpdateTradeWithUnbundledIndicator2FixedData;

    const BASE_SIZE: usize = 27;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateTradeWithUnbundledIndicator2FixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateTradeWithUnbundledIndicator2FixedData,
        }
    }
}
impl crate::Message for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe {
    type Data = MarketDataUpdateTradeWithUnbundledIndicator2FixedData;

    const BASE_SIZE: usize = 27;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateTradeWithUnbundledIndicator2FixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateTradeWithUnbundledIndicator2FixedData,
        }
    }
}
/// Sent by the Server to the Client when a trade occurs. This message has
/// additional fields as compared to the MarketDataUpdateTradeFixed message
/// and also supports microsecond time stamping.
impl MarketDataUpdateTradeWithUnbundledIndicator2
    for MarketDataUpdateTradeWithUnbundledIndicator2Fixed
{
    type Safe = MarketDataUpdateTradeWithUnbundledIndicator2Fixed;
    type Unsafe = MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The price of the trade.
    fn price(&self) -> f32 {
        f32_le(self.price)
    }

    /// The volume of the trade.
    fn volume(&self) -> u32 {
        u32::from_le(self.volume)
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.date_time)
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum8 {
        AtBidOrAskEnum8::from_le(self.at_bid_or_ask)
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn unbundled_trade_indicator(&self) -> UnbundledTradeIndicatorEnum {
        UnbundledTradeIndicatorEnum::from_le(self.unbundled_trade_indicator)
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn trade_condition(&self) -> TradeConditionEnum {
        TradeConditionEnum::from_le(self.trade_condition)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The price of the trade.
    fn set_price(&mut self, value: f32) -> &mut Self {
        self.price = f32_le(value);
        self
    }

    /// The volume of the trade.
    fn set_volume(&mut self, value: u32) -> &mut Self {
        self.volume = value.to_le();
        self
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.date_time = value.to_le();
        self
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum8) -> &mut Self {
        self.at_bid_or_ask = unsafe { core::mem::transmute((value as u8).to_le()) };
        self
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn set_unbundled_trade_indicator(&mut self, value: UnbundledTradeIndicatorEnum) -> &mut Self {
        self.unbundled_trade_indicator = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn set_trade_condition(&mut self, value: TradeConditionEnum) -> &mut Self {
        self.trade_condition = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// Sent by the Server to the Client when a trade occurs. This message has
/// additional fields as compared to the MarketDataUpdateTradeFixed message
/// and also supports microsecond time stamping.
impl MarketDataUpdateTradeWithUnbundledIndicator2
    for MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe
{
    type Safe = MarketDataUpdateTradeWithUnbundledIndicator2Fixed;
    type Unsafe = MarketDataUpdateTradeWithUnbundledIndicator2FixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The price of the trade.
    fn price(&self) -> f32 {
        if self.is_out_of_bounds(12) {
            0.0f32
        } else {
            f32_le(self.price)
        }
    }

    /// The volume of the trade.
    fn volume(&self) -> u32 {
        if self.is_out_of_bounds(16) {
            0u32
        } else {
            u32::from_le(self.volume)
        }
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(24) {
            0i64
        } else {
            i64::from_le(self.date_time)
        }
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum8 {
        if self.is_out_of_bounds(25) {
            AtBidOrAskEnum8::BidAskUnset8.to_le()
        } else {
            AtBidOrAskEnum8::from_le(self.at_bid_or_ask)
        }
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn unbundled_trade_indicator(&self) -> UnbundledTradeIndicatorEnum {
        if self.is_out_of_bounds(26) {
            UnbundledTradeIndicatorEnum::UnbundledTradeNone.to_le()
        } else {
            UnbundledTradeIndicatorEnum::from_le(self.unbundled_trade_indicator)
        }
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn trade_condition(&self) -> TradeConditionEnum {
        if self.is_out_of_bounds(27) {
            TradeConditionEnum::TradeConditionNone.to_le()
        } else {
            TradeConditionEnum::from_le(self.trade_condition)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The price of the trade.
    fn set_price(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.price = f32_le(value);
        }
        self
    }

    /// The volume of the trade.
    fn set_volume(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.volume = value.to_le();
        }
        self
    }

    /// The timestamp of the trade in UNIX microseconds time format.
    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.date_time = value.to_le();
        }
        self
    }

    /// Indicator whether the trade occurred at the Bid or Ask price.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum8) -> &mut Self {
        if !self.is_out_of_bounds(25) {
            self.at_bid_or_ask = unsafe { core::mem::transmute((value as u8).to_le()) };
        }
        self
    }

    /// This is an optional field.
    ///
    /// For symbols on exchanges which support reporting individual trades which
    /// are part of a larger summary trade, this message field is used. It indicates
    /// whether the trade is part of a larger summary trrade and reported as an
    /// unbundled individual trade.
    ///
    /// The possible values are listed below.
    ///
    /// UNBUNDLED_TRADE_NONE = 0
    /// FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1
    /// LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2
    fn set_unbundled_trade_indicator(&mut self, value: UnbundledTradeIndicatorEnum) -> &mut Self {
        if !self.is_out_of_bounds(26) {
            self.unbundled_trade_indicator = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

    /// This is an optional field. It usually applies to stock symbols.
    ///
    /// This field indicates a special condition which applies to the trade. The
    /// possible values are listed below.
    ///
    /// TRADE_CONDITION_NONE = 0
    /// TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1
    /// TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2
    fn set_trade_condition(&mut self, value: TradeConditionEnum) -> &mut Self {
        if !self.is_out_of_bounds(27) {
            self.trade_condition = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                27usize,
                core::mem::size_of::<MarketDataUpdateTradeWithUnbundledIndicator2FixedData>(),
                "MarketDataUpdateTradeWithUnbundledIndicator2FixedData sizeof expected {:} but was {:}",
                27usize,
                core::mem::size_of::<MarketDataUpdateTradeWithUnbundledIndicator2FixedData>()
            );
            assert_eq!(
                27u16,
                MarketDataUpdateTradeWithUnbundledIndicator2Fixed::new().size(),
                "MarketDataUpdateTradeWithUnbundledIndicator2Fixed sizeof expected {:} but was {:}",
                27u16,
                MarketDataUpdateTradeWithUnbundledIndicator2Fixed::new().size(),
            );
            assert_eq!(
                MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2,
                MarketDataUpdateTradeWithUnbundledIndicator2Fixed::new().r#type(),
                "MarketDataUpdateTradeWithUnbundledIndicator2Fixed type expected {:} but was {:}",
                MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2,
                MarketDataUpdateTradeWithUnbundledIndicator2Fixed::new().r#type(),
            );
            assert_eq!(
                146u16,
                MarketDataUpdateTradeWithUnbundledIndicator2Fixed::new().r#type(),
                "MarketDataUpdateTradeWithUnbundledIndicator2Fixed type expected {:} but was {:}",
                146u16,
                MarketDataUpdateTradeWithUnbundledIndicator2Fixed::new().r#type(),
            );
            let d = MarketDataUpdateTradeWithUnbundledIndicator2FixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
                "volume offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.at_bid_or_ask) as usize) - p,
                "at_bid_or_ask offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.at_bid_or_ask) as usize) - p,
            );
            assert_eq!(
                25usize,
                (core::ptr::addr_of!(d.unbundled_trade_indicator) as usize) - p,
                "unbundled_trade_indicator offset expected {:} but was {:}",
                25usize,
                (core::ptr::addr_of!(d.unbundled_trade_indicator) as usize) - p,
            );
            assert_eq!(
                26usize,
                (core::ptr::addr_of!(d.trade_condition) as usize) - p,
                "trade_condition offset expected {:} but was {:}",
                26usize,
                (core::ptr::addr_of!(d.trade_condition) as usize) - p,
            );
        }
    }
}
