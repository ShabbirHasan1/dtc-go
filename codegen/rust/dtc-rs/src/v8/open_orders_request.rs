// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-24 10:12:33.526761 +0800 WITA m=+0.004576126
use super::*;
use crate::message::*;

const OPEN_ORDERS_REQUEST_VLS_SIZE: usize = 24;

const OPEN_ORDERS_REQUEST_FIXED_SIZE: usize = 76;

/// size                u16     = OpenOrdersRequestVLSSize  (24)
/// type                u16     = OPEN_ORDERS_REQUEST  (300)
/// base_size           u16     = OpenOrdersRequestVLSSize  (24)
/// request_id          i32     = 0
/// request_all_orders  i32     = 1
/// server_order_id     string  = ""
/// trade_account       string  = ""
const OPEN_ORDERS_REQUEST_VLS_DEFAULT: [u8; 24] = [24, 0, 44, 1, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size                u16       = OpenOrdersRequestFixedSize  (76)
/// type                u16       = OPEN_ORDERS_REQUEST  (300)
/// request_id          i32       = 0
/// request_all_orders  i32       = 1
/// server_order_id     string32  = ""
/// trade_account       string32  = ""
const OPEN_ORDERS_REQUEST_FIXED_DEFAULT: [u8; 76] = [76, 0, 44, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// This is a message from the Client to the Server requesting the currently
/// open orders.
///
/// The Server will send open/working orders in response to this request through
/// OrderUpdateVLS messages.
///
/// The Server will not return canceled or filled orders.
///
/// When the Server responds to this request, it needs to respond with a separate
/// OrderUpdateVLS for each order.
///
/// When the Server responds to this request, OrderUpdateReason in the OrderUpdateVLS
/// message must be set to OpenOrdersRequestVLS_RESPONSE indicating the orders
/// are being restated.
///
/// If there are no Open orders, the Server will send back 1 OrderUpdateVLS
/// message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason,
/// NoOrders = 1 fields set in the OrderUpdateVLS message.
pub trait OpenOrdersRequest {
    /// A unique request identifier for this request.
    fn request_id(&self) -> i32;

    /// 0 = request a specific order. 1 = for all orders (default).
    fn request_all_orders(&self) -> i32;

    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn server_order_id(&self) -> &str;

    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn trade_account(&self) -> &str;

    /// A unique request identifier for this request.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// 0 = request a specific order. 1 = for all orders (default).
    fn set_request_all_orders(&mut self, value: i32) -> &mut Self;

    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self;

    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn copy_to(&self, to: &mut impl OpenOrdersRequest) {
        to.set_request_id(self.request_id());
        to.set_request_all_orders(self.request_all_orders());
        to.set_server_order_id(self.server_order_id());
        to.set_trade_account(self.trade_account());
    }
}

/// This is a message from the Client to the Server requesting the currently
/// open orders.
///
/// The Server will send open/working orders in response to this request through
/// OrderUpdateVLS messages.
///
/// The Server will not return canceled or filled orders.
///
/// When the Server responds to this request, it needs to respond with a separate
/// OrderUpdateVLS for each order.
///
/// When the Server responds to this request, OrderUpdateReason in the OrderUpdateVLS
/// message must be set to OpenOrdersRequestVLS_RESPONSE indicating the orders
/// are being restated.
///
/// If there are no Open orders, the Server will send back 1 OrderUpdateVLS
/// message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason,
/// NoOrders = 1 fields set in the OrderUpdateVLS message.
pub struct OpenOrdersRequestVLS {
    data: *const OpenOrdersRequestVLSData,
    capacity: usize
}

pub struct OpenOrdersRequestVLSUnsafe {
    data: *const OpenOrdersRequestVLSData,
    capacity: usize
}

#[repr(packed, C)]
pub struct OpenOrdersRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    request_all_orders: i32,
    server_order_id: VLS,
    trade_account: VLS,
}

/// This is a message from the Client to the Server requesting the currently
/// open orders.
///
/// The Server will send open/working orders in response to this request through
/// OrderUpdateVLS messages.
///
/// The Server will not return canceled or filled orders.
///
/// When the Server responds to this request, it needs to respond with a separate
/// OrderUpdateVLS for each order.
///
/// When the Server responds to this request, OrderUpdateReason in the OrderUpdateVLS
/// message must be set to OpenOrdersRequestVLS_RESPONSE indicating the orders
/// are being restated.
///
/// If there are no Open orders, the Server will send back 1 OrderUpdateVLS
/// message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason,
/// NoOrders = 1 fields set in the OrderUpdateVLS message.
pub struct OpenOrdersRequestFixed {
    data: *const OpenOrdersRequestFixedData
}

pub struct OpenOrdersRequestFixedUnsafe {
    data: *const OpenOrdersRequestFixedData
}

#[repr(packed, C)]
pub struct OpenOrdersRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    request_all_orders: i32,
    server_order_id: [u8; 32],
    trade_account: [u8; 32],
}

impl OpenOrdersRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 24u16.to_le(),
            r#type: OPEN_ORDERS_REQUEST.to_le(),
            base_size: 24u16.to_le(),
            request_id: 0i32,
            request_all_orders: 1i32.to_le(),
            server_order_id: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
        }
    }
}

impl OpenOrdersRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 76u16.to_le(),
            r#type: OPEN_ORDERS_REQUEST.to_le(),
            request_id: 0i32,
            request_all_orders: 1i32.to_le(),
            server_order_id: [0; 32],
            trade_account: [0; 32],
        }
    }
}

unsafe impl Send for OpenOrdersRequestFixed {}
unsafe impl Send for OpenOrdersRequestFixedUnsafe {}
unsafe impl Send for OpenOrdersRequestFixedData {}
unsafe impl Send for OpenOrdersRequestVLS {}
unsafe impl Send for OpenOrdersRequestVLSUnsafe {}
unsafe impl Send for OpenOrdersRequestVLSData {}

impl Drop for OpenOrdersRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for OpenOrdersRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for OpenOrdersRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for OpenOrdersRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for OpenOrdersRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for OpenOrdersRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for OpenOrdersRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for OpenOrdersRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for OpenOrdersRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for OpenOrdersRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for OpenOrdersRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for OpenOrdersRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for OpenOrdersRequestFixed {
    type Target = OpenOrdersRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for OpenOrdersRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for OpenOrdersRequestFixedUnsafe {
    type Target = OpenOrdersRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for OpenOrdersRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for OpenOrdersRequestVLS {
    type Target = OpenOrdersRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for OpenOrdersRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for OpenOrdersRequestVLSUnsafe {
    type Target = OpenOrdersRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for OpenOrdersRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for OpenOrdersRequestFixed {
    type Safe = OpenOrdersRequestFixed;
    type Unsafe = OpenOrdersRequestFixedUnsafe;
    type Data = OpenOrdersRequestFixedData;
    const BASE_SIZE: usize = 76;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, OpenOrdersRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const OpenOrdersRequestFixedData
        }
    }

}

impl crate::Message for OpenOrdersRequestFixedUnsafe {
    type Safe = OpenOrdersRequestFixed;
    type Unsafe = OpenOrdersRequestFixedUnsafe;
    type Data = OpenOrdersRequestFixedData;
    const BASE_SIZE: usize = 76;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, OpenOrdersRequestFixedData::new())
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const OpenOrdersRequestFixedData
        }
    }

}

impl crate::Message for OpenOrdersRequestVLS {
    type Safe = OpenOrdersRequestVLS;
    type Unsafe = OpenOrdersRequestVLSUnsafe;
    type Data = OpenOrdersRequestVLSData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, OpenOrdersRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const OpenOrdersRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for OpenOrdersRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const OpenOrdersRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}impl crate::Message for OpenOrdersRequestVLSUnsafe {
    type Safe = OpenOrdersRequestVLS;
    type Unsafe = OpenOrdersRequestVLSUnsafe;
    type Data = OpenOrdersRequestVLSData;
    const BASE_SIZE: usize = 24;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, OpenOrdersRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY
        }
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const OpenOrdersRequestVLSData,
            capacity
        }
    }

}

impl crate::VLSMessage for OpenOrdersRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const OpenOrdersRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }

}/// This is a message from the Client to the Server requesting the currently
/// open orders.
///
/// The Server will send open/working orders in response to this request through
/// OrderUpdateVLS messages.
///
/// The Server will not return canceled or filled orders.
///
/// When the Server responds to this request, it needs to respond with a separate
/// OrderUpdateVLS for each order.
///
/// When the Server responds to this request, OrderUpdateReason in the OrderUpdateVLS
/// message must be set to OpenOrdersRequestVLS_RESPONSE indicating the orders
/// are being restated.
///
/// If there are no Open orders, the Server will send back 1 OrderUpdateVLS
/// message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason,
/// NoOrders = 1 fields set in the OrderUpdateVLS message.
impl OpenOrdersRequest for OpenOrdersRequestVLS {
    /// A unique request identifier for this request.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// 0 = request a specific order. 1 = for all orders (default).
    fn request_all_orders(&self) -> i32 {
        i32::from_le(self.request_all_orders)
    }

    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn server_order_id(&self) -> &str {
        crate::get_vls(self, self.server_order_id)
    }

    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn trade_account(&self) -> &str {
        crate::get_vls(self, self.trade_account)
    }

    /// A unique request identifier for this request.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// 0 = request a specific order. 1 = for all orders (default).
    fn set_request_all_orders(&mut self, value: i32) -> &mut Self {
        self.request_all_orders = value.to_le();
        self
    }


    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        self.server_order_id = crate::set_vls(self, self.server_order_id, value);
        self
    }


    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = crate::set_vls(self, self.trade_account, value);
        self
    }

}

/// This is a message from the Client to the Server requesting the currently
/// open orders.
///
/// The Server will send open/working orders in response to this request through
/// OrderUpdateVLS messages.
///
/// The Server will not return canceled or filled orders.
///
/// When the Server responds to this request, it needs to respond with a separate
/// OrderUpdateVLS for each order.
///
/// When the Server responds to this request, OrderUpdateReason in the OrderUpdateVLS
/// message must be set to OpenOrdersRequestVLS_RESPONSE indicating the orders
/// are being restated.
///
/// If there are no Open orders, the Server will send back 1 OrderUpdateVLS
/// message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason,
/// NoOrders = 1 fields set in the OrderUpdateVLS message.
impl OpenOrdersRequest for OpenOrdersRequestVLSUnsafe {
    /// A unique request identifier for this request.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// 0 = request a specific order. 1 = for all orders (default).
    fn request_all_orders(&self) -> i32 {
        if self.is_out_of_bounds(16) {
            1i32.to_le()
        } else {
            i32::from_le(self.request_all_orders)
        }
    }

    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            crate::get_vls(self, self.server_order_id)
        }
    }

    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(24) {
            ""
        } else {
            crate::get_vls(self, self.trade_account)
        }
    }

    /// A unique request identifier for this request.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }


    /// 0 = request a specific order. 1 = for all orders (default).
    fn set_request_all_orders(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.request_all_orders = value.to_le();
        }
        self
    }


    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.server_order_id = crate::set_vls(self, self.server_order_id, value);
        }
        self
    }


    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.trade_account = crate::set_vls(self, self.trade_account, value);
        }
        self
    }

}

/// This is a message from the Client to the Server requesting the currently
/// open orders.
///
/// The Server will send open/working orders in response to this request through
/// OrderUpdateVLS messages.
///
/// The Server will not return canceled or filled orders.
///
/// When the Server responds to this request, it needs to respond with a separate
/// OrderUpdateVLS for each order.
///
/// When the Server responds to this request, OrderUpdateReason in the OrderUpdateVLS
/// message must be set to OpenOrdersRequestVLS_RESPONSE indicating the orders
/// are being restated.
///
/// If there are no Open orders, the Server will send back 1 OrderUpdateVLS
/// message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason,
/// NoOrders = 1 fields set in the OrderUpdateVLS message.
impl OpenOrdersRequest for OpenOrdersRequestFixed {
    /// A unique request identifier for this request.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// 0 = request a specific order. 1 = for all orders (default).
    fn request_all_orders(&self) -> i32 {
        i32::from_le(self.request_all_orders)
    }

    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn server_order_id(&self) -> &str {
        crate::get_fixed(&self.server_order_id[..])
    }

    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn trade_account(&self) -> &str {
        crate::get_fixed(&self.trade_account[..])
    }

    /// A unique request identifier for this request.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }


    /// 0 = request a specific order. 1 = for all orders (default).
    fn set_request_all_orders(&mut self, value: i32) -> &mut Self {
        self.request_all_orders = value.to_le();
        self
    }


    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.server_order_id[..], value);
        self
    }


    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        crate::set_fixed(&mut self.trade_account[..], value);
        self
    }

}

/// This is a message from the Client to the Server requesting the currently
/// open orders.
///
/// The Server will send open/working orders in response to this request through
/// OrderUpdateVLS messages.
///
/// The Server will not return canceled or filled orders.
///
/// When the Server responds to this request, it needs to respond with a separate
/// OrderUpdateVLS for each order.
///
/// When the Server responds to this request, OrderUpdateReason in the OrderUpdateVLS
/// message must be set to OpenOrdersRequestVLS_RESPONSE indicating the orders
/// are being restated.
///
/// If there are no Open orders, the Server will send back 1 OrderUpdateVLS
/// message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason,
/// NoOrders = 1 fields set in the OrderUpdateVLS message.
impl OpenOrdersRequest for OpenOrdersRequestFixedUnsafe {
    /// A unique request identifier for this request.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// 0 = request a specific order. 1 = for all orders (default).
    fn request_all_orders(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            1i32.to_le()
        } else {
            i32::from_le(self.request_all_orders)
        }
    }

    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn server_order_id(&self) -> &str {
        if self.is_out_of_bounds(44) {
            ""
        } else {
            crate::get_fixed(&self.server_order_id[..])
        }
    }

    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(76) {
            ""
        } else {
            crate::get_fixed(&self.trade_account[..])
        }
    }

    /// A unique request identifier for this request.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }


    /// 0 = request a specific order. 1 = for all orders (default).
    fn set_request_all_orders(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_all_orders = value.to_le();
        }
        self
    }


    /// Leave this field empty if Client wants all orders. Otherwise, specify
    /// the specific ServerServerID that want an OrderUpdateVLS message for.
    fn set_server_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(44) {
            crate::set_fixed(&mut self.server_order_id[..], value);
        }
        self
    }


    /// Leave this field empty if Client wants open orders for all Trade Accounts.
    /// Otherwise, specify the specific TradeAccount that want OrderUpdateVLS
    /// messages for.
    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(76) {
            crate::set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

}

