// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const ENCODING_RESPONSE_FIXED_SIZE: usize = 16;

/// size              u16           = EncodingResponseFixedSize  (16)
/// type              u16           = ENCODING_RESPONSE  (7)
/// protocol_version  i32           = CURRENT_VERSION  (8)
/// encoding          EncodingEnum  = BINARY_ENCODING  (0)
/// protocol_type     string4       = "DTC"
pub(crate) const ENCODING_RESPONSE_FIXED_DEFAULT: [u8; 16] =
    [16, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 68, 84, 67, 0];

/// Requirements: Required for Servers. Required for Clients if the Client
/// needs to discover the encoding the Server uses.
///
/// The EncodingResponseFixed is a message from the Server to the Client,
/// telling the Client what message encoding it must use to communicate with
/// the Server.
///
/// For the procedure to work with this message, refer to Encoding Request
/// Sequence.
pub trait EncodingResponse: Message {
    type Safe: EncodingResponse;
    type Unsafe: EncodingResponse;

    /// This field is automatically set by the constructor.
    fn protocol_version(&self) -> i32;

    /// The DTC message encoding to be used.
    ///
    /// This value may be different from the requested DTC encoding if the Server
    /// does not support the requested encoding from the Client.
    fn encoding(&self) -> EncodingEnum;

    /// The ProtocolType field needs to be set to the text string "DTC".
    ///
    /// This field is automatically set with the binary encoding data structures.
    /// This field is automatically set with the binary encoding data structures.
    ///
    /// This field is used for the Client to know that it is communicating with
    /// a DTC compliant Server.
    fn protocol_type(&self) -> &str;

    /// This field is automatically set by the constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self;

    /// The DTC message encoding to be used.
    ///
    /// This value may be different from the requested DTC encoding if the Server
    /// does not support the requested encoding from the Client.
    fn set_encoding(&mut self, value: EncodingEnum) -> &mut Self;

    /// The ProtocolType field needs to be set to the text string "DTC".
    ///
    /// This field is automatically set with the binary encoding data structures.
    /// This field is automatically set with the binary encoding data structures.
    ///
    /// This field is used for the Client to know that it is communicating with
    /// a DTC compliant Server.
    fn set_protocol_type(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl EncodingResponse) {
        to.set_protocol_version(self.protocol_version());
        to.set_encoding(self.encoding());
        to.set_protocol_type(self.protocol_type());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 4 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

/// Requirements: Required for Servers. Required for Clients if the Client
/// needs to discover the encoding the Server uses.
///
/// The EncodingResponseFixed is a message from the Server to the Client,
/// telling the Client what message encoding it must use to communicate with
/// the Server.
///
/// For the procedure to work with this message, refer to Encoding Request
/// Sequence.
pub struct EncodingResponseFixed {
    data: *const EncodingResponseFixedData,
}

pub struct EncodingResponseFixedUnsafe {
    data: *const EncodingResponseFixedData,
}

#[repr(packed(8), C)]
pub struct EncodingResponseFixedData {
    size: u16,
    r#type: u16,
    protocol_version: i32,
    encoding: EncodingEnum,
    protocol_type: [u8; 4],
}

impl EncodingResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 16u16.to_le(),
            r#type: ENCODING_RESPONSE.to_le(),
            protocol_version: CURRENT_VERSION.to_le(),
            encoding: EncodingEnum::BinaryEncoding.to_le(),
            protocol_type: [68, 84, 67, 0],
        }
    }
}

unsafe impl Send for EncodingResponseFixed {}
unsafe impl Send for EncodingResponseFixedUnsafe {}
unsafe impl Send for EncodingResponseFixedData {}

impl Drop for EncodingResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for EncodingResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for EncodingResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for EncodingResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for EncodingResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for EncodingResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for EncodingResponseFixed {
    type Target = EncodingResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for EncodingResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for EncodingResponseFixedUnsafe {
    type Target = EncodingResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for EncodingResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for EncodingResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("EncodingResponseFixed(size: {}, type: {}, protocol_version: {}, encoding: {}, protocol_type: \"{}\")", self.size(), self.r#type(), self.protocol_version(), self.encoding(), self.protocol_type()).as_str())
    }
}

impl core::fmt::Debug for EncodingResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("EncodingResponseFixed(size: {}, type: {}, protocol_version: {}, encoding: {}, protocol_type: \"{}\")", self.size(), self.r#type(), self.protocol_version(), self.encoding(), self.protocol_type()).as_str())
    }
}

impl core::fmt::Display for EncodingResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("EncodingResponseFixedUnsafe(size: {}, type: {}, protocol_version: {}, encoding: {}, protocol_type: \"{}\")", self.size(), self.r#type(), self.protocol_version(), self.encoding(), self.protocol_type()).as_str())
    }
}

impl core::fmt::Debug for EncodingResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("EncodingResponseFixedUnsafe(size: {}, type: {}, protocol_version: {}, encoding: {}, protocol_type: \"{}\")", self.size(), self.r#type(), self.protocol_version(), self.encoding(), self.protocol_type()).as_str())
    }
}

impl crate::Message for EncodingResponseFixed {
    type Data = EncodingResponseFixedData;

    const TYPE: u16 = ENCODING_RESPONSE;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, EncodingResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const EncodingResponseFixedData,
        }
    }
}
impl crate::Message for EncodingResponseFixedUnsafe {
    type Data = EncodingResponseFixedData;

    const TYPE: u16 = ENCODING_RESPONSE;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, EncodingResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const EncodingResponseFixedData,
        }
    }
}
/// Requirements: Required for Servers. Required for Clients if the Client
/// needs to discover the encoding the Server uses.
///
/// The EncodingResponseFixed is a message from the Server to the Client,
/// telling the Client what message encoding it must use to communicate with
/// the Server.
///
/// For the procedure to work with this message, refer to Encoding Request
/// Sequence.
impl EncodingResponse for EncodingResponseFixed {
    type Safe = EncodingResponseFixed;
    type Unsafe = EncodingResponseFixedUnsafe;

    /// This field is automatically set by the constructor.
    fn protocol_version(&self) -> i32 {
        i32::from_le(self.protocol_version)
    }

    /// The DTC message encoding to be used.
    ///
    /// This value may be different from the requested DTC encoding if the Server
    /// does not support the requested encoding from the Client.
    fn encoding(&self) -> EncodingEnum {
        EncodingEnum::from_le(self.encoding)
    }

    /// The ProtocolType field needs to be set to the text string "DTC".
    ///
    /// This field is automatically set with the binary encoding data structures.
    /// This field is automatically set with the binary encoding data structures.
    ///
    /// This field is used for the Client to know that it is communicating with
    /// a DTC compliant Server.
    fn protocol_type(&self) -> &str {
        get_fixed(&self.protocol_type[..])
    }

    /// This field is automatically set by the constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self {
        self.protocol_version = value.to_le();
        self
    }

    /// The DTC message encoding to be used.
    ///
    /// This value may be different from the requested DTC encoding if the Server
    /// does not support the requested encoding from the Client.
    fn set_encoding(&mut self, value: EncodingEnum) -> &mut Self {
        self.encoding = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The ProtocolType field needs to be set to the text string "DTC".
    ///
    /// This field is automatically set with the binary encoding data structures.
    /// This field is automatically set with the binary encoding data structures.
    ///
    /// This field is used for the Client to know that it is communicating with
    /// a DTC compliant Server.
    fn set_protocol_type(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.protocol_type[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// Requirements: Required for Servers. Required for Clients if the Client
/// needs to discover the encoding the Server uses.
///
/// The EncodingResponseFixed is a message from the Server to the Client,
/// telling the Client what message encoding it must use to communicate with
/// the Server.
///
/// For the procedure to work with this message, refer to Encoding Request
/// Sequence.
impl EncodingResponse for EncodingResponseFixedUnsafe {
    type Safe = EncodingResponseFixed;
    type Unsafe = EncodingResponseFixedUnsafe;

    /// This field is automatically set by the constructor.
    fn protocol_version(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            CURRENT_VERSION.to_le()
        } else {
            i32::from_le(self.protocol_version)
        }
    }

    /// The DTC message encoding to be used.
    ///
    /// This value may be different from the requested DTC encoding if the Server
    /// does not support the requested encoding from the Client.
    fn encoding(&self) -> EncodingEnum {
        if self.is_out_of_bounds(12) {
            EncodingEnum::BinaryEncoding.to_le()
        } else {
            EncodingEnum::from_le(self.encoding)
        }
    }

    /// The ProtocolType field needs to be set to the text string "DTC".
    ///
    /// This field is automatically set with the binary encoding data structures.
    /// This field is automatically set with the binary encoding data structures.
    ///
    /// This field is used for the Client to know that it is communicating with
    /// a DTC compliant Server.
    fn protocol_type(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            get_fixed(&self.protocol_type[..])
        }
    }

    /// This field is automatically set by the constructor.
    fn set_protocol_version(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.protocol_version = value.to_le();
        }
        self
    }

    /// The DTC message encoding to be used.
    ///
    /// This value may be different from the requested DTC encoding if the Server
    /// does not support the requested encoding from the Client.
    fn set_encoding(&mut self, value: EncodingEnum) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.encoding = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The ProtocolType field needs to be set to the text string "DTC".
    ///
    /// This field is automatically set with the binary encoding data structures.
    /// This field is automatically set with the binary encoding data structures.
    ///
    /// This field is used for the Client to know that it is communicating with
    /// a DTC compliant Server.
    fn set_protocol_type(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            set_fixed(&mut self.protocol_type[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                16usize,
                core::mem::size_of::<EncodingResponseFixedData>(),
                "EncodingResponseFixedData sizeof expected {:} but was {:}",
                16usize,
                core::mem::size_of::<EncodingResponseFixedData>()
            );
            assert_eq!(
                16u16,
                EncodingResponseFixed::new().size(),
                "EncodingResponseFixed sizeof expected {:} but was {:}",
                16u16,
                EncodingResponseFixed::new().size(),
            );
            assert_eq!(
                ENCODING_RESPONSE,
                EncodingResponseFixed::new().r#type(),
                "EncodingResponseFixed type expected {:} but was {:}",
                ENCODING_RESPONSE,
                EncodingResponseFixed::new().r#type(),
            );
            assert_eq!(
                7u16,
                EncodingResponseFixed::new().r#type(),
                "EncodingResponseFixed type expected {:} but was {:}",
                7u16,
                EncodingResponseFixed::new().r#type(),
            );
            let d = EncodingResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.protocol_version) as usize) - p,
                "protocol_version offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.protocol_version) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.encoding) as usize) - p,
                "encoding offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.encoding) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.protocol_type) as usize) - p,
                "protocol_type offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.protocol_type) as usize) - p,
            );
        }
    }
}
