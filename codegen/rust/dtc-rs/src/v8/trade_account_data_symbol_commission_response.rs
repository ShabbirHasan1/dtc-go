// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const TRADE_ACCOUNT_DATA_SYMBOL_COMMISSION_RESPONSE_VLS_SIZE: usize = 26;

/// size                    u16     = TradeAccountDataSymbolCommissionResponseVLSSize  (26)
/// type                    u16     = TRADE_ACCOUNT_DATA_SYMBOL_COMMISSION_RESPONSE  (10119)
/// base_size               u16     = TradeAccountDataSymbolCommissionResponseVLSSize  (26)
/// request_id              u32     = 0
/// trade_account           string  = ""
/// symbol                  string  = ""
/// trade_fee_per_contract  f64     = 0
pub(crate) const TRADE_ACCOUNT_DATA_SYMBOL_COMMISSION_RESPONSE_VLS_DEFAULT: [u8; 26] = [
    26, 0, 135, 39, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait TradeAccountDataSymbolCommissionResponse: Message {
    type Safe: TradeAccountDataSymbolCommissionResponse;
    type Unsafe: TradeAccountDataSymbolCommissionResponse;

    fn request_id(&self) -> u32;

    fn trade_account(&self) -> &str;

    fn symbol(&self) -> &str;

    fn trade_fee_per_contract(&self) -> f64;

    fn set_request_id(&mut self, value: u32) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl TradeAccountDataSymbolCommissionResponse) {
        to.set_request_id(self.request_id());
        to.set_trade_account(self.trade_account());
        to.set_symbol(self.symbol());
        to.set_trade_fee_per_contract(self.trade_fee_per_contract());
    }
}

pub struct TradeAccountDataSymbolCommissionResponseVLS {
    data: *const TradeAccountDataSymbolCommissionResponseVLSData,
    capacity: usize,
}

pub struct TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    data: *const TradeAccountDataSymbolCommissionResponseVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct TradeAccountDataSymbolCommissionResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: u32,
    trade_account: VLS,
    symbol: VLS,
    trade_fee_per_contract: f64,
}

impl TradeAccountDataSymbolCommissionResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 26u16.to_le(),
            r#type: TRADE_ACCOUNT_DATA_SYMBOL_COMMISSION_RESPONSE.to_le(),
            base_size: 26u16.to_le(),
            request_id: 0u32.to_le(),
            trade_account: crate::message::VLS::new(),
            symbol: crate::message::VLS::new(),
            trade_fee_per_contract: 0.0,
        }
    }
}

unsafe impl Send for TradeAccountDataSymbolCommissionResponseVLS {}
unsafe impl Send for TradeAccountDataSymbolCommissionResponseVLSUnsafe {}
unsafe impl Send for TradeAccountDataSymbolCommissionResponseVLSData {}

impl Drop for TradeAccountDataSymbolCommissionResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for TradeAccountDataSymbolCommissionResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for TradeAccountDataSymbolCommissionResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for TradeAccountDataSymbolCommissionResponseVLS {
    type Target = TradeAccountDataSymbolCommissionResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataSymbolCommissionResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    type Target = TradeAccountDataSymbolCommissionResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for TradeAccountDataSymbolCommissionResponseVLS {
    type Data = TradeAccountDataSymbolCommissionResponseVLSData;

    const BASE_SIZE: usize = 26;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                TradeAccountDataSymbolCommissionResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataSymbolCommissionResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataSymbolCommissionResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataSymbolCommissionResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    type Data = TradeAccountDataSymbolCommissionResponseVLSData;

    const BASE_SIZE: usize = 26;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                TradeAccountDataSymbolCommissionResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataSymbolCommissionResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataSymbolCommissionResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataSymbolCommissionResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl TradeAccountDataSymbolCommissionResponse for TradeAccountDataSymbolCommissionResponseVLS {
    type Safe = TradeAccountDataSymbolCommissionResponseVLS;
    type Unsafe = TradeAccountDataSymbolCommissionResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn trade_fee_per_contract(&self) -> f64 {
        f64_le(self.trade_fee_per_contract)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self {
        self.trade_fee_per_contract = f64_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl TradeAccountDataSymbolCommissionResponse
    for TradeAccountDataSymbolCommissionResponseVLSUnsafe
{
    type Safe = TradeAccountDataSymbolCommissionResponseVLS;
    type Unsafe = TradeAccountDataSymbolCommissionResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn trade_fee_per_contract(&self) -> f64 {
        if self.is_out_of_bounds(26) {
            0.0
        } else {
            f64_le(self.trade_fee_per_contract)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_trade_fee_per_contract(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(26) {
            self.trade_fee_per_contract = f64_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                26usize,
                core::mem::size_of::<TradeAccountDataSymbolCommissionResponseVLSData>(),
                "TradeAccountDataSymbolCommissionResponseVLSData sizeof expected {:} but was {:}",
                26usize,
                core::mem::size_of::<TradeAccountDataSymbolCommissionResponseVLSData>()
            );
            assert_eq!(
                26u16,
                TradeAccountDataSymbolCommissionResponseVLS::new().size(),
                "TradeAccountDataSymbolCommissionResponseVLS sizeof expected {:} but was {:}",
                26u16,
                TradeAccountDataSymbolCommissionResponseVLS::new().size(),
            );
            assert_eq!(
                TRADE_ACCOUNT_DATA_SYMBOL_COMMISSION_RESPONSE,
                TradeAccountDataSymbolCommissionResponseVLS::new().r#type(),
                "TradeAccountDataSymbolCommissionResponseVLS type expected {:} but was {:}",
                TRADE_ACCOUNT_DATA_SYMBOL_COMMISSION_RESPONSE,
                TradeAccountDataSymbolCommissionResponseVLS::new().r#type(),
            );
            assert_eq!(
                10119u16,
                TradeAccountDataSymbolCommissionResponseVLS::new().r#type(),
                "TradeAccountDataSymbolCommissionResponseVLS type expected {:} but was {:}",
                10119u16,
                TradeAccountDataSymbolCommissionResponseVLS::new().r#type(),
            );
            let d = TradeAccountDataSymbolCommissionResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract) as usize) - p,
                "trade_fee_per_contract offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.trade_fee_per_contract) as usize) - p,
            );
        }
    }
}
