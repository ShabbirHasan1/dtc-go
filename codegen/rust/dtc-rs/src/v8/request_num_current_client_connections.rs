// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS_VLS_SIZE: usize = 22;

pub(crate) const REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS_FIXED_SIZE: usize = 48;

/// size               u16     = RequestNumCurrentClientConnectionsVLSSize  (22)
/// type               u16     = REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS  (10107)
/// base_size          u16     = RequestNumCurrentClientConnectionsVLSSize  (22)
/// request_id         u32     = 0
/// username           string  = ""
/// device_identifier  i64     = 0
pub(crate) const REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS_VLS_DEFAULT: [u8; 22] = [
    22, 0, 123, 39, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size               u16       = RequestNumCurrentClientConnectionsFixedSize  (48)
/// type               u16       = REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS  (10107)
/// request_id         u32       = 0
/// username           string32  = ""
/// device_identifier  i64       = 0
pub(crate) const REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS_FIXED_DEFAULT: [u8; 48] = [
    48, 0, 123, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait RequestNumCurrentClientConnections: Message {
    type Safe: RequestNumCurrentClientConnections;
    type Unsafe: RequestNumCurrentClientConnections;

    fn request_id(&self) -> u32;

    fn username(&self) -> &str;

    fn device_identifier(&self) -> i64;

    fn set_request_id(&mut self, value: u32) -> &mut Self;

    fn set_username(&mut self, value: &str) -> &mut Self;

    fn set_device_identifier(&mut self, value: i64) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl RequestNumCurrentClientConnections) {
        to.set_request_id(self.request_id());
        to.set_username(self.username());
        to.set_device_identifier(self.device_identifier());
    }
}

pub struct RequestNumCurrentClientConnectionsVLS {
    data: *const RequestNumCurrentClientConnectionsVLSData,
    capacity: usize,
}

pub struct RequestNumCurrentClientConnectionsVLSUnsafe {
    data: *const RequestNumCurrentClientConnectionsVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct RequestNumCurrentClientConnectionsVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: u32,
    username: VLS,
    device_identifier: i64,
}

pub struct RequestNumCurrentClientConnectionsFixed {
    data: *const RequestNumCurrentClientConnectionsFixedData,
}

pub struct RequestNumCurrentClientConnectionsFixedUnsafe {
    data: *const RequestNumCurrentClientConnectionsFixedData,
}

#[repr(packed(1), C)]
pub struct RequestNumCurrentClientConnectionsFixedData {
    size: u16,
    r#type: u16,
    request_id: u32,
    username: [u8; 32],
    device_identifier: i64,
}

impl RequestNumCurrentClientConnectionsVLSData {
    pub fn new() -> Self {
        Self {
            size: 22u16.to_le(),
            r#type: REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS.to_le(),
            base_size: 22u16.to_le(),
            request_id: 0u32.to_le(),
            username: crate::message::VLS::new(),
            device_identifier: 0i64.to_le(),
        }
    }
}

impl RequestNumCurrentClientConnectionsFixedData {
    pub fn new() -> Self {
        Self {
            size: 48u16.to_le(),
            r#type: REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS.to_le(),
            request_id: 0u32.to_le(),
            username: [0; 32],
            device_identifier: 0i64.to_le(),
        }
    }
}

unsafe impl Send for RequestNumCurrentClientConnectionsFixed {}
unsafe impl Send for RequestNumCurrentClientConnectionsFixedUnsafe {}
unsafe impl Send for RequestNumCurrentClientConnectionsFixedData {}
unsafe impl Send for RequestNumCurrentClientConnectionsVLS {}
unsafe impl Send for RequestNumCurrentClientConnectionsVLSUnsafe {}
unsafe impl Send for RequestNumCurrentClientConnectionsVLSData {}

impl Drop for RequestNumCurrentClientConnectionsFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for RequestNumCurrentClientConnectionsFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for RequestNumCurrentClientConnectionsVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for RequestNumCurrentClientConnectionsVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for RequestNumCurrentClientConnectionsFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for RequestNumCurrentClientConnectionsFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for RequestNumCurrentClientConnectionsVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for RequestNumCurrentClientConnectionsVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for RequestNumCurrentClientConnectionsFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for RequestNumCurrentClientConnectionsFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for RequestNumCurrentClientConnectionsVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for RequestNumCurrentClientConnectionsVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for RequestNumCurrentClientConnectionsFixed {
    type Target = RequestNumCurrentClientConnectionsFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for RequestNumCurrentClientConnectionsFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for RequestNumCurrentClientConnectionsFixedUnsafe {
    type Target = RequestNumCurrentClientConnectionsFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for RequestNumCurrentClientConnectionsFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for RequestNumCurrentClientConnectionsVLS {
    type Target = RequestNumCurrentClientConnectionsVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for RequestNumCurrentClientConnectionsVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for RequestNumCurrentClientConnectionsVLSUnsafe {
    type Target = RequestNumCurrentClientConnectionsVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for RequestNumCurrentClientConnectionsVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for RequestNumCurrentClientConnectionsFixed {
    type Data = RequestNumCurrentClientConnectionsFixedData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                RequestNumCurrentClientConnectionsFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const RequestNumCurrentClientConnectionsFixedData,
        }
    }
}
impl crate::Message for RequestNumCurrentClientConnectionsFixedUnsafe {
    type Data = RequestNumCurrentClientConnectionsFixedData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                RequestNumCurrentClientConnectionsFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const RequestNumCurrentClientConnectionsFixedData,
        }
    }
}
impl crate::Message for RequestNumCurrentClientConnectionsVLS {
    type Data = RequestNumCurrentClientConnectionsVLSData;

    const BASE_SIZE: usize = 22;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                RequestNumCurrentClientConnectionsVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const RequestNumCurrentClientConnectionsVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for RequestNumCurrentClientConnectionsVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const RequestNumCurrentClientConnectionsVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for RequestNumCurrentClientConnectionsVLSUnsafe {
    type Data = RequestNumCurrentClientConnectionsVLSData;

    const BASE_SIZE: usize = 22;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                RequestNumCurrentClientConnectionsVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const RequestNumCurrentClientConnectionsVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for RequestNumCurrentClientConnectionsVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const RequestNumCurrentClientConnectionsVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl RequestNumCurrentClientConnections for RequestNumCurrentClientConnectionsVLS {
    type Safe = RequestNumCurrentClientConnectionsVLS;
    type Unsafe = RequestNumCurrentClientConnectionsVLSUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn username(&self) -> &str {
        get_vls(self, self.username)
    }

    fn device_identifier(&self) -> i64 {
        i64::from_le(self.device_identifier)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_username(&mut self, value: &str) -> &mut Self {
        self.username = set_vls(self, self.username, value);
        self
    }

    fn set_device_identifier(&mut self, value: i64) -> &mut Self {
        self.device_identifier = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl RequestNumCurrentClientConnections for RequestNumCurrentClientConnectionsVLSUnsafe {
    type Safe = RequestNumCurrentClientConnectionsVLS;
    type Unsafe = RequestNumCurrentClientConnectionsVLSUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn username(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.username)
        }
    }

    fn device_identifier(&self) -> i64 {
        if self.is_out_of_bounds(22) {
            0i64.to_le()
        } else {
            i64::from_le(self.device_identifier)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_username(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.username = set_vls(self, self.username, value);
        }
        self
    }

    fn set_device_identifier(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(22) {
            self.device_identifier = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl RequestNumCurrentClientConnections for RequestNumCurrentClientConnectionsFixed {
    type Safe = RequestNumCurrentClientConnectionsFixed;
    type Unsafe = RequestNumCurrentClientConnectionsFixedUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn username(&self) -> &str {
        get_fixed(&self.username[..])
    }

    fn device_identifier(&self) -> i64 {
        i64::from_le(self.device_identifier)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_username(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.username[..], value);
        self
    }

    fn set_device_identifier(&mut self, value: i64) -> &mut Self {
        self.device_identifier = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl RequestNumCurrentClientConnections for RequestNumCurrentClientConnectionsFixedUnsafe {
    type Safe = RequestNumCurrentClientConnectionsFixed;
    type Unsafe = RequestNumCurrentClientConnectionsFixedUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn username(&self) -> &str {
        if self.is_out_of_bounds(40) {
            ""
        } else {
            get_fixed(&self.username[..])
        }
    }

    fn device_identifier(&self) -> i64 {
        if self.is_out_of_bounds(48) {
            0i64.to_le()
        } else {
            i64::from_le(self.device_identifier)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_username(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            set_fixed(&mut self.username[..], value);
        }
        self
    }

    fn set_device_identifier(&mut self, value: i64) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.device_identifier = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                48usize,
                core::mem::size_of::<RequestNumCurrentClientConnectionsFixedData>(),
                "RequestNumCurrentClientConnectionsFixedData sizeof expected {:} but was {:}",
                48usize,
                core::mem::size_of::<RequestNumCurrentClientConnectionsFixedData>()
            );
            assert_eq!(
                48u16,
                RequestNumCurrentClientConnectionsFixed::new().size(),
                "RequestNumCurrentClientConnectionsFixed sizeof expected {:} but was {:}",
                48u16,
                RequestNumCurrentClientConnectionsFixed::new().size(),
            );
            assert_eq!(
                REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS,
                RequestNumCurrentClientConnectionsFixed::new().r#type(),
                "RequestNumCurrentClientConnectionsFixed type expected {:} but was {:}",
                REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS,
                RequestNumCurrentClientConnectionsFixed::new().r#type(),
            );
            assert_eq!(
                10107u16,
                RequestNumCurrentClientConnectionsFixed::new().r#type(),
                "RequestNumCurrentClientConnectionsFixed type expected {:} but was {:}",
                10107u16,
                RequestNumCurrentClientConnectionsFixed::new().r#type(),
            );
            let d = RequestNumCurrentClientConnectionsFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.username) as usize) - p,
                "username offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.username) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.device_identifier) as usize) - p,
                "device_identifier offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.device_identifier) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                22usize,
                core::mem::size_of::<RequestNumCurrentClientConnectionsVLSData>(),
                "RequestNumCurrentClientConnectionsVLSData sizeof expected {:} but was {:}",
                22usize,
                core::mem::size_of::<RequestNumCurrentClientConnectionsVLSData>()
            );
            assert_eq!(
                22u16,
                RequestNumCurrentClientConnectionsVLS::new().size(),
                "RequestNumCurrentClientConnectionsVLS sizeof expected {:} but was {:}",
                22u16,
                RequestNumCurrentClientConnectionsVLS::new().size(),
            );
            assert_eq!(
                REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS,
                RequestNumCurrentClientConnectionsVLS::new().r#type(),
                "RequestNumCurrentClientConnectionsVLS type expected {:} but was {:}",
                REQUEST_NUM_CURRENT_CLIENT_CONNECTIONS,
                RequestNumCurrentClientConnectionsVLS::new().r#type(),
            );
            assert_eq!(
                10107u16,
                RequestNumCurrentClientConnectionsVLS::new().r#type(),
                "RequestNumCurrentClientConnectionsVLS type expected {:} but was {:}",
                10107u16,
                RequestNumCurrentClientConnectionsVLS::new().r#type(),
            );
            let d = RequestNumCurrentClientConnectionsVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.username) as usize) - p,
                "username offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.username) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.device_identifier) as usize) - p,
                "device_identifier offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.device_identifier) as usize) - p,
            );
        }
    }
}
