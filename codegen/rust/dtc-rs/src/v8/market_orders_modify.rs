// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const MARKET_ORDERS_MODIFY_FIXED_SIZE: usize = 60;

/// size            u16                          = MarketOrdersModifyFixedSize  (60)
/// type            u16                          = MARKET_ORDERS_MODIFY  (153)
/// symbol_id       u32                          = 0
/// side            BuySellEnum                  = BUY_SELL_UNSET  (0)
/// quantity        u32                          = 0
/// price           f64                          = 0
/// order_id        u64                          = 0
/// prior_price     f64                          = 0
/// prior_quantity  u32                          = 0
/// prior_order_id  u64                          = 0
/// date_time       DateTimeWithMicrosecondsInt  = 0
pub(crate) const MARKET_ORDERS_MODIFY_FIXED_DEFAULT: [u8; 60] = [
    60, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait MarketOrdersModify: Message {
    type Safe: MarketOrdersModify;
    type Unsafe: MarketOrdersModify;

    fn symbol_id(&self) -> u32;

    fn side(&self) -> BuySellEnum;

    fn quantity(&self) -> u32;

    fn price(&self) -> f64;

    fn order_id(&self) -> u64;

    fn prior_price(&self) -> f64;

    fn prior_quantity(&self) -> u32;

    fn prior_order_id(&self) -> u64;

    fn date_time(&self) -> DateTimeWithMicrosecondsInt;

    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    fn set_side(&mut self, value: BuySellEnum) -> &mut Self;

    fn set_quantity(&mut self, value: u32) -> &mut Self;

    fn set_price(&mut self, value: f64) -> &mut Self;

    fn set_order_id(&mut self, value: u64) -> &mut Self;

    fn set_prior_price(&mut self, value: f64) -> &mut Self;

    fn set_prior_quantity(&mut self, value: u32) -> &mut Self;

    fn set_prior_order_id(&mut self, value: u64) -> &mut Self;

    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketOrdersModify) {
        to.set_symbol_id(self.symbol_id());
        to.set_side(self.side());
        to.set_quantity(self.quantity());
        to.set_price(self.price());
        to.set_order_id(self.order_id());
        to.set_prior_price(self.prior_price());
        to.set_prior_quantity(self.prior_quantity());
        to.set_prior_order_id(self.prior_order_id());
        to.set_date_time(self.date_time());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 4 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct MarketOrdersModifyFixed {
    data: *const MarketOrdersModifyFixedData,
}

pub struct MarketOrdersModifyFixedUnsafe {
    data: *const MarketOrdersModifyFixedData,
}

#[repr(packed(1), C)]
pub struct MarketOrdersModifyFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    side: BuySellEnum,
    quantity: u32,
    price: f64,
    order_id: u64,
    prior_price: f64,
    prior_quantity: u32,
    prior_order_id: u64,
    date_time: DateTimeWithMicrosecondsInt,
}

impl MarketOrdersModifyFixedData {
    pub fn new() -> Self {
        Self {
            size: 60u16.to_le(),
            r#type: MARKET_ORDERS_MODIFY.to_le(),
            symbol_id: 0u32.to_le(),
            side: BuySellEnum::BuySellUnset.to_le(),
            quantity: 0u32.to_le(),
            price: 0.0,
            order_id: 0u64.to_le(),
            prior_price: 0.0,
            prior_quantity: 0u32.to_le(),
            prior_order_id: 0u64.to_le(),
            date_time: 0i64.to_le(),
        }
    }
}

unsafe impl Send for MarketOrdersModifyFixed {}
unsafe impl Send for MarketOrdersModifyFixedUnsafe {}
unsafe impl Send for MarketOrdersModifyFixedData {}

impl Drop for MarketOrdersModifyFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketOrdersModifyFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketOrdersModifyFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketOrdersModifyFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketOrdersModifyFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketOrdersModifyFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketOrdersModifyFixed {
    type Target = MarketOrdersModifyFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketOrdersModifyFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketOrdersModifyFixedUnsafe {
    type Target = MarketOrdersModifyFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketOrdersModifyFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for MarketOrdersModifyFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketOrdersModifyFixed(size: {}, type: {}, symbol_id: {}, side: {}, quantity: {}, price: {}, order_id: {}, prior_price: {}, prior_quantity: {}, prior_order_id: {}, date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.side(), self.quantity(), self.price(), self.order_id(), self.prior_price(), self.prior_quantity(), self.prior_order_id(), self.date_time()).as_str())
    }
}

impl core::fmt::Debug for MarketOrdersModifyFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketOrdersModifyFixed(size: {}, type: {}, symbol_id: {}, side: {}, quantity: {}, price: {}, order_id: {}, prior_price: {}, prior_quantity: {}, prior_order_id: {}, date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.side(), self.quantity(), self.price(), self.order_id(), self.prior_price(), self.prior_quantity(), self.prior_order_id(), self.date_time()).as_str())
    }
}

impl core::fmt::Display for MarketOrdersModifyFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketOrdersModifyFixedUnsafe(size: {}, type: {}, symbol_id: {}, side: {}, quantity: {}, price: {}, order_id: {}, prior_price: {}, prior_quantity: {}, prior_order_id: {}, date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.side(), self.quantity(), self.price(), self.order_id(), self.prior_price(), self.prior_quantity(), self.prior_order_id(), self.date_time()).as_str())
    }
}

impl core::fmt::Debug for MarketOrdersModifyFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketOrdersModifyFixedUnsafe(size: {}, type: {}, symbol_id: {}, side: {}, quantity: {}, price: {}, order_id: {}, prior_price: {}, prior_quantity: {}, prior_order_id: {}, date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.side(), self.quantity(), self.price(), self.order_id(), self.prior_price(), self.prior_quantity(), self.prior_order_id(), self.date_time()).as_str())
    }
}

impl crate::Message for MarketOrdersModifyFixed {
    type Data = MarketOrdersModifyFixedData;

    const TYPE: u16 = MARKET_ORDERS_MODIFY;
    const BASE_SIZE: usize = 60;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketOrdersModifyFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketOrdersModifyFixedData,
        }
    }
}
impl crate::Message for MarketOrdersModifyFixedUnsafe {
    type Data = MarketOrdersModifyFixedData;

    const TYPE: u16 = MARKET_ORDERS_MODIFY;
    const BASE_SIZE: usize = 60;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketOrdersModifyFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketOrdersModifyFixedData,
        }
    }
}
impl MarketOrdersModify for MarketOrdersModifyFixed {
    type Safe = MarketOrdersModifyFixed;
    type Unsafe = MarketOrdersModifyFixedUnsafe;

    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    fn side(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.side)
    }

    fn quantity(&self) -> u32 {
        u32::from_le(self.quantity)
    }

    fn price(&self) -> f64 {
        f64_le(self.price)
    }

    fn order_id(&self) -> u64 {
        u64::from_le(self.order_id)
    }

    fn prior_price(&self) -> f64 {
        f64_le(self.prior_price)
    }

    fn prior_quantity(&self) -> u32 {
        u32::from_le(self.prior_quantity)
    }

    fn prior_order_id(&self) -> u64 {
        u64::from_le(self.prior_order_id)
    }

    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.date_time)
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    fn set_side(&mut self, value: BuySellEnum) -> &mut Self {
        self.side = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_quantity(&mut self, value: u32) -> &mut Self {
        self.quantity = value.to_le();
        self
    }

    fn set_price(&mut self, value: f64) -> &mut Self {
        self.price = f64_le(value);
        self
    }

    fn set_order_id(&mut self, value: u64) -> &mut Self {
        self.order_id = value.to_le();
        self
    }

    fn set_prior_price(&mut self, value: f64) -> &mut Self {
        self.prior_price = f64_le(value);
        self
    }

    fn set_prior_quantity(&mut self, value: u32) -> &mut Self {
        self.prior_quantity = value.to_le();
        self
    }

    fn set_prior_order_id(&mut self, value: u64) -> &mut Self {
        self.prior_order_id = value.to_le();
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        self.date_time = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl MarketOrdersModify for MarketOrdersModifyFixedUnsafe {
    type Safe = MarketOrdersModifyFixed;
    type Unsafe = MarketOrdersModifyFixedUnsafe;

    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32.to_le()
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    fn side(&self) -> BuySellEnum {
        if self.is_out_of_bounds(12) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.side)
        }
    }

    fn quantity(&self) -> u32 {
        if self.is_out_of_bounds(16) {
            0u32.to_le()
        } else {
            u32::from_le(self.quantity)
        }
    }

    fn price(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            0.0
        } else {
            f64_le(self.price)
        }
    }

    fn order_id(&self) -> u64 {
        if self.is_out_of_bounds(32) {
            0u64.to_le()
        } else {
            u64::from_le(self.order_id)
        }
    }

    fn prior_price(&self) -> f64 {
        if self.is_out_of_bounds(40) {
            0.0
        } else {
            f64_le(self.prior_price)
        }
    }

    fn prior_quantity(&self) -> u32 {
        if self.is_out_of_bounds(44) {
            0u32.to_le()
        } else {
            u32::from_le(self.prior_quantity)
        }
    }

    fn prior_order_id(&self) -> u64 {
        if self.is_out_of_bounds(52) {
            0u64.to_le()
        } else {
            u64::from_le(self.prior_order_id)
        }
    }

    fn date_time(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(60) {
            0i64.to_le()
        } else {
            i64::from_le(self.date_time)
        }
    }

    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    fn set_side(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.side = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.quantity = value.to_le();
        }
        self
    }

    fn set_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.price = f64_le(value);
        }
        self
    }

    fn set_order_id(&mut self, value: u64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.order_id = value.to_le();
        }
        self
    }

    fn set_prior_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.prior_price = f64_le(value);
        }
        self
    }

    fn set_prior_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(44) {
            self.prior_quantity = value.to_le();
        }
        self
    }

    fn set_prior_order_id(&mut self, value: u64) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.prior_order_id = value.to_le();
        }
        self
    }

    fn set_date_time(&mut self, value: DateTimeWithMicrosecondsInt) -> &mut Self {
        if !self.is_out_of_bounds(60) {
            self.date_time = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                60usize,
                core::mem::size_of::<MarketOrdersModifyFixedData>(),
                "MarketOrdersModifyFixedData sizeof expected {:} but was {:}",
                60usize,
                core::mem::size_of::<MarketOrdersModifyFixedData>()
            );
            assert_eq!(
                60u16,
                MarketOrdersModifyFixed::new().size(),
                "MarketOrdersModifyFixed sizeof expected {:} but was {:}",
                60u16,
                MarketOrdersModifyFixed::new().size(),
            );
            assert_eq!(
                MARKET_ORDERS_MODIFY,
                MarketOrdersModifyFixed::new().r#type(),
                "MarketOrdersModifyFixed type expected {:} but was {:}",
                MARKET_ORDERS_MODIFY,
                MarketOrdersModifyFixed::new().r#type(),
            );
            assert_eq!(
                153u16,
                MarketOrdersModifyFixed::new().r#type(),
                "MarketOrdersModifyFixed type expected {:} but was {:}",
                153u16,
                MarketOrdersModifyFixed::new().r#type(),
            );
            let d = MarketOrdersModifyFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.side) as usize) - p,
                "side offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.side) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
                "quantity offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.quantity) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.order_id) as usize) - p,
                "order_id offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.order_id) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.prior_price) as usize) - p,
                "prior_price offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.prior_price) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.prior_quantity) as usize) - p,
                "prior_quantity offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.prior_quantity) as usize) - p,
            );
            assert_eq!(
                44usize,
                (core::ptr::addr_of!(d.prior_order_id) as usize) - p,
                "prior_order_id offset expected {:} but was {:}",
                44usize,
                (core::ptr::addr_of!(d.prior_order_id) as usize) - p,
            );
            assert_eq!(
                52usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                52usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
        }
    }
}
