// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const HISTORICAL_PRICE_DATA_REQUEST_VLS_SIZE: usize = 48;

pub(crate) const HISTORICAL_PRICE_DATA_REQUEST_FIXED_SIZE: usize = 120;

/// size                                  u16                         = HistoricalPriceDataRequestVLSSize  (48)
/// type                                  u16                         = HISTORICAL_PRICE_DATA_REQUEST  (800)
/// base_size                             u16                         = HistoricalPriceDataRequestVLSSize  (48)
/// request_id                            i32                         = 0
/// symbol                                string                      = ""
/// exchange                              string                      = ""
/// record_interval                       HistoricalDataIntervalEnum  = INTERVAL_TICK  (0)
/// start_date_time                       DateTime                    = 0
/// end_date_time                         DateTime                    = 0
/// max_days_to_return                    u32                         = 0
/// use_z_lib_compression                 bool                        = false
/// request_dividend_adjusted_stock_data  u8                          = 0
/// integer1                              u16                         = 0
pub(crate) const HISTORICAL_PRICE_DATA_REQUEST_VLS_DEFAULT: [u8; 48] = [
    48, 0, 32, 3, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                                  u16                         = HistoricalPriceDataRequestFixedSize  (120)
/// type                                  u16                         = HISTORICAL_PRICE_DATA_REQUEST  (800)
/// request_id                            i32                         = 0
/// symbol                                string64                    = ""
/// exchange                              string16                    = ""
/// record_interval                       HistoricalDataIntervalEnum  = INTERVAL_TICK  (0)
/// start_date_time                       DateTime                    = 0
/// end_date_time                         DateTime                    = 0
/// max_days_to_return                    u32                         = 0
/// use_z_lib_compression                 bool                        = false
/// request_dividend_adjusted_stock_data  u8                          = 0
/// integer1                              u16                         = 0
pub(crate) const HISTORICAL_PRICE_DATA_REQUEST_FIXED_DEFAULT: [u8; 120] = [
    120, 0, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// This is a message from the Client to the Server for requesting historical
/// price data.
///
/// This request can be on the same or a separate network socket connection
/// compared to the streaming market data. This is going to be specified by
/// the Server.
pub trait HistoricalPriceDataRequest: Message {
    type Safe: HistoricalPriceDataRequest;
    type Unsafe: HistoricalPriceDataRequest;

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn request_id(&self) -> i32;

    /// The Symbol historical price data is requested for.
    fn symbol(&self) -> &str;

    /// Optional: The exchange for the Symbol.
    fn exchange(&self) -> &str;

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn record_interval(&self) -> HistoricalDataIntervalEnum;

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn start_date_time(&self) -> DateTime;

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn end_date_time(&self) -> DateTime;

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn max_days_to_return(&self) -> u32;

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn use_z_lib_compression(&self) -> bool;

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn request_dividend_adjusted_stock_data(&self) -> u8;

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn integer1(&self) -> u16;

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// The Symbol historical price data is requested for.
    fn set_symbol(&mut self, value: &str) -> &mut Self;

    /// Optional: The exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self;

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self;

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self;

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn set_end_date_time(&mut self, value: DateTime) -> &mut Self;

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn set_max_days_to_return(&mut self, value: u32) -> &mut Self;

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self;

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn set_request_dividend_adjusted_stock_data(&mut self, value: u8) -> &mut Self;

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn set_integer1(&mut self, value: u16) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalPriceDataRequest) {
        to.set_request_id(self.request_id());
        to.set_symbol(self.symbol());
        to.set_exchange(self.exchange());
        to.set_record_interval(self.record_interval());
        to.set_start_date_time(self.start_date_time());
        to.set_end_date_time(self.end_date_time());
        to.set_max_days_to_return(self.max_days_to_return());
        to.set_use_z_lib_compression(self.use_z_lib_compression());
        to.set_request_dividend_adjusted_stock_data(self.request_dividend_adjusted_stock_data());
        to.set_integer1(self.integer1());
    }
}

/// This is a message from the Client to the Server for requesting historical
/// price data.
///
/// This request can be on the same or a separate network socket connection
/// compared to the streaming market data. This is going to be specified by
/// the Server.
pub struct HistoricalPriceDataRequestVLS {
    data: *const HistoricalPriceDataRequestVLSData,
    capacity: usize,
}

pub struct HistoricalPriceDataRequestVLSUnsafe {
    data: *const HistoricalPriceDataRequestVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct HistoricalPriceDataRequestVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    symbol: VLS,
    exchange: VLS,
    record_interval: HistoricalDataIntervalEnum,
    start_date_time: DateTime,
    end_date_time: DateTime,
    max_days_to_return: u32,
    use_z_lib_compression: bool,
    request_dividend_adjusted_stock_data: u8,
    integer1: u16,
}

/// This is a message from the Client to the Server for requesting historical
/// price data.
///
/// This request can be on the same or a separate network socket connection
/// compared to the streaming market data. This is going to be specified by
/// the Server.
pub struct HistoricalPriceDataRequestFixed {
    data: *const HistoricalPriceDataRequestFixedData,
}

pub struct HistoricalPriceDataRequestFixedUnsafe {
    data: *const HistoricalPriceDataRequestFixedData,
}

#[repr(packed(8), C)]
pub struct HistoricalPriceDataRequestFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    symbol: [u8; 64],
    exchange: [u8; 16],
    record_interval: HistoricalDataIntervalEnum,
    start_date_time: DateTime,
    end_date_time: DateTime,
    max_days_to_return: u32,
    use_z_lib_compression: bool,
    request_dividend_adjusted_stock_data: u8,
    integer1: u16,
}

impl HistoricalPriceDataRequestVLSData {
    pub fn new() -> Self {
        Self {
            size: 48u16.to_le(),
            r#type: HISTORICAL_PRICE_DATA_REQUEST.to_le(),
            base_size: 48u16.to_le(),
            request_id: 0i32,
            symbol: crate::message::VLS::new(),
            exchange: crate::message::VLS::new(),
            record_interval: HistoricalDataIntervalEnum::IntervalTick.to_le(),
            start_date_time: 0i64,
            end_date_time: 0i64,
            max_days_to_return: 0u32,
            use_z_lib_compression: false,
            request_dividend_adjusted_stock_data: 0u8,
            integer1: 0u16,
        }
    }
}

impl HistoricalPriceDataRequestFixedData {
    pub fn new() -> Self {
        Self {
            size: 120u16.to_le(),
            r#type: HISTORICAL_PRICE_DATA_REQUEST.to_le(),
            request_id: 0i32,
            symbol: [0; 64],
            exchange: [0; 16],
            record_interval: HistoricalDataIntervalEnum::IntervalTick.to_le(),
            start_date_time: 0i64,
            end_date_time: 0i64,
            max_days_to_return: 0u32,
            use_z_lib_compression: false,
            request_dividend_adjusted_stock_data: 0u8,
            integer1: 0u16,
        }
    }
}

unsafe impl Send for HistoricalPriceDataRequestFixed {}
unsafe impl Send for HistoricalPriceDataRequestFixedUnsafe {}
unsafe impl Send for HistoricalPriceDataRequestFixedData {}
unsafe impl Send for HistoricalPriceDataRequestVLS {}
unsafe impl Send for HistoricalPriceDataRequestVLSUnsafe {}
unsafe impl Send for HistoricalPriceDataRequestVLSData {}

impl Drop for HistoricalPriceDataRequestFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalPriceDataRequestFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalPriceDataRequestVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalPriceDataRequestVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalPriceDataRequestFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalPriceDataRequestFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalPriceDataRequestVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalPriceDataRequestVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataRequestFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataRequestFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataRequestVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataRequestVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalPriceDataRequestFixed {
    type Target = HistoricalPriceDataRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataRequestFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalPriceDataRequestFixedUnsafe {
    type Target = HistoricalPriceDataRequestFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataRequestFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalPriceDataRequestVLS {
    type Target = HistoricalPriceDataRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataRequestVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalPriceDataRequestVLSUnsafe {
    type Target = HistoricalPriceDataRequestVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataRequestVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalPriceDataRequestFixed {
    type Data = HistoricalPriceDataRequestFixedData;

    const BASE_SIZE: usize = 120;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalPriceDataRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataRequestFixedData,
        }
    }
}
impl crate::Message for HistoricalPriceDataRequestFixedUnsafe {
    type Data = HistoricalPriceDataRequestFixedData;

    const BASE_SIZE: usize = 120;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalPriceDataRequestFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataRequestFixedData,
        }
    }
}
impl crate::Message for HistoricalPriceDataRequestVLS {
    type Data = HistoricalPriceDataRequestVLSData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalPriceDataRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalPriceDataRequestVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalPriceDataRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for HistoricalPriceDataRequestVLSUnsafe {
    type Data = HistoricalPriceDataRequestVLSData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalPriceDataRequestVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataRequestVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalPriceDataRequestVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalPriceDataRequestVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This is a message from the Client to the Server for requesting historical
/// price data.
///
/// This request can be on the same or a separate network socket connection
/// compared to the streaming market data. This is going to be specified by
/// the Server.
impl HistoricalPriceDataRequest for HistoricalPriceDataRequestVLS {
    type Safe = HistoricalPriceDataRequestVLS;
    type Unsafe = HistoricalPriceDataRequestVLSUnsafe;

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The Symbol historical price data is requested for.
    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    /// Optional: The exchange for the Symbol.
    fn exchange(&self) -> &str {
        get_vls(self, self.exchange)
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn record_interval(&self) -> HistoricalDataIntervalEnum {
        HistoricalDataIntervalEnum::from_le(self.record_interval)
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn start_date_time(&self) -> DateTime {
        i64::from_le(self.start_date_time)
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn end_date_time(&self) -> DateTime {
        i64::from_le(self.end_date_time)
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn max_days_to_return(&self) -> u32 {
        u32::from_le(self.max_days_to_return)
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn use_z_lib_compression(&self) -> bool {
        self.use_z_lib_compression
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn request_dividend_adjusted_stock_data(&self) -> u8 {
        self.request_dividend_adjusted_stock_data
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn integer1(&self) -> u16 {
        u16::from_le(self.integer1)
    }

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// The Symbol historical price data is requested for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    /// Optional: The exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        self.exchange = set_vls(self, self.exchange, value);
        self
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self {
        self.record_interval = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        self.start_date_time = value.to_le();
        self
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn set_end_date_time(&mut self, value: DateTime) -> &mut Self {
        self.end_date_time = value.to_le();
        self
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn set_max_days_to_return(&mut self, value: u32) -> &mut Self {
        self.max_days_to_return = value.to_le();
        self
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        self.use_z_lib_compression = value;
        self
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn set_request_dividend_adjusted_stock_data(&mut self, value: u8) -> &mut Self {
        self.request_dividend_adjusted_stock_data = value;
        self
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn set_integer1(&mut self, value: u16) -> &mut Self {
        self.integer1 = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server for requesting historical
/// price data.
///
/// This request can be on the same or a separate network socket connection
/// compared to the streaming market data. This is going to be specified by
/// the Server.
impl HistoricalPriceDataRequest for HistoricalPriceDataRequestVLSUnsafe {
    type Safe = HistoricalPriceDataRequestVLS;
    type Unsafe = HistoricalPriceDataRequestVLSUnsafe;

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The Symbol historical price data is requested for.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    /// Optional: The exchange for the Symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(20) {
            ""
        } else {
            get_vls(self, self.exchange)
        }
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn record_interval(&self) -> HistoricalDataIntervalEnum {
        if self.is_out_of_bounds(24) {
            HistoricalDataIntervalEnum::IntervalTick.to_le()
        } else {
            HistoricalDataIntervalEnum::from_le(self.record_interval)
        }
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn start_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(32) {
            0i64
        } else {
            i64::from_le(self.start_date_time)
        }
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn end_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(40) {
            0i64
        } else {
            i64::from_le(self.end_date_time)
        }
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn max_days_to_return(&self) -> u32 {
        if self.is_out_of_bounds(44) {
            0u32
        } else {
            u32::from_le(self.max_days_to_return)
        }
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn use_z_lib_compression(&self) -> bool {
        if self.is_out_of_bounds(45) {
            false
        } else {
            self.use_z_lib_compression
        }
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn request_dividend_adjusted_stock_data(&self) -> u8 {
        if self.is_out_of_bounds(46) {
            0u8
        } else {
            self.request_dividend_adjusted_stock_data
        }
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn integer1(&self) -> u16 {
        if self.is_out_of_bounds(48) {
            0u16
        } else {
            u16::from_le(self.integer1)
        }
    }

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }

    /// The Symbol historical price data is requested for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    /// Optional: The exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.exchange = set_vls(self, self.exchange, value);
        }
        self
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.record_interval = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.start_date_time = value.to_le();
        }
        self
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn set_end_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.end_date_time = value.to_le();
        }
        self
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn set_max_days_to_return(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(44) {
            self.max_days_to_return = value.to_le();
        }
        self
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(45) {
            self.use_z_lib_compression = value;
        }
        self
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn set_request_dividend_adjusted_stock_data(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(46) {
            self.request_dividend_adjusted_stock_data = value;
        }
        self
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn set_integer1(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.integer1 = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This is a message from the Client to the Server for requesting historical
/// price data.
///
/// This request can be on the same or a separate network socket connection
/// compared to the streaming market data. This is going to be specified by
/// the Server.
impl HistoricalPriceDataRequest for HistoricalPriceDataRequestFixed {
    type Safe = HistoricalPriceDataRequestFixed;
    type Unsafe = HistoricalPriceDataRequestFixedUnsafe;

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The Symbol historical price data is requested for.
    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    /// Optional: The exchange for the Symbol.
    fn exchange(&self) -> &str {
        get_fixed(&self.exchange[..])
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn record_interval(&self) -> HistoricalDataIntervalEnum {
        HistoricalDataIntervalEnum::from_le(self.record_interval)
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn start_date_time(&self) -> DateTime {
        i64::from_le(self.start_date_time)
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn end_date_time(&self) -> DateTime {
        i64::from_le(self.end_date_time)
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn max_days_to_return(&self) -> u32 {
        u32::from_le(self.max_days_to_return)
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn use_z_lib_compression(&self) -> bool {
        self.use_z_lib_compression
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn request_dividend_adjusted_stock_data(&self) -> u8 {
        self.request_dividend_adjusted_stock_data
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn integer1(&self) -> u16 {
        u16::from_le(self.integer1)
    }

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// The Symbol historical price data is requested for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    /// Optional: The exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.exchange[..], value);
        self
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self {
        self.record_interval = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        self.start_date_time = value.to_le();
        self
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn set_end_date_time(&mut self, value: DateTime) -> &mut Self {
        self.end_date_time = value.to_le();
        self
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn set_max_days_to_return(&mut self, value: u32) -> &mut Self {
        self.max_days_to_return = value.to_le();
        self
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        self.use_z_lib_compression = value;
        self
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn set_request_dividend_adjusted_stock_data(&mut self, value: u8) -> &mut Self {
        self.request_dividend_adjusted_stock_data = value;
        self
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn set_integer1(&mut self, value: u16) -> &mut Self {
        self.integer1 = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is a message from the Client to the Server for requesting historical
/// price data.
///
/// This request can be on the same or a separate network socket connection
/// compared to the streaming market data. This is going to be specified by
/// the Server.
impl HistoricalPriceDataRequest for HistoricalPriceDataRequestFixedUnsafe {
    type Safe = HistoricalPriceDataRequestFixed;
    type Unsafe = HistoricalPriceDataRequestFixedUnsafe;

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The Symbol historical price data is requested for.
    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(72) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    /// Optional: The exchange for the Symbol.
    fn exchange(&self) -> &str {
        if self.is_out_of_bounds(88) {
            ""
        } else {
            get_fixed(&self.exchange[..])
        }
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn record_interval(&self) -> HistoricalDataIntervalEnum {
        if self.is_out_of_bounds(92) {
            HistoricalDataIntervalEnum::IntervalTick.to_le()
        } else {
            HistoricalDataIntervalEnum::from_le(self.record_interval)
        }
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn start_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(104) {
            0i64
        } else {
            i64::from_le(self.start_date_time)
        }
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn end_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(112) {
            0i64
        } else {
            i64::from_le(self.end_date_time)
        }
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn max_days_to_return(&self) -> u32 {
        if self.is_out_of_bounds(116) {
            0u32
        } else {
            u32::from_le(self.max_days_to_return)
        }
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn use_z_lib_compression(&self) -> bool {
        if self.is_out_of_bounds(117) {
            false
        } else {
            self.use_z_lib_compression
        }
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn request_dividend_adjusted_stock_data(&self) -> u8 {
        if self.is_out_of_bounds(118) {
            0u8
        } else {
            self.request_dividend_adjusted_stock_data
        }
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn integer1(&self) -> u16 {
        if self.is_out_of_bounds(120) {
            0u16
        } else {
            u16::from_le(self.integer1)
        }
    }

    /// Unique integer identifier to identify this request. The historical price
    /// data response messages from the Server will contain this identifier so
    /// they can be matched up with the request from the Client. This identifier
    /// only needs to be unique to the historical price data messages. It can
    /// conflict with identifiers used with other classes of messages.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    /// The Symbol historical price data is requested for.
    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    /// Optional: The exchange for the Symbol.
    fn set_exchange(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            set_fixed(&mut self.exchange[..], value);
        }
        self
    }

    /// The interval/timeframe of each record for the time range of the historical
    /// data requested. Can be any of:
    ///
    /// INTERVAL_TICK = 0
    /// INTERVAL_1_SECOND = 1
    /// INTERVAL_1_MINUTE = 60
    /// INTERVAL_1_DAY = 86400
    /// INTERVAL_1_WEEK = 604800
    fn set_record_interval(&mut self, value: HistoricalDataIntervalEnum) -> &mut Self {
        if !self.is_out_of_bounds(92) {
            self.record_interval = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    /// The starting Date-Time for the historical price data returned, if available
    /// for the specified Symbol.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data starting at the earliest data available for the Symbol.
    fn set_start_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.start_date_time = value.to_le();
        }
        self
    }

    /// The ending Date-Time for the historical price data returned.
    ///
    /// If it is not set or set to 0, then this is a request to the Server to
    /// return data ending at the very latest data available for the symbol.
    fn set_end_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.end_date_time = value.to_le();
        }
        self
    }

    /// MaxDaysToReturn specifies the maximum number of days of data the Server
    /// needs to return, if available, counting back from the latest Date-Time
    /// of data available for the symbol, or counting back from EndDateTime if
    /// it is set to a value other than 0.
    ///
    /// If MaxDaysToReturn is set to 0, then it is ignored by the Server.
    fn set_max_days_to_return(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(116) {
            self.max_days_to_return = value.to_le();
        }
        self
    }

    /// Set this to 1, to request the Server use ZLib compression in the response
    /// when returning data. The Server can optionally ignore this if it does
    /// not support compression or does not want to use compression for any reason.
    /// not support compression or does not want to use compression for any reason.
    ///
    /// The HistoricalPriceDataResponseHeaderFixed will not be compressed. Only
    /// the historical price data records themselves.
    ///
    /// When receiving a batch of data on the network socket, give it to ZLib.
    /// It will respond with some uncompressed data and you put that into a buffer
    /// and then process as many complete historical data messages out of it that
    /// you can. Continue with this process until finished.
    fn set_use_z_lib_compression(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(117) {
            self.use_z_lib_compression = value;
        }
        self
    }

    /// In the case of a stock symbol, setting this to a value of 1 will request
    /// dividend adjusted data from the Server, if available. It is optional for
    /// the Server to support this.
    fn set_request_dividend_adjusted_stock_data(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(118) {
            self.request_dividend_adjusted_stock_data = value;
        }
        self
    }

    /// A general purpose 2 byte flag field from the Client to the Server which
    /// can be used for any special purpose the Client and Server require.
    fn set_integer1(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.integer1 = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                120usize,
                core::mem::size_of::<HistoricalPriceDataRequestFixedData>(),
                "HistoricalPriceDataRequestFixedData sizeof expected {:} but was {:}",
                120usize,
                core::mem::size_of::<HistoricalPriceDataRequestFixedData>()
            );
            assert_eq!(
                120u16,
                HistoricalPriceDataRequestFixed::new().size(),
                "HistoricalPriceDataRequestFixed sizeof expected {:} but was {:}",
                120u16,
                HistoricalPriceDataRequestFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_PRICE_DATA_REQUEST,
                HistoricalPriceDataRequestFixed::new().r#type(),
                "HistoricalPriceDataRequestFixed type expected {:} but was {:}",
                HISTORICAL_PRICE_DATA_REQUEST,
                HistoricalPriceDataRequestFixed::new().r#type(),
            );
            assert_eq!(
                800u16,
                HistoricalPriceDataRequestFixed::new().r#type(),
                "HistoricalPriceDataRequestFixed type expected {:} but was {:}",
                800u16,
                HistoricalPriceDataRequestFixed::new().r#type(),
            );
            let d = HistoricalPriceDataRequestFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.record_interval) as usize) - p,
                "record_interval offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.record_interval) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
                "start_date_time offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
                "end_date_time offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
            );
            assert_eq!(
                112usize,
                (core::ptr::addr_of!(d.max_days_to_return) as usize) - p,
                "max_days_to_return offset expected {:} but was {:}",
                112usize,
                (core::ptr::addr_of!(d.max_days_to_return) as usize) - p,
            );
            assert_eq!(
                116usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
                "use_z_lib_compression offset expected {:} but was {:}",
                116usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
            );
            assert_eq!(
                117usize,
                (core::ptr::addr_of!(d.request_dividend_adjusted_stock_data) as usize) - p,
                "request_dividend_adjusted_stock_data offset expected {:} but was {:}",
                117usize,
                (core::ptr::addr_of!(d.request_dividend_adjusted_stock_data) as usize) - p,
            );
            assert_eq!(
                118usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
                "integer1 offset expected {:} but was {:}",
                118usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                48usize,
                core::mem::size_of::<HistoricalPriceDataRequestVLSData>(),
                "HistoricalPriceDataRequestVLSData sizeof expected {:} but was {:}",
                48usize,
                core::mem::size_of::<HistoricalPriceDataRequestVLSData>()
            );
            assert_eq!(
                48u16,
                HistoricalPriceDataRequestVLS::new().size(),
                "HistoricalPriceDataRequestVLS sizeof expected {:} but was {:}",
                48u16,
                HistoricalPriceDataRequestVLS::new().size(),
            );
            assert_eq!(
                HISTORICAL_PRICE_DATA_REQUEST,
                HistoricalPriceDataRequestVLS::new().r#type(),
                "HistoricalPriceDataRequestVLS type expected {:} but was {:}",
                HISTORICAL_PRICE_DATA_REQUEST,
                HistoricalPriceDataRequestVLS::new().r#type(),
            );
            assert_eq!(
                800u16,
                HistoricalPriceDataRequestVLS::new().r#type(),
                "HistoricalPriceDataRequestVLS type expected {:} but was {:}",
                800u16,
                HistoricalPriceDataRequestVLS::new().r#type(),
            );
            let d = HistoricalPriceDataRequestVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
                "exchange offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.exchange) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.record_interval) as usize) - p,
                "record_interval offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.record_interval) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
                "start_date_time offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.start_date_time) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
                "end_date_time offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.end_date_time) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.max_days_to_return) as usize) - p,
                "max_days_to_return offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.max_days_to_return) as usize) - p,
            );
            assert_eq!(
                44usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
                "use_z_lib_compression offset expected {:} but was {:}",
                44usize,
                (core::ptr::addr_of!(d.use_z_lib_compression) as usize) - p,
            );
            assert_eq!(
                45usize,
                (core::ptr::addr_of!(d.request_dividend_adjusted_stock_data) as usize) - p,
                "request_dividend_adjusted_stock_data offset expected {:} but was {:}",
                45usize,
                (core::ptr::addr_of!(d.request_dividend_adjusted_stock_data) as usize) - p,
            );
            assert_eq!(
                46usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
                "integer1 offset expected {:} but was {:}",
                46usize,
                (core::ptr::addr_of!(d.integer1) as usize) - p,
            );
        }
    }
}
