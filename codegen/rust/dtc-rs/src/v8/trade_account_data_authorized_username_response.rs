// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const TRADE_ACCOUNT_DATA_AUTHORIZED_USERNAME_RESPONSE_VLS_SIZE: usize = 25;

/// size                           u16     = TradeAccountDataAuthorizedUsernameResponseVLSSize  (25)
/// type                           u16     = TRADE_ACCOUNT_DATA_AUTHORIZED_USERNAME_RESPONSE  (10124)
/// base_size                      u16     = TradeAccountDataAuthorizedUsernameResponseVLSSize  (25)
/// request_id                     u32     = 0
/// trade_account                  string  = ""
/// username                       string  = ""
/// update_operation_complete      u8      = 0
/// update_operation_message_type  u16     = 0
/// update_operation_error_text    string  = ""
pub(crate) const TRADE_ACCOUNT_DATA_AUTHORIZED_USERNAME_RESPONSE_VLS_DEFAULT: [u8; 25] = [
    25, 0, 140, 39, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait TradeAccountDataAuthorizedUsernameResponse: Message {
    type Safe: TradeAccountDataAuthorizedUsernameResponse;
    type Unsafe: TradeAccountDataAuthorizedUsernameResponse;

    fn request_id(&self) -> u32;

    fn trade_account(&self) -> &str;

    fn username(&self) -> &str;

    fn update_operation_complete(&self) -> u8;

    fn update_operation_message_type(&self) -> u16;

    fn update_operation_error_text(&self) -> &str;

    fn set_request_id(&mut self, value: u32) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_username(&mut self, value: &str) -> &mut Self;

    fn set_update_operation_complete(&mut self, value: u8) -> &mut Self;

    fn set_update_operation_message_type(&mut self, value: u16) -> &mut Self;

    fn set_update_operation_error_text(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl TradeAccountDataAuthorizedUsernameResponse) {
        to.set_request_id(self.request_id());
        to.set_trade_account(self.trade_account());
        to.set_username(self.username());
        to.set_update_operation_complete(self.update_operation_complete());
        to.set_update_operation_message_type(self.update_operation_message_type());
        to.set_update_operation_error_text(self.update_operation_error_text());
    }
}

pub struct TradeAccountDataAuthorizedUsernameResponseVLS {
    data: *const TradeAccountDataAuthorizedUsernameResponseVLSData,
    capacity: usize,
}

pub struct TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    data: *const TradeAccountDataAuthorizedUsernameResponseVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct TradeAccountDataAuthorizedUsernameResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: u32,
    trade_account: VLS,
    username: VLS,
    update_operation_complete: u8,
    update_operation_message_type: u16,
    update_operation_error_text: VLS,
}

impl TradeAccountDataAuthorizedUsernameResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 25u16.to_le(),
            r#type: TRADE_ACCOUNT_DATA_AUTHORIZED_USERNAME_RESPONSE.to_le(),
            base_size: 25u16.to_le(),
            request_id: 0u32.to_le(),
            trade_account: crate::message::VLS::new(),
            username: crate::message::VLS::new(),
            update_operation_complete: 0,
            update_operation_message_type: 0u16.to_le(),
            update_operation_error_text: crate::message::VLS::new(),
        }
    }
}

unsafe impl Send for TradeAccountDataAuthorizedUsernameResponseVLS {}
unsafe impl Send for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {}
unsafe impl Send for TradeAccountDataAuthorizedUsernameResponseVLSData {}

impl Drop for TradeAccountDataAuthorizedUsernameResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for TradeAccountDataAuthorizedUsernameResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for TradeAccountDataAuthorizedUsernameResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for TradeAccountDataAuthorizedUsernameResponseVLS {
    type Target = TradeAccountDataAuthorizedUsernameResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataAuthorizedUsernameResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    type Target = TradeAccountDataAuthorizedUsernameResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for TradeAccountDataAuthorizedUsernameResponseVLS {
    type Data = TradeAccountDataAuthorizedUsernameResponseVLSData;

    const BASE_SIZE: usize = 25;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                TradeAccountDataAuthorizedUsernameResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataAuthorizedUsernameResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataAuthorizedUsernameResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataAuthorizedUsernameResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    type Data = TradeAccountDataAuthorizedUsernameResponseVLSData;

    const BASE_SIZE: usize = 25;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                TradeAccountDataAuthorizedUsernameResponseVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const TradeAccountDataAuthorizedUsernameResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const TradeAccountDataAuthorizedUsernameResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl TradeAccountDataAuthorizedUsernameResponse for TradeAccountDataAuthorizedUsernameResponseVLS {
    type Safe = TradeAccountDataAuthorizedUsernameResponseVLS;
    type Unsafe = TradeAccountDataAuthorizedUsernameResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        u32::from_le(self.request_id)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn username(&self) -> &str {
        get_vls(self, self.username)
    }

    fn update_operation_complete(&self) -> u8 {
        self.update_operation_complete
    }

    fn update_operation_message_type(&self) -> u16 {
        u16::from_le(self.update_operation_message_type)
    }

    fn update_operation_error_text(&self) -> &str {
        get_vls(self, self.update_operation_error_text)
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_username(&mut self, value: &str) -> &mut Self {
        self.username = set_vls(self, self.username, value);
        self
    }

    fn set_update_operation_complete(&mut self, value: u8) -> &mut Self {
        self.update_operation_complete = value;
        self
    }

    fn set_update_operation_message_type(&mut self, value: u16) -> &mut Self {
        self.update_operation_message_type = value.to_le();
        self
    }

    fn set_update_operation_error_text(&mut self, value: &str) -> &mut Self {
        self.update_operation_error_text = set_vls(self, self.update_operation_error_text, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl TradeAccountDataAuthorizedUsernameResponse
    for TradeAccountDataAuthorizedUsernameResponseVLSUnsafe
{
    type Safe = TradeAccountDataAuthorizedUsernameResponseVLS;
    type Unsafe = TradeAccountDataAuthorizedUsernameResponseVLSUnsafe;

    fn request_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.request_id)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn username(&self) -> &str {
        if self.is_out_of_bounds(18) {
            ""
        } else {
            get_vls(self, self.username)
        }
    }

    fn update_operation_complete(&self) -> u8 {
        if self.is_out_of_bounds(19) {
            0
        } else {
            self.update_operation_complete
        }
    }

    fn update_operation_message_type(&self) -> u16 {
        if self.is_out_of_bounds(21) {
            0u16.to_le()
        } else {
            u16::from_le(self.update_operation_message_type)
        }
    }

    fn update_operation_error_text(&self) -> &str {
        if self.is_out_of_bounds(25) {
            ""
        } else {
            get_vls(self, self.update_operation_error_text)
        }
    }

    fn set_request_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_username(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.username = set_vls(self, self.username, value);
        }
        self
    }

    fn set_update_operation_complete(&mut self, value: u8) -> &mut Self {
        if !self.is_out_of_bounds(19) {
            self.update_operation_complete = value;
        }
        self
    }

    fn set_update_operation_message_type(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(21) {
            self.update_operation_message_type = value.to_le();
        }
        self
    }

    fn set_update_operation_error_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(25) {
            self.update_operation_error_text =
                set_vls(self, self.update_operation_error_text, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                25usize,
                core::mem::size_of::<TradeAccountDataAuthorizedUsernameResponseVLSData>(),
                "TradeAccountDataAuthorizedUsernameResponseVLSData sizeof expected {:} but was {:}",
                25usize,
                core::mem::size_of::<TradeAccountDataAuthorizedUsernameResponseVLSData>()
            );
            assert_eq!(
                25u16,
                TradeAccountDataAuthorizedUsernameResponseVLS::new().size(),
                "TradeAccountDataAuthorizedUsernameResponseVLS sizeof expected {:} but was {:}",
                25u16,
                TradeAccountDataAuthorizedUsernameResponseVLS::new().size(),
            );
            assert_eq!(
                TRADE_ACCOUNT_DATA_AUTHORIZED_USERNAME_RESPONSE,
                TradeAccountDataAuthorizedUsernameResponseVLS::new().r#type(),
                "TradeAccountDataAuthorizedUsernameResponseVLS type expected {:} but was {:}",
                TRADE_ACCOUNT_DATA_AUTHORIZED_USERNAME_RESPONSE,
                TradeAccountDataAuthorizedUsernameResponseVLS::new().r#type(),
            );
            assert_eq!(
                10124u16,
                TradeAccountDataAuthorizedUsernameResponseVLS::new().r#type(),
                "TradeAccountDataAuthorizedUsernameResponseVLS type expected {:} but was {:}",
                10124u16,
                TradeAccountDataAuthorizedUsernameResponseVLS::new().r#type(),
            );
            let d = TradeAccountDataAuthorizedUsernameResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.username) as usize) - p,
                "username offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.username) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.update_operation_complete) as usize) - p,
                "update_operation_complete offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.update_operation_complete) as usize) - p,
            );
            assert_eq!(
                19usize,
                (core::ptr::addr_of!(d.update_operation_message_type) as usize) - p,
                "update_operation_message_type offset expected {:} but was {:}",
                19usize,
                (core::ptr::addr_of!(d.update_operation_message_type) as usize) - p,
            );
            assert_eq!(
                21usize,
                (core::ptr::addr_of!(d.update_operation_error_text) as usize) - p,
                "update_operation_error_text offset expected {:} but was {:}",
                21usize,
                (core::ptr::addr_of!(d.update_operation_error_text) as usize) - p,
            );
        }
    }
}
