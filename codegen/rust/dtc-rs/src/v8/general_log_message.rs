// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const GENERAL_LOG_MESSAGE_VLS_SIZE: usize = 10;

pub(crate) const GENERAL_LOG_MESSAGE_FIXED_SIZE: usize = 132;

/// size          u16     = GeneralLogMessageVLSSize  (10)
/// type          u16     = GENERAL_LOG_MESSAGE  (701)
/// base_size     u16     = GeneralLogMessageVLSSize  (10)
/// message_text  string  = ""
pub(crate) const GENERAL_LOG_MESSAGE_VLS_DEFAULT: [u8; 10] = [10, 0, 189, 2, 10, 0, 0, 0, 0, 0];

/// size          u16        = GeneralLogMessageFixedSize  (132)
/// type          u16        = GENERAL_LOG_MESSAGE  (701)
/// message_text  string128  = ""
pub(crate) const GENERAL_LOG_MESSAGE_FIXED_DEFAULT: [u8; 132] = [
    132, 0, 189, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
];

/// This message from the Server to the Client is a message which is to be
/// added to a log file indicating information from the server. For example,
/// if there are informational messages to provide during the process of a
/// logon, this can be used to send those messages to a Client. A Client should
/// never implement this message as a pop-up type message. Instead, it should
/// be treated as a lower-level log type message.
///
/// This message can be sent even before a LogonResponseVLS is given.
pub trait GeneralLogMessage: Message {
    type Safe: GeneralLogMessage;
    type Unsafe: GeneralLogMessage;

    /// The message text to the Client which it should add to its log.
    ///
    fn message_text(&self) -> &str;

    /// The message text to the Client which it should add to its log.
    ///
    fn set_message_text(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl GeneralLogMessage) {
        to.set_message_text(self.message_text());
    }
}

/// This message from the Server to the Client is a message which is to be
/// added to a log file indicating information from the server. For example,
/// if there are informational messages to provide during the process of a
/// logon, this can be used to send those messages to a Client. A Client should
/// never implement this message as a pop-up type message. Instead, it should
/// be treated as a lower-level log type message.
///
/// This message can be sent even before a LogonResponseVLS is given.
pub struct GeneralLogMessageVLS {
    data: *const GeneralLogMessageVLSData,
    capacity: usize,
}

pub struct GeneralLogMessageVLSUnsafe {
    data: *const GeneralLogMessageVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct GeneralLogMessageVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    message_text: VLS,
}

/// This message from the Server to the Client is a message which is to be
/// added to a log file indicating information from the server. For example,
/// if there are informational messages to provide during the process of a
/// logon, this can be used to send those messages to a Client. A Client should
/// never implement this message as a pop-up type message. Instead, it should
/// be treated as a lower-level log type message.
///
/// This message can be sent even before a LogonResponseVLS is given.
pub struct GeneralLogMessageFixed {
    data: *const GeneralLogMessageFixedData,
}

pub struct GeneralLogMessageFixedUnsafe {
    data: *const GeneralLogMessageFixedData,
}

#[repr(packed(8), C)]
pub struct GeneralLogMessageFixedData {
    size: u16,
    r#type: u16,
    message_text: [u8; 128],
}

impl GeneralLogMessageVLSData {
    pub fn new() -> Self {
        Self {
            size: 10u16.to_le(),
            r#type: GENERAL_LOG_MESSAGE.to_le(),
            base_size: 10u16.to_le(),
            message_text: crate::message::VLS::new(),
        }
    }
}

impl GeneralLogMessageFixedData {
    pub fn new() -> Self {
        Self {
            size: 132u16.to_le(),
            r#type: GENERAL_LOG_MESSAGE.to_le(),
            message_text: [0; 128],
        }
    }
}

unsafe impl Send for GeneralLogMessageFixed {}
unsafe impl Send for GeneralLogMessageFixedUnsafe {}
unsafe impl Send for GeneralLogMessageFixedData {}
unsafe impl Send for GeneralLogMessageVLS {}
unsafe impl Send for GeneralLogMessageVLSUnsafe {}
unsafe impl Send for GeneralLogMessageVLSData {}

impl Drop for GeneralLogMessageFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for GeneralLogMessageFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for GeneralLogMessageVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for GeneralLogMessageVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for GeneralLogMessageFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for GeneralLogMessageFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for GeneralLogMessageVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for GeneralLogMessageVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for GeneralLogMessageFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for GeneralLogMessageFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for GeneralLogMessageVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for GeneralLogMessageVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for GeneralLogMessageFixed {
    type Target = GeneralLogMessageFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for GeneralLogMessageFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for GeneralLogMessageFixedUnsafe {
    type Target = GeneralLogMessageFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for GeneralLogMessageFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for GeneralLogMessageVLS {
    type Target = GeneralLogMessageVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for GeneralLogMessageVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for GeneralLogMessageVLSUnsafe {
    type Target = GeneralLogMessageVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for GeneralLogMessageVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for GeneralLogMessageFixed {
    type Data = GeneralLogMessageFixedData;

    const BASE_SIZE: usize = 132;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, GeneralLogMessageFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const GeneralLogMessageFixedData,
        }
    }
}
impl crate::Message for GeneralLogMessageFixedUnsafe {
    type Data = GeneralLogMessageFixedData;

    const BASE_SIZE: usize = 132;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, GeneralLogMessageFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const GeneralLogMessageFixedData,
        }
    }
}
impl crate::Message for GeneralLogMessageVLS {
    type Data = GeneralLogMessageVLSData;

    const BASE_SIZE: usize = 10;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, GeneralLogMessageVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const GeneralLogMessageVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for GeneralLogMessageVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const GeneralLogMessageVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for GeneralLogMessageVLSUnsafe {
    type Data = GeneralLogMessageVLSData;

    const BASE_SIZE: usize = 10;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, GeneralLogMessageVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const GeneralLogMessageVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for GeneralLogMessageVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const GeneralLogMessageVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
/// This message from the Server to the Client is a message which is to be
/// added to a log file indicating information from the server. For example,
/// if there are informational messages to provide during the process of a
/// logon, this can be used to send those messages to a Client. A Client should
/// never implement this message as a pop-up type message. Instead, it should
/// be treated as a lower-level log type message.
///
/// This message can be sent even before a LogonResponseVLS is given.
impl GeneralLogMessage for GeneralLogMessageVLS {
    type Safe = GeneralLogMessageVLS;
    type Unsafe = GeneralLogMessageVLSUnsafe;

    /// The message text to the Client which it should add to its log.
    ///
    fn message_text(&self) -> &str {
        get_vls(self, self.message_text)
    }

    /// The message text to the Client which it should add to its log.
    ///
    fn set_message_text(&mut self, value: &str) -> &mut Self {
        self.message_text = set_vls(self, self.message_text, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This message from the Server to the Client is a message which is to be
/// added to a log file indicating information from the server. For example,
/// if there are informational messages to provide during the process of a
/// logon, this can be used to send those messages to a Client. A Client should
/// never implement this message as a pop-up type message. Instead, it should
/// be treated as a lower-level log type message.
///
/// This message can be sent even before a LogonResponseVLS is given.
impl GeneralLogMessage for GeneralLogMessageVLSUnsafe {
    type Safe = GeneralLogMessageVLS;
    type Unsafe = GeneralLogMessageVLSUnsafe;

    /// The message text to the Client which it should add to its log.
    ///
    fn message_text(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.message_text)
        }
    }

    /// The message text to the Client which it should add to its log.
    ///
    fn set_message_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.message_text = set_vls(self, self.message_text, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

/// This message from the Server to the Client is a message which is to be
/// added to a log file indicating information from the server. For example,
/// if there are informational messages to provide during the process of a
/// logon, this can be used to send those messages to a Client. A Client should
/// never implement this message as a pop-up type message. Instead, it should
/// be treated as a lower-level log type message.
///
/// This message can be sent even before a LogonResponseVLS is given.
impl GeneralLogMessage for GeneralLogMessageFixed {
    type Safe = GeneralLogMessageFixed;
    type Unsafe = GeneralLogMessageFixedUnsafe;

    /// The message text to the Client which it should add to its log.
    ///
    fn message_text(&self) -> &str {
        get_fixed(&self.message_text[..])
    }

    /// The message text to the Client which it should add to its log.
    ///
    fn set_message_text(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.message_text[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This message from the Server to the Client is a message which is to be
/// added to a log file indicating information from the server. For example,
/// if there are informational messages to provide during the process of a
/// logon, this can be used to send those messages to a Client. A Client should
/// never implement this message as a pop-up type message. Instead, it should
/// be treated as a lower-level log type message.
///
/// This message can be sent even before a LogonResponseVLS is given.
impl GeneralLogMessage for GeneralLogMessageFixedUnsafe {
    type Safe = GeneralLogMessageFixed;
    type Unsafe = GeneralLogMessageFixedUnsafe;

    /// The message text to the Client which it should add to its log.
    ///
    fn message_text(&self) -> &str {
        if self.is_out_of_bounds(132) {
            ""
        } else {
            get_fixed(&self.message_text[..])
        }
    }

    /// The message text to the Client which it should add to its log.
    ///
    fn set_message_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(132) {
            set_fixed(&mut self.message_text[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                132usize,
                core::mem::size_of::<GeneralLogMessageFixedData>(),
                "GeneralLogMessageFixedData sizeof expected {:} but was {:}",
                132usize,
                core::mem::size_of::<GeneralLogMessageFixedData>()
            );
            assert_eq!(
                132u16,
                GeneralLogMessageFixed::new().size(),
                "GeneralLogMessageFixed sizeof expected {:} but was {:}",
                132u16,
                GeneralLogMessageFixed::new().size(),
            );
            assert_eq!(
                GENERAL_LOG_MESSAGE,
                GeneralLogMessageFixed::new().r#type(),
                "GeneralLogMessageFixed type expected {:} but was {:}",
                GENERAL_LOG_MESSAGE,
                GeneralLogMessageFixed::new().r#type(),
            );
            assert_eq!(
                701u16,
                GeneralLogMessageFixed::new().r#type(),
                "GeneralLogMessageFixed type expected {:} but was {:}",
                701u16,
                GeneralLogMessageFixed::new().r#type(),
            );
            let d = GeneralLogMessageFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.message_text) as usize) - p,
                "message_text offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.message_text) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                10usize,
                core::mem::size_of::<GeneralLogMessageVLSData>(),
                "GeneralLogMessageVLSData sizeof expected {:} but was {:}",
                10usize,
                core::mem::size_of::<GeneralLogMessageVLSData>()
            );
            assert_eq!(
                10u16,
                GeneralLogMessageVLS::new().size(),
                "GeneralLogMessageVLS sizeof expected {:} but was {:}",
                10u16,
                GeneralLogMessageVLS::new().size(),
            );
            assert_eq!(
                GENERAL_LOG_MESSAGE,
                GeneralLogMessageVLS::new().r#type(),
                "GeneralLogMessageVLS type expected {:} but was {:}",
                GENERAL_LOG_MESSAGE,
                GeneralLogMessageVLS::new().r#type(),
            );
            assert_eq!(
                701u16,
                GeneralLogMessageVLS::new().r#type(),
                "GeneralLogMessageVLS type expected {:} but was {:}",
                701u16,
                GeneralLogMessageVLS::new().r#type(),
            );
            let d = GeneralLogMessageVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.message_text) as usize) - p,
                "message_text offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.message_text) as usize) - p,
            );
        }
    }
}
