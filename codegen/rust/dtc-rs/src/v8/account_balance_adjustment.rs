// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const ACCOUNT_BALANCE_ADJUSTMENT_VLS_SIZE: usize = 40;

pub(crate) const ACCOUNT_BALANCE_ADJUSTMENT_FIXED_SIZE: usize = 160;

/// size           u16     = AccountBalanceAdjustmentVLSSize  (40)
/// type           u16     = ACCOUNT_BALANCE_ADJUSTMENT  (607)
/// base_size      u16     = AccountBalanceAdjustmentVLSSize  (40)
/// request_id     i32     = 0
/// trade_account  string  = ""
/// credit_amount  f64     = 0
/// debit_amount   f64     = 0
/// currency       string  = ""
/// reason         string  = ""
pub(crate) const ACCOUNT_BALANCE_ADJUSTMENT_VLS_DEFAULT: [u8; 40] = [
    40, 0, 95, 2, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size           u16       = AccountBalanceAdjustmentFixedSize  (160)
/// type           u16       = ACCOUNT_BALANCE_ADJUSTMENT  (607)
/// request_id     i32       = 0
/// trade_account  string32  = ""
/// credit_amount  f64       = 0
/// debit_amount   f64       = 0
/// currency       string8   = ""
/// reason         string96  = ""
pub(crate) const ACCOUNT_BALANCE_ADJUSTMENT_FIXED_DEFAULT: [u8; 160] = [
    160, 0, 95, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
];

pub trait AccountBalanceAdjustment: Message {
    type Safe: AccountBalanceAdjustment;
    type Unsafe: AccountBalanceAdjustment;

    fn request_id(&self) -> i32;

    fn trade_account(&self) -> &str;

    fn credit_amount(&self) -> f64;

    fn debit_amount(&self) -> f64;

    fn currency(&self) -> &str;

    fn reason(&self) -> &str;

    fn set_request_id(&mut self, value: i32) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_credit_amount(&mut self, value: f64) -> &mut Self;

    fn set_debit_amount(&mut self, value: f64) -> &mut Self;

    fn set_currency(&mut self, value: &str) -> &mut Self;

    fn set_reason(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl AccountBalanceAdjustment) {
        to.set_request_id(self.request_id());
        to.set_trade_account(self.trade_account());
        to.set_credit_amount(self.credit_amount());
        to.set_debit_amount(self.debit_amount());
        to.set_currency(self.currency());
        to.set_reason(self.reason());
    }
}

pub struct AccountBalanceAdjustmentVLS {
    data: *const AccountBalanceAdjustmentVLSData,
    capacity: usize,
}

pub struct AccountBalanceAdjustmentVLSUnsafe {
    data: *const AccountBalanceAdjustmentVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct AccountBalanceAdjustmentVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    trade_account: VLS,
    credit_amount: f64,
    debit_amount: f64,
    currency: VLS,
    reason: VLS,
}

pub struct AccountBalanceAdjustmentFixed {
    data: *const AccountBalanceAdjustmentFixedData,
}

pub struct AccountBalanceAdjustmentFixedUnsafe {
    data: *const AccountBalanceAdjustmentFixedData,
}

#[repr(packed(8), C)]
pub struct AccountBalanceAdjustmentFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    trade_account: [u8; 32],
    credit_amount: f64,
    debit_amount: f64,
    currency: [u8; 8],
    reason: [u8; 96],
}

impl AccountBalanceAdjustmentVLSData {
    pub fn new() -> Self {
        Self {
            size: 40u16.to_le(),
            r#type: ACCOUNT_BALANCE_ADJUSTMENT.to_le(),
            base_size: 40u16.to_le(),
            request_id: 0i32,
            trade_account: crate::message::VLS::new(),
            credit_amount: 0.0f64,
            debit_amount: 0.0f64,
            currency: crate::message::VLS::new(),
            reason: crate::message::VLS::new(),
        }
    }
}

impl AccountBalanceAdjustmentFixedData {
    pub fn new() -> Self {
        Self {
            size: 160u16.to_le(),
            r#type: ACCOUNT_BALANCE_ADJUSTMENT.to_le(),
            request_id: 0i32,
            trade_account: [0; 32],
            credit_amount: 0.0f64,
            debit_amount: 0.0f64,
            currency: [0; 8],
            reason: [0; 96],
        }
    }
}

unsafe impl Send for AccountBalanceAdjustmentFixed {}
unsafe impl Send for AccountBalanceAdjustmentFixedUnsafe {}
unsafe impl Send for AccountBalanceAdjustmentFixedData {}
unsafe impl Send for AccountBalanceAdjustmentVLS {}
unsafe impl Send for AccountBalanceAdjustmentVLSUnsafe {}
unsafe impl Send for AccountBalanceAdjustmentVLSData {}

impl Drop for AccountBalanceAdjustmentFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for AccountBalanceAdjustmentFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for AccountBalanceAdjustmentVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for AccountBalanceAdjustmentVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for AccountBalanceAdjustmentFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for AccountBalanceAdjustmentFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for AccountBalanceAdjustmentVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for AccountBalanceAdjustmentVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for AccountBalanceAdjustmentFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for AccountBalanceAdjustmentFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for AccountBalanceAdjustmentVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for AccountBalanceAdjustmentVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for AccountBalanceAdjustmentFixed {
    type Target = AccountBalanceAdjustmentFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AccountBalanceAdjustmentFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for AccountBalanceAdjustmentFixedUnsafe {
    type Target = AccountBalanceAdjustmentFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AccountBalanceAdjustmentFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for AccountBalanceAdjustmentVLS {
    type Target = AccountBalanceAdjustmentVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AccountBalanceAdjustmentVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for AccountBalanceAdjustmentVLSUnsafe {
    type Target = AccountBalanceAdjustmentVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for AccountBalanceAdjustmentVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for AccountBalanceAdjustmentFixed {
    type Data = AccountBalanceAdjustmentFixedData;

    const BASE_SIZE: usize = 160;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AccountBalanceAdjustmentFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const AccountBalanceAdjustmentFixedData,
        }
    }
}
impl crate::Message for AccountBalanceAdjustmentFixedUnsafe {
    type Data = AccountBalanceAdjustmentFixedData;

    const BASE_SIZE: usize = 160;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AccountBalanceAdjustmentFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const AccountBalanceAdjustmentFixedData,
        }
    }
}
impl crate::Message for AccountBalanceAdjustmentVLS {
    type Data = AccountBalanceAdjustmentVLSData;

    const BASE_SIZE: usize = 40;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AccountBalanceAdjustmentVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const AccountBalanceAdjustmentVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for AccountBalanceAdjustmentVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const AccountBalanceAdjustmentVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for AccountBalanceAdjustmentVLSUnsafe {
    type Data = AccountBalanceAdjustmentVLSData;

    const BASE_SIZE: usize = 40;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, AccountBalanceAdjustmentVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const AccountBalanceAdjustmentVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for AccountBalanceAdjustmentVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const AccountBalanceAdjustmentVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl AccountBalanceAdjustment for AccountBalanceAdjustmentVLS {
    type Safe = AccountBalanceAdjustmentVLS;
    type Unsafe = AccountBalanceAdjustmentVLSUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn credit_amount(&self) -> f64 {
        f64_le(self.credit_amount)
    }

    fn debit_amount(&self) -> f64 {
        f64_le(self.debit_amount)
    }

    fn currency(&self) -> &str {
        get_vls(self, self.currency)
    }

    fn reason(&self) -> &str {
        get_vls(self, self.reason)
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_credit_amount(&mut self, value: f64) -> &mut Self {
        self.credit_amount = f64_le(value);
        self
    }

    fn set_debit_amount(&mut self, value: f64) -> &mut Self {
        self.debit_amount = f64_le(value);
        self
    }

    fn set_currency(&mut self, value: &str) -> &mut Self {
        self.currency = set_vls(self, self.currency, value);
        self
    }

    fn set_reason(&mut self, value: &str) -> &mut Self {
        self.reason = set_vls(self, self.reason, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl AccountBalanceAdjustment for AccountBalanceAdjustmentVLSUnsafe {
    type Safe = AccountBalanceAdjustmentVLS;
    type Unsafe = AccountBalanceAdjustmentVLSUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(12) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(16) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn credit_amount(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            0.0f64
        } else {
            f64_le(self.credit_amount)
        }
    }

    fn debit_amount(&self) -> f64 {
        if self.is_out_of_bounds(32) {
            0.0f64
        } else {
            f64_le(self.debit_amount)
        }
    }

    fn currency(&self) -> &str {
        if self.is_out_of_bounds(36) {
            ""
        } else {
            get_vls(self, self.currency)
        }
    }

    fn reason(&self) -> &str {
        if self.is_out_of_bounds(40) {
            ""
        } else {
            get_vls(self, self.reason)
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_credit_amount(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.credit_amount = f64_le(value);
        }
        self
    }

    fn set_debit_amount(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.debit_amount = f64_le(value);
        }
        self
    }

    fn set_currency(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            self.currency = set_vls(self, self.currency, value);
        }
        self
    }

    fn set_reason(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.reason = set_vls(self, self.reason, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl AccountBalanceAdjustment for AccountBalanceAdjustmentFixed {
    type Safe = AccountBalanceAdjustmentFixed;
    type Unsafe = AccountBalanceAdjustmentFixedUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    fn credit_amount(&self) -> f64 {
        f64_le(self.credit_amount)
    }

    fn debit_amount(&self) -> f64 {
        f64_le(self.debit_amount)
    }

    fn currency(&self) -> &str {
        get_fixed(&self.currency[..])
    }

    fn reason(&self) -> &str {
        get_fixed(&self.reason[..])
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    fn set_credit_amount(&mut self, value: f64) -> &mut Self {
        self.credit_amount = f64_le(value);
        self
    }

    fn set_debit_amount(&mut self, value: f64) -> &mut Self {
        self.debit_amount = f64_le(value);
        self
    }

    fn set_currency(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.currency[..], value);
        self
    }

    fn set_reason(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.reason[..], value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl AccountBalanceAdjustment for AccountBalanceAdjustmentFixedUnsafe {
    type Safe = AccountBalanceAdjustmentFixed;
    type Unsafe = AccountBalanceAdjustmentFixedUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(40) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    fn credit_amount(&self) -> f64 {
        if self.is_out_of_bounds(48) {
            0.0f64
        } else {
            f64_le(self.credit_amount)
        }
    }

    fn debit_amount(&self) -> f64 {
        if self.is_out_of_bounds(56) {
            0.0f64
        } else {
            f64_le(self.debit_amount)
        }
    }

    fn currency(&self) -> &str {
        if self.is_out_of_bounds(64) {
            ""
        } else {
            get_fixed(&self.currency[..])
        }
    }

    fn reason(&self) -> &str {
        if self.is_out_of_bounds(160) {
            ""
        } else {
            get_fixed(&self.reason[..])
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    fn set_credit_amount(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.credit_amount = f64_le(value);
        }
        self
    }

    fn set_debit_amount(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.debit_amount = f64_le(value);
        }
        self
    }

    fn set_currency(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            set_fixed(&mut self.currency[..], value);
        }
        self
    }

    fn set_reason(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(160) {
            set_fixed(&mut self.reason[..], value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                160usize,
                core::mem::size_of::<AccountBalanceAdjustmentFixedData>(),
                "AccountBalanceAdjustmentFixedData sizeof expected {:} but was {:}",
                160usize,
                core::mem::size_of::<AccountBalanceAdjustmentFixedData>()
            );
            assert_eq!(
                160u16,
                AccountBalanceAdjustmentFixed::new().size(),
                "AccountBalanceAdjustmentFixed sizeof expected {:} but was {:}",
                160u16,
                AccountBalanceAdjustmentFixed::new().size(),
            );
            assert_eq!(
                ACCOUNT_BALANCE_ADJUSTMENT,
                AccountBalanceAdjustmentFixed::new().r#type(),
                "AccountBalanceAdjustmentFixed type expected {:} but was {:}",
                ACCOUNT_BALANCE_ADJUSTMENT,
                AccountBalanceAdjustmentFixed::new().r#type(),
            );
            assert_eq!(
                607u16,
                AccountBalanceAdjustmentFixed::new().r#type(),
                "AccountBalanceAdjustmentFixed type expected {:} but was {:}",
                607u16,
                AccountBalanceAdjustmentFixed::new().r#type(),
            );
            let d = AccountBalanceAdjustmentFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.credit_amount) as usize) - p,
                "credit_amount offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.credit_amount) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.debit_amount) as usize) - p,
                "debit_amount offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.debit_amount) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
                "currency offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.reason) as usize) - p,
                "reason offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.reason) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                40usize,
                core::mem::size_of::<AccountBalanceAdjustmentVLSData>(),
                "AccountBalanceAdjustmentVLSData sizeof expected {:} but was {:}",
                40usize,
                core::mem::size_of::<AccountBalanceAdjustmentVLSData>()
            );
            assert_eq!(
                40u16,
                AccountBalanceAdjustmentVLS::new().size(),
                "AccountBalanceAdjustmentVLS sizeof expected {:} but was {:}",
                40u16,
                AccountBalanceAdjustmentVLS::new().size(),
            );
            assert_eq!(
                ACCOUNT_BALANCE_ADJUSTMENT,
                AccountBalanceAdjustmentVLS::new().r#type(),
                "AccountBalanceAdjustmentVLS type expected {:} but was {:}",
                ACCOUNT_BALANCE_ADJUSTMENT,
                AccountBalanceAdjustmentVLS::new().r#type(),
            );
            assert_eq!(
                607u16,
                AccountBalanceAdjustmentVLS::new().r#type(),
                "AccountBalanceAdjustmentVLS type expected {:} but was {:}",
                607u16,
                AccountBalanceAdjustmentVLS::new().r#type(),
            );
            let d = AccountBalanceAdjustmentVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.credit_amount) as usize) - p,
                "credit_amount offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.credit_amount) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.debit_amount) as usize) - p,
                "debit_amount offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.debit_amount) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
                "currency offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.currency) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.reason) as usize) - p,
                "reason offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.reason) as usize) - p,
            );
        }
    }
}
