// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const CORRECTING_ORDER_FILL_RESPONSE_VLS_SIZE: usize = 16;

pub(crate) const CORRECTING_ORDER_FILL_RESPONSE_FIXED_SIZE: usize = 294;

/// size             u16     = CorrectingOrderFillResponseVLSSize  (16)
/// type             u16     = CORRECTING_ORDER_FILL_RESPONSE  (310)
/// base_size        u16     = CorrectingOrderFillResponseVLSSize  (16)
/// client_order_id  string  = ""
/// result_text      string  = ""
/// is_error         bool    = false
pub(crate) const CORRECTING_ORDER_FILL_RESPONSE_VLS_DEFAULT: [u8; 16] =
    [16, 0, 54, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

/// size             u16        = CorrectingOrderFillResponseFixedSize  (294)
/// type             u16        = CORRECTING_ORDER_FILL_RESPONSE  (310)
/// client_order_id  string32   = ""
/// result_text      string256  = ""
/// is_error         bool       = false
pub(crate) const CORRECTING_ORDER_FILL_RESPONSE_FIXED_DEFAULT: [u8; 294] = [
    38, 1, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0,
];

pub trait CorrectingOrderFillResponse: Message {
    type Safe: CorrectingOrderFillResponse;
    type Unsafe: CorrectingOrderFillResponse;

    fn client_order_id(&self) -> &str;

    fn result_text(&self) -> &str;

    fn is_error(&self) -> bool;

    fn set_client_order_id(&mut self, value: &str) -> &mut Self;

    fn set_result_text(&mut self, value: &str) -> &mut Self;

    fn set_is_error(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl CorrectingOrderFillResponse) {
        to.set_client_order_id(self.client_order_id());
        to.set_result_text(self.result_text());
        to.set_is_error(self.is_error());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct CorrectingOrderFillResponseVLS {
    data: *const CorrectingOrderFillResponseVLSData,
    capacity: usize,
}

pub struct CorrectingOrderFillResponseVLSUnsafe {
    data: *const CorrectingOrderFillResponseVLSData,
    capacity: usize,
}

#[repr(packed(8), C)]
pub struct CorrectingOrderFillResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    client_order_id: VLS,
    result_text: VLS,
    is_error: bool,
}

pub struct CorrectingOrderFillResponseFixed {
    data: *const CorrectingOrderFillResponseFixedData,
}

pub struct CorrectingOrderFillResponseFixedUnsafe {
    data: *const CorrectingOrderFillResponseFixedData,
}

#[repr(packed(8), C)]
pub struct CorrectingOrderFillResponseFixedData {
    size: u16,
    r#type: u16,
    client_order_id: [u8; 32],
    result_text: [u8; 256],
    is_error: bool,
}

impl CorrectingOrderFillResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 16u16.to_le(),
            r#type: CORRECTING_ORDER_FILL_RESPONSE.to_le(),
            base_size: 16u16.to_le(),
            client_order_id: crate::message::VLS::new(),
            result_text: crate::message::VLS::new(),
            is_error: false,
        }
    }
}

impl CorrectingOrderFillResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 294u16.to_le(),
            r#type: CORRECTING_ORDER_FILL_RESPONSE.to_le(),
            client_order_id: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            result_text: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            is_error: false,
        }
    }
}

unsafe impl Send for CorrectingOrderFillResponseFixed {}
unsafe impl Send for CorrectingOrderFillResponseFixedUnsafe {}
unsafe impl Send for CorrectingOrderFillResponseFixedData {}
unsafe impl Send for CorrectingOrderFillResponseVLS {}
unsafe impl Send for CorrectingOrderFillResponseVLSUnsafe {}
unsafe impl Send for CorrectingOrderFillResponseVLSData {}

impl Drop for CorrectingOrderFillResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CorrectingOrderFillResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CorrectingOrderFillResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for CorrectingOrderFillResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for CorrectingOrderFillResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CorrectingOrderFillResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CorrectingOrderFillResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for CorrectingOrderFillResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for CorrectingOrderFillResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CorrectingOrderFillResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CorrectingOrderFillResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for CorrectingOrderFillResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for CorrectingOrderFillResponseFixed {
    type Target = CorrectingOrderFillResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CorrectingOrderFillResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CorrectingOrderFillResponseFixedUnsafe {
    type Target = CorrectingOrderFillResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CorrectingOrderFillResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CorrectingOrderFillResponseVLS {
    type Target = CorrectingOrderFillResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CorrectingOrderFillResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for CorrectingOrderFillResponseVLSUnsafe {
    type Target = CorrectingOrderFillResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for CorrectingOrderFillResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for CorrectingOrderFillResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseFixed(size: {}, type: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl core::fmt::Debug for CorrectingOrderFillResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseFixed(size: {}, type: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl core::fmt::Display for CorrectingOrderFillResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseFixedUnsafe(size: {}, type: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl core::fmt::Debug for CorrectingOrderFillResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseFixedUnsafe(size: {}, type: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl core::fmt::Display for CorrectingOrderFillResponseVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseVLS(size: {}, type: {}, base_size: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.base_size(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl core::fmt::Debug for CorrectingOrderFillResponseVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseVLS(size: {}, type: {}, base_size: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.base_size(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl core::fmt::Display for CorrectingOrderFillResponseVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseVLSUnsafe(size: {}, type: {}, base_size: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.base_size(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl core::fmt::Debug for CorrectingOrderFillResponseVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("CorrectingOrderFillResponseVLSUnsafe(size: {}, type: {}, base_size: {}, client_order_id: \"{}\", result_text: \"{}\", is_error: {})", self.size(), self.r#type(), self.base_size(), self.client_order_id(), self.result_text(), self.is_error()).as_str())
    }
}

impl crate::Message for CorrectingOrderFillResponseFixed {
    type Data = CorrectingOrderFillResponseFixedData;

    const TYPE: u16 = CORRECTING_ORDER_FILL_RESPONSE;
    const BASE_SIZE: usize = 294;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CorrectingOrderFillResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CorrectingOrderFillResponseFixedData,
        }
    }
}
impl crate::Message for CorrectingOrderFillResponseFixedUnsafe {
    type Data = CorrectingOrderFillResponseFixedData;

    const TYPE: u16 = CORRECTING_ORDER_FILL_RESPONSE;
    const BASE_SIZE: usize = 294;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CorrectingOrderFillResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const CorrectingOrderFillResponseFixedData,
        }
    }
}
impl crate::Message for CorrectingOrderFillResponseVLS {
    type Data = CorrectingOrderFillResponseVLSData;

    const TYPE: u16 = CORRECTING_ORDER_FILL_RESPONSE;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CorrectingOrderFillResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CorrectingOrderFillResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for CorrectingOrderFillResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CorrectingOrderFillResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for CorrectingOrderFillResponseVLSUnsafe {
    type Data = CorrectingOrderFillResponseVLSData;

    const TYPE: u16 = CORRECTING_ORDER_FILL_RESPONSE;
    const BASE_SIZE: usize = 16;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, CorrectingOrderFillResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const CorrectingOrderFillResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for CorrectingOrderFillResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const CorrectingOrderFillResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl CorrectingOrderFillResponse for CorrectingOrderFillResponseVLS {
    type Safe = CorrectingOrderFillResponseVLS;
    type Unsafe = CorrectingOrderFillResponseVLSUnsafe;

    fn client_order_id(&self) -> &str {
        get_vls(self, self.client_order_id)
    }

    fn result_text(&self) -> &str {
        get_vls(self, self.result_text)
    }

    fn is_error(&self) -> bool {
        self.is_error
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        self.client_order_id = set_vls(self, self.client_order_id, value);
        self
    }

    fn set_result_text(&mut self, value: &str) -> &mut Self {
        self.result_text = set_vls(self, self.result_text, value);
        self
    }

    fn set_is_error(&mut self, value: bool) -> &mut Self {
        self.is_error = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl CorrectingOrderFillResponse for CorrectingOrderFillResponseVLSUnsafe {
    type Safe = CorrectingOrderFillResponseVLS;
    type Unsafe = CorrectingOrderFillResponseVLSUnsafe;

    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.client_order_id)
        }
    }

    fn result_text(&self) -> &str {
        if self.is_out_of_bounds(14) {
            ""
        } else {
            get_vls(self, self.result_text)
        }
    }

    fn is_error(&self) -> bool {
        if self.is_out_of_bounds(15) {
            false
        } else {
            self.is_error
        }
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.client_order_id = set_vls(self, self.client_order_id, value);
        }
        self
    }

    fn set_result_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.result_text = set_vls(self, self.result_text, value);
        }
        self
    }

    fn set_is_error(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(15) {
            self.is_error = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl CorrectingOrderFillResponse for CorrectingOrderFillResponseFixed {
    type Safe = CorrectingOrderFillResponseFixed;
    type Unsafe = CorrectingOrderFillResponseFixedUnsafe;

    fn client_order_id(&self) -> &str {
        get_fixed(&self.client_order_id[..])
    }

    fn result_text(&self) -> &str {
        get_fixed(&self.result_text[..])
    }

    fn is_error(&self) -> bool {
        self.is_error
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.client_order_id[..], value);
        self
    }

    fn set_result_text(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.result_text[..], value);
        self
    }

    fn set_is_error(&mut self, value: bool) -> &mut Self {
        self.is_error = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl CorrectingOrderFillResponse for CorrectingOrderFillResponseFixedUnsafe {
    type Safe = CorrectingOrderFillResponseFixed;
    type Unsafe = CorrectingOrderFillResponseFixedUnsafe;

    fn client_order_id(&self) -> &str {
        if self.is_out_of_bounds(36) {
            ""
        } else {
            get_fixed(&self.client_order_id[..])
        }
    }

    fn result_text(&self) -> &str {
        if self.is_out_of_bounds(292) {
            ""
        } else {
            get_fixed(&self.result_text[..])
        }
    }

    fn is_error(&self) -> bool {
        if self.is_out_of_bounds(293) {
            false
        } else {
            self.is_error
        }
    }

    fn set_client_order_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(36) {
            set_fixed(&mut self.client_order_id[..], value);
        }
        self
    }

    fn set_result_text(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(292) {
            set_fixed(&mut self.result_text[..], value);
        }
        self
    }

    fn set_is_error(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(293) {
            self.is_error = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                294usize,
                core::mem::size_of::<CorrectingOrderFillResponseFixedData>(),
                "CorrectingOrderFillResponseFixedData sizeof expected {:} but was {:}",
                294usize,
                core::mem::size_of::<CorrectingOrderFillResponseFixedData>()
            );
            assert_eq!(
                294u16,
                CorrectingOrderFillResponseFixed::new().size(),
                "CorrectingOrderFillResponseFixed sizeof expected {:} but was {:}",
                294u16,
                CorrectingOrderFillResponseFixed::new().size(),
            );
            assert_eq!(
                CORRECTING_ORDER_FILL_RESPONSE,
                CorrectingOrderFillResponseFixed::new().r#type(),
                "CorrectingOrderFillResponseFixed type expected {:} but was {:}",
                CORRECTING_ORDER_FILL_RESPONSE,
                CorrectingOrderFillResponseFixed::new().r#type(),
            );
            assert_eq!(
                310u16,
                CorrectingOrderFillResponseFixed::new().r#type(),
                "CorrectingOrderFillResponseFixed type expected {:} but was {:}",
                310u16,
                CorrectingOrderFillResponseFixed::new().r#type(),
            );
            let d = CorrectingOrderFillResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                36usize,
                (core::ptr::addr_of!(d.result_text) as usize) - p,
                "result_text offset expected {:} but was {:}",
                36usize,
                (core::ptr::addr_of!(d.result_text) as usize) - p,
            );
            assert_eq!(
                292usize,
                (core::ptr::addr_of!(d.is_error) as usize) - p,
                "is_error offset expected {:} but was {:}",
                292usize,
                (core::ptr::addr_of!(d.is_error) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                16usize,
                core::mem::size_of::<CorrectingOrderFillResponseVLSData>(),
                "CorrectingOrderFillResponseVLSData sizeof expected {:} but was {:}",
                16usize,
                core::mem::size_of::<CorrectingOrderFillResponseVLSData>()
            );
            assert_eq!(
                16u16,
                CorrectingOrderFillResponseVLS::new().size(),
                "CorrectingOrderFillResponseVLS sizeof expected {:} but was {:}",
                16u16,
                CorrectingOrderFillResponseVLS::new().size(),
            );
            assert_eq!(
                CORRECTING_ORDER_FILL_RESPONSE,
                CorrectingOrderFillResponseVLS::new().r#type(),
                "CorrectingOrderFillResponseVLS type expected {:} but was {:}",
                CORRECTING_ORDER_FILL_RESPONSE,
                CorrectingOrderFillResponseVLS::new().r#type(),
            );
            assert_eq!(
                310u16,
                CorrectingOrderFillResponseVLS::new().r#type(),
                "CorrectingOrderFillResponseVLS type expected {:} but was {:}",
                310u16,
                CorrectingOrderFillResponseVLS::new().r#type(),
            );
            let d = CorrectingOrderFillResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
                "client_order_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.client_order_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.result_text) as usize) - p,
                "result_text offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.result_text) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.is_error) as usize) - p,
                "is_error offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.is_error) as usize) - p,
            );
        }
    }
}
