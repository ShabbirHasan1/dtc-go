// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE_FIXED_SIZE: usize = 7;

/// size                          u16   = InterprocessSynchronizationRemoteStateFixedSize  (7)
/// type                          u16   = INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE  (10134)
/// is_primary                    bool  = false
/// is_secondary                  bool  = false
/// is_secondary_failover_active  bool  = false
pub(crate) const INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE_FIXED_DEFAULT: [u8; 7] =
    [7, 0, 150, 39, 0, 0, 0];

pub trait InterprocessSynchronizationRemoteState: Message {
    type Safe: InterprocessSynchronizationRemoteState;
    type Unsafe: InterprocessSynchronizationRemoteState;

    fn is_primary(&self) -> bool;

    fn is_secondary(&self) -> bool;

    fn is_secondary_failover_active(&self) -> bool;

    fn set_is_primary(&mut self, value: bool) -> &mut Self;

    fn set_is_secondary(&mut self, value: bool) -> &mut Self;

    fn set_is_secondary_failover_active(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl InterprocessSynchronizationRemoteState) {
        to.set_is_primary(self.is_primary());
        to.set_is_secondary(self.is_secondary());
        to.set_is_secondary_failover_active(self.is_secondary_failover_active());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 4 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct InterprocessSynchronizationRemoteStateFixed {
    data: *const InterprocessSynchronizationRemoteStateFixedData,
}

pub struct InterprocessSynchronizationRemoteStateFixedUnsafe {
    data: *const InterprocessSynchronizationRemoteStateFixedData,
}

#[repr(packed(1), C)]
pub struct InterprocessSynchronizationRemoteStateFixedData {
    size: u16,
    r#type: u16,
    is_primary: bool,
    is_secondary: bool,
    is_secondary_failover_active: bool,
}

impl InterprocessSynchronizationRemoteStateFixedData {
    pub fn new() -> Self {
        Self {
            size: 7u16.to_le(),
            r#type: INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE.to_le(),
            is_primary: false,
            is_secondary: false,
            is_secondary_failover_active: false,
        }
    }
}

unsafe impl Send for InterprocessSynchronizationRemoteStateFixed {}
unsafe impl Send for InterprocessSynchronizationRemoteStateFixedUnsafe {}
unsafe impl Send for InterprocessSynchronizationRemoteStateFixedData {}

impl Drop for InterprocessSynchronizationRemoteStateFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for InterprocessSynchronizationRemoteStateFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for InterprocessSynchronizationRemoteStateFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for InterprocessSynchronizationRemoteStateFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for InterprocessSynchronizationRemoteStateFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for InterprocessSynchronizationRemoteStateFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for InterprocessSynchronizationRemoteStateFixed {
    type Target = InterprocessSynchronizationRemoteStateFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for InterprocessSynchronizationRemoteStateFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for InterprocessSynchronizationRemoteStateFixedUnsafe {
    type Target = InterprocessSynchronizationRemoteStateFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for InterprocessSynchronizationRemoteStateFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for InterprocessSynchronizationRemoteStateFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("InterprocessSynchronizationRemoteStateFixed(size: {}, type: {}, is_primary: {}, is_secondary: {}, is_secondary_failover_active: {})", self.size(), self.r#type(), self.is_primary(), self.is_secondary(), self.is_secondary_failover_active()).as_str())
    }
}

impl core::fmt::Debug for InterprocessSynchronizationRemoteStateFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("InterprocessSynchronizationRemoteStateFixed(size: {}, type: {}, is_primary: {}, is_secondary: {}, is_secondary_failover_active: {})", self.size(), self.r#type(), self.is_primary(), self.is_secondary(), self.is_secondary_failover_active()).as_str())
    }
}

impl core::fmt::Display for InterprocessSynchronizationRemoteStateFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("InterprocessSynchronizationRemoteStateFixedUnsafe(size: {}, type: {}, is_primary: {}, is_secondary: {}, is_secondary_failover_active: {})", self.size(), self.r#type(), self.is_primary(), self.is_secondary(), self.is_secondary_failover_active()).as_str())
    }
}

impl core::fmt::Debug for InterprocessSynchronizationRemoteStateFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("InterprocessSynchronizationRemoteStateFixedUnsafe(size: {}, type: {}, is_primary: {}, is_secondary: {}, is_secondary_failover_active: {})", self.size(), self.r#type(), self.is_primary(), self.is_secondary(), self.is_secondary_failover_active()).as_str())
    }
}

impl crate::Message for InterprocessSynchronizationRemoteStateFixed {
    type Data = InterprocessSynchronizationRemoteStateFixedData;

    const TYPE: u16 = INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE;
    const BASE_SIZE: usize = 7;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                InterprocessSynchronizationRemoteStateFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const InterprocessSynchronizationRemoteStateFixedData,
        }
    }
}
impl crate::Message for InterprocessSynchronizationRemoteStateFixedUnsafe {
    type Data = InterprocessSynchronizationRemoteStateFixedData;

    const TYPE: u16 = INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE;
    const BASE_SIZE: usize = 7;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                InterprocessSynchronizationRemoteStateFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const InterprocessSynchronizationRemoteStateFixedData,
        }
    }
}
impl InterprocessSynchronizationRemoteState for InterprocessSynchronizationRemoteStateFixed {
    type Safe = InterprocessSynchronizationRemoteStateFixed;
    type Unsafe = InterprocessSynchronizationRemoteStateFixedUnsafe;

    fn is_primary(&self) -> bool {
        self.is_primary
    }

    fn is_secondary(&self) -> bool {
        self.is_secondary
    }

    fn is_secondary_failover_active(&self) -> bool {
        self.is_secondary_failover_active
    }

    fn set_is_primary(&mut self, value: bool) -> &mut Self {
        self.is_primary = value;
        self
    }

    fn set_is_secondary(&mut self, value: bool) -> &mut Self {
        self.is_secondary = value;
        self
    }

    fn set_is_secondary_failover_active(&mut self, value: bool) -> &mut Self {
        self.is_secondary_failover_active = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl InterprocessSynchronizationRemoteState for InterprocessSynchronizationRemoteStateFixedUnsafe {
    type Safe = InterprocessSynchronizationRemoteStateFixed;
    type Unsafe = InterprocessSynchronizationRemoteStateFixedUnsafe;

    fn is_primary(&self) -> bool {
        if self.is_out_of_bounds(5) {
            false
        } else {
            self.is_primary
        }
    }

    fn is_secondary(&self) -> bool {
        if self.is_out_of_bounds(6) {
            false
        } else {
            self.is_secondary
        }
    }

    fn is_secondary_failover_active(&self) -> bool {
        if self.is_out_of_bounds(7) {
            false
        } else {
            self.is_secondary_failover_active
        }
    }

    fn set_is_primary(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(5) {
            self.is_primary = value;
        }
        self
    }

    fn set_is_secondary(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(6) {
            self.is_secondary = value;
        }
        self
    }

    fn set_is_secondary_failover_active(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(7) {
            self.is_secondary_failover_active = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                7usize,
                core::mem::size_of::<InterprocessSynchronizationRemoteStateFixedData>(),
                "InterprocessSynchronizationRemoteStateFixedData sizeof expected {:} but was {:}",
                7usize,
                core::mem::size_of::<InterprocessSynchronizationRemoteStateFixedData>()
            );
            assert_eq!(
                7u16,
                InterprocessSynchronizationRemoteStateFixed::new().size(),
                "InterprocessSynchronizationRemoteStateFixed sizeof expected {:} but was {:}",
                7u16,
                InterprocessSynchronizationRemoteStateFixed::new().size(),
            );
            assert_eq!(
                INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE,
                InterprocessSynchronizationRemoteStateFixed::new().r#type(),
                "InterprocessSynchronizationRemoteStateFixed type expected {:} but was {:}",
                INTERPROCESS_SYNCHRONIZATION_REMOTE_STATE,
                InterprocessSynchronizationRemoteStateFixed::new().r#type(),
            );
            assert_eq!(
                10134u16,
                InterprocessSynchronizationRemoteStateFixed::new().r#type(),
                "InterprocessSynchronizationRemoteStateFixed type expected {:} but was {:}",
                10134u16,
                InterprocessSynchronizationRemoteStateFixed::new().r#type(),
            );
            let d = InterprocessSynchronizationRemoteStateFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.is_primary) as usize) - p,
                "is_primary offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.is_primary) as usize) - p,
            );
            assert_eq!(
                5usize,
                (core::ptr::addr_of!(d.is_secondary) as usize) - p,
                "is_secondary offset expected {:} but was {:}",
                5usize,
                (core::ptr::addr_of!(d.is_secondary) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.is_secondary_failover_active) as usize) - p,
                "is_secondary_failover_active offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.is_secondary_failover_active) as usize) - p,
            );
        }
    }
}
