// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const HISTORICAL_TRADES_RESPONSE_VLS_SIZE: usize = 111;

pub(crate) const HISTORICAL_TRADES_RESPONSE_FIXED_SIZE: usize = 317;

/// size                          u16                       = HistoricalTradesResponseVLSSize  (111)
/// type                          u16                       = HISTORICAL_TRADES_RESPONSE  (10102)
/// base_size                     u16                       = HistoricalTradesResponseVLSSize  (111)
/// request_id                    i32                       = 0
/// is_final_message              bool                      = false
/// symbol                        string                    = ""
/// trade_account                 string                    = ""
/// entry_date_time               DateTimeWithMilliseconds  = 0
/// exit_date_time                DateTimeWithMilliseconds  = 0
/// entry_price                   f64                       = 0
/// exit_price                    f64                       = 0
/// trade_type                    BuySellEnum               = BUY_SELL_UNSET  (0)
/// entry_quantity                u32                       = 0
/// exit_quantity                 u32                       = 0
/// max_open_quantity             u32                       = 0
/// closed_profit_loss            f64                       = 0
/// maximum_open_position_loss    f64                       = 0
/// maximum_open_position_profit  f64                       = 0
/// commission                    f64                       = 0
/// open_fill_execution_id        string                    = ""
/// close_fill_execution_id       string                    = ""
/// sub_account_identifier        u32                       = 0
pub(crate) const HISTORICAL_TRADES_RESPONSE_VLS_DEFAULT: [u8; 111] = [
    111, 0, 118, 39, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// size                          u16                       = HistoricalTradesResponseFixedSize  (317)
/// type                          u16                       = HISTORICAL_TRADES_RESPONSE  (10102)
/// request_id                    i32                       = 0
/// is_final_message              bool                      = false
/// symbol                        string64                  = ""
/// trade_account                 string32                  = ""
/// entry_date_time               DateTimeWithMilliseconds  = 0
/// exit_date_time                DateTimeWithMilliseconds  = 0
/// entry_price                   f64                       = 0
/// exit_price                    f64                       = 0
/// trade_type                    BuySellEnum               = BUY_SELL_UNSET  (0)
/// entry_quantity                u32                       = 0
/// exit_quantity                 u32                       = 0
/// max_open_quantity             u32                       = 0
/// closed_profit_loss            f64                       = 0
/// maximum_open_position_loss    f64                       = 0
/// maximum_open_position_profit  f64                       = 0
/// commission                    f64                       = 0
/// open_fill_execution_id        string64                  = ""
/// close_fill_execution_id       string64                  = ""
/// sub_account_identifier        u32                       = 0
pub(crate) const HISTORICAL_TRADES_RESPONSE_FIXED_DEFAULT: [u8; 317] = [
    61, 1, 118, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait HistoricalTradesResponse: Message {
    type Safe: HistoricalTradesResponse;
    type Unsafe: HistoricalTradesResponse;

    fn request_id(&self) -> i32;

    fn is_final_message(&self) -> bool;

    fn symbol(&self) -> &str;

    fn trade_account(&self) -> &str;

    fn entry_date_time(&self) -> DateTimeWithMilliseconds;

    fn exit_date_time(&self) -> DateTimeWithMilliseconds;

    fn entry_price(&self) -> f64;

    fn exit_price(&self) -> f64;

    fn trade_type(&self) -> BuySellEnum;

    fn entry_quantity(&self) -> u32;

    fn exit_quantity(&self) -> u32;

    fn max_open_quantity(&self) -> u32;

    fn closed_profit_loss(&self) -> f64;

    fn maximum_open_position_loss(&self) -> f64;

    fn maximum_open_position_profit(&self) -> f64;

    fn commission(&self) -> f64;

    fn open_fill_execution_id(&self) -> &str;

    fn close_fill_execution_id(&self) -> &str;

    fn sub_account_identifier(&self) -> u32;

    fn set_request_id(&mut self, value: i32) -> &mut Self;

    fn set_is_final_message(&mut self, value: bool) -> &mut Self;

    fn set_symbol(&mut self, value: &str) -> &mut Self;

    fn set_trade_account(&mut self, value: &str) -> &mut Self;

    fn set_entry_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    fn set_exit_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    fn set_entry_price(&mut self, value: f64) -> &mut Self;

    fn set_exit_price(&mut self, value: f64) -> &mut Self;

    fn set_trade_type(&mut self, value: BuySellEnum) -> &mut Self;

    fn set_entry_quantity(&mut self, value: u32) -> &mut Self;

    fn set_exit_quantity(&mut self, value: u32) -> &mut Self;

    fn set_max_open_quantity(&mut self, value: u32) -> &mut Self;

    fn set_closed_profit_loss(&mut self, value: f64) -> &mut Self;

    fn set_maximum_open_position_loss(&mut self, value: f64) -> &mut Self;

    fn set_maximum_open_position_profit(&mut self, value: f64) -> &mut Self;

    fn set_commission(&mut self, value: f64) -> &mut Self;

    fn set_open_fill_execution_id(&mut self, value: &str) -> &mut Self;

    fn set_close_fill_execution_id(&mut self, value: &str) -> &mut Self;

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalTradesResponse) {
        to.set_request_id(self.request_id());
        to.set_is_final_message(self.is_final_message());
        to.set_symbol(self.symbol());
        to.set_trade_account(self.trade_account());
        to.set_entry_date_time(self.entry_date_time());
        to.set_exit_date_time(self.exit_date_time());
        to.set_entry_price(self.entry_price());
        to.set_exit_price(self.exit_price());
        to.set_trade_type(self.trade_type());
        to.set_entry_quantity(self.entry_quantity());
        to.set_exit_quantity(self.exit_quantity());
        to.set_max_open_quantity(self.max_open_quantity());
        to.set_closed_profit_loss(self.closed_profit_loss());
        to.set_maximum_open_position_loss(self.maximum_open_position_loss());
        to.set_maximum_open_position_profit(self.maximum_open_position_profit());
        to.set_commission(self.commission());
        to.set_open_fill_execution_id(self.open_fill_execution_id());
        to.set_close_fill_execution_id(self.close_fill_execution_id());
        to.set_sub_account_identifier(self.sub_account_identifier());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 6 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

pub struct HistoricalTradesResponseVLS {
    data: *const HistoricalTradesResponseVLSData,
    capacity: usize,
}

pub struct HistoricalTradesResponseVLSUnsafe {
    data: *const HistoricalTradesResponseVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct HistoricalTradesResponseVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    request_id: i32,
    is_final_message: bool,
    symbol: VLS,
    trade_account: VLS,
    entry_date_time: DateTimeWithMilliseconds,
    exit_date_time: DateTimeWithMilliseconds,
    entry_price: f64,
    exit_price: f64,
    trade_type: BuySellEnum,
    entry_quantity: u32,
    exit_quantity: u32,
    max_open_quantity: u32,
    closed_profit_loss: f64,
    maximum_open_position_loss: f64,
    maximum_open_position_profit: f64,
    commission: f64,
    open_fill_execution_id: VLS,
    close_fill_execution_id: VLS,
    sub_account_identifier: u32,
}

pub struct HistoricalTradesResponseFixed {
    data: *const HistoricalTradesResponseFixedData,
}

pub struct HistoricalTradesResponseFixedUnsafe {
    data: *const HistoricalTradesResponseFixedData,
}

#[repr(packed(1), C)]
pub struct HistoricalTradesResponseFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    is_final_message: bool,
    symbol: [u8; 64],
    trade_account: [u8; 32],
    entry_date_time: DateTimeWithMilliseconds,
    exit_date_time: DateTimeWithMilliseconds,
    entry_price: f64,
    exit_price: f64,
    trade_type: BuySellEnum,
    entry_quantity: u32,
    exit_quantity: u32,
    max_open_quantity: u32,
    closed_profit_loss: f64,
    maximum_open_position_loss: f64,
    maximum_open_position_profit: f64,
    commission: f64,
    open_fill_execution_id: [u8; 64],
    close_fill_execution_id: [u8; 64],
    sub_account_identifier: u32,
}

impl HistoricalTradesResponseVLSData {
    pub fn new() -> Self {
        Self {
            size: 111u16.to_le(),
            r#type: HISTORICAL_TRADES_RESPONSE.to_le(),
            base_size: 111u16.to_le(),
            request_id: 0i32,
            is_final_message: false,
            symbol: crate::message::VLS::new(),
            trade_account: crate::message::VLS::new(),
            entry_date_time: 0.0f64,
            exit_date_time: 0.0f64,
            entry_price: 0.0f64,
            exit_price: 0.0f64,
            trade_type: BuySellEnum::BuySellUnset.to_le(),
            entry_quantity: 0u32,
            exit_quantity: 0u32,
            max_open_quantity: 0u32,
            closed_profit_loss: 0.0f64,
            maximum_open_position_loss: 0.0f64,
            maximum_open_position_profit: 0.0f64,
            commission: 0.0f64,
            open_fill_execution_id: crate::message::VLS::new(),
            close_fill_execution_id: crate::message::VLS::new(),
            sub_account_identifier: 0u32,
        }
    }
}

impl HistoricalTradesResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 317u16.to_le(),
            r#type: HISTORICAL_TRADES_RESPONSE.to_le(),
            request_id: 0i32,
            is_final_message: false,
            symbol: [0; 64],
            trade_account: [0; 32],
            entry_date_time: 0.0f64,
            exit_date_time: 0.0f64,
            entry_price: 0.0f64,
            exit_price: 0.0f64,
            trade_type: BuySellEnum::BuySellUnset.to_le(),
            entry_quantity: 0u32,
            exit_quantity: 0u32,
            max_open_quantity: 0u32,
            closed_profit_loss: 0.0f64,
            maximum_open_position_loss: 0.0f64,
            maximum_open_position_profit: 0.0f64,
            commission: 0.0f64,
            open_fill_execution_id: [0; 64],
            close_fill_execution_id: [0; 64],
            sub_account_identifier: 0u32,
        }
    }
}

unsafe impl Send for HistoricalTradesResponseFixed {}
unsafe impl Send for HistoricalTradesResponseFixedUnsafe {}
unsafe impl Send for HistoricalTradesResponseFixedData {}
unsafe impl Send for HistoricalTradesResponseVLS {}
unsafe impl Send for HistoricalTradesResponseVLSUnsafe {}
unsafe impl Send for HistoricalTradesResponseVLSData {}

impl Drop for HistoricalTradesResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalTradesResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalTradesResponseVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalTradesResponseVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalTradesResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalTradesResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalTradesResponseVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalTradesResponseVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalTradesResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalTradesResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalTradesResponseVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalTradesResponseVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalTradesResponseFixed {
    type Target = HistoricalTradesResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalTradesResponseFixedUnsafe {
    type Target = HistoricalTradesResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalTradesResponseVLS {
    type Target = HistoricalTradesResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesResponseVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalTradesResponseVLSUnsafe {
    type Target = HistoricalTradesResponseVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalTradesResponseVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for HistoricalTradesResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseFixed(size: {}, type: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl core::fmt::Debug for HistoricalTradesResponseFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseFixed(size: {}, type: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl core::fmt::Display for HistoricalTradesResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseFixedUnsafe(size: {}, type: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl core::fmt::Debug for HistoricalTradesResponseFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseFixedUnsafe(size: {}, type: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl core::fmt::Display for HistoricalTradesResponseVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseVLS(size: {}, type: {}, base_size: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.base_size(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl core::fmt::Debug for HistoricalTradesResponseVLS {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseVLS(size: {}, type: {}, base_size: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.base_size(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl core::fmt::Display for HistoricalTradesResponseVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseVLSUnsafe(size: {}, type: {}, base_size: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.base_size(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl core::fmt::Debug for HistoricalTradesResponseVLSUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("HistoricalTradesResponseVLSUnsafe(size: {}, type: {}, base_size: {}, request_id: {}, is_final_message: {}, symbol: \"{}\", trade_account: \"{}\", entry_date_time: {}, exit_date_time: {}, entry_price: {}, exit_price: {}, trade_type: {}, entry_quantity: {}, exit_quantity: {}, max_open_quantity: {}, closed_profit_loss: {}, maximum_open_position_loss: {}, maximum_open_position_profit: {}, commission: {}, open_fill_execution_id: \"{}\", close_fill_execution_id: \"{}\", sub_account_identifier: {})", self.size(), self.r#type(), self.base_size(), self.request_id(), self.is_final_message(), self.symbol(), self.trade_account(), self.entry_date_time(), self.exit_date_time(), self.entry_price(), self.exit_price(), self.trade_type(), self.entry_quantity(), self.exit_quantity(), self.max_open_quantity(), self.closed_profit_loss(), self.maximum_open_position_loss(), self.maximum_open_position_profit(), self.commission(), self.open_fill_execution_id(), self.close_fill_execution_id(), self.sub_account_identifier()).as_str())
    }
}

impl crate::Message for HistoricalTradesResponseFixed {
    type Data = HistoricalTradesResponseFixedData;

    const TYPE: u16 = HISTORICAL_TRADES_RESPONSE;
    const BASE_SIZE: usize = 317;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalTradesResponseFixedUnsafe {
    type Data = HistoricalTradesResponseFixedData;

    const TYPE: u16 = HISTORICAL_TRADES_RESPONSE;
    const BASE_SIZE: usize = 317;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesResponseFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalTradesResponseVLS {
    type Data = HistoricalTradesResponseVLSData;

    const TYPE: u16 = HISTORICAL_TRADES_RESPONSE;
    const BASE_SIZE: usize = 111;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalTradesResponseVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalTradesResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for HistoricalTradesResponseVLSUnsafe {
    type Data = HistoricalTradesResponseVLSData;

    const TYPE: u16 = HISTORICAL_TRADES_RESPONSE;
    const BASE_SIZE: usize = 111;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HistoricalTradesResponseVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const HistoricalTradesResponseVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for HistoricalTradesResponseVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const HistoricalTradesResponseVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl HistoricalTradesResponse for HistoricalTradesResponseVLS {
    type Safe = HistoricalTradesResponseVLS;
    type Unsafe = HistoricalTradesResponseVLSUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn is_final_message(&self) -> bool {
        self.is_final_message
    }

    fn symbol(&self) -> &str {
        get_vls(self, self.symbol)
    }

    fn trade_account(&self) -> &str {
        get_vls(self, self.trade_account)
    }

    fn entry_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.entry_date_time)
    }

    fn exit_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.exit_date_time)
    }

    fn entry_price(&self) -> f64 {
        f64_le(self.entry_price)
    }

    fn exit_price(&self) -> f64 {
        f64_le(self.exit_price)
    }

    fn trade_type(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.trade_type)
    }

    fn entry_quantity(&self) -> u32 {
        u32::from_le(self.entry_quantity)
    }

    fn exit_quantity(&self) -> u32 {
        u32::from_le(self.exit_quantity)
    }

    fn max_open_quantity(&self) -> u32 {
        u32::from_le(self.max_open_quantity)
    }

    fn closed_profit_loss(&self) -> f64 {
        f64_le(self.closed_profit_loss)
    }

    fn maximum_open_position_loss(&self) -> f64 {
        f64_le(self.maximum_open_position_loss)
    }

    fn maximum_open_position_profit(&self) -> f64 {
        f64_le(self.maximum_open_position_profit)
    }

    fn commission(&self) -> f64 {
        f64_le(self.commission)
    }

    fn open_fill_execution_id(&self) -> &str {
        get_vls(self, self.open_fill_execution_id)
    }

    fn close_fill_execution_id(&self) -> &str {
        get_vls(self, self.close_fill_execution_id)
    }

    fn sub_account_identifier(&self) -> u32 {
        u32::from_le(self.sub_account_identifier)
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        self.is_final_message = value;
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        self.symbol = set_vls(self, self.symbol, value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        self.trade_account = set_vls(self, self.trade_account, value);
        self
    }

    fn set_entry_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.entry_date_time = f64_le(value);
        self
    }

    fn set_exit_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.exit_date_time = f64_le(value);
        self
    }

    fn set_entry_price(&mut self, value: f64) -> &mut Self {
        self.entry_price = f64_le(value);
        self
    }

    fn set_exit_price(&mut self, value: f64) -> &mut Self {
        self.exit_price = f64_le(value);
        self
    }

    fn set_trade_type(&mut self, value: BuySellEnum) -> &mut Self {
        self.trade_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_entry_quantity(&mut self, value: u32) -> &mut Self {
        self.entry_quantity = value.to_le();
        self
    }

    fn set_exit_quantity(&mut self, value: u32) -> &mut Self {
        self.exit_quantity = value.to_le();
        self
    }

    fn set_max_open_quantity(&mut self, value: u32) -> &mut Self {
        self.max_open_quantity = value.to_le();
        self
    }

    fn set_closed_profit_loss(&mut self, value: f64) -> &mut Self {
        self.closed_profit_loss = f64_le(value);
        self
    }

    fn set_maximum_open_position_loss(&mut self, value: f64) -> &mut Self {
        self.maximum_open_position_loss = f64_le(value);
        self
    }

    fn set_maximum_open_position_profit(&mut self, value: f64) -> &mut Self {
        self.maximum_open_position_profit = f64_le(value);
        self
    }

    fn set_commission(&mut self, value: f64) -> &mut Self {
        self.commission = f64_le(value);
        self
    }

    fn set_open_fill_execution_id(&mut self, value: &str) -> &mut Self {
        self.open_fill_execution_id = set_vls(self, self.open_fill_execution_id, value);
        self
    }

    fn set_close_fill_execution_id(&mut self, value: &str) -> &mut Self {
        self.close_fill_execution_id = set_vls(self, self.close_fill_execution_id, value);
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        self.sub_account_identifier = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalTradesResponse for HistoricalTradesResponseVLSUnsafe {
    type Safe = HistoricalTradesResponseVLS;
    type Unsafe = HistoricalTradesResponseVLSUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(10) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn is_final_message(&self) -> bool {
        if self.is_out_of_bounds(11) {
            false
        } else {
            self.is_final_message
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(15) {
            ""
        } else {
            get_vls(self, self.symbol)
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(19) {
            ""
        } else {
            get_vls(self, self.trade_account)
        }
    }

    fn entry_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(27) {
            0.0f64
        } else {
            f64_le(self.entry_date_time)
        }
    }

    fn exit_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(35) {
            0.0f64
        } else {
            f64_le(self.exit_date_time)
        }
    }

    fn entry_price(&self) -> f64 {
        if self.is_out_of_bounds(43) {
            0.0f64
        } else {
            f64_le(self.entry_price)
        }
    }

    fn exit_price(&self) -> f64 {
        if self.is_out_of_bounds(51) {
            0.0f64
        } else {
            f64_le(self.exit_price)
        }
    }

    fn trade_type(&self) -> BuySellEnum {
        if self.is_out_of_bounds(55) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.trade_type)
        }
    }

    fn entry_quantity(&self) -> u32 {
        if self.is_out_of_bounds(59) {
            0u32
        } else {
            u32::from_le(self.entry_quantity)
        }
    }

    fn exit_quantity(&self) -> u32 {
        if self.is_out_of_bounds(63) {
            0u32
        } else {
            u32::from_le(self.exit_quantity)
        }
    }

    fn max_open_quantity(&self) -> u32 {
        if self.is_out_of_bounds(67) {
            0u32
        } else {
            u32::from_le(self.max_open_quantity)
        }
    }

    fn closed_profit_loss(&self) -> f64 {
        if self.is_out_of_bounds(75) {
            0.0f64
        } else {
            f64_le(self.closed_profit_loss)
        }
    }

    fn maximum_open_position_loss(&self) -> f64 {
        if self.is_out_of_bounds(83) {
            0.0f64
        } else {
            f64_le(self.maximum_open_position_loss)
        }
    }

    fn maximum_open_position_profit(&self) -> f64 {
        if self.is_out_of_bounds(91) {
            0.0f64
        } else {
            f64_le(self.maximum_open_position_profit)
        }
    }

    fn commission(&self) -> f64 {
        if self.is_out_of_bounds(99) {
            0.0f64
        } else {
            f64_le(self.commission)
        }
    }

    fn open_fill_execution_id(&self) -> &str {
        if self.is_out_of_bounds(103) {
            ""
        } else {
            get_vls(self, self.open_fill_execution_id)
        }
    }

    fn close_fill_execution_id(&self) -> &str {
        if self.is_out_of_bounds(107) {
            ""
        } else {
            get_vls(self, self.close_fill_execution_id)
        }
    }

    fn sub_account_identifier(&self) -> u32 {
        if self.is_out_of_bounds(111) {
            0u32
        } else {
            u32::from_le(self.sub_account_identifier)
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(11) {
            self.is_final_message = value;
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(15) {
            self.symbol = set_vls(self, self.symbol, value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(19) {
            self.trade_account = set_vls(self, self.trade_account, value);
        }
        self
    }

    fn set_entry_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(27) {
            self.entry_date_time = f64_le(value);
        }
        self
    }

    fn set_exit_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(35) {
            self.exit_date_time = f64_le(value);
        }
        self
    }

    fn set_entry_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(43) {
            self.entry_price = f64_le(value);
        }
        self
    }

    fn set_exit_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(51) {
            self.exit_price = f64_le(value);
        }
        self
    }

    fn set_trade_type(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(55) {
            self.trade_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_entry_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(59) {
            self.entry_quantity = value.to_le();
        }
        self
    }

    fn set_exit_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(63) {
            self.exit_quantity = value.to_le();
        }
        self
    }

    fn set_max_open_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(67) {
            self.max_open_quantity = value.to_le();
        }
        self
    }

    fn set_closed_profit_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(75) {
            self.closed_profit_loss = f64_le(value);
        }
        self
    }

    fn set_maximum_open_position_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(83) {
            self.maximum_open_position_loss = f64_le(value);
        }
        self
    }

    fn set_maximum_open_position_profit(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(91) {
            self.maximum_open_position_profit = f64_le(value);
        }
        self
    }

    fn set_commission(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(99) {
            self.commission = f64_le(value);
        }
        self
    }

    fn set_open_fill_execution_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(103) {
            self.open_fill_execution_id = set_vls(self, self.open_fill_execution_id, value);
        }
        self
    }

    fn set_close_fill_execution_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(107) {
            self.close_fill_execution_id = set_vls(self, self.close_fill_execution_id, value);
        }
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(111) {
            self.sub_account_identifier = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

impl HistoricalTradesResponse for HistoricalTradesResponseFixed {
    type Safe = HistoricalTradesResponseFixed;
    type Unsafe = HistoricalTradesResponseFixedUnsafe;

    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    fn is_final_message(&self) -> bool {
        self.is_final_message
    }

    fn symbol(&self) -> &str {
        get_fixed(&self.symbol[..])
    }

    fn trade_account(&self) -> &str {
        get_fixed(&self.trade_account[..])
    }

    fn entry_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.entry_date_time)
    }

    fn exit_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.exit_date_time)
    }

    fn entry_price(&self) -> f64 {
        f64_le(self.entry_price)
    }

    fn exit_price(&self) -> f64 {
        f64_le(self.exit_price)
    }

    fn trade_type(&self) -> BuySellEnum {
        BuySellEnum::from_le(self.trade_type)
    }

    fn entry_quantity(&self) -> u32 {
        u32::from_le(self.entry_quantity)
    }

    fn exit_quantity(&self) -> u32 {
        u32::from_le(self.exit_quantity)
    }

    fn max_open_quantity(&self) -> u32 {
        u32::from_le(self.max_open_quantity)
    }

    fn closed_profit_loss(&self) -> f64 {
        f64_le(self.closed_profit_loss)
    }

    fn maximum_open_position_loss(&self) -> f64 {
        f64_le(self.maximum_open_position_loss)
    }

    fn maximum_open_position_profit(&self) -> f64 {
        f64_le(self.maximum_open_position_profit)
    }

    fn commission(&self) -> f64 {
        f64_le(self.commission)
    }

    fn open_fill_execution_id(&self) -> &str {
        get_fixed(&self.open_fill_execution_id[..])
    }

    fn close_fill_execution_id(&self) -> &str {
        get_fixed(&self.close_fill_execution_id[..])
    }

    fn sub_account_identifier(&self) -> u32 {
        u32::from_le(self.sub_account_identifier)
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        self.is_final_message = value;
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.symbol[..], value);
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.trade_account[..], value);
        self
    }

    fn set_entry_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.entry_date_time = f64_le(value);
        self
    }

    fn set_exit_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.exit_date_time = f64_le(value);
        self
    }

    fn set_entry_price(&mut self, value: f64) -> &mut Self {
        self.entry_price = f64_le(value);
        self
    }

    fn set_exit_price(&mut self, value: f64) -> &mut Self {
        self.exit_price = f64_le(value);
        self
    }

    fn set_trade_type(&mut self, value: BuySellEnum) -> &mut Self {
        self.trade_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        self
    }

    fn set_entry_quantity(&mut self, value: u32) -> &mut Self {
        self.entry_quantity = value.to_le();
        self
    }

    fn set_exit_quantity(&mut self, value: u32) -> &mut Self {
        self.exit_quantity = value.to_le();
        self
    }

    fn set_max_open_quantity(&mut self, value: u32) -> &mut Self {
        self.max_open_quantity = value.to_le();
        self
    }

    fn set_closed_profit_loss(&mut self, value: f64) -> &mut Self {
        self.closed_profit_loss = f64_le(value);
        self
    }

    fn set_maximum_open_position_loss(&mut self, value: f64) -> &mut Self {
        self.maximum_open_position_loss = f64_le(value);
        self
    }

    fn set_maximum_open_position_profit(&mut self, value: f64) -> &mut Self {
        self.maximum_open_position_profit = f64_le(value);
        self
    }

    fn set_commission(&mut self, value: f64) -> &mut Self {
        self.commission = f64_le(value);
        self
    }

    fn set_open_fill_execution_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.open_fill_execution_id[..], value);
        self
    }

    fn set_close_fill_execution_id(&mut self, value: &str) -> &mut Self {
        set_fixed(&mut self.close_fill_execution_id[..], value);
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        self.sub_account_identifier = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HistoricalTradesResponse for HistoricalTradesResponseFixedUnsafe {
    type Safe = HistoricalTradesResponseFixed;
    type Unsafe = HistoricalTradesResponseFixedUnsafe;

    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32
        } else {
            i32::from_le(self.request_id)
        }
    }

    fn is_final_message(&self) -> bool {
        if self.is_out_of_bounds(9) {
            false
        } else {
            self.is_final_message
        }
    }

    fn symbol(&self) -> &str {
        if self.is_out_of_bounds(73) {
            ""
        } else {
            get_fixed(&self.symbol[..])
        }
    }

    fn trade_account(&self) -> &str {
        if self.is_out_of_bounds(105) {
            ""
        } else {
            get_fixed(&self.trade_account[..])
        }
    }

    fn entry_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(113) {
            0.0f64
        } else {
            f64_le(self.entry_date_time)
        }
    }

    fn exit_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(121) {
            0.0f64
        } else {
            f64_le(self.exit_date_time)
        }
    }

    fn entry_price(&self) -> f64 {
        if self.is_out_of_bounds(129) {
            0.0f64
        } else {
            f64_le(self.entry_price)
        }
    }

    fn exit_price(&self) -> f64 {
        if self.is_out_of_bounds(137) {
            0.0f64
        } else {
            f64_le(self.exit_price)
        }
    }

    fn trade_type(&self) -> BuySellEnum {
        if self.is_out_of_bounds(141) {
            BuySellEnum::BuySellUnset.to_le()
        } else {
            BuySellEnum::from_le(self.trade_type)
        }
    }

    fn entry_quantity(&self) -> u32 {
        if self.is_out_of_bounds(145) {
            0u32
        } else {
            u32::from_le(self.entry_quantity)
        }
    }

    fn exit_quantity(&self) -> u32 {
        if self.is_out_of_bounds(149) {
            0u32
        } else {
            u32::from_le(self.exit_quantity)
        }
    }

    fn max_open_quantity(&self) -> u32 {
        if self.is_out_of_bounds(153) {
            0u32
        } else {
            u32::from_le(self.max_open_quantity)
        }
    }

    fn closed_profit_loss(&self) -> f64 {
        if self.is_out_of_bounds(161) {
            0.0f64
        } else {
            f64_le(self.closed_profit_loss)
        }
    }

    fn maximum_open_position_loss(&self) -> f64 {
        if self.is_out_of_bounds(169) {
            0.0f64
        } else {
            f64_le(self.maximum_open_position_loss)
        }
    }

    fn maximum_open_position_profit(&self) -> f64 {
        if self.is_out_of_bounds(177) {
            0.0f64
        } else {
            f64_le(self.maximum_open_position_profit)
        }
    }

    fn commission(&self) -> f64 {
        if self.is_out_of_bounds(185) {
            0.0f64
        } else {
            f64_le(self.commission)
        }
    }

    fn open_fill_execution_id(&self) -> &str {
        if self.is_out_of_bounds(249) {
            ""
        } else {
            get_fixed(&self.open_fill_execution_id[..])
        }
    }

    fn close_fill_execution_id(&self) -> &str {
        if self.is_out_of_bounds(313) {
            ""
        } else {
            get_fixed(&self.close_fill_execution_id[..])
        }
    }

    fn sub_account_identifier(&self) -> u32 {
        if self.is_out_of_bounds(317) {
            0u32
        } else {
            u32::from_le(self.sub_account_identifier)
        }
    }

    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    fn set_is_final_message(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(9) {
            self.is_final_message = value;
        }
        self
    }

    fn set_symbol(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(73) {
            set_fixed(&mut self.symbol[..], value);
        }
        self
    }

    fn set_trade_account(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(105) {
            set_fixed(&mut self.trade_account[..], value);
        }
        self
    }

    fn set_entry_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(113) {
            self.entry_date_time = f64_le(value);
        }
        self
    }

    fn set_exit_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(121) {
            self.exit_date_time = f64_le(value);
        }
        self
    }

    fn set_entry_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(129) {
            self.entry_price = f64_le(value);
        }
        self
    }

    fn set_exit_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(137) {
            self.exit_price = f64_le(value);
        }
        self
    }

    fn set_trade_type(&mut self, value: BuySellEnum) -> &mut Self {
        if !self.is_out_of_bounds(141) {
            self.trade_type = unsafe { core::mem::transmute((value as i32).to_le()) };
        }
        self
    }

    fn set_entry_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(145) {
            self.entry_quantity = value.to_le();
        }
        self
    }

    fn set_exit_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(149) {
            self.exit_quantity = value.to_le();
        }
        self
    }

    fn set_max_open_quantity(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(153) {
            self.max_open_quantity = value.to_le();
        }
        self
    }

    fn set_closed_profit_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(161) {
            self.closed_profit_loss = f64_le(value);
        }
        self
    }

    fn set_maximum_open_position_loss(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(169) {
            self.maximum_open_position_loss = f64_le(value);
        }
        self
    }

    fn set_maximum_open_position_profit(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(177) {
            self.maximum_open_position_profit = f64_le(value);
        }
        self
    }

    fn set_commission(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(185) {
            self.commission = f64_le(value);
        }
        self
    }

    fn set_open_fill_execution_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(249) {
            set_fixed(&mut self.open_fill_execution_id[..], value);
        }
        self
    }

    fn set_close_fill_execution_id(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(313) {
            set_fixed(&mut self.close_fill_execution_id[..], value);
        }
        self
    }

    fn set_sub_account_identifier(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(317) {
            self.sub_account_identifier = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                317usize,
                core::mem::size_of::<HistoricalTradesResponseFixedData>(),
                "HistoricalTradesResponseFixedData sizeof expected {:} but was {:}",
                317usize,
                core::mem::size_of::<HistoricalTradesResponseFixedData>()
            );
            assert_eq!(
                317u16,
                HistoricalTradesResponseFixed::new().size(),
                "HistoricalTradesResponseFixed sizeof expected {:} but was {:}",
                317u16,
                HistoricalTradesResponseFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_TRADES_RESPONSE,
                HistoricalTradesResponseFixed::new().r#type(),
                "HistoricalTradesResponseFixed type expected {:} but was {:}",
                HISTORICAL_TRADES_RESPONSE,
                HistoricalTradesResponseFixed::new().r#type(),
            );
            assert_eq!(
                10102u16,
                HistoricalTradesResponseFixed::new().r#type(),
                "HistoricalTradesResponseFixed type expected {:} but was {:}",
                10102u16,
                HistoricalTradesResponseFixed::new().r#type(),
            );
            let d = HistoricalTradesResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
                "is_final_message offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
            );
            assert_eq!(
                9usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                9usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                73usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                73usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                105usize,
                (core::ptr::addr_of!(d.entry_date_time) as usize) - p,
                "entry_date_time offset expected {:} but was {:}",
                105usize,
                (core::ptr::addr_of!(d.entry_date_time) as usize) - p,
            );
            assert_eq!(
                113usize,
                (core::ptr::addr_of!(d.exit_date_time) as usize) - p,
                "exit_date_time offset expected {:} but was {:}",
                113usize,
                (core::ptr::addr_of!(d.exit_date_time) as usize) - p,
            );
            assert_eq!(
                121usize,
                (core::ptr::addr_of!(d.entry_price) as usize) - p,
                "entry_price offset expected {:} but was {:}",
                121usize,
                (core::ptr::addr_of!(d.entry_price) as usize) - p,
            );
            assert_eq!(
                129usize,
                (core::ptr::addr_of!(d.exit_price) as usize) - p,
                "exit_price offset expected {:} but was {:}",
                129usize,
                (core::ptr::addr_of!(d.exit_price) as usize) - p,
            );
            assert_eq!(
                137usize,
                (core::ptr::addr_of!(d.trade_type) as usize) - p,
                "trade_type offset expected {:} but was {:}",
                137usize,
                (core::ptr::addr_of!(d.trade_type) as usize) - p,
            );
            assert_eq!(
                141usize,
                (core::ptr::addr_of!(d.entry_quantity) as usize) - p,
                "entry_quantity offset expected {:} but was {:}",
                141usize,
                (core::ptr::addr_of!(d.entry_quantity) as usize) - p,
            );
            assert_eq!(
                145usize,
                (core::ptr::addr_of!(d.exit_quantity) as usize) - p,
                "exit_quantity offset expected {:} but was {:}",
                145usize,
                (core::ptr::addr_of!(d.exit_quantity) as usize) - p,
            );
            assert_eq!(
                149usize,
                (core::ptr::addr_of!(d.max_open_quantity) as usize) - p,
                "max_open_quantity offset expected {:} but was {:}",
                149usize,
                (core::ptr::addr_of!(d.max_open_quantity) as usize) - p,
            );
            assert_eq!(
                153usize,
                (core::ptr::addr_of!(d.closed_profit_loss) as usize) - p,
                "closed_profit_loss offset expected {:} but was {:}",
                153usize,
                (core::ptr::addr_of!(d.closed_profit_loss) as usize) - p,
            );
            assert_eq!(
                161usize,
                (core::ptr::addr_of!(d.maximum_open_position_loss) as usize) - p,
                "maximum_open_position_loss offset expected {:} but was {:}",
                161usize,
                (core::ptr::addr_of!(d.maximum_open_position_loss) as usize) - p,
            );
            assert_eq!(
                169usize,
                (core::ptr::addr_of!(d.maximum_open_position_profit) as usize) - p,
                "maximum_open_position_profit offset expected {:} but was {:}",
                169usize,
                (core::ptr::addr_of!(d.maximum_open_position_profit) as usize) - p,
            );
            assert_eq!(
                177usize,
                (core::ptr::addr_of!(d.commission) as usize) - p,
                "commission offset expected {:} but was {:}",
                177usize,
                (core::ptr::addr_of!(d.commission) as usize) - p,
            );
            assert_eq!(
                185usize,
                (core::ptr::addr_of!(d.open_fill_execution_id) as usize) - p,
                "open_fill_execution_id offset expected {:} but was {:}",
                185usize,
                (core::ptr::addr_of!(d.open_fill_execution_id) as usize) - p,
            );
            assert_eq!(
                249usize,
                (core::ptr::addr_of!(d.close_fill_execution_id) as usize) - p,
                "close_fill_execution_id offset expected {:} but was {:}",
                249usize,
                (core::ptr::addr_of!(d.close_fill_execution_id) as usize) - p,
            );
            assert_eq!(
                313usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
                "sub_account_identifier offset expected {:} but was {:}",
                313usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
            );
        }
        unsafe {
            assert_eq!(
                111usize,
                core::mem::size_of::<HistoricalTradesResponseVLSData>(),
                "HistoricalTradesResponseVLSData sizeof expected {:} but was {:}",
                111usize,
                core::mem::size_of::<HistoricalTradesResponseVLSData>()
            );
            assert_eq!(
                111u16,
                HistoricalTradesResponseVLS::new().size(),
                "HistoricalTradesResponseVLS sizeof expected {:} but was {:}",
                111u16,
                HistoricalTradesResponseVLS::new().size(),
            );
            assert_eq!(
                HISTORICAL_TRADES_RESPONSE,
                HistoricalTradesResponseVLS::new().r#type(),
                "HistoricalTradesResponseVLS type expected {:} but was {:}",
                HISTORICAL_TRADES_RESPONSE,
                HistoricalTradesResponseVLS::new().r#type(),
            );
            assert_eq!(
                10102u16,
                HistoricalTradesResponseVLS::new().r#type(),
                "HistoricalTradesResponseVLS type expected {:} but was {:}",
                10102u16,
                HistoricalTradesResponseVLS::new().r#type(),
            );
            let d = HistoricalTradesResponseVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
                "is_final_message offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.is_final_message) as usize) - p,
            );
            assert_eq!(
                11usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
                "symbol offset expected {:} but was {:}",
                11usize,
                (core::ptr::addr_of!(d.symbol) as usize) - p,
            );
            assert_eq!(
                15usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
                "trade_account offset expected {:} but was {:}",
                15usize,
                (core::ptr::addr_of!(d.trade_account) as usize) - p,
            );
            assert_eq!(
                19usize,
                (core::ptr::addr_of!(d.entry_date_time) as usize) - p,
                "entry_date_time offset expected {:} but was {:}",
                19usize,
                (core::ptr::addr_of!(d.entry_date_time) as usize) - p,
            );
            assert_eq!(
                27usize,
                (core::ptr::addr_of!(d.exit_date_time) as usize) - p,
                "exit_date_time offset expected {:} but was {:}",
                27usize,
                (core::ptr::addr_of!(d.exit_date_time) as usize) - p,
            );
            assert_eq!(
                35usize,
                (core::ptr::addr_of!(d.entry_price) as usize) - p,
                "entry_price offset expected {:} but was {:}",
                35usize,
                (core::ptr::addr_of!(d.entry_price) as usize) - p,
            );
            assert_eq!(
                43usize,
                (core::ptr::addr_of!(d.exit_price) as usize) - p,
                "exit_price offset expected {:} but was {:}",
                43usize,
                (core::ptr::addr_of!(d.exit_price) as usize) - p,
            );
            assert_eq!(
                51usize,
                (core::ptr::addr_of!(d.trade_type) as usize) - p,
                "trade_type offset expected {:} but was {:}",
                51usize,
                (core::ptr::addr_of!(d.trade_type) as usize) - p,
            );
            assert_eq!(
                55usize,
                (core::ptr::addr_of!(d.entry_quantity) as usize) - p,
                "entry_quantity offset expected {:} but was {:}",
                55usize,
                (core::ptr::addr_of!(d.entry_quantity) as usize) - p,
            );
            assert_eq!(
                59usize,
                (core::ptr::addr_of!(d.exit_quantity) as usize) - p,
                "exit_quantity offset expected {:} but was {:}",
                59usize,
                (core::ptr::addr_of!(d.exit_quantity) as usize) - p,
            );
            assert_eq!(
                63usize,
                (core::ptr::addr_of!(d.max_open_quantity) as usize) - p,
                "max_open_quantity offset expected {:} but was {:}",
                63usize,
                (core::ptr::addr_of!(d.max_open_quantity) as usize) - p,
            );
            assert_eq!(
                67usize,
                (core::ptr::addr_of!(d.closed_profit_loss) as usize) - p,
                "closed_profit_loss offset expected {:} but was {:}",
                67usize,
                (core::ptr::addr_of!(d.closed_profit_loss) as usize) - p,
            );
            assert_eq!(
                75usize,
                (core::ptr::addr_of!(d.maximum_open_position_loss) as usize) - p,
                "maximum_open_position_loss offset expected {:} but was {:}",
                75usize,
                (core::ptr::addr_of!(d.maximum_open_position_loss) as usize) - p,
            );
            assert_eq!(
                83usize,
                (core::ptr::addr_of!(d.maximum_open_position_profit) as usize) - p,
                "maximum_open_position_profit offset expected {:} but was {:}",
                83usize,
                (core::ptr::addr_of!(d.maximum_open_position_profit) as usize) - p,
            );
            assert_eq!(
                91usize,
                (core::ptr::addr_of!(d.commission) as usize) - p,
                "commission offset expected {:} but was {:}",
                91usize,
                (core::ptr::addr_of!(d.commission) as usize) - p,
            );
            assert_eq!(
                99usize,
                (core::ptr::addr_of!(d.open_fill_execution_id) as usize) - p,
                "open_fill_execution_id offset expected {:} but was {:}",
                99usize,
                (core::ptr::addr_of!(d.open_fill_execution_id) as usize) - p,
            );
            assert_eq!(
                103usize,
                (core::ptr::addr_of!(d.close_fill_execution_id) as usize) - p,
                "close_fill_execution_id offset expected {:} but was {:}",
                103usize,
                (core::ptr::addr_of!(d.close_fill_execution_id) as usize) - p,
            );
            assert_eq!(
                107usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
                "sub_account_identifier offset expected {:} but was {:}",
                107usize,
                (core::ptr::addr_of!(d.sub_account_identifier) as usize) - p,
            );
        }
    }
}
