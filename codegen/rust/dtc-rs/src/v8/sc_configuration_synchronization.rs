// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const SC_CONFIGURATION_SYNCHRONIZATION_VLS_SIZE: usize = 31;

/// size                                u16     = SCConfigurationSynchronizationVLSSize  (31)
/// type                                u16     = SC_CONFIGURATION_SYNCHRONIZATION  (10109)
/// base_size                           u16     = SCConfigurationSynchronizationVLSSize  (31)
/// message_id                          u32     = 0
/// current_inbound_sequence_number     u32     = 0
/// current_outbound_sequence_number    u32     = 0
/// current_internal_order_id           u64     = 0
/// is_snapshot                         bool    = false
/// last_received_execution_identifier  string  = ""
pub(crate) const SC_CONFIGURATION_SYNCHRONIZATION_VLS_DEFAULT: [u8; 31] = [
    31, 0, 125, 39, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
];

pub trait SCConfigurationSynchronization: Message {
    type Safe: SCConfigurationSynchronization;
    type Unsafe: SCConfigurationSynchronization;

    fn message_id(&self) -> u32;

    fn current_inbound_sequence_number(&self) -> u32;

    fn current_outbound_sequence_number(&self) -> u32;

    fn current_internal_order_id(&self) -> u64;

    fn is_snapshot(&self) -> bool;

    fn last_received_execution_identifier(&self) -> &str;

    fn set_message_id(&mut self, value: u32) -> &mut Self;

    fn set_current_inbound_sequence_number(&mut self, value: u32) -> &mut Self;

    fn set_current_outbound_sequence_number(&mut self, value: u32) -> &mut Self;

    fn set_current_internal_order_id(&mut self, value: u64) -> &mut Self;

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self;

    fn set_last_received_execution_identifier(&mut self, value: &str) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl SCConfigurationSynchronization) {
        to.set_message_id(self.message_id());
        to.set_current_inbound_sequence_number(self.current_inbound_sequence_number());
        to.set_current_outbound_sequence_number(self.current_outbound_sequence_number());
        to.set_current_internal_order_id(self.current_internal_order_id());
        to.set_is_snapshot(self.is_snapshot());
        to.set_last_received_execution_identifier(self.last_received_execution_identifier());
    }
}

pub struct SCConfigurationSynchronizationVLS {
    data: *const SCConfigurationSynchronizationVLSData,
    capacity: usize,
}

pub struct SCConfigurationSynchronizationVLSUnsafe {
    data: *const SCConfigurationSynchronizationVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct SCConfigurationSynchronizationVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    message_id: u32,
    current_inbound_sequence_number: u32,
    current_outbound_sequence_number: u32,
    current_internal_order_id: u64,
    is_snapshot: bool,
    last_received_execution_identifier: VLS,
}

impl SCConfigurationSynchronizationVLSData {
    pub fn new() -> Self {
        Self {
            size: 31u16.to_le(),
            r#type: SC_CONFIGURATION_SYNCHRONIZATION.to_le(),
            base_size: 31u16.to_le(),
            message_id: 0u32.to_le(),
            current_inbound_sequence_number: 0u32.to_le(),
            current_outbound_sequence_number: 0u32.to_le(),
            current_internal_order_id: 0u64.to_le(),
            is_snapshot: false,
            last_received_execution_identifier: crate::message::VLS::new(),
        }
    }
}

unsafe impl Send for SCConfigurationSynchronizationVLS {}
unsafe impl Send for SCConfigurationSynchronizationVLSUnsafe {}
unsafe impl Send for SCConfigurationSynchronizationVLSData {}

impl Drop for SCConfigurationSynchronizationVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for SCConfigurationSynchronizationVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for SCConfigurationSynchronizationVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for SCConfigurationSynchronizationVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for SCConfigurationSynchronizationVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for SCConfigurationSynchronizationVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for SCConfigurationSynchronizationVLS {
    type Target = SCConfigurationSynchronizationVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SCConfigurationSynchronizationVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for SCConfigurationSynchronizationVLSUnsafe {
    type Target = SCConfigurationSynchronizationVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for SCConfigurationSynchronizationVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for SCConfigurationSynchronizationVLS {
    type Data = SCConfigurationSynchronizationVLSData;

    const BASE_SIZE: usize = 31;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                SCConfigurationSynchronizationVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SCConfigurationSynchronizationVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SCConfigurationSynchronizationVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SCConfigurationSynchronizationVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for SCConfigurationSynchronizationVLSUnsafe {
    type Data = SCConfigurationSynchronizationVLSData;

    const BASE_SIZE: usize = 31;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                SCConfigurationSynchronizationVLSData::new(),
            ),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const SCConfigurationSynchronizationVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for SCConfigurationSynchronizationVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const SCConfigurationSynchronizationVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl SCConfigurationSynchronization for SCConfigurationSynchronizationVLS {
    type Safe = SCConfigurationSynchronizationVLS;
    type Unsafe = SCConfigurationSynchronizationVLSUnsafe;

    fn message_id(&self) -> u32 {
        u32::from_le(self.message_id)
    }

    fn current_inbound_sequence_number(&self) -> u32 {
        u32::from_le(self.current_inbound_sequence_number)
    }

    fn current_outbound_sequence_number(&self) -> u32 {
        u32::from_le(self.current_outbound_sequence_number)
    }

    fn current_internal_order_id(&self) -> u64 {
        u64::from_le(self.current_internal_order_id)
    }

    fn is_snapshot(&self) -> bool {
        self.is_snapshot
    }

    fn last_received_execution_identifier(&self) -> &str {
        get_vls(self, self.last_received_execution_identifier)
    }

    fn set_message_id(&mut self, value: u32) -> &mut Self {
        self.message_id = value.to_le();
        self
    }

    fn set_current_inbound_sequence_number(&mut self, value: u32) -> &mut Self {
        self.current_inbound_sequence_number = value.to_le();
        self
    }

    fn set_current_outbound_sequence_number(&mut self, value: u32) -> &mut Self {
        self.current_outbound_sequence_number = value.to_le();
        self
    }

    fn set_current_internal_order_id(&mut self, value: u64) -> &mut Self {
        self.current_internal_order_id = value.to_le();
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        self.is_snapshot = value;
        self
    }

    fn set_last_received_execution_identifier(&mut self, value: &str) -> &mut Self {
        self.last_received_execution_identifier =
            set_vls(self, self.last_received_execution_identifier, value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl SCConfigurationSynchronization for SCConfigurationSynchronizationVLSUnsafe {
    type Safe = SCConfigurationSynchronizationVLS;
    type Unsafe = SCConfigurationSynchronizationVLSUnsafe;

    fn message_id(&self) -> u32 {
        if self.is_out_of_bounds(10) {
            0u32.to_le()
        } else {
            u32::from_le(self.message_id)
        }
    }

    fn current_inbound_sequence_number(&self) -> u32 {
        if self.is_out_of_bounds(14) {
            0u32.to_le()
        } else {
            u32::from_le(self.current_inbound_sequence_number)
        }
    }

    fn current_outbound_sequence_number(&self) -> u32 {
        if self.is_out_of_bounds(18) {
            0u32.to_le()
        } else {
            u32::from_le(self.current_outbound_sequence_number)
        }
    }

    fn current_internal_order_id(&self) -> u64 {
        if self.is_out_of_bounds(26) {
            0u64.to_le()
        } else {
            u64::from_le(self.current_internal_order_id)
        }
    }

    fn is_snapshot(&self) -> bool {
        if self.is_out_of_bounds(27) {
            false
        } else {
            self.is_snapshot
        }
    }

    fn last_received_execution_identifier(&self) -> &str {
        if self.is_out_of_bounds(31) {
            ""
        } else {
            get_vls(self, self.last_received_execution_identifier)
        }
    }

    fn set_message_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.message_id = value.to_le();
        }
        self
    }

    fn set_current_inbound_sequence_number(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(14) {
            self.current_inbound_sequence_number = value.to_le();
        }
        self
    }

    fn set_current_outbound_sequence_number(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.current_outbound_sequence_number = value.to_le();
        }
        self
    }

    fn set_current_internal_order_id(&mut self, value: u64) -> &mut Self {
        if !self.is_out_of_bounds(26) {
            self.current_internal_order_id = value.to_le();
        }
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(27) {
            self.is_snapshot = value;
        }
        self
    }

    fn set_last_received_execution_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(31) {
            self.last_received_execution_identifier =
                set_vls(self, self.last_received_execution_identifier, value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                31usize,
                core::mem::size_of::<SCConfigurationSynchronizationVLSData>(),
                "SCConfigurationSynchronizationVLSData sizeof expected {:} but was {:}",
                31usize,
                core::mem::size_of::<SCConfigurationSynchronizationVLSData>()
            );
            assert_eq!(
                31u16,
                SCConfigurationSynchronizationVLS::new().size(),
                "SCConfigurationSynchronizationVLS sizeof expected {:} but was {:}",
                31u16,
                SCConfigurationSynchronizationVLS::new().size(),
            );
            assert_eq!(
                SC_CONFIGURATION_SYNCHRONIZATION,
                SCConfigurationSynchronizationVLS::new().r#type(),
                "SCConfigurationSynchronizationVLS type expected {:} but was {:}",
                SC_CONFIGURATION_SYNCHRONIZATION,
                SCConfigurationSynchronizationVLS::new().r#type(),
            );
            assert_eq!(
                10109u16,
                SCConfigurationSynchronizationVLS::new().r#type(),
                "SCConfigurationSynchronizationVLS type expected {:} but was {:}",
                10109u16,
                SCConfigurationSynchronizationVLS::new().r#type(),
            );
            let d = SCConfigurationSynchronizationVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.message_id) as usize) - p,
                "message_id offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.message_id) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.current_inbound_sequence_number) as usize) - p,
                "current_inbound_sequence_number offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.current_inbound_sequence_number) as usize) - p,
            );
            assert_eq!(
                14usize,
                (core::ptr::addr_of!(d.current_outbound_sequence_number) as usize) - p,
                "current_outbound_sequence_number offset expected {:} but was {:}",
                14usize,
                (core::ptr::addr_of!(d.current_outbound_sequence_number) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.current_internal_order_id) as usize) - p,
                "current_internal_order_id offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.current_internal_order_id) as usize) - p,
            );
            assert_eq!(
                26usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
                "is_snapshot offset expected {:} but was {:}",
                26usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
            );
            assert_eq!(
                27usize,
                (core::ptr::addr_of!(d.last_received_execution_identifier) as usize) - p,
                "last_received_execution_identifier offset expected {:} but was {:}",
                27usize,
                (core::ptr::addr_of!(d.last_received_execution_identifier) as usize) - p,
            );
        }
    }
}
