// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const PROCESSED_FILL_IDENTIFIER_VLS_SIZE: usize = 13;

/// size                       u16     = ProcessedFillIdentifierVLSSize  (13)
/// type                       u16     = PROCESSED_FILL_IDENTIFIER  (10132)
/// base_size                  u16     = ProcessedFillIdentifierVLSSize  (13)
/// fill_identifier            string  = ""
/// is_snapshot                bool    = false
/// is_first_message_in_batch  bool    = false
/// is_last_message_in_batch   bool    = false
pub(crate) const PROCESSED_FILL_IDENTIFIER_VLS_DEFAULT: [u8; 13] =
    [13, 0, 148, 39, 13, 0, 0, 0, 0, 0, 0, 0, 0];

pub trait ProcessedFillIdentifier: Message {
    type Safe: ProcessedFillIdentifier;
    type Unsafe: ProcessedFillIdentifier;

    fn fill_identifier(&self) -> &str;

    fn is_snapshot(&self) -> bool;

    fn is_first_message_in_batch(&self) -> bool;

    fn is_last_message_in_batch(&self) -> bool;

    fn set_fill_identifier(&mut self, value: &str) -> &mut Self;

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self;

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl ProcessedFillIdentifier) {
        to.set_fill_identifier(self.fill_identifier());
        to.set_is_snapshot(self.is_snapshot());
        to.set_is_first_message_in_batch(self.is_first_message_in_batch());
        to.set_is_last_message_in_batch(self.is_last_message_in_batch());
    }
}

pub struct ProcessedFillIdentifierVLS {
    data: *const ProcessedFillIdentifierVLSData,
    capacity: usize,
}

pub struct ProcessedFillIdentifierVLSUnsafe {
    data: *const ProcessedFillIdentifierVLSData,
    capacity: usize,
}

#[repr(packed(1), C)]
pub struct ProcessedFillIdentifierVLSData {
    size: u16,
    r#type: u16,
    base_size: u16,
    fill_identifier: VLS,
    is_snapshot: bool,
    is_first_message_in_batch: bool,
    is_last_message_in_batch: bool,
}

impl ProcessedFillIdentifierVLSData {
    pub fn new() -> Self {
        Self {
            size: 13u16.to_le(),
            r#type: PROCESSED_FILL_IDENTIFIER.to_le(),
            base_size: 13u16.to_le(),
            fill_identifier: crate::message::VLS::new(),
            is_snapshot: false,
            is_first_message_in_batch: false,
            is_last_message_in_batch: false,
        }
    }
}

unsafe impl Send for ProcessedFillIdentifierVLS {}
unsafe impl Send for ProcessedFillIdentifierVLSUnsafe {}
unsafe impl Send for ProcessedFillIdentifierVLSData {}

impl Drop for ProcessedFillIdentifierVLS {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for ProcessedFillIdentifierVLSUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for ProcessedFillIdentifierVLS {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for ProcessedFillIdentifierVLSUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for ProcessedFillIdentifierVLS {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for ProcessedFillIdentifierVLSUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for ProcessedFillIdentifierVLS {
    type Target = ProcessedFillIdentifierVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ProcessedFillIdentifierVLS {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for ProcessedFillIdentifierVLSUnsafe {
    type Target = ProcessedFillIdentifierVLSData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for ProcessedFillIdentifierVLSUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for ProcessedFillIdentifierVLS {
    type Data = ProcessedFillIdentifierVLSData;

    const BASE_SIZE: usize = 13;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ProcessedFillIdentifierVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const ProcessedFillIdentifierVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for ProcessedFillIdentifierVLS {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const ProcessedFillIdentifierVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl crate::Message for ProcessedFillIdentifierVLSUnsafe {
    type Data = ProcessedFillIdentifierVLSData;

    const BASE_SIZE: usize = 13;
    const BASE_SIZE_OFFSET: isize = 4;
    const DEFAULT_CAPACITY: usize = Self::BASE_SIZE * 2;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, ProcessedFillIdentifierVLSData::new()),
            capacity: Self::DEFAULT_CAPACITY,
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.base_size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        self.capacity as u16
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, capacity: usize) -> Self {
        Self {
            data: data as *const ProcessedFillIdentifierVLSData,
            capacity,
        }
    }
}

impl crate::VLSMessage for ProcessedFillIdentifierVLSUnsafe {
    #[inline]
    unsafe fn set_ptr(&mut self, value: *const u8) {
        self.data = value as *const ProcessedFillIdentifierVLSData;
    }

    #[inline]
    fn set_capacity(&mut self, capacity: u16) {
        self.capacity = capacity as usize;
    }

    #[inline]
    fn set_size(&mut self, size: u16) {
        self.size = size.to_le();
    }
}
impl ProcessedFillIdentifier for ProcessedFillIdentifierVLS {
    type Safe = ProcessedFillIdentifierVLS;
    type Unsafe = ProcessedFillIdentifierVLSUnsafe;

    fn fill_identifier(&self) -> &str {
        get_vls(self, self.fill_identifier)
    }

    fn is_snapshot(&self) -> bool {
        self.is_snapshot
    }

    fn is_first_message_in_batch(&self) -> bool {
        self.is_first_message_in_batch
    }

    fn is_last_message_in_batch(&self) -> bool {
        self.is_last_message_in_batch
    }

    fn set_fill_identifier(&mut self, value: &str) -> &mut Self {
        self.fill_identifier = set_vls(self, self.fill_identifier, value);
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        self.is_snapshot = value;
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_first_message_in_batch = value;
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        self.is_last_message_in_batch = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl ProcessedFillIdentifier for ProcessedFillIdentifierVLSUnsafe {
    type Safe = ProcessedFillIdentifierVLS;
    type Unsafe = ProcessedFillIdentifierVLSUnsafe;

    fn fill_identifier(&self) -> &str {
        if self.is_out_of_bounds(10) {
            ""
        } else {
            get_vls(self, self.fill_identifier)
        }
    }

    fn is_snapshot(&self) -> bool {
        if self.is_out_of_bounds(11) {
            false
        } else {
            self.is_snapshot
        }
    }

    fn is_first_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(12) {
            false
        } else {
            self.is_first_message_in_batch
        }
    }

    fn is_last_message_in_batch(&self) -> bool {
        if self.is_out_of_bounds(13) {
            false
        } else {
            self.is_last_message_in_batch
        }
    }

    fn set_fill_identifier(&mut self, value: &str) -> &mut Self {
        if !self.is_out_of_bounds(10) {
            self.fill_identifier = set_vls(self, self.fill_identifier, value);
        }
        self
    }

    fn set_is_snapshot(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(11) {
            self.is_snapshot = value;
        }
        self
    }

    fn set_is_first_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(12) {
            self.is_first_message_in_batch = value;
        }
        self
    }

    fn set_is_last_message_in_batch(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(13) {
            self.is_last_message_in_batch = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                13usize,
                core::mem::size_of::<ProcessedFillIdentifierVLSData>(),
                "ProcessedFillIdentifierVLSData sizeof expected {:} but was {:}",
                13usize,
                core::mem::size_of::<ProcessedFillIdentifierVLSData>()
            );
            assert_eq!(
                13u16,
                ProcessedFillIdentifierVLS::new().size(),
                "ProcessedFillIdentifierVLS sizeof expected {:} but was {:}",
                13u16,
                ProcessedFillIdentifierVLS::new().size(),
            );
            assert_eq!(
                PROCESSED_FILL_IDENTIFIER,
                ProcessedFillIdentifierVLS::new().r#type(),
                "ProcessedFillIdentifierVLS type expected {:} but was {:}",
                PROCESSED_FILL_IDENTIFIER,
                ProcessedFillIdentifierVLS::new().r#type(),
            );
            assert_eq!(
                10132u16,
                ProcessedFillIdentifierVLS::new().r#type(),
                "ProcessedFillIdentifierVLS type expected {:} but was {:}",
                10132u16,
                ProcessedFillIdentifierVLS::new().r#type(),
            );
            let d = ProcessedFillIdentifierVLSData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
                "base_size offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.base_size) as usize) - p,
            );
            assert_eq!(
                6usize,
                (core::ptr::addr_of!(d.fill_identifier) as usize) - p,
                "fill_identifier offset expected {:} but was {:}",
                6usize,
                (core::ptr::addr_of!(d.fill_identifier) as usize) - p,
            );
            assert_eq!(
                10usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
                "is_snapshot offset expected {:} but was {:}",
                10usize,
                (core::ptr::addr_of!(d.is_snapshot) as usize) - p,
            );
            assert_eq!(
                11usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
                "is_first_message_in_batch offset expected {:} but was {:}",
                11usize,
                (core::ptr::addr_of!(d.is_first_message_in_batch) as usize) - p,
            );
            assert_eq!(
                12usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
                "is_last_message_in_batch offset expected {:} but was {:}",
                12usize,
                (core::ptr::addr_of!(d.is_last_message_in_batch) as usize) - p,
            );
        }
    }
}
