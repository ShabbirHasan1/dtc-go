// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const MARKET_DATA_SNAPSHOT_FIXED_SIZE: usize = 144;

/// size                           u16                       = MarketDataSnapshotFixedSize  (144)
/// type                           u16                       = MARKET_DATA_SNAPSHOT  (104)
/// symbol_id                      u32                       = 0
/// session_settlement_price       f64                       = f64::MAX
/// session_open_price             f64                       = f64::MAX
/// session_high_price             f64                       = f64::MAX
/// session_low_price              f64                       = f64::MAX
/// session_volume                 f64                       = f64::MAX
/// u32                       session_num_trades             = u16::MAX
/// u32                       open_interest                  = u16::MAX
/// bid_price                      f64                       = f64::MAX
/// ask_price                      f64                       = f64::MAX
/// ask_quantity                   f64                       = f64::MAX
/// bid_quantity                   f64                       = f64::MAX
/// last_trade_price               f64                       = f64::MAX
/// last_trade_volume              f64                       = f64::MAX
/// last_trade_date_time           DateTimeWithMilliseconds  = 0
/// bid_ask_date_time              DateTimeWithMilliseconds  = 0
/// session_settlement_date_time   DateTime4Byte             = 0
/// trading_session_date           DateTime4Byte             = 0
/// trading_status                 TradingStatusEnum         = TRADING_STATUS_UNKNOWN  (0)
/// market_depth_update_date_time  DateTimeWithMilliseconds  = 0
pub(crate) const MARKET_DATA_SNAPSHOT_FIXED_DEFAULT: [u8; 144] = [
    144, 0, 104, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255,
    255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127,
    255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 255, 255,
    255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239,
    127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255, 255, 255, 255, 255, 239, 127, 255, 255,
    255, 255, 255, 255, 239, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// The Server sends the MarketDataSnapshotFixed message to the Client immediately
/// after a successful MarketDataRequestVLS message has been received from
/// the Client and it has indicated to subscribe to the symbol or requested
/// the snapshot of data.
///
/// Any changes to the data fields within the MarketDataSnapshotFixed message
/// during the trading session will be sent by the Server to the Client through
/// the corresponding MARKET_DATA_UPDATE_* messages.
///
/// It is recommended that the MarketDataSnapshotFixed be sent by the Server
/// at the start of a new trading session.
///
/// This message can be sent more often, however it is not intended to be
/// sent frequently.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
///
/// There is no need to send this when there is a new High or Low during the
/// trading session. The Server should use the MarketDataUpdateSessionHighFixed
/// or MarketDataUpdateSessionLowFixed messages instead.
pub trait MarketDataSnapshot: Message {
    type Safe: MarketDataSnapshot;
    type Unsafe: MarketDataSnapshot;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The previous Settlement price when this message is sent before the market
    /// closes for the trading session. After the market has closed, this is the
    /// most recent Settlement price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_settlement_price(&self) -> f64;

    /// The Opening price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_open_price(&self) -> f64;

    /// The the High price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_high_price(&self) -> f64;

    /// The Low price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_low_price(&self) -> f64;

    /// The total Volume for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_volume(&self) -> f64;

    /// The number of Trades for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn session_num_trades(&self) -> u32;

    /// Contains the Open Interest for futures and options.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn open_interest(&self) -> u32;

    /// The latest best Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn bid_price(&self) -> f64;

    /// The latest best Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn ask_price(&self) -> f64;

    /// The quantity of the orders at the Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn ask_quantity(&self) -> f64;

    /// The quantity of the orders at the Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn bid_quantity(&self) -> f64;

    /// The most recent last trade price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn last_trade_price(&self) -> f64;

    /// The quantity/volume of the most recent last trade.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn last_trade_volume(&self) -> f64;

    /// The Date-Time of the last trade.
    fn last_trade_date_time(&self) -> DateTimeWithMilliseconds;

    /// The Date-Time of the last Bid and Ask quote data update.
    fn bid_ask_date_time(&self) -> DateTimeWithMilliseconds;

    /// The trading date the Settlement price is for. The time component is not
    /// normally considered relevant for this field.
    ///
    /// This field will be 0 if this field is not available from the data feed.
    /// This field will be 0 if this field is not available from the data feed.
    fn session_settlement_date_time(&self) -> DateTime4Byte;

    /// This is the Date of the trading session that the data contained in this
    /// snapshot message is for.
    ///
    /// The time component is not normally considered relevant for this field.
    fn trading_session_date(&self) -> DateTime4Byte;

    fn trading_status(&self) -> TradingStatusEnum;

    fn market_depth_update_date_time(&self) -> DateTimeWithMilliseconds;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The previous Settlement price when this message is sent before the market
    /// closes for the trading session. After the market has closed, this is the
    /// most recent Settlement price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_settlement_price(&mut self, value: f64) -> &mut Self;

    /// The Opening price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_open_price(&mut self, value: f64) -> &mut Self;

    /// The the High price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_high_price(&mut self, value: f64) -> &mut Self;

    /// The Low price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_low_price(&mut self, value: f64) -> &mut Self;

    /// The total Volume for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_volume(&mut self, value: f64) -> &mut Self;

    /// The number of Trades for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_num_trades(&mut self, value: u32) -> &mut Self;

    /// Contains the Open Interest for futures and options.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn set_open_interest(&mut self, value: u32) -> &mut Self;

    /// The latest best Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_bid_price(&mut self, value: f64) -> &mut Self;

    /// The latest best Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_ask_price(&mut self, value: f64) -> &mut Self;

    /// The quantity of the orders at the Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_ask_quantity(&mut self, value: f64) -> &mut Self;

    /// The quantity of the orders at the Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_bid_quantity(&mut self, value: f64) -> &mut Self;

    /// The most recent last trade price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_last_trade_price(&mut self, value: f64) -> &mut Self;

    /// The quantity/volume of the most recent last trade.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_last_trade_volume(&mut self, value: f64) -> &mut Self;

    /// The Date-Time of the last trade.
    fn set_last_trade_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    /// The Date-Time of the last Bid and Ask quote data update.
    fn set_bid_ask_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    /// The trading date the Settlement price is for. The time component is not
    /// normally considered relevant for this field.
    ///
    /// This field will be 0 if this field is not available from the data feed.
    /// This field will be 0 if this field is not available from the data feed.
    fn set_session_settlement_date_time(&mut self, value: DateTime4Byte) -> &mut Self;

    /// This is the Date of the trading session that the data contained in this
    /// snapshot message is for.
    ///
    /// The time component is not normally considered relevant for this field.
    fn set_trading_session_date(&mut self, value: DateTime4Byte) -> &mut Self;

    fn set_trading_status(&mut self, value: TradingStatusEnum) -> &mut Self;

    fn set_market_depth_update_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDataSnapshot) {
        to.set_symbol_id(self.symbol_id());
        to.set_session_settlement_price(self.session_settlement_price());
        to.set_session_open_price(self.session_open_price());
        to.set_session_high_price(self.session_high_price());
        to.set_session_low_price(self.session_low_price());
        to.set_session_volume(self.session_volume());
        to.set_session_num_trades(self.session_num_trades());
        to.set_open_interest(self.open_interest());
        to.set_bid_price(self.bid_price());
        to.set_ask_price(self.ask_price());
        to.set_ask_quantity(self.ask_quantity());
        to.set_bid_quantity(self.bid_quantity());
        to.set_last_trade_price(self.last_trade_price());
        to.set_last_trade_volume(self.last_trade_volume());
        to.set_last_trade_date_time(self.last_trade_date_time());
        to.set_bid_ask_date_time(self.bid_ask_date_time());
        to.set_session_settlement_date_time(self.session_settlement_date_time());
        to.set_trading_session_date(self.trading_session_date());
        to.set_trading_status(self.trading_status());
        to.set_market_depth_update_date_time(self.market_depth_update_date_time());
    }
}

/// The Server sends the MarketDataSnapshotFixed message to the Client immediately
/// after a successful MarketDataRequestVLS message has been received from
/// the Client and it has indicated to subscribe to the symbol or requested
/// the snapshot of data.
///
/// Any changes to the data fields within the MarketDataSnapshotFixed message
/// during the trading session will be sent by the Server to the Client through
/// the corresponding MARKET_DATA_UPDATE_* messages.
///
/// It is recommended that the MarketDataSnapshotFixed be sent by the Server
/// at the start of a new trading session.
///
/// This message can be sent more often, however it is not intended to be
/// sent frequently.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
///
/// There is no need to send this when there is a new High or Low during the
/// trading session. The Server should use the MarketDataUpdateSessionHighFixed
/// or MarketDataUpdateSessionLowFixed messages instead.
pub struct MarketDataSnapshotFixed {
    data: *const MarketDataSnapshotFixedData,
}

pub struct MarketDataSnapshotFixedUnsafe {
    data: *const MarketDataSnapshotFixedData,
}

#[repr(packed(8), C)]
pub struct MarketDataSnapshotFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    session_settlement_price: f64,
    session_open_price: f64,
    session_high_price: f64,
    session_low_price: f64,
    session_volume: f64,
    session_num_trades: u32,
    open_interest: u32,
    bid_price: f64,
    ask_price: f64,
    ask_quantity: f64,
    bid_quantity: f64,
    last_trade_price: f64,
    last_trade_volume: f64,
    last_trade_date_time: DateTimeWithMilliseconds,
    bid_ask_date_time: DateTimeWithMilliseconds,
    session_settlement_date_time: DateTime4Byte,
    trading_session_date: DateTime4Byte,
    trading_status: TradingStatusEnum,
    market_depth_update_date_time: DateTimeWithMilliseconds,
}

impl MarketDataSnapshotFixedData {
    pub fn new() -> Self {
        Self {
            size: 144u16.to_le(),
            r#type: MARKET_DATA_SNAPSHOT.to_le(),
            symbol_id: 0u32,
            session_settlement_price: f64_le(f64::MAX),
            session_open_price: f64_le(f64::MAX),
            session_high_price: f64_le(f64::MAX),
            session_low_price: f64_le(f64::MAX),
            session_volume: f64_le(f64::MAX),
            session_num_trades: (u16::MAX as u32).to_le(),
            open_interest: (u16::MAX as u32).to_le(),
            bid_price: f64_le(f64::MAX),
            ask_price: f64_le(f64::MAX),
            ask_quantity: f64_le(f64::MAX),
            bid_quantity: f64_le(f64::MAX),
            last_trade_price: f64_le(f64::MAX),
            last_trade_volume: f64_le(f64::MAX),
            last_trade_date_time: 0.0f64,
            bid_ask_date_time: 0.0f64,
            session_settlement_date_time: 0u32,
            trading_session_date: 0u32,
            trading_status: TradingStatusEnum::TradingStatusUnknown.to_le(),
            market_depth_update_date_time: 0.0f64,
        }
    }
}

unsafe impl Send for MarketDataSnapshotFixed {}
unsafe impl Send for MarketDataSnapshotFixedUnsafe {}
unsafe impl Send for MarketDataSnapshotFixedData {}

impl Drop for MarketDataSnapshotFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataSnapshotFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataSnapshotFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataSnapshotFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataSnapshotFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataSnapshotFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataSnapshotFixed {
    type Target = MarketDataSnapshotFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataSnapshotFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataSnapshotFixedUnsafe {
    type Target = MarketDataSnapshotFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataSnapshotFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for MarketDataSnapshotFixed {
    type Data = MarketDataSnapshotFixedData;

    const BASE_SIZE: usize = 144;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataSnapshotFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataSnapshotFixedData,
        }
    }
}
impl crate::Message for MarketDataSnapshotFixedUnsafe {
    type Data = MarketDataSnapshotFixedData;

    const BASE_SIZE: usize = 144;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, MarketDataSnapshotFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataSnapshotFixedData,
        }
    }
}
/// The Server sends the MarketDataSnapshotFixed message to the Client immediately
/// after a successful MarketDataRequestVLS message has been received from
/// the Client and it has indicated to subscribe to the symbol or requested
/// the snapshot of data.
///
/// Any changes to the data fields within the MarketDataSnapshotFixed message
/// during the trading session will be sent by the Server to the Client through
/// the corresponding MARKET_DATA_UPDATE_* messages.
///
/// It is recommended that the MarketDataSnapshotFixed be sent by the Server
/// at the start of a new trading session.
///
/// This message can be sent more often, however it is not intended to be
/// sent frequently.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
///
/// There is no need to send this when there is a new High or Low during the
/// trading session. The Server should use the MarketDataUpdateSessionHighFixed
/// or MarketDataUpdateSessionLowFixed messages instead.
impl MarketDataSnapshot for MarketDataSnapshotFixed {
    type Safe = MarketDataSnapshotFixed;
    type Unsafe = MarketDataSnapshotFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The previous Settlement price when this message is sent before the market
    /// closes for the trading session. After the market has closed, this is the
    /// most recent Settlement price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_settlement_price(&self) -> f64 {
        f64_le(self.session_settlement_price)
    }

    /// The Opening price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_open_price(&self) -> f64 {
        f64_le(self.session_open_price)
    }

    /// The the High price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_high_price(&self) -> f64 {
        f64_le(self.session_high_price)
    }

    /// The Low price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_low_price(&self) -> f64 {
        f64_le(self.session_low_price)
    }

    /// The total Volume for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_volume(&self) -> f64 {
        f64_le(self.session_volume)
    }

    /// The number of Trades for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn session_num_trades(&self) -> u32 {
        u32::from_le(self.session_num_trades)
    }

    /// Contains the Open Interest for futures and options.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn open_interest(&self) -> u32 {
        u32::from_le(self.open_interest)
    }

    /// The latest best Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn bid_price(&self) -> f64 {
        f64_le(self.bid_price)
    }

    /// The latest best Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn ask_price(&self) -> f64 {
        f64_le(self.ask_price)
    }

    /// The quantity of the orders at the Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn ask_quantity(&self) -> f64 {
        f64_le(self.ask_quantity)
    }

    /// The quantity of the orders at the Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn bid_quantity(&self) -> f64 {
        f64_le(self.bid_quantity)
    }

    /// The most recent last trade price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn last_trade_price(&self) -> f64 {
        f64_le(self.last_trade_price)
    }

    /// The quantity/volume of the most recent last trade.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn last_trade_volume(&self) -> f64 {
        f64_le(self.last_trade_volume)
    }

    /// The Date-Time of the last trade.
    fn last_trade_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.last_trade_date_time)
    }

    /// The Date-Time of the last Bid and Ask quote data update.
    fn bid_ask_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.bid_ask_date_time)
    }

    /// The trading date the Settlement price is for. The time component is not
    /// normally considered relevant for this field.
    ///
    /// This field will be 0 if this field is not available from the data feed.
    /// This field will be 0 if this field is not available from the data feed.
    fn session_settlement_date_time(&self) -> DateTime4Byte {
        u32::from_le(self.session_settlement_date_time)
    }

    /// This is the Date of the trading session that the data contained in this
    /// snapshot message is for.
    ///
    /// The time component is not normally considered relevant for this field.
    fn trading_session_date(&self) -> DateTime4Byte {
        u32::from_le(self.trading_session_date)
    }

    fn trading_status(&self) -> TradingStatusEnum {
        TradingStatusEnum::from_le(self.trading_status)
    }

    fn market_depth_update_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.market_depth_update_date_time)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The previous Settlement price when this message is sent before the market
    /// closes for the trading session. After the market has closed, this is the
    /// most recent Settlement price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_settlement_price(&mut self, value: f64) -> &mut Self {
        self.session_settlement_price = f64_le(value);
        self
    }

    /// The Opening price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_open_price(&mut self, value: f64) -> &mut Self {
        self.session_open_price = f64_le(value);
        self
    }

    /// The the High price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_high_price(&mut self, value: f64) -> &mut Self {
        self.session_high_price = f64_le(value);
        self
    }

    /// The Low price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_low_price(&mut self, value: f64) -> &mut Self {
        self.session_low_price = f64_le(value);
        self
    }

    /// The total Volume for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_volume(&mut self, value: f64) -> &mut Self {
        self.session_volume = f64_le(value);
        self
    }

    /// The number of Trades for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_num_trades(&mut self, value: u32) -> &mut Self {
        self.session_num_trades = value.to_le();
        self
    }

    /// Contains the Open Interest for futures and options.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn set_open_interest(&mut self, value: u32) -> &mut Self {
        self.open_interest = value.to_le();
        self
    }

    /// The latest best Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_bid_price(&mut self, value: f64) -> &mut Self {
        self.bid_price = f64_le(value);
        self
    }

    /// The latest best Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_ask_price(&mut self, value: f64) -> &mut Self {
        self.ask_price = f64_le(value);
        self
    }

    /// The quantity of the orders at the Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_ask_quantity(&mut self, value: f64) -> &mut Self {
        self.ask_quantity = f64_le(value);
        self
    }

    /// The quantity of the orders at the Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_bid_quantity(&mut self, value: f64) -> &mut Self {
        self.bid_quantity = f64_le(value);
        self
    }

    /// The most recent last trade price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_last_trade_price(&mut self, value: f64) -> &mut Self {
        self.last_trade_price = f64_le(value);
        self
    }

    /// The quantity/volume of the most recent last trade.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_last_trade_volume(&mut self, value: f64) -> &mut Self {
        self.last_trade_volume = f64_le(value);
        self
    }

    /// The Date-Time of the last trade.
    fn set_last_trade_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.last_trade_date_time = f64_le(value);
        self
    }

    /// The Date-Time of the last Bid and Ask quote data update.
    fn set_bid_ask_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.bid_ask_date_time = f64_le(value);
        self
    }

    /// The trading date the Settlement price is for. The time component is not
    /// normally considered relevant for this field.
    ///
    /// This field will be 0 if this field is not available from the data feed.
    /// This field will be 0 if this field is not available from the data feed.
    fn set_session_settlement_date_time(&mut self, value: DateTime4Byte) -> &mut Self {
        self.session_settlement_date_time = value.to_le();
        self
    }

    /// This is the Date of the trading session that the data contained in this
    /// snapshot message is for.
    ///
    /// The time component is not normally considered relevant for this field.
    fn set_trading_session_date(&mut self, value: DateTime4Byte) -> &mut Self {
        self.trading_session_date = value.to_le();
        self
    }

    fn set_trading_status(&mut self, value: TradingStatusEnum) -> &mut Self {
        self.trading_status = unsafe { core::mem::transmute((value as i8).to_le()) };
        self
    }

    fn set_market_depth_update_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.market_depth_update_date_time = f64_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// The Server sends the MarketDataSnapshotFixed message to the Client immediately
/// after a successful MarketDataRequestVLS message has been received from
/// the Client and it has indicated to subscribe to the symbol or requested
/// the snapshot of data.
///
/// Any changes to the data fields within the MarketDataSnapshotFixed message
/// during the trading session will be sent by the Server to the Client through
/// the corresponding MARKET_DATA_UPDATE_* messages.
///
/// It is recommended that the MarketDataSnapshotFixed be sent by the Server
/// at the start of a new trading session.
///
/// This message can be sent more often, however it is not intended to be
/// sent frequently.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
///
/// There is no need to send this when there is a new High or Low during the
/// trading session. The Server should use the MarketDataUpdateSessionHighFixed
/// or MarketDataUpdateSessionLowFixed messages instead.
impl MarketDataSnapshot for MarketDataSnapshotFixedUnsafe {
    type Safe = MarketDataSnapshotFixed;
    type Unsafe = MarketDataSnapshotFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The previous Settlement price when this message is sent before the market
    /// closes for the trading session. After the market has closed, this is the
    /// most recent Settlement price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_settlement_price(&self) -> f64 {
        if self.is_out_of_bounds(16) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.session_settlement_price)
        }
    }

    /// The Opening price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_open_price(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.session_open_price)
        }
    }

    /// The the High price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_high_price(&self) -> f64 {
        if self.is_out_of_bounds(32) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.session_high_price)
        }
    }

    /// The Low price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_low_price(&self) -> f64 {
        if self.is_out_of_bounds(40) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.session_low_price)
        }
    }

    /// The total Volume for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn session_volume(&self) -> f64 {
        if self.is_out_of_bounds(48) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.session_volume)
        }
    }

    /// The number of Trades for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn session_num_trades(&self) -> u32 {
        if self.is_out_of_bounds(52) {
            (u16::MAX as u32).to_le()
        } else {
            u32::from_le(self.session_num_trades)
        }
    }

    /// Contains the Open Interest for futures and options.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn open_interest(&self) -> u32 {
        if self.is_out_of_bounds(56) {
            (u16::MAX as u32).to_le()
        } else {
            u32::from_le(self.open_interest)
        }
    }

    /// The latest best Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn bid_price(&self) -> f64 {
        if self.is_out_of_bounds(64) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.bid_price)
        }
    }

    /// The latest best Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn ask_price(&self) -> f64 {
        if self.is_out_of_bounds(72) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.ask_price)
        }
    }

    /// The quantity of the orders at the Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn ask_quantity(&self) -> f64 {
        if self.is_out_of_bounds(80) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.ask_quantity)
        }
    }

    /// The quantity of the orders at the Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn bid_quantity(&self) -> f64 {
        if self.is_out_of_bounds(88) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.bid_quantity)
        }
    }

    /// The most recent last trade price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn last_trade_price(&self) -> f64 {
        if self.is_out_of_bounds(96) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.last_trade_price)
        }
    }

    /// The quantity/volume of the most recent last trade.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn last_trade_volume(&self) -> f64 {
        if self.is_out_of_bounds(104) {
            f64_le(f64::MAX)
        } else {
            f64_le(self.last_trade_volume)
        }
    }

    /// The Date-Time of the last trade.
    fn last_trade_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(112) {
            0.0f64
        } else {
            f64_le(self.last_trade_date_time)
        }
    }

    /// The Date-Time of the last Bid and Ask quote data update.
    fn bid_ask_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(120) {
            0.0f64
        } else {
            f64_le(self.bid_ask_date_time)
        }
    }

    /// The trading date the Settlement price is for. The time component is not
    /// normally considered relevant for this field.
    ///
    /// This field will be 0 if this field is not available from the data feed.
    /// This field will be 0 if this field is not available from the data feed.
    fn session_settlement_date_time(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(124) {
            0u32
        } else {
            u32::from_le(self.session_settlement_date_time)
        }
    }

    /// This is the Date of the trading session that the data contained in this
    /// snapshot message is for.
    ///
    /// The time component is not normally considered relevant for this field.
    fn trading_session_date(&self) -> DateTime4Byte {
        if self.is_out_of_bounds(128) {
            0u32
        } else {
            u32::from_le(self.trading_session_date)
        }
    }

    fn trading_status(&self) -> TradingStatusEnum {
        if self.is_out_of_bounds(129) {
            TradingStatusEnum::TradingStatusUnknown.to_le()
        } else {
            TradingStatusEnum::from_le(self.trading_status)
        }
    }

    fn market_depth_update_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(144) {
            0.0f64
        } else {
            f64_le(self.market_depth_update_date_time)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The previous Settlement price when this message is sent before the market
    /// closes for the trading session. After the market has closed, this is the
    /// most recent Settlement price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_settlement_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.session_settlement_price = f64_le(value);
        }
        self
    }

    /// The Opening price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_open_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.session_open_price = f64_le(value);
        }
        self
    }

    /// The the High price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_high_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.session_high_price = f64_le(value);
        }
        self
    }

    /// The Low price for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_low_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.session_low_price = f64_le(value);
        }
        self
    }

    /// The total Volume for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_volume(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(48) {
            self.session_volume = f64_le(value);
        }
        self
    }

    /// The number of Trades for the trading session.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn set_session_num_trades(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(52) {
            self.session_num_trades = value.to_le();
        }
        self
    }

    /// Contains the Open Interest for futures and options.
    ///
    /// For binary encoding, if this field is not set it needs to be set to UINT_MAX.
    /// Refer to Unset Message Fields.
    fn set_open_interest(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(56) {
            self.open_interest = value.to_le();
        }
        self
    }

    /// The latest best Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_bid_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(64) {
            self.bid_price = f64_le(value);
        }
        self
    }

    /// The latest best Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_ask_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(72) {
            self.ask_price = f64_le(value);
        }
        self
    }

    /// The quantity of the orders at the Ask price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_ask_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(80) {
            self.ask_quantity = f64_le(value);
        }
        self
    }

    /// The quantity of the orders at the Bid price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_bid_quantity(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(88) {
            self.bid_quantity = f64_le(value);
        }
        self
    }

    /// The most recent last trade price.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_last_trade_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(96) {
            self.last_trade_price = f64_le(value);
        }
        self
    }

    /// The quantity/volume of the most recent last trade.
    ///
    /// For binary encoding, if this field is not set it needs to be set to DBL_MAX.
    /// Refer to Unset Message Fields.
    fn set_last_trade_volume(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(104) {
            self.last_trade_volume = f64_le(value);
        }
        self
    }

    /// The Date-Time of the last trade.
    fn set_last_trade_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(112) {
            self.last_trade_date_time = f64_le(value);
        }
        self
    }

    /// The Date-Time of the last Bid and Ask quote data update.
    fn set_bid_ask_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(120) {
            self.bid_ask_date_time = f64_le(value);
        }
        self
    }

    /// The trading date the Settlement price is for. The time component is not
    /// normally considered relevant for this field.
    ///
    /// This field will be 0 if this field is not available from the data feed.
    /// This field will be 0 if this field is not available from the data feed.
    fn set_session_settlement_date_time(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(124) {
            self.session_settlement_date_time = value.to_le();
        }
        self
    }

    /// This is the Date of the trading session that the data contained in this
    /// snapshot message is for.
    ///
    /// The time component is not normally considered relevant for this field.
    fn set_trading_session_date(&mut self, value: DateTime4Byte) -> &mut Self {
        if !self.is_out_of_bounds(128) {
            self.trading_session_date = value.to_le();
        }
        self
    }

    fn set_trading_status(&mut self, value: TradingStatusEnum) -> &mut Self {
        if !self.is_out_of_bounds(129) {
            self.trading_status = unsafe { core::mem::transmute((value as i8).to_le()) };
        }
        self
    }

    fn set_market_depth_update_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(144) {
            self.market_depth_update_date_time = f64_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                144usize,
                core::mem::size_of::<MarketDataSnapshotFixedData>(),
                "MarketDataSnapshotFixedData sizeof expected {:} but was {:}",
                144usize,
                core::mem::size_of::<MarketDataSnapshotFixedData>()
            );
            assert_eq!(
                144u16,
                MarketDataSnapshotFixed::new().size(),
                "MarketDataSnapshotFixed sizeof expected {:} but was {:}",
                144u16,
                MarketDataSnapshotFixed::new().size(),
            );
            assert_eq!(
                MARKET_DATA_SNAPSHOT,
                MarketDataSnapshotFixed::new().r#type(),
                "MarketDataSnapshotFixed type expected {:} but was {:}",
                MARKET_DATA_SNAPSHOT,
                MarketDataSnapshotFixed::new().r#type(),
            );
            assert_eq!(
                104u16,
                MarketDataSnapshotFixed::new().r#type(),
                "MarketDataSnapshotFixed type expected {:} but was {:}",
                104u16,
                MarketDataSnapshotFixed::new().r#type(),
            );
            let d = MarketDataSnapshotFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.session_settlement_price) as usize) - p,
                "session_settlement_price offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.session_settlement_price) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.session_open_price) as usize) - p,
                "session_open_price offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.session_open_price) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.session_high_price) as usize) - p,
                "session_high_price offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.session_high_price) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.session_low_price) as usize) - p,
                "session_low_price offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.session_low_price) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.session_volume) as usize) - p,
                "session_volume offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.session_volume) as usize) - p,
            );
            assert_eq!(
                48usize,
                (core::ptr::addr_of!(d.session_num_trades) as usize) - p,
                "session_num_trades offset expected {:} but was {:}",
                48usize,
                (core::ptr::addr_of!(d.session_num_trades) as usize) - p,
            );
            assert_eq!(
                52usize,
                (core::ptr::addr_of!(d.open_interest) as usize) - p,
                "open_interest offset expected {:} but was {:}",
                52usize,
                (core::ptr::addr_of!(d.open_interest) as usize) - p,
            );
            assert_eq!(
                56usize,
                (core::ptr::addr_of!(d.bid_price) as usize) - p,
                "bid_price offset expected {:} but was {:}",
                56usize,
                (core::ptr::addr_of!(d.bid_price) as usize) - p,
            );
            assert_eq!(
                64usize,
                (core::ptr::addr_of!(d.ask_price) as usize) - p,
                "ask_price offset expected {:} but was {:}",
                64usize,
                (core::ptr::addr_of!(d.ask_price) as usize) - p,
            );
            assert_eq!(
                72usize,
                (core::ptr::addr_of!(d.ask_quantity) as usize) - p,
                "ask_quantity offset expected {:} but was {:}",
                72usize,
                (core::ptr::addr_of!(d.ask_quantity) as usize) - p,
            );
            assert_eq!(
                80usize,
                (core::ptr::addr_of!(d.bid_quantity) as usize) - p,
                "bid_quantity offset expected {:} but was {:}",
                80usize,
                (core::ptr::addr_of!(d.bid_quantity) as usize) - p,
            );
            assert_eq!(
                88usize,
                (core::ptr::addr_of!(d.last_trade_price) as usize) - p,
                "last_trade_price offset expected {:} but was {:}",
                88usize,
                (core::ptr::addr_of!(d.last_trade_price) as usize) - p,
            );
            assert_eq!(
                96usize,
                (core::ptr::addr_of!(d.last_trade_volume) as usize) - p,
                "last_trade_volume offset expected {:} but was {:}",
                96usize,
                (core::ptr::addr_of!(d.last_trade_volume) as usize) - p,
            );
            assert_eq!(
                104usize,
                (core::ptr::addr_of!(d.last_trade_date_time) as usize) - p,
                "last_trade_date_time offset expected {:} but was {:}",
                104usize,
                (core::ptr::addr_of!(d.last_trade_date_time) as usize) - p,
            );
            assert_eq!(
                112usize,
                (core::ptr::addr_of!(d.bid_ask_date_time) as usize) - p,
                "bid_ask_date_time offset expected {:} but was {:}",
                112usize,
                (core::ptr::addr_of!(d.bid_ask_date_time) as usize) - p,
            );
            assert_eq!(
                120usize,
                (core::ptr::addr_of!(d.session_settlement_date_time) as usize) - p,
                "session_settlement_date_time offset expected {:} but was {:}",
                120usize,
                (core::ptr::addr_of!(d.session_settlement_date_time) as usize) - p,
            );
            assert_eq!(
                124usize,
                (core::ptr::addr_of!(d.trading_session_date) as usize) - p,
                "trading_session_date offset expected {:} but was {:}",
                124usize,
                (core::ptr::addr_of!(d.trading_session_date) as usize) - p,
            );
            assert_eq!(
                128usize,
                (core::ptr::addr_of!(d.trading_status) as usize) - p,
                "trading_status offset expected {:} but was {:}",
                128usize,
                (core::ptr::addr_of!(d.trading_status) as usize) - p,
            );
            assert_eq!(
                136usize,
                (core::ptr::addr_of!(d.market_depth_update_date_time) as usize) - p,
                "market_depth_update_date_time offset expected {:} but was {:}",
                136usize,
                (core::ptr::addr_of!(d.market_depth_update_date_time) as usize) - p,
            );
        }
    }
}
