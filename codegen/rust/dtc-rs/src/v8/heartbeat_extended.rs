// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const HEARTBEAT_EXTENDED_FIXED_SIZE: usize = 62;

/// size                                        u16                          = HeartbeatExtendedFixedSize  (62)
/// type                                        u16                          = HEARTBEAT  (3)
/// num_dropped_messages                        u32                          = 0
/// current_date_time                           DateTime                     = 0
/// seconds_since_last_received_heartbeat       u16                          = 0
/// number_of_outstanding_sent_buffers          u16                          = 0
/// pending_transmission_delay_in_milliseconds  u16                          = 0
/// current_send_buffer_size_in_bytes           u32                          = 0
/// sending_date_time_microseconds              DateTimeWithMicrosecondsInt  = 0
/// data_compression_ratio                      f32                          = 0
/// total_uncompressed_bytes                    u64                          = 0
/// total_compression_time                      f64                          = 0
/// number_of_compressions                      u32                          = 0
/// source_ip_address                           u32                          = 0
pub(crate) const HEARTBEAT_EXTENDED_FIXED_DEFAULT: [u8; 62] = [
    62, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

pub trait HeartbeatExtended: Message {
    type Safe: HeartbeatExtended;
    type Unsafe: HeartbeatExtended;

    fn num_dropped_messages(&self) -> u32;

    fn current_date_time(&self) -> DateTime;

    fn seconds_since_last_received_heartbeat(&self) -> u16;

    fn number_of_outstanding_sent_buffers(&self) -> u16;

    fn pending_transmission_delay_in_milliseconds(&self) -> u16;

    fn current_send_buffer_size_in_bytes(&self) -> u32;

    fn sending_date_time_microseconds(&self) -> DateTimeWithMicrosecondsInt;

    fn data_compression_ratio(&self) -> f32;

    fn total_uncompressed_bytes(&self) -> u64;

    fn total_compression_time(&self) -> f64;

    fn number_of_compressions(&self) -> u32;

    fn source_ip_address(&self) -> u32;

    fn set_num_dropped_messages(&mut self, value: u32) -> &mut Self;

    fn set_current_date_time(&mut self, value: DateTime) -> &mut Self;

    fn set_seconds_since_last_received_heartbeat(&mut self, value: u16) -> &mut Self;

    fn set_number_of_outstanding_sent_buffers(&mut self, value: u16) -> &mut Self;

    fn set_pending_transmission_delay_in_milliseconds(&mut self, value: u16) -> &mut Self;

    fn set_current_send_buffer_size_in_bytes(&mut self, value: u32) -> &mut Self;

    fn set_sending_date_time_microseconds(
        &mut self,
        value: DateTimeWithMicrosecondsInt,
    ) -> &mut Self;

    fn set_data_compression_ratio(&mut self, value: f32) -> &mut Self;

    fn set_total_uncompressed_bytes(&mut self, value: u64) -> &mut Self;

    fn set_total_compression_time(&mut self, value: f64) -> &mut Self;

    fn set_number_of_compressions(&mut self, value: u32) -> &mut Self;

    fn set_source_ip_address(&mut self, value: u32) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HeartbeatExtended) {
        to.set_num_dropped_messages(self.num_dropped_messages());
        to.set_current_date_time(self.current_date_time());
        to.set_seconds_since_last_received_heartbeat(self.seconds_since_last_received_heartbeat());
        to.set_number_of_outstanding_sent_buffers(self.number_of_outstanding_sent_buffers());
        to.set_pending_transmission_delay_in_milliseconds(
            self.pending_transmission_delay_in_milliseconds(),
        );
        to.set_current_send_buffer_size_in_bytes(self.current_send_buffer_size_in_bytes());
        to.set_sending_date_time_microseconds(self.sending_date_time_microseconds());
        to.set_data_compression_ratio(self.data_compression_ratio());
        to.set_total_uncompressed_bytes(self.total_uncompressed_bytes());
        to.set_total_compression_time(self.total_compression_time());
        to.set_number_of_compressions(self.number_of_compressions());
        to.set_source_ip_address(self.source_ip_address());
    }
}

pub struct HeartbeatExtendedFixed {
    data: *const HeartbeatExtendedFixedData,
}

pub struct HeartbeatExtendedFixedUnsafe {
    data: *const HeartbeatExtendedFixedData,
}

#[repr(packed(1), C)]
pub struct HeartbeatExtendedFixedData {
    size: u16,
    r#type: u16,
    num_dropped_messages: u32,
    current_date_time: DateTime,
    seconds_since_last_received_heartbeat: u16,
    number_of_outstanding_sent_buffers: u16,
    pending_transmission_delay_in_milliseconds: u16,
    current_send_buffer_size_in_bytes: u32,
    sending_date_time_microseconds: DateTimeWithMicrosecondsInt,
    data_compression_ratio: f32,
    total_uncompressed_bytes: u64,
    total_compression_time: f64,
    number_of_compressions: u32,
    source_ip_address: u32,
}

impl HeartbeatExtendedFixedData {
    pub fn new() -> Self {
        Self {
            size: 62u16.to_le(),
            r#type: HEARTBEAT.to_le(),
            num_dropped_messages: 0u32.to_le(),
            current_date_time: 0i64.to_le(),
            seconds_since_last_received_heartbeat: 0u16.to_le(),
            number_of_outstanding_sent_buffers: 0u16.to_le(),
            pending_transmission_delay_in_milliseconds: 0u16.to_le(),
            current_send_buffer_size_in_bytes: 0u32.to_le(),
            sending_date_time_microseconds: 0i64.to_le(),
            data_compression_ratio: 0.0,
            total_uncompressed_bytes: 0u64.to_le(),
            total_compression_time: 0.0,
            number_of_compressions: 0u32.to_le(),
            source_ip_address: 0u32.to_le(),
        }
    }
}

unsafe impl Send for HeartbeatExtendedFixed {}
unsafe impl Send for HeartbeatExtendedFixedUnsafe {}
unsafe impl Send for HeartbeatExtendedFixedData {}

impl Drop for HeartbeatExtendedFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HeartbeatExtendedFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HeartbeatExtendedFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HeartbeatExtendedFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HeartbeatExtendedFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HeartbeatExtendedFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HeartbeatExtendedFixed {
    type Target = HeartbeatExtendedFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HeartbeatExtendedFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HeartbeatExtendedFixedUnsafe {
    type Target = HeartbeatExtendedFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HeartbeatExtendedFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HeartbeatExtendedFixed {
    type Data = HeartbeatExtendedFixedData;

    const BASE_SIZE: usize = 62;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HeartbeatExtendedFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HeartbeatExtendedFixedData,
        }
    }
}
impl crate::Message for HeartbeatExtendedFixedUnsafe {
    type Data = HeartbeatExtendedFixedData;

    const BASE_SIZE: usize = 62;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(Self::BASE_SIZE, HeartbeatExtendedFixedData::new()),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HeartbeatExtendedFixedData,
        }
    }
}
impl HeartbeatExtended for HeartbeatExtendedFixed {
    type Safe = HeartbeatExtendedFixed;
    type Unsafe = HeartbeatExtendedFixedUnsafe;

    fn num_dropped_messages(&self) -> u32 {
        u32::from_le(self.num_dropped_messages)
    }

    fn current_date_time(&self) -> DateTime {
        i64::from_le(self.current_date_time)
    }

    fn seconds_since_last_received_heartbeat(&self) -> u16 {
        u16::from_le(self.seconds_since_last_received_heartbeat)
    }

    fn number_of_outstanding_sent_buffers(&self) -> u16 {
        u16::from_le(self.number_of_outstanding_sent_buffers)
    }

    fn pending_transmission_delay_in_milliseconds(&self) -> u16 {
        u16::from_le(self.pending_transmission_delay_in_milliseconds)
    }

    fn current_send_buffer_size_in_bytes(&self) -> u32 {
        u32::from_le(self.current_send_buffer_size_in_bytes)
    }

    fn sending_date_time_microseconds(&self) -> DateTimeWithMicrosecondsInt {
        i64::from_le(self.sending_date_time_microseconds)
    }

    fn data_compression_ratio(&self) -> f32 {
        f32_le(self.data_compression_ratio)
    }

    fn total_uncompressed_bytes(&self) -> u64 {
        u64::from_le(self.total_uncompressed_bytes)
    }

    fn total_compression_time(&self) -> f64 {
        f64_le(self.total_compression_time)
    }

    fn number_of_compressions(&self) -> u32 {
        u32::from_le(self.number_of_compressions)
    }

    fn source_ip_address(&self) -> u32 {
        u32::from_le(self.source_ip_address)
    }

    fn set_num_dropped_messages(&mut self, value: u32) -> &mut Self {
        self.num_dropped_messages = value.to_le();
        self
    }

    fn set_current_date_time(&mut self, value: DateTime) -> &mut Self {
        self.current_date_time = value.to_le();
        self
    }

    fn set_seconds_since_last_received_heartbeat(&mut self, value: u16) -> &mut Self {
        self.seconds_since_last_received_heartbeat = value.to_le();
        self
    }

    fn set_number_of_outstanding_sent_buffers(&mut self, value: u16) -> &mut Self {
        self.number_of_outstanding_sent_buffers = value.to_le();
        self
    }

    fn set_pending_transmission_delay_in_milliseconds(&mut self, value: u16) -> &mut Self {
        self.pending_transmission_delay_in_milliseconds = value.to_le();
        self
    }

    fn set_current_send_buffer_size_in_bytes(&mut self, value: u32) -> &mut Self {
        self.current_send_buffer_size_in_bytes = value.to_le();
        self
    }

    fn set_sending_date_time_microseconds(
        &mut self,
        value: DateTimeWithMicrosecondsInt,
    ) -> &mut Self {
        self.sending_date_time_microseconds = value.to_le();
        self
    }

    fn set_data_compression_ratio(&mut self, value: f32) -> &mut Self {
        self.data_compression_ratio = f32_le(value);
        self
    }

    fn set_total_uncompressed_bytes(&mut self, value: u64) -> &mut Self {
        self.total_uncompressed_bytes = value.to_le();
        self
    }

    fn set_total_compression_time(&mut self, value: f64) -> &mut Self {
        self.total_compression_time = f64_le(value);
        self
    }

    fn set_number_of_compressions(&mut self, value: u32) -> &mut Self {
        self.number_of_compressions = value.to_le();
        self
    }

    fn set_source_ip_address(&mut self, value: u32) -> &mut Self {
        self.source_ip_address = value.to_le();
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

impl HeartbeatExtended for HeartbeatExtendedFixedUnsafe {
    type Safe = HeartbeatExtendedFixed;
    type Unsafe = HeartbeatExtendedFixedUnsafe;

    fn num_dropped_messages(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32.to_le()
        } else {
            u32::from_le(self.num_dropped_messages)
        }
    }

    fn current_date_time(&self) -> DateTime {
        if self.is_out_of_bounds(16) {
            0i64.to_le()
        } else {
            i64::from_le(self.current_date_time)
        }
    }

    fn seconds_since_last_received_heartbeat(&self) -> u16 {
        if self.is_out_of_bounds(18) {
            0u16.to_le()
        } else {
            u16::from_le(self.seconds_since_last_received_heartbeat)
        }
    }

    fn number_of_outstanding_sent_buffers(&self) -> u16 {
        if self.is_out_of_bounds(20) {
            0u16.to_le()
        } else {
            u16::from_le(self.number_of_outstanding_sent_buffers)
        }
    }

    fn pending_transmission_delay_in_milliseconds(&self) -> u16 {
        if self.is_out_of_bounds(22) {
            0u16.to_le()
        } else {
            u16::from_le(self.pending_transmission_delay_in_milliseconds)
        }
    }

    fn current_send_buffer_size_in_bytes(&self) -> u32 {
        if self.is_out_of_bounds(26) {
            0u32.to_le()
        } else {
            u32::from_le(self.current_send_buffer_size_in_bytes)
        }
    }

    fn sending_date_time_microseconds(&self) -> DateTimeWithMicrosecondsInt {
        if self.is_out_of_bounds(34) {
            0i64.to_le()
        } else {
            i64::from_le(self.sending_date_time_microseconds)
        }
    }

    fn data_compression_ratio(&self) -> f32 {
        if self.is_out_of_bounds(38) {
            0.0
        } else {
            f32_le(self.data_compression_ratio)
        }
    }

    fn total_uncompressed_bytes(&self) -> u64 {
        if self.is_out_of_bounds(46) {
            0u64.to_le()
        } else {
            u64::from_le(self.total_uncompressed_bytes)
        }
    }

    fn total_compression_time(&self) -> f64 {
        if self.is_out_of_bounds(54) {
            0.0
        } else {
            f64_le(self.total_compression_time)
        }
    }

    fn number_of_compressions(&self) -> u32 {
        if self.is_out_of_bounds(58) {
            0u32.to_le()
        } else {
            u32::from_le(self.number_of_compressions)
        }
    }

    fn source_ip_address(&self) -> u32 {
        if self.is_out_of_bounds(62) {
            0u32.to_le()
        } else {
            u32::from_le(self.source_ip_address)
        }
    }

    fn set_num_dropped_messages(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.num_dropped_messages = value.to_le();
        }
        self
    }

    fn set_current_date_time(&mut self, value: DateTime) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.current_date_time = value.to_le();
        }
        self
    }

    fn set_seconds_since_last_received_heartbeat(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.seconds_since_last_received_heartbeat = value.to_le();
        }
        self
    }

    fn set_number_of_outstanding_sent_buffers(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(20) {
            self.number_of_outstanding_sent_buffers = value.to_le();
        }
        self
    }

    fn set_pending_transmission_delay_in_milliseconds(&mut self, value: u16) -> &mut Self {
        if !self.is_out_of_bounds(22) {
            self.pending_transmission_delay_in_milliseconds = value.to_le();
        }
        self
    }

    fn set_current_send_buffer_size_in_bytes(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(26) {
            self.current_send_buffer_size_in_bytes = value.to_le();
        }
        self
    }

    fn set_sending_date_time_microseconds(
        &mut self,
        value: DateTimeWithMicrosecondsInt,
    ) -> &mut Self {
        if !self.is_out_of_bounds(34) {
            self.sending_date_time_microseconds = value.to_le();
        }
        self
    }

    fn set_data_compression_ratio(&mut self, value: f32) -> &mut Self {
        if !self.is_out_of_bounds(38) {
            self.data_compression_ratio = f32_le(value);
        }
        self
    }

    fn set_total_uncompressed_bytes(&mut self, value: u64) -> &mut Self {
        if !self.is_out_of_bounds(46) {
            self.total_uncompressed_bytes = value.to_le();
        }
        self
    }

    fn set_total_compression_time(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(54) {
            self.total_compression_time = f64_le(value);
        }
        self
    }

    fn set_number_of_compressions(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(58) {
            self.number_of_compressions = value.to_le();
        }
        self
    }

    fn set_source_ip_address(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(62) {
            self.source_ip_address = value.to_le();
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                62usize,
                core::mem::size_of::<HeartbeatExtendedFixedData>(),
                "HeartbeatExtendedFixedData sizeof expected {:} but was {:}",
                62usize,
                core::mem::size_of::<HeartbeatExtendedFixedData>()
            );
            assert_eq!(
                62u16,
                HeartbeatExtendedFixed::new().size(),
                "HeartbeatExtendedFixed sizeof expected {:} but was {:}",
                62u16,
                HeartbeatExtendedFixed::new().size(),
            );
            assert_eq!(
                HEARTBEAT,
                HeartbeatExtendedFixed::new().r#type(),
                "HeartbeatExtendedFixed type expected {:} but was {:}",
                HEARTBEAT,
                HeartbeatExtendedFixed::new().r#type(),
            );
            assert_eq!(
                3u16,
                HeartbeatExtendedFixed::new().r#type(),
                "HeartbeatExtendedFixed type expected {:} but was {:}",
                3u16,
                HeartbeatExtendedFixed::new().r#type(),
            );
            let d = HeartbeatExtendedFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.num_dropped_messages) as usize) - p,
                "num_dropped_messages offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.num_dropped_messages) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.current_date_time) as usize) - p,
                "current_date_time offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.current_date_time) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.seconds_since_last_received_heartbeat) as usize) - p,
                "seconds_since_last_received_heartbeat offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.seconds_since_last_received_heartbeat) as usize) - p,
            );
            assert_eq!(
                18usize,
                (core::ptr::addr_of!(d.number_of_outstanding_sent_buffers) as usize) - p,
                "number_of_outstanding_sent_buffers offset expected {:} but was {:}",
                18usize,
                (core::ptr::addr_of!(d.number_of_outstanding_sent_buffers) as usize) - p,
            );
            assert_eq!(
                20usize,
                (core::ptr::addr_of!(d.pending_transmission_delay_in_milliseconds) as usize) - p,
                "pending_transmission_delay_in_milliseconds offset expected {:} but was {:}",
                20usize,
                (core::ptr::addr_of!(d.pending_transmission_delay_in_milliseconds) as usize) - p,
            );
            assert_eq!(
                22usize,
                (core::ptr::addr_of!(d.current_send_buffer_size_in_bytes) as usize) - p,
                "current_send_buffer_size_in_bytes offset expected {:} but was {:}",
                22usize,
                (core::ptr::addr_of!(d.current_send_buffer_size_in_bytes) as usize) - p,
            );
            assert_eq!(
                26usize,
                (core::ptr::addr_of!(d.sending_date_time_microseconds) as usize) - p,
                "sending_date_time_microseconds offset expected {:} but was {:}",
                26usize,
                (core::ptr::addr_of!(d.sending_date_time_microseconds) as usize) - p,
            );
            assert_eq!(
                34usize,
                (core::ptr::addr_of!(d.data_compression_ratio) as usize) - p,
                "data_compression_ratio offset expected {:} but was {:}",
                34usize,
                (core::ptr::addr_of!(d.data_compression_ratio) as usize) - p,
            );
            assert_eq!(
                38usize,
                (core::ptr::addr_of!(d.total_uncompressed_bytes) as usize) - p,
                "total_uncompressed_bytes offset expected {:} but was {:}",
                38usize,
                (core::ptr::addr_of!(d.total_uncompressed_bytes) as usize) - p,
            );
            assert_eq!(
                46usize,
                (core::ptr::addr_of!(d.total_compression_time) as usize) - p,
                "total_compression_time offset expected {:} but was {:}",
                46usize,
                (core::ptr::addr_of!(d.total_compression_time) as usize) - p,
            );
            assert_eq!(
                54usize,
                (core::ptr::addr_of!(d.number_of_compressions) as usize) - p,
                "number_of_compressions offset expected {:} but was {:}",
                54usize,
                (core::ptr::addr_of!(d.number_of_compressions) as usize) - p,
            );
            assert_eq!(
                58usize,
                (core::ptr::addr_of!(d.source_ip_address) as usize) - p,
                "source_ip_address offset expected {:} but was {:}",
                58usize,
                (core::ptr::addr_of!(d.source_ip_address) as usize) - p,
            );
        }
    }
}
