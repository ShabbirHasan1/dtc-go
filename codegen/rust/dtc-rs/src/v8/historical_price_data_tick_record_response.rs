// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-25 15:25:42.126453 +0800 WITA m=+0.007296918
use super::*;

pub(crate) const HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE_FIXED_SIZE: usize = 48;

/// size             u16                       = HistoricalPriceDataTickRecordResponseFixedSize  (48)
/// type             u16                       = HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE  (804)
/// request_id       i32                       = 0
/// date_time        DateTimeWithMilliseconds  = 0
/// at_bid_or_ask    AtBidOrAskEnum            = BID_ASK_UNSET  (0)
/// price            f64                       = 0
/// volume           f64                       = 0
/// is_final_record  bool                      = false
pub(crate) const HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE_FIXED_DEFAULT: [u8; 48] = [
    48, 0, 36, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

/// This is the response message when the RecordInterval field in a historical
/// data request message is set to INTERVAL_TICK.
///
/// If the Server does not support 1 Tick historical data or does not have
/// 1 Tick historical data for the specified time period, it can respond with
/// HistoricalPriceDataRecordResponseFixed messages instead. The Server must
/// only respond with messages of one type in response to a particular historical
/// price data request.
///
/// This message can be part of a compressed series of messages of this same
/// type, if the Client requested compression be used.
pub trait HistoricalPriceDataTickRecordResponse: Message {
    type Safe: HistoricalPriceDataTickRecordResponse;
    type Unsafe: HistoricalPriceDataTickRecordResponse;

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn request_id(&self) -> i32;

    /// The Date-Time of the trade.
    fn date_time(&self) -> DateTimeWithMilliseconds;

    /// This indicates whether the trade occurred at the Bid price or lower or
    /// at the Ask price or higher.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum;

    /// The price of the trade.
    fn price(&self) -> f64;

    /// The volume of the trade.
    fn volume(&self) -> f64;

    /// Set to 1 to indicate final record in response to the historical price
    /// data request.
    ///
    /// The default is 0 meaning there are more records to follow.
    fn is_final_record(&self) -> bool;

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn set_request_id(&mut self, value: i32) -> &mut Self;

    /// The Date-Time of the trade.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    /// This indicates whether the trade occurred at the Bid price or lower or
    /// at the Ask price or higher.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum) -> &mut Self;

    /// The price of the trade.
    fn set_price(&mut self, value: f64) -> &mut Self;

    /// The volume of the trade.
    fn set_volume(&mut self, value: f64) -> &mut Self;

    /// Set to 1 to indicate final record in response to the historical price
    /// data request.
    ///
    /// The default is 0 meaning there are more records to follow.
    fn set_is_final_record(&mut self, value: bool) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl HistoricalPriceDataTickRecordResponse) {
        to.set_request_id(self.request_id());
        to.set_date_time(self.date_time());
        to.set_at_bid_or_ask(self.at_bid_or_ask());
        to.set_price(self.price());
        to.set_volume(self.volume());
        to.set_is_final_record(self.is_final_record());
    }
}

/// This is the response message when the RecordInterval field in a historical
/// data request message is set to INTERVAL_TICK.
///
/// If the Server does not support 1 Tick historical data or does not have
/// 1 Tick historical data for the specified time period, it can respond with
/// HistoricalPriceDataRecordResponseFixed messages instead. The Server must
/// only respond with messages of one type in response to a particular historical
/// price data request.
///
/// This message can be part of a compressed series of messages of this same
/// type, if the Client requested compression be used.
pub struct HistoricalPriceDataTickRecordResponseFixed {
    data: *const HistoricalPriceDataTickRecordResponseFixedData,
}

pub struct HistoricalPriceDataTickRecordResponseFixedUnsafe {
    data: *const HistoricalPriceDataTickRecordResponseFixedData,
}

#[repr(packed(8), C)]
pub struct HistoricalPriceDataTickRecordResponseFixedData {
    size: u16,
    r#type: u16,
    request_id: i32,
    date_time: DateTimeWithMilliseconds,
    at_bid_or_ask: AtBidOrAskEnum,
    price: f64,
    volume: f64,
    is_final_record: bool,
}

impl HistoricalPriceDataTickRecordResponseFixedData {
    pub fn new() -> Self {
        Self {
            size: 48u16.to_le(),
            r#type: HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE.to_le(),
            request_id: 0i32.to_le(),
            date_time: 0.0,
            at_bid_or_ask: AtBidOrAskEnum::BidAskUnset.to_le(),
            price: 0.0,
            volume: 0.0,
            is_final_record: false,
        }
    }
}

unsafe impl Send for HistoricalPriceDataTickRecordResponseFixed {}
unsafe impl Send for HistoricalPriceDataTickRecordResponseFixedUnsafe {}
unsafe impl Send for HistoricalPriceDataTickRecordResponseFixedData {}

impl Drop for HistoricalPriceDataTickRecordResponseFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for HistoricalPriceDataTickRecordResponseFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for HistoricalPriceDataTickRecordResponseFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for HistoricalPriceDataTickRecordResponseFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataTickRecordResponseFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for HistoricalPriceDataTickRecordResponseFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for HistoricalPriceDataTickRecordResponseFixed {
    type Target = HistoricalPriceDataTickRecordResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataTickRecordResponseFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for HistoricalPriceDataTickRecordResponseFixedUnsafe {
    type Target = HistoricalPriceDataTickRecordResponseFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for HistoricalPriceDataTickRecordResponseFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl crate::Message for HistoricalPriceDataTickRecordResponseFixed {
    type Data = HistoricalPriceDataTickRecordResponseFixedData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalPriceDataTickRecordResponseFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataTickRecordResponseFixedData,
        }
    }
}
impl crate::Message for HistoricalPriceDataTickRecordResponseFixedUnsafe {
    type Data = HistoricalPriceDataTickRecordResponseFixedData;

    const BASE_SIZE: usize = 48;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                HistoricalPriceDataTickRecordResponseFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const HistoricalPriceDataTickRecordResponseFixedData,
        }
    }
}
/// This is the response message when the RecordInterval field in a historical
/// data request message is set to INTERVAL_TICK.
///
/// If the Server does not support 1 Tick historical data or does not have
/// 1 Tick historical data for the specified time period, it can respond with
/// HistoricalPriceDataRecordResponseFixed messages instead. The Server must
/// only respond with messages of one type in response to a particular historical
/// price data request.
///
/// This message can be part of a compressed series of messages of this same
/// type, if the Client requested compression be used.
impl HistoricalPriceDataTickRecordResponse for HistoricalPriceDataTickRecordResponseFixed {
    type Safe = HistoricalPriceDataTickRecordResponseFixed;
    type Unsafe = HistoricalPriceDataTickRecordResponseFixedUnsafe;

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn request_id(&self) -> i32 {
        i32::from_le(self.request_id)
    }

    /// The Date-Time of the trade.
    fn date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.date_time)
    }

    /// This indicates whether the trade occurred at the Bid price or lower or
    /// at the Ask price or higher.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum {
        AtBidOrAskEnum::from_le(self.at_bid_or_ask)
    }

    /// The price of the trade.
    fn price(&self) -> f64 {
        f64_le(self.price)
    }

    /// The volume of the trade.
    fn volume(&self) -> f64 {
        f64_le(self.volume)
    }

    /// Set to 1 to indicate final record in response to the historical price
    /// data request.
    ///
    /// The default is 0 meaning there are more records to follow.
    fn is_final_record(&self) -> bool {
        self.is_final_record
    }

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        self.request_id = value.to_le();
        self
    }

    /// The Date-Time of the trade.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.date_time = f64_le(value);
        self
    }

    /// This indicates whether the trade occurred at the Bid price or lower or
    /// at the Ask price or higher.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum) -> &mut Self {
        self.at_bid_or_ask = unsafe { core::mem::transmute((value as u16).to_le()) };
        self
    }

    /// The price of the trade.
    fn set_price(&mut self, value: f64) -> &mut Self {
        self.price = f64_le(value);
        self
    }

    /// The volume of the trade.
    fn set_volume(&mut self, value: f64) -> &mut Self {
        self.volume = f64_le(value);
        self
    }

    /// Set to 1 to indicate final record in response to the historical price
    /// data request.
    ///
    /// The default is 0 meaning there are more records to follow.
    fn set_is_final_record(&mut self, value: bool) -> &mut Self {
        self.is_final_record = value;
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// This is the response message when the RecordInterval field in a historical
/// data request message is set to INTERVAL_TICK.
///
/// If the Server does not support 1 Tick historical data or does not have
/// 1 Tick historical data for the specified time period, it can respond with
/// HistoricalPriceDataRecordResponseFixed messages instead. The Server must
/// only respond with messages of one type in response to a particular historical
/// price data request.
///
/// This message can be part of a compressed series of messages of this same
/// type, if the Client requested compression be used.
impl HistoricalPriceDataTickRecordResponse for HistoricalPriceDataTickRecordResponseFixedUnsafe {
    type Safe = HistoricalPriceDataTickRecordResponseFixed;
    type Unsafe = HistoricalPriceDataTickRecordResponseFixedUnsafe;

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn request_id(&self) -> i32 {
        if self.is_out_of_bounds(8) {
            0i32.to_le()
        } else {
            i32::from_le(self.request_id)
        }
    }

    /// The Date-Time of the trade.
    fn date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(16) {
            0.0
        } else {
            f64_le(self.date_time)
        }
    }

    /// This indicates whether the trade occurred at the Bid price or lower or
    /// at the Ask price or higher.
    fn at_bid_or_ask(&self) -> AtBidOrAskEnum {
        if self.is_out_of_bounds(18) {
            AtBidOrAskEnum::BidAskUnset.to_le()
        } else {
            AtBidOrAskEnum::from_le(self.at_bid_or_ask)
        }
    }

    /// The price of the trade.
    fn price(&self) -> f64 {
        if self.is_out_of_bounds(32) {
            0.0
        } else {
            f64_le(self.price)
        }
    }

    /// The volume of the trade.
    fn volume(&self) -> f64 {
        if self.is_out_of_bounds(40) {
            0.0
        } else {
            f64_le(self.volume)
        }
    }

    /// Set to 1 to indicate final record in response to the historical price
    /// data request.
    ///
    /// The default is 0 meaning there are more records to follow.
    fn is_final_record(&self) -> bool {
        if self.is_out_of_bounds(41) {
            false
        } else {
            self.is_final_record
        }
    }

    /// The numeric identifier from the historical price data request that this
    /// response is in response to.
    fn set_request_id(&mut self, value: i32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.request_id = value.to_le();
        }
        self
    }

    /// The Date-Time of the trade.
    fn set_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.date_time = f64_le(value);
        }
        self
    }

    /// This indicates whether the trade occurred at the Bid price or lower or
    /// at the Ask price or higher.
    fn set_at_bid_or_ask(&mut self, value: AtBidOrAskEnum) -> &mut Self {
        if !self.is_out_of_bounds(18) {
            self.at_bid_or_ask = unsafe { core::mem::transmute((value as u16).to_le()) };
        }
        self
    }

    /// The price of the trade.
    fn set_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.price = f64_le(value);
        }
        self
    }

    /// The volume of the trade.
    fn set_volume(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(40) {
            self.volume = f64_le(value);
        }
        self
    }

    /// Set to 1 to indicate final record in response to the historical price
    /// data request.
    ///
    /// The default is 0 meaning there are more records to follow.
    fn set_is_final_record(&mut self, value: bool) -> &mut Self {
        if !self.is_out_of_bounds(41) {
            self.is_final_record = value;
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                48usize,
                core::mem::size_of::<HistoricalPriceDataTickRecordResponseFixedData>(),
                "HistoricalPriceDataTickRecordResponseFixedData sizeof expected {:} but was {:}",
                48usize,
                core::mem::size_of::<HistoricalPriceDataTickRecordResponseFixedData>()
            );
            assert_eq!(
                48u16,
                HistoricalPriceDataTickRecordResponseFixed::new().size(),
                "HistoricalPriceDataTickRecordResponseFixed sizeof expected {:} but was {:}",
                48u16,
                HistoricalPriceDataTickRecordResponseFixed::new().size(),
            );
            assert_eq!(
                HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE,
                HistoricalPriceDataTickRecordResponseFixed::new().r#type(),
                "HistoricalPriceDataTickRecordResponseFixed type expected {:} but was {:}",
                HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE,
                HistoricalPriceDataTickRecordResponseFixed::new().r#type(),
            );
            assert_eq!(
                804u16,
                HistoricalPriceDataTickRecordResponseFixed::new().r#type(),
                "HistoricalPriceDataTickRecordResponseFixed type expected {:} but was {:}",
                804u16,
                HistoricalPriceDataTickRecordResponseFixed::new().r#type(),
            );
            let d = HistoricalPriceDataTickRecordResponseFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
                "request_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.request_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
                "date_time offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.date_time) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.at_bid_or_ask) as usize) - p,
                "at_bid_or_ask offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.at_bid_or_ask) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
                "price offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.price) as usize) - p,
            );
            assert_eq!(
                32usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
                "volume offset expected {:} but was {:}",
                32usize,
                (core::ptr::addr_of!(d.volume) as usize) - p,
            );
            assert_eq!(
                40usize,
                (core::ptr::addr_of!(d.is_final_record) as usize) - p,
                "is_final_record offset expected {:} but was {:}",
                40usize,
                (core::ptr::addr_of!(d.is_final_record) as usize) - p,
            );
        }
    }
}
