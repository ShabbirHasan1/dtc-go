// generated by github.com/moontrade/dtc-go/codegen/go at 2022-05-27 08:32:53.747629 +0800 WITA m=+0.008238335
use super::*;

pub(crate) const MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT_FIXED_SIZE: usize = 32;

/// size                  u16                       = MarketDataUpdateLastTradeSnapshotFixedSize  (32)
/// type                  u16                       = MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT  (134)
/// symbol_id             u32                       = 0
/// last_trade_price      f64                       = 0
/// last_trade_volume     f64                       = 0
/// last_trade_date_time  DateTimeWithMilliseconds  = 0
pub(crate) const MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT_FIXED_DEFAULT: [u8; 32] = [
    32, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
];

/// Sent by the Server to the Client to update the last trade price, volume
/// and date-time fields under conditions when there is not a trade.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
pub trait MarketDataUpdateLastTradeSnapshot: Message {
    type Safe: MarketDataUpdateLastTradeSnapshot;
    type Unsafe: MarketDataUpdateLastTradeSnapshot;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32;

    /// The most recent last trade price.
    fn last_trade_price(&self) -> f64;

    /// The quantity/volume of the most recent last trade.
    fn last_trade_volume(&self) -> f64;

    /// The Date-Time of the last trade.
    fn last_trade_date_time(&self) -> DateTimeWithMilliseconds;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self;

    /// The most recent last trade price.
    fn set_last_trade_price(&mut self, value: f64) -> &mut Self;

    /// The quantity/volume of the most recent last trade.
    fn set_last_trade_volume(&mut self, value: f64) -> &mut Self;

    /// The Date-Time of the last trade.
    fn set_last_trade_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self;

    fn clone_safe(&self) -> Self::Safe;

    fn to_safe(self) -> Self::Safe;

    fn copy_to(&self, to: &mut impl MarketDataUpdateLastTradeSnapshot) {
        to.set_symbol_id(self.symbol_id());
        to.set_last_trade_price(self.last_trade_price());
        to.set_last_trade_volume(self.last_trade_volume());
        to.set_last_trade_date_time(self.last_trade_date_time());
    }

    #[inline]
    fn parse<F: Fn(Parsed<Self::Safe, Self::Unsafe>) -> Result<(), crate::Error>>(
        data: &[u8],
        f: F,
    ) -> Result<(), crate::Error> {
        if data.len() < 4 {
            return Err(crate::Error::Malformed("need more data"));
        }
        let size = unsafe { u16::from_le(*(data.as_ptr() as *const u16)) };
        let base_size = if Self::BASE_SIZE_OFFSET == 0 {
            size
        } else {
            let base_size = unsafe {
                u16::from_le(*(data.as_ptr().offset(Self::BASE_SIZE_OFFSET) as *const u16))
            };
            if base_size > size {
                return Err(crate::Error::Malformed("base_size is greater than size"));
            }
            base_size
        };
        if (base_size as usize) >= Self::BASE_SIZE {
            let msg = unsafe { Self::Safe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Safe(&msg));
            core::mem::forget(msg);
            r
        } else {
            let msg = unsafe { Self::Unsafe::from_raw_parts(data.as_ptr(), size as usize) };
            let r = f(Parsed::Unsafe(&msg));
            core::mem::forget(msg);
            r
        }
    }
}

/// Sent by the Server to the Client to update the last trade price, volume
/// and date-time fields under conditions when there is not a trade.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
pub struct MarketDataUpdateLastTradeSnapshotFixed {
    data: *const MarketDataUpdateLastTradeSnapshotFixedData,
}

pub struct MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    data: *const MarketDataUpdateLastTradeSnapshotFixedData,
}

#[repr(packed(8), C)]
pub struct MarketDataUpdateLastTradeSnapshotFixedData {
    size: u16,
    r#type: u16,
    symbol_id: u32,
    last_trade_price: f64,
    last_trade_volume: f64,
    last_trade_date_time: DateTimeWithMilliseconds,
}

impl MarketDataUpdateLastTradeSnapshotFixedData {
    pub fn new() -> Self {
        Self {
            size: 32u16.to_le(),
            r#type: MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT.to_le(),
            symbol_id: 0u32,
            last_trade_price: 0.0f64,
            last_trade_volume: 0.0f64,
            last_trade_date_time: 0.0f64,
        }
    }
}

unsafe impl Send for MarketDataUpdateLastTradeSnapshotFixed {}
unsafe impl Send for MarketDataUpdateLastTradeSnapshotFixedUnsafe {}
unsafe impl Send for MarketDataUpdateLastTradeSnapshotFixedData {}

impl Drop for MarketDataUpdateLastTradeSnapshotFixed {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Drop for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    #[inline]
    fn drop(&mut self) {
        crate::deallocate(self.data as *mut u8, self.capacity() as usize);
    }
}

impl Clone for MarketDataUpdateLastTradeSnapshotFixed {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Clone for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    #[inline]
    fn clone(&self) -> Self {
        let mut c = Self::new();
        self.copy_to(&mut c);
        c
    }
}

impl Into<Vec<u8>> for MarketDataUpdateLastTradeSnapshotFixed {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl Into<Vec<u8>> for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    #[inline]
    fn into(self) -> Vec<u8> {
        self.into_vec()
    }
}

impl core::ops::Deref for MarketDataUpdateLastTradeSnapshotFixed {
    type Target = MarketDataUpdateLastTradeSnapshotFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateLastTradeSnapshotFixed {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::ops::Deref for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    type Target = MarketDataUpdateLastTradeSnapshotFixedData;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.data }
    }
}

impl core::ops::DerefMut for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self.data as *mut Self::Target) }
    }
}

impl core::fmt::Display for MarketDataUpdateLastTradeSnapshotFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDataUpdateLastTradeSnapshotFixed(size: {}, type: {}, symbol_id: {}, last_trade_price: {}, last_trade_volume: {}, last_trade_date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.last_trade_price(), self.last_trade_volume(), self.last_trade_date_time()).as_str())
    }
}

impl core::fmt::Debug for MarketDataUpdateLastTradeSnapshotFixed {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDataUpdateLastTradeSnapshotFixed(size: {}, type: {}, symbol_id: {}, last_trade_price: {}, last_trade_volume: {}, last_trade_date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.last_trade_price(), self.last_trade_volume(), self.last_trade_date_time()).as_str())
    }
}

impl core::fmt::Display for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDataUpdateLastTradeSnapshotFixedUnsafe(size: {}, type: {}, symbol_id: {}, last_trade_price: {}, last_trade_volume: {}, last_trade_date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.last_trade_price(), self.last_trade_volume(), self.last_trade_date_time()).as_str())
    }
}

impl core::fmt::Debug for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(format!("MarketDataUpdateLastTradeSnapshotFixedUnsafe(size: {}, type: {}, symbol_id: {}, last_trade_price: {}, last_trade_volume: {}, last_trade_date_time: {})", self.size(), self.r#type(), self.symbol_id(), self.last_trade_price(), self.last_trade_volume(), self.last_trade_date_time()).as_str())
    }
}

impl crate::Message for MarketDataUpdateLastTradeSnapshotFixed {
    type Data = MarketDataUpdateLastTradeSnapshotFixedData;

    const TYPE: u16 = MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT;
    const BASE_SIZE: usize = 32;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateLastTradeSnapshotFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateLastTradeSnapshotFixedData,
        }
    }
}
impl crate::Message for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    type Data = MarketDataUpdateLastTradeSnapshotFixedData;

    const TYPE: u16 = MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT;
    const BASE_SIZE: usize = 32;
    const BASE_SIZE_OFFSET: isize = 0;

    #[inline]
    fn new() -> Self {
        Self {
            data: crate::allocate(
                Self::BASE_SIZE,
                MarketDataUpdateLastTradeSnapshotFixedData::new(),
            ),
        }
    }

    #[inline]
    fn size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn r#type(&self) -> u16 {
        u16::from_le(self.r#type)
    }

    #[inline]
    fn base_size(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    fn capacity(&self) -> u16 {
        u16::from_le(self.size)
    }

    #[inline]
    unsafe fn as_ptr(&self) -> *const Self::Data {
        self.data
    }

    #[inline]
    unsafe fn from_raw_parts(data: *const u8, _: usize) -> Self {
        Self {
            data: data as *const MarketDataUpdateLastTradeSnapshotFixedData,
        }
    }
}
/// Sent by the Server to the Client to update the last trade price, volume
/// and date-time fields under conditions when there is not a trade.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
impl MarketDataUpdateLastTradeSnapshot for MarketDataUpdateLastTradeSnapshotFixed {
    type Safe = MarketDataUpdateLastTradeSnapshotFixed;
    type Unsafe = MarketDataUpdateLastTradeSnapshotFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        u32::from_le(self.symbol_id)
    }

    /// The most recent last trade price.
    fn last_trade_price(&self) -> f64 {
        f64_le(self.last_trade_price)
    }

    /// The quantity/volume of the most recent last trade.
    fn last_trade_volume(&self) -> f64 {
        f64_le(self.last_trade_volume)
    }

    /// The Date-Time of the last trade.
    fn last_trade_date_time(&self) -> DateTimeWithMilliseconds {
        f64_le(self.last_trade_date_time)
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        self.symbol_id = value.to_le();
        self
    }

    /// The most recent last trade price.
    fn set_last_trade_price(&mut self, value: f64) -> &mut Self {
        self.last_trade_price = f64_le(value);
        self
    }

    /// The quantity/volume of the most recent last trade.
    fn set_last_trade_volume(&mut self, value: f64) -> &mut Self {
        self.last_trade_volume = f64_le(value);
        self
    }

    /// The Date-Time of the last trade.
    fn set_last_trade_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        self.last_trade_date_time = f64_le(value);
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        self
    }
}

/// Sent by the Server to the Client to update the last trade price, volume
/// and date-time fields under conditions when there is not a trade.
///
/// This message type does not signify a trade has occurred. It should never
/// be interpreted by the Client in that way.
impl MarketDataUpdateLastTradeSnapshot for MarketDataUpdateLastTradeSnapshotFixedUnsafe {
    type Safe = MarketDataUpdateLastTradeSnapshotFixed;
    type Unsafe = MarketDataUpdateLastTradeSnapshotFixedUnsafe;

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn symbol_id(&self) -> u32 {
        if self.is_out_of_bounds(8) {
            0u32
        } else {
            u32::from_le(self.symbol_id)
        }
    }

    /// The most recent last trade price.
    fn last_trade_price(&self) -> f64 {
        if self.is_out_of_bounds(16) {
            0.0f64
        } else {
            f64_le(self.last_trade_price)
        }
    }

    /// The quantity/volume of the most recent last trade.
    fn last_trade_volume(&self) -> f64 {
        if self.is_out_of_bounds(24) {
            0.0f64
        } else {
            f64_le(self.last_trade_volume)
        }
    }

    /// The Date-Time of the last trade.
    fn last_trade_date_time(&self) -> DateTimeWithMilliseconds {
        if self.is_out_of_bounds(32) {
            0.0f64
        } else {
            f64_le(self.last_trade_date_time)
        }
    }

    /// This is the same SymbolID sent by the Client in the MarketDataRequestVLS
    /// message which corresponds to the Symbol that the data in this message
    /// is for.
    fn set_symbol_id(&mut self, value: u32) -> &mut Self {
        if !self.is_out_of_bounds(8) {
            self.symbol_id = value.to_le();
        }
        self
    }

    /// The most recent last trade price.
    fn set_last_trade_price(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(16) {
            self.last_trade_price = f64_le(value);
        }
        self
    }

    /// The quantity/volume of the most recent last trade.
    fn set_last_trade_volume(&mut self, value: f64) -> &mut Self {
        if !self.is_out_of_bounds(24) {
            self.last_trade_volume = f64_le(value);
        }
        self
    }

    /// The Date-Time of the last trade.
    fn set_last_trade_date_time(&mut self, value: DateTimeWithMilliseconds) -> &mut Self {
        if !self.is_out_of_bounds(32) {
            self.last_trade_date_time = f64_le(value);
        }
        self
    }

    #[inline]
    fn clone_safe(&self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }

    #[inline]
    fn to_safe(self) -> Self::Safe {
        let mut s = Self::Safe::new();
        self.copy_to(&mut s);
        s
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[test]
    pub(crate) fn layout() {
        unsafe {
            assert_eq!(
                32usize,
                core::mem::size_of::<MarketDataUpdateLastTradeSnapshotFixedData>(),
                "MarketDataUpdateLastTradeSnapshotFixedData sizeof expected {:} but was {:}",
                32usize,
                core::mem::size_of::<MarketDataUpdateLastTradeSnapshotFixedData>()
            );
            assert_eq!(
                32u16,
                MarketDataUpdateLastTradeSnapshotFixed::new().size(),
                "MarketDataUpdateLastTradeSnapshotFixed sizeof expected {:} but was {:}",
                32u16,
                MarketDataUpdateLastTradeSnapshotFixed::new().size(),
            );
            assert_eq!(
                MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT,
                MarketDataUpdateLastTradeSnapshotFixed::new().r#type(),
                "MarketDataUpdateLastTradeSnapshotFixed type expected {:} but was {:}",
                MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT,
                MarketDataUpdateLastTradeSnapshotFixed::new().r#type(),
            );
            assert_eq!(
                134u16,
                MarketDataUpdateLastTradeSnapshotFixed::new().r#type(),
                "MarketDataUpdateLastTradeSnapshotFixed type expected {:} but was {:}",
                134u16,
                MarketDataUpdateLastTradeSnapshotFixed::new().r#type(),
            );
            let d = MarketDataUpdateLastTradeSnapshotFixedData::new();
            let p = (&d as *const _ as *const u8).offset(0) as usize;
            assert_eq!(
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
                "size offset expected {:} but was {:}",
                0usize,
                (core::ptr::addr_of!(d.size) as usize) - p,
            );
            assert_eq!(
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
                "type offset expected {:} but was {:}",
                2usize,
                (core::ptr::addr_of!(d.r#type) as usize) - p,
            );
            assert_eq!(
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
                "symbol_id offset expected {:} but was {:}",
                4usize,
                (core::ptr::addr_of!(d.symbol_id) as usize) - p,
            );
            assert_eq!(
                8usize,
                (core::ptr::addr_of!(d.last_trade_price) as usize) - p,
                "last_trade_price offset expected {:} but was {:}",
                8usize,
                (core::ptr::addr_of!(d.last_trade_price) as usize) - p,
            );
            assert_eq!(
                16usize,
                (core::ptr::addr_of!(d.last_trade_volume) as usize) - p,
                "last_trade_volume offset expected {:} but was {:}",
                16usize,
                (core::ptr::addr_of!(d.last_trade_volume) as usize) - p,
            );
            assert_eq!(
                24usize,
                (core::ptr::addr_of!(d.last_trade_date_time) as usize) - p,
                "last_trade_date_time offset expected {:} but was {:}",
                24usize,
                (core::ptr::addr_of!(d.last_trade_date_time) as usize) - p,
            );
        }
    }
}
