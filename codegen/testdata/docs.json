{
  "messages": {
    "s_AccountBalanceReject": {
      "name": "s_AccountBalanceReject",
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique request identifier sent in the corresponding request."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "The text reason the ACCOUNT_BALANCE_REQUEST message was rejected."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_AccountBalanceRequest": {
      "name": "s_AccountBalanceRequest",
      "description": [
        "This is a message from the Client to the Server to request Trade Account Balance data.",
        "",
        "The Server will respond with an s_AccountBalanceUpdate or reject the request.",
        "",
        "The Server will set the RequestID in the s_AccountBalanceUpdate message to match the RequestID in the s_AccountBalanceRequest.",
        "",
        "The Server will periodically send s_AccountBalanceUpdate messages as the Account Balance data changes. The frequency of the updates is determined by the Server. Account Balance updates are considered automatically subscribed to. When unsolicited s_AccountBalanceUpdate messages are sent by the Server, the RequestID will be 0."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "A unique request identifier for this request."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is an optional field. Leave this empty to request the Server to return Account Balance data for all Trade Accounts on the logged in Username. Otherwise, specify a particular Trade Account to request Account Balance data for."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_AccountBalanceUpdate": {
      "name": "s_AccountBalanceUpdate",
      "description": [
        "This is an optional message from the Server to Client to provide Account Balance information for a particular Trade Account. The server needs to provide a separate message for each Trade Account associated with the logged in username if it supports Account Balance updates.",
        "",
        "The Server will respond with an s_AccountBalanceUpdate in response to a s_AccountBalanceRequest message. The Server will set the RequestID in the s_AccountBalanceUpdate message to match the RequestID in the s_AccountBalanceRequest message.",
        "",
        "The Server will periodically send s_AccountBalanceUpdate messages as the Account Balance data changes. The frequency of the updates is determined by the Server. Account Balance updates are considered automatically subscribed to. When an unsolicited s_AccountBalanceUpdate message is sent, the RequestID field will be 0.",
        "",
        "When the server is responding with one or more s_AccountBalanceUpdate messages in response to a s_AccountBalanceRequest message, it must not send any unsolicited s_AccountBalanceUpdate messages interleaved with the solicited s_AccountBalanceUpdate messages in response to the s_AccountBalanceRequest message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "This is the RequestID which was set in the s_AccountBalanceRequest that this message is in response to.",
            "",
            "In the case when this is a periodic unsolicited Account Balance update, RequestID must be set to 0, the default."
          ]
        },
        {
          "name": "CashBalance",
          "type": "double",
          "description": [
            "The current cash balance for the account in the currency specified by the AccountCurrency field."
          ]
        },
        {
          "name": "BalanceAvailableForNewPositions",
          "type": "double",
          "description": [
            "The CashBalance minus the cash required to maintain securities on margin the Trade Account currently has."
          ]
        },
        {
          "name": "AccountCurrency",
          "type": "char",
          "description": [
            "ISO Currency Code for the cash values in this message."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "The trade account identifier for the Account Balance information."
          ]
        },
        {
          "name": "SecuritiesValue",
          "type": "double",
          "description": [
            "This is the value of all cash and securities as a cash value."
          ]
        },
        {
          "name": "MarginRequirement",
          "type": "double",
          "description": [
            "This is the current cash requirement to maintain securities on margin the Trade Account currently has."
          ]
        },
        {
          "name": "TotalNumberMessages",
          "type": "int32",
          "description": [
            "This indicates the total number of Account Balance Update messages when a batch of messages is being sent. If there is only one Account Balance Update message being sent, this will be 1. Use a value of 1 for an unsolicited message.",
            "",
            "A Client should not rely on this field for an unsolicited message. This is required to be set."
          ]
        },
        {
          "name": "MessageNumber",
          "type": "int32",
          "description": [
            "This indicates the 1-based index of the Account Balance Update message when a batch of messages is being sent. If there is only one Account Balance Update message being sent, this will be 1. Use a value of 1 for an unsolicited message.",
            "",
            "A Client should not rely on this field for an unsolicited message. This is required to be set."
          ]
        },
        {
          "name": "NoAccountBalances",
          "type": "unsigned int8",
          "description": [
            "Set to an integer value of 1 to indicate there are no Account Balances in response to an s_AccountBalanceRequest message.",
            "",
            "Otherwise, the Server must leave this at the default of 0.",
            "",
            "The Server is always expected to respond with a single s_AccountBalanceUpdate message when there is no s_AccountBalanceUpdate message for any Trade Account when the Account Balances have been requested by the Client with an s_AccountBalanceRequest message.",
            "",
            "When the Server is sending an s_AccountBalanceUpdate message to the Client and it is indicating that the balance related fields are all zero, then the NoAccountBalances field must be left at the default of 0. It is not used indicate the balance related fields are all zero.",
            "",
            "This is always set to the default of 0 for an unsolicited s_AccountBalanceUpdate ."
          ]
        },
        {
          "name": "Unsolicited",
          "type": "unsigned int8",
          "description": [
            "Set to 1 to indicate this is an unsolicited Account Balance Update message. In other words, it is a real-time Account Balance Update message which is not an initial response to an s_AccountBalanceRequest message."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_CancelOrder": {
      "name": "s_CancelOrder",
      "description": [
        "This is a message from the Client to the Server requesting a previously sent order to be canceled."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "ServerOrderID",
          "type": "char",
          "description": [
            "This is the order identifier for the order to cancel. The Client needs to set this to the ServerOrderID field received back in the most recent s_OrderUpdate message for the order. The only case in which a ServerOrderID would change is in the case of a successful order Cancel and Replace operation.",
            "",
            "The Server will rely upon this ServerOrderID and only this order identifier to identify the order to be canceled. Although the given ClientOrderID from the Client must not change."
          ]
        },
        {
          "name": "ClientOrderID",
          "type": "char",
          "description": [
            "This is the Client's own order identifier for the order.",
            "",
            "This must be the same throughout the life of the order. If the Server sees that this order identifier has changed in relation to the ServerOrderID , then it should reject this message with a s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REJECTED.",
            "",
            "In the case where the order cancellation cannot be performed because the ServerOrderID does not exist, the Server will send a s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REJECTED and ClientOrderID set to the given ClientOrderID in this message. ServerOrderID will be unset because an invalid server order identifier was given."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_CancelReplaceOrder": {
      "name": "s_CancelReplaceOrder",
      "description": [
        "This message is sent by the Client to the Server to cancel and replace an existing order. This is also known as an order modification.",
        "",
        "When the cancel and replace operation is completed, an OrderUpdate message is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE. If the cancel and replace operation cannot be completed, an OrderUpdate message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "ServerOrderID",
          "type": "char",
          "description": [
            "This is the order identifier for the order to modify. The Client needs to set this to the ServerOrderID field received back in the most recent s_OrderUpdate message for the order.",
            "",
            "The Server will rely upon this ServerOrderID and only this order identifier to identify the order to be canceled and replaced. Although the given ClientOrderID by the Client must not change."
          ]
        },
        {
          "name": "ClientOrderID",
          "type": "char",
          "description": [
            "This is the Client's own order identifier for the order.",
            "",
            "This must be the same throughout the life of the order. If the Server sees that this order identifier has changed in relation to the ServerOrderID, then it should reject this message with a s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED",
            "",
            "In the case where the order modification cannot be performed because the ServerOrderID does not exist, the Server will send a s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID set to the given ClientOrderID in this message. ServerOrderID will be unset because an invalid server order identifier was given."
          ]
        },
        {
          "name": "Price1",
          "type": "double",
          "description": [
            "For orders that require a price, this is the new order price.",
            "",
            "This value can be left unset indicating to the Server that Price1 must not change and only the Quantity. In this case it is necessary to set Price1IsSet to a 0 value."
          ]
        },
        {
          "name": "Price2",
          "type": "double",
          "description": [
            "For Stop-Limit orders this is the new Limit price. For other order types it is not used.",
            "",
            "This value can be left unset indicating to the Server that Price2 must not change and only the Quantity. In this case it is necessary to set Price2IsSet to a 0 value."
          ]
        },
        {
          "name": "Quantity",
          "type": "double",
          "description": [
            "This is the new order quantity. It this is 0, then this means the order quantity must not be changed by the Server.",
            "",
            "If the order has partially filled, then this is going to be the order quantity which also includes the amount which has partially filled.",
            "",
            "For example, if the original quantity was 10 and there has been a partial fill of 3, the Client wants a fill of 2 more making a total of 5, then the Client will set this to 5."
          ]
        },
        {
          "name": "Price1IsSet",
          "type": "unsigned int8",
          "description": [
            "When this field is set to a nonzero value, it indicates that Price1 is set and the server should use the value, if it applies to the order type.",
            "",
            "The default value is 1."
          ]
        },
        {
          "name": "Price2IsSet",
          "type": "unsigned int8",
          "description": [
            "When this field is set to a nonzero value, it indicates that Price2 is set and the server should use the value, if it applies to the order type.",
            "",
            "The default value is 1."
          ]
        },
        {
          "name": "TimeInForce",
          "type": "TimeInForceEnum",
          "description": [
            "The Time in Force for the order. For a list of Time in Force values, refer to TimeInForceEnum.",
            "",
            "The default value is TIF_UNSET.",
            "",
            "When this field is set to a value other than TIF_UNSET, it indicates that the TimeInForce is being changed.",
            "",
            "If the server does not support changing the Time in Force of the order, it needs to reject this s_CancelReplaceOrder message and send an s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.",
            "",
            "The server is under no obligation to support changing the Time in Force."
          ]
        },
        {
          "name": "GoodTillDateTime",
          "type": "t_DateTime",
          "description": [
            "In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME, this specifies the expiration Date-Time of the order."
          ]
        },
        {
          "name": "UpdatePrice1OffsetToParent",
          "type": "uint8_t",
          "description": [
            "This is an optional field. If modifying a child order which is part of a Server managed bracket order, then when this variable is set to 1 it provides an indication to the Server to update the internal server managed price offset to the parent order that this child order has to the parent.",
            "",
            "This will ensure the Server will maintain the proper offset of the child order to the fill price of the parent order when the parent order fills."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_CancelReplaceOrderInt": {
      "name": "s_CancelReplaceOrderInt",
      "description": [
        "The s_CancelReplaceOrder_INT is a message from the Client to Server to cancel and replace (modify) an order.",
        "",
        "It is identical to s_CancelReplaceOrder except the prices are as integers.",
        "",
        "When the cancel and replace operation is completed, an OrderUpdate message is sent by the Server with the OrderUpdateReasonfield set to ORDER_CANCEL_REPLACE_COMPLETE. If the cancel and replace operation cannot be completed, an OrderUpdate message is sent by the Server with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "ServerOrderID",
          "type": "char",
          "description": [
            "This is the order identifier for the order to modify. The Client needs to set this to the ServerOrderID field received back in the most recent s_OrderUpdate message for the order.",
            "",
            "The Server will rely upon this ServerOrderID and only this order identifier to identify the order to be canceled and replaced. Although the given ClientOrderID by the Client must not change."
          ]
        },
        {
          "name": "ClientOrderID",
          "type": "char",
          "description": [
            "This is the Client's own order identifier for the order.",
            "",
            "This must be the same throughout the life of the order. If the Server sees that this order identifier has changed in relation to the ServerOrderID, then it should reject this message with a s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED",
            "",
            "In the case where the order modification cannot be performed because the ServerOrderID does not exist, the Server will send a s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED and ClientOrderID set to the given ClientOrderID in this message. ServerOrderID will be unset because an invalid server order identifier was given."
          ]
        },
        {
          "name": "Price1",
          "type": "int64",
          "description": [
            "For orders that require a price, this is the new order price.",
            "",
            "This is an integer value. This is calculated by multiplying the actual order price by the FloatToIntPriceMultiplier field from the s_SecurityDefinitionResponse message for the Symbol of the order.",
            "",
            "This value can be left unset indicating to the Server that Price1 must not change and only the Quantity. In this case it is necessary to set Price1IsSet to a 0 value."
          ]
        },
        {
          "name": "Price2",
          "type": "int64",
          "description": [
            "For Stop-Limit orders this is the new Limit price. For other order types it is not used.",
            "",
            "This is an integer value. This is calculated by multiplying the actual order price by the FloatToIntPriceMultiplier field from the s_SecurityDefinitionResponse message for the Symbol of the order.",
            "",
            "This value can be left unset indicating to the Server that Price2 must not change and only the Quantity. In this case it is necessary to set Price2IsSet to a 0 value."
          ]
        },
        {
          "name": "Divisor",
          "type": "float",
          "description": [
            "This is the FloatToIntPriceMultiplier field received from the s_SecurityDefinitionResponse message for the Symbol of the order.",
            "",
            "The Server needs to divide the Price1 or Price2 fields by this Divisor to arrive at the original floating-point value."
          ]
        },
        {
          "name": "Quantity",
          "type": "int64",
          "description": [
            "This is the new order quantity. It this is 0, then this means the order quantity must not be changed by the Server.",
            "",
            "If the order has partially filled, then this is going to be the order quantity which also includes the amount which has partially filled.",
            "",
            "For example, if the original quantity was 10 and there has been a partial fill of 3, the Client wants a fill of 2 more making a total of 5, then the Client will set this to 5."
          ]
        },
        {
          "name": "Price1IsSet",
          "type": "unsigned int8",
          "description": [
            "When this field is set to a nonzero value, it indicates that Price1 is set and the server should use the value, if it applies to the order type.",
            "",
            "The default value is 1."
          ]
        },
        {
          "name": "Price2IsSet",
          "type": "unsigned int8",
          "description": [
            "When this field is set to a nonzero value, it indicates that Price2 is set and the server should use the value, if it applies to the order type.",
            "",
            "The default value is 1."
          ]
        },
        {
          "name": "TimeInForce",
          "type": "TimeInForceEnum",
          "description": [
            "The Time in Force for the order. For a list of Time in Force values, refer to TimeInForceEnum.",
            "",
            "The default value is TIF_UNSET.",
            "",
            "When this field is set to a value other than TIF_UNSET, it indicates that the TimeInForce is being changed.",
            "",
            "If the server does not support changing the Time in Force of the order, it needs to reject this s_CancelReplaceOrder_INT message and send an s_OrderUpdate message with the OrderUpdateReason set to ORDER_CANCEL_REPLACE_REJECTED.",
            "",
            "The server is under no obligation to support changing the Time in Force."
          ]
        },
        {
          "name": "GoodTillDateTime",
          "type": "t_DateTime",
          "description": [
            "In the case of when the TimeInForce field is TIF_GOOD_TILL_DATE_TIME, this specifies the expiration Date-Time of the order."
          ]
        },
        {
          "name": "UpdatePrice1OffsetToParent",
          "type": "uint8_t",
          "description": [
            "This is an optional field. If modifying a child order which is part of a Server managed bracket order, then when this variable is set to 1 it provides an indication to the Server to update the internal server managed price offset to the parent order that this child order has to the parent.",
            "",
            "This will ensure the Server will maintain the proper offset of the child order to the fill price of the parent order when the parent order fills."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_CurrentPositionsReject": {
      "name": "s_CurrentPositionsReject",
      "description": [
        "If the Server is unable to serve the request for an s_CurrentPositionsRequest message received, for a reason other than there not being any current Trade positions, then send this message to the Client.",
        "",
        "This must never be sent when there are actually no Trade Positions in the account or accounts requested."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "This is set to the RequestID field sent in the s_CurrentPositionsRequest message."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "Free-form text indicating the reason for the rejection.",
            ""
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_CurrentPositionsRequest": {
      "name": "s_CurrentPositionsRequest",
      "description": [
        "This is a message from the Client to the Server to request the current open Trade Positions."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The request identifier. The Server will send this back in the s_PositionUpdate response messages."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is an optional field. Leave this empty to request the Server to return all current open Trade Positions for all trade accounts on the logged in Username. Otherwise, specify a particular trade account to request Trade Positions for."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_EncodingRequest": {
      "name": "s_EncodingRequest",
      "description": [
        "Requirements: Not required for Servers. Required for Clients if the Client needs to discover the encoding the Server uses.",
        "",
        "The s_EncodingRequest message is a message requesting to change the DTC encoding for messages.",
        "",
        "For the procedure to work with this message, refer to Encoding Request Sequence."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor.",
            "",
            "To determine the field number for JSON, refer to this message type constant in the DTCProtocol.h file."
          ]
        },
        {
          "name": "ProtocolVersion",
          "type": "int32",
          "description": [
            "The protocol version supported by the Client. Automatically set by constructor."
          ]
        },
        {
          "name": "Encoding",
          "type": "EncodingEnum",
          "description": [
            "The DTC message encoding the Client is requesting the Server to use."
          ]
        },
        {
          "name": "ProtocolType",
          "type": "char",
          "description": [
            "The ProtocolType field needs to be set to the text string \"DTC\".",
            "",
            "This field is automatically set with the binary encoding data structures.",
            "",
            "This field is used for the Server to know that it is communicating with a DTC compliant Client."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_EncodingResponse": {
      "name": "s_EncodingResponse",
      "description": [
        "Requirements: Required for Servers. Required for Clients if the Client needs to discover the encoding the Server uses.",
        "",
        "The s_EncodingResponse is a message from the Server to the Client, telling the Client what message encoding it must use to communicate with the Server.",
        "",
        "For the procedure to work with this message, refer to Encoding Request Sequence."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor.",
            "",
            "To determine the field number for JSON, refer to this message type constant in the DTCProtocol.h file."
          ]
        },
        {
          "name": "ProtocolVersion",
          "type": "int32",
          "description": [
            "This field is automatically set by the constructor."
          ]
        },
        {
          "name": "Encoding",
          "type": "EncodingEnum",
          "description": [
            "The DTC message encoding to be used.",
            "",
            "This value may be different from the requested DTC encoding if the Server does not support the requested encoding from the Client."
          ]
        },
        {
          "name": "ProtocolType",
          "type": "char",
          "description": [
            "The ProtocolType field needs to be set to the text string \"DTC\".",
            "",
            "This field is automatically set with the binary encoding data structures.",
            "",
            "This field is used for the Client to know that it is communicating with a DTC compliant Server."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_ExchangeListRequest": {
      "name": "s_ExchangeListRequest",
      "description": [
        "This is a message from the Client to the Server to request a list of all available exchanges from the Server.",
        "",
        "The server will respond with a separate s_ExchangeListResponse message for each exchange.",
        "",
        "In the case where the Server does not specify an exchange with its symbols, then the Server should provide a single response with an empty Exchange."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique identifier for this request. This same identifier will be returned in the s_ExchangeListResponse message."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_ExchangeListResponse": {
      "name": "s_ExchangeListResponse",
      "description": [
        "The server will return this message for each supported exchange.",
        "",
        "If there are no exchanges to return in response to a request, send through one of these messages with the RequestID set and IsFinalMessage = 1. Leave all other members in the default state and the Client will recognize there are no Exchanges."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The RequestID sent in the request by the Client."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The exchange identifier that the Server uses to identify a particular exchange."
          ]
        },
        {
          "name": "IsFinalMessage",
          "type": "unsigned int8",
          "description": [
            "1 = final message in batch."
          ]
        },
        {
          "name": "Description",
          "type": "char",
          "description": [
            "The complete exchange description."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_GeneralLogMessage": {
      "name": "s_GeneralLogMessage",
      "description": [
        "This message from the Server to the Client is a message which is to be added to a log file indicating information from the server. For example, if there are informational messages to provide during the process of a logon, this can be used to send those messages to a Client. A Client should never implement this message as a pop-up type message. Instead, it should be treated as a lower-level log type message.",
        "",
        "This message can be sent even before a s_LogonResponse is given."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "MessageText",
          "type": "char",
          "description": [
            "The message text to the Client which it should add to its log.",
            ""
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_Heartbeat": {
      "name": "s_Heartbeat",
      "description": [
        "Both the Client and the Server need to send to the other side a heartbeat at the interval specified by the HeartbeatIntervalInSeconds member in the s_LogonRequest.",
        "",
        "There are no required member fields to set in this message. The purpose of the s_Heartbeat message is so that the Client or the Server can determine whether the other side is still connected.",
        "",
        "It is recommended that if there is a loss of s_Heartbeat messages from the other side, for twice the amount of the HeartbeatIntervalInSeconds time that it is safe to assume that the other side is no longer present and the network socket should be then gracefully closed.",
        "",
        "The Server may choose to send a heartbeat message every second to the Client. In this particular case, it is recommended the Client use a minimum time of about 5 to 10 seconds without a heartbeat to determine the loss of the connection rather than the standard of twice the amount of the heartbeat time interval."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor.",
            "",
            "To determine the field number for JSON, refer to this message type constant in the DTCProtocol.h file."
          ]
        },
        {
          "name": "NumDroppedMessages (Optional)",
          "type": "unsigned int32",
          "description": [
            "The server can optionally set this to indicate the number of messages that were not sent through to the Client because of a buffer overflow on the server side because the Client was not processing the data fast enough or some other network issue.",
            "",
            "The Server should only drop high-frequency market data messages. In no case should a server ever drop trading related messages."
          ]
        },
        {
          "name": "CurrentDateTime (Optional)",
          "type": "t_DateTime",
          "description": [
            "This Date-Time value can be optionally set by the Client/Server when sending this message."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": true
    },
    "s_HistoricalAccountBalancesReject": {
      "name": "s_HistoricalAccountBalancesReject",
      "description": [
        "This is a message from the Server to the Client to reject a s_HistoricalAccountBalancesRequest request."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique request identifier sent in the corresponding request message."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "The text reason the s_HistoricalAccountBalancesRequest message was rejected."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_HistoricalAccountBalancesRequest": {
      "name": "s_HistoricalAccountBalancesRequest",
      "description": [
        "This is a message from the Client to the Server to request a history of Cash Balance changes for the specified Trade Account.",
        "",
        "The Server will respond with multiple HISTORICAL_ACCOUNT_BALANCE_RESPONSE messages or reject he request with a message.",
        "",
        "The Server will set the RequestID in the HISTORICAL_ACCOUNT_BALANCE_RESPONSE message to match the RequestID in the s_HistoricalAccountBalancesRequest."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "A unique request identifier for this request."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is a required field. Set to the particular Trade Account for which to request historical Account Balance data."
          ]
        },
        {
          "name": "StartDateTime",
          "type": "t_DateTime",
          "description": [
            "Set this to the Date-Time that the server is to send historical cash balance updates starting with."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_HistoricalAccountBalancesResponse": {
      "name": "s_HistoricalAccountBalancesResponse",
      "description": [
        "This is a message from the Server to the Client in response to a s_HistoricalAccountBalancesRequest message.",
        "",
        "There is a separate message for each Cash Balance update."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The same RequestID set in the s_HistoricalAccountBalancesRequest message."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTimeWithMilliseconds",
          "description": [
            "The timestamp of the Cash Balance update."
          ]
        },
        {
          "name": "CashBalance",
          "type": "double",
          "description": [
            "The Cash Balance in the currency of the account."
          ]
        },
        {
          "name": "AccountCurrency",
          "type": "char",
          "description": [
            "The account currency. This is the standard ISO Currency Code for the currency."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "The Trade Account identifier of the Cash Balance update."
          ]
        },
        {
          "name": "IsFinalResponse",
          "type": "unsigned uint8",
          "description": [
            "Set to 1 to indicate if this is the final response. Otherwise, the value is zero."
          ]
        },
        {
          "name": "NoAccountBalances",
          "type": "unsigned uint8",
          "description": [
            "Set to 1 to indicate if there are no historical Cash Balance updates to return in response to a s_HistoricalAccountBalancesRequest. Otherwise, the value is zero."
          ]
        },
        {
          "name": "InfoText",
          "type": "char",
          "description": [
            "Any related information text for the Cash Balance update."
          ]
        },
        {
          "name": "TransactionId",
          "type": "char",
          "description": [
            "The transaction identifier for the Cash Balance update.",
            ""
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_HistoricalOrderFillResponse": {
      "name": "s_HistoricalOrderFillResponse",
      "description": [
        "This is a message from the Server to the Client providing an individual historical order fill in response to a s_HistoricalOrderFillsRequest message.",
        "",
        "The Server is expected to send this message to the Client in response to a s_HistoricalOrderFillsRequest message even when there are no order fills to return. If there are no order fills to return, it needs to set the NoOrderFills field to 1."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The RequestID specified in the s_HistoricalOrderFillsRequest message from the Client."
          ]
        },
        {
          "name": "TotalNumberMessages",
          "type": "int32",
          "description": [
            "This indicates the total number of order fill reports when a batch of reports is being sent. If there is only one order fill report being sent, this will be 1."
          ]
        },
        {
          "name": "MessageNumber",
          "type": "int32",
          "description": [
            "This indicates the 1-based index of the order fill report when a batch of reports is being sent. If there is only one order fill report being sent, this will be 1."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol the order fill is for."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol."
          ]
        },
        {
          "name": "ServerOrderID",
          "type": "char",
          "description": [
            "This is the Server provided order identifier that the order fill was associated with."
          ]
        },
        {
          "name": "BuySell",
          "type": "BuySellEnum",
          "description": [
            "This is the fill side and can be either BUY or SELL."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "This is the price of the order fill."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTime",
          "description": [
            "This is the Date and Time of the order fill."
          ]
        },
        {
          "name": "Quantity",
          "type": "double",
          "description": [
            "This is the quantity of the order fill."
          ]
        },
        {
          "name": "UniqueExecutionID",
          "type": "char",
          "description": [
            "This is the unique execution identifier for the order fill."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is the trade account that the order fill is associated with."
          ]
        },
        {
          "name": "OpenClose",
          "type": "OpenCloseTradeEnum",
          "description": [
            "Indicates whether this is an opening or closing order fill.",
            "",
            "This field is optional."
          ]
        },
        {
          "name": "NoOrderFills",
          "type": "unsigned int8",
          "description": [
            "Set to a numeric 1 to indicate there are no historical order fills.",
            "",
            "If there are no order fills to return, the Server needs to set this to 1 and send through 1 s_HistoricalOrderFillResponse message to indicate there are no order fills. Otherwise, leave this field at the default of 0."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_HistoricalOrderFillsReject": {
      "name": "s_HistoricalOrderFillsReject",
      "description": [
        "If the Server is unable to serve the request for a s_HistoricalOrderFillsRequest message received, for a reason other than there not being any historical order fills, then send this message to the Client."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "This is set to the RequestID field sent in the s_HistoricalOrderFillsRequest message."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "Free-form text indicating the reason for rejection."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_HistoricalOrderFillsRequest": {
      "name": "s_HistoricalOrderFillsRequest",
      "description": [
        "This is a message from the Client to the Server to request order fills/executions for an order or orders."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "A unique request identifier. The Server will return the same identifier in the response."
          ]
        },
        {
          "name": "ServerOrderID",
          "type": "char",
          "description": [
            "Leave empty if want all order fills. Otherwise, request order fills for given Server Order identifier."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This specifies the particular Trade Account to request order fills for."
          ]
        },
        {
          "name": "NumberOfDays",
          "type": "int32",
          "description": [
            "The NumberOfDays field is ignored by the Server when StartDateTime is set.",
            "",
            "The NumberOfDays field specifies to the Server to return order fills counting from the current day back by the specified number of days.",
            "",
            "If NumberOfDays and StartDateTime are both not set or 0, the Server will return all historical order fills available."
          ]
        },
        {
          "name": "StartDateTime",
          "type": "t_DateTime",
          "description": [
            "The NumberOfDays field is ignored by the Server when StartDateTime is set.",
            "",
            "The StartDateTime field specifies to the Server to return order fills starting with date time specified.",
            "",
            "If NumberOfDays and StartDateTime are both not set or 0, the Server will return all historical order fills available."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_HistoricalPriceDataRecordResponse": {
      "name": "s_HistoricalPriceDataRecordResponse",
      "description": [
        "The s_HistoricalPriceDataTickRecordResponse message is used when the RecordInterval field in a historical data request message is set to a value greater than INTERVAL_TICK. For example, if the RecordInterval is INTERVAL_1_MINUTE, then a message of this type will contain data for a 1 minute timeframe with a start time specified by the StartDateTime field.",
        "",
        "Even when RecordInterval is INTERVAL_TICK, the s_HistoricalPriceDataTickRecordResponse message can still be used instead of s_HistoricalPriceDataTickRecordResponse.",
        "",
        "This message can be part of a compressed series of messages of this same type, if the Client requested compression be used."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The numeric identifier from the historical price data request that this response is in response to."
          ]
        },
        {
          "name": "StartDateTime",
          "type": "t_DateTime",
          "description": [
            "The starting Date-Time in UTC of the data record in this message.",
            "",
            "It is part of the DTC Protocol specification that this must be the starting Date-Time of the data record."
          ]
        },
        {
          "name": "OpenPrice",
          "type": "double",
          "description": [
            "The Open price of the data record in this message."
          ]
        },
        {
          "name": "HighPrice",
          "type": "double",
          "description": [
            "The High price of the data record in this message.",
            "",
            "In the case where NumTrades is 1, the HighPrice field can be the Ask/Offer price at the time of the trade. In this case the OpenPrice field needs to be 0 in this case."
          ]
        },
        {
          "name": "LowPrice",
          "type": "double",
          "description": [
            "The Low price of the data record in this message.",
            "",
            "In the case where NumTrades is 1, the LowPrice field can be the Bid price at the time of the trade. In this case the OpenPrice field needs to be 0 in this case."
          ]
        },
        {
          "name": "LastPrice",
          "type": "double",
          "description": [
            "The Last price of the data record in this message."
          ]
        },
        {
          "name": "Volume",
          "type": "double",
          "description": [
            "The Volume of this data record of this message.",
            "",
            "(union)"
          ]
        },
        {
          "name": "OpenInterest",
          "type": "unsigned int32"
        },
        {
          "name": "NumTrades",
          "type": "unsigned int32",
          "description": [
            "The Open Interest or Number of Trades of this data record in this message."
          ]
        },
        {
          "name": "BidVolume",
          "type": "double",
          "description": [
            "The volume of trades at the bid price or lower of the data record in this message.",
            "",
            "In the case where this message consists of a single trade, if the trade was at the Ask, then BidVolume must be zero."
          ]
        },
        {
          "name": "AskVolume",
          "type": "double",
          "description": [
            "The volume of trades at the ask price or higher of the data record in this message.",
            "",
            "In the case where this message consists of a single trade, if the trade was at the Bid, then AskVolume must be zero."
          ]
        },
        {
          "name": "IsFinalRecord",
          "type": "unsigned int8",
          "description": [
            "Set to 1 to indicate final record in response to the historical price data request.",
            "",
            "The default is 0 meaning there are more records to follow."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_HistoricalPriceDataReject": {
      "name": "s_HistoricalPriceDataReject",
      "description": [
        "When the Server rejects a historical price data request from the Client, a s_HistoricalPriceDataReject message will be sent.",
        "",
        "This message is never compressed."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The numeric identifier from the historical price data request that this response is in response to."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "Text reason for rejection."
          ]
        },
        {
          "name": "RejectReasonCode",
          "type": "HistoricalPriceDataRejectReasonCodeEnum",
          "description": [
            "Integer identifier identifying the reason for the rejection. For the text reason, refer to the RejectText field."
          ]
        },
        {
          "name": "RetryTimeInSeconds",
          "type": "unsigned int16",
          "description": [
            "This is an optional field from the Server. This field will normally be zero.",
            "",
            "If a retry is intended to be performed, the server may give an indication of how long to wait in seconds. This field indicates that.",
            "",
            "This field is not recommended to be used. If it is used, it is really an indication of a substandard Server."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_HistoricalPriceDataRequest": {
      "name": "s_HistoricalPriceDataRequest",
      "description": [
        "This is a message from the Client to the Server for requesting historical price data.",
        "",
        "This request can be on the same or a separate network socket connection compared to the streaming market data. This is going to be specified by the Server."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "Unique integer identifier to identify this request. The historical price data response messages from the Server will contain this identifier so they can be matched up with the request from the Client. This identifier only needs to be unique to the historical price data messages. It can conflict with identifiers used with other classes of messages."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The Symbol historical price data is requested for."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "Optional: The exchange for the Symbol."
          ]
        },
        {
          "name": "RecordInterval",
          "type": "HistoricalDataIntervalEnum",
          "description": [
            "The interval/timeframe of each record for the time range of the historical data requested. Can be any of:",
            "",
            "INTERVAL_TICK = 0",
            "INTERVAL_1_SECOND = 1",
            "INTERVAL_1_MINUTE = 60",
            "INTERVAL_1_DAY = 86400",
            "INTERVAL_1_WEEK = 604800"
          ]
        },
        {
          "name": "StartDateTime",
          "type": "t_DateTime",
          "description": [
            "The starting Date-Time for the historical price data returned, if available for the specified Symbol.",
            "",
            "If it is not set or set to 0, then this is a request to the Server to return data starting at the earliest data available for the Symbol."
          ]
        },
        {
          "name": "EndDateTime",
          "type": "t_DateTime",
          "description": [
            "The ending Date-Time for the historical price data returned.",
            "",
            "If it is not set or set to 0, then this is a request to the Server to return data ending at the very latest data available for the symbol."
          ]
        },
        {
          "name": "MaxDaysToReturn",
          "type": "unsigned int32",
          "description": [
            "MaxDaysToReturn specifies the maximum number of days of data the Server needs to return, if available, counting back from the latest Date-Time of data available for the symbol, or counting back from EndDateTime if it is set to a value other than 0.",
            "",
            "If MaxDaysToReturn is set to 0, then it is ignored by the Server."
          ]
        },
        {
          "name": "UseZLibCompression",
          "type": "unsigned int8",
          "description": [
            "Set this to 1, to request the Server use ZLib compression in the response when returning data. The Server can optionally ignore this if it does not support compression or does not want to use compression for any reason.",
            "",
            "The s_HistoricalPriceDataResponseHeader will not be compressed. Only the historical price data records themselves.",
            "",
            "When receiving a batch of data on the network socket, give it to ZLib. It will respond with some uncompressed data and you put that into a buffer and then process as many complete historical data messages out of it that you can. Continue with this process until finished."
          ]
        },
        {
          "name": "RequestDividendAdjustedStockData",
          "type": "unsigned int8",
          "description": [
            "In the case of a stock symbol, setting this to a value of 1 will request dividend adjusted data from the Server, if available. It is optional for the Server to support this."
          ]
        },
        {
          "name": "Integer_1",
          "type": "unsigned int16",
          "description": [
            "A general purpose 2 byte flag field from the Client to the Server which can be used for any special purpose the Client and Server require."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_HistoricalPriceDataResponseHeader": {
      "name": "s_HistoricalPriceDataResponseHeader",
      "description": [
        "When a historical price data request is not rejected, this message header will begin the historical price data response from the Server. There will be one s_HistoricalPriceDataResponseHeader message sent ahead of the s_HistoricalPriceDataRecordResponse / s_HistoricalPriceDataTickRecordResponse messages. If the NoRecordsToReturn field is nonzero, then there are no further records that will be sent by the Server in response to the request by the Client.",
        "",
        "This message is never compressed."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The numeric identifier from the historical price data request that this response is in response to."
          ]
        },
        {
          "name": "RecordInterval",
          "type": "HistoricalDataIntervalEnum",
          "description": [
            "The data interval of type HistoricalDataIntervalEnum requested by the Client."
          ]
        },
        {
          "name": "UseZLibCompression",
          "type": "unsigned int8",
          "description": [
            "1 = All subsequent messages are using standard ZLib compression. 0 = no compression."
          ]
        },
        {
          "name": "NoRecordsToReturn",
          "type": "unsigned int8",
          "description": [
            "If there are no records to return in response to the request and there was no error, this will be set to 1."
          ]
        },
        {
          "name": "IntToFloatPriceDivisor",
          "type": "float",
          "description": [
            "This field is no longer used."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_HistoricalPriceDataTickRecordResponse": {
      "name": "s_HistoricalPriceDataTickRecordResponse",
      "description": [
        "This is the response message when the RecordInterval field in a historical data request message is set to INTERVAL_TICK.",
        "",
        "If the Server does not support 1 Tick historical data or does not have 1 Tick historical data for the specified time period, it can respond with s_HistoricalPriceDataRecordResponse messages instead. The Server must only respond with messages of one type in response to a particular historical price data request.",
        "",
        "This message can be part of a compressed series of messages of this same type, if the Client requested compression be used."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The numeric identifier from the historical price data request that this response is in response to."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTimeWithMilliseconds",
          "description": [
            "The Date-Time of the trade."
          ]
        },
        {
          "name": "AtBidOrAsk",
          "type": "AtBidOrAskEnum",
          "description": [
            "This indicates whether the trade occurred at the Bid price or lower or at the Ask price or higher."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "The price of the trade."
          ]
        },
        {
          "name": "Volume",
          "type": "double",
          "description": [
            "The volume of the trade."
          ]
        },
        {
          "name": "IsFinalRecord",
          "type": "unsigned int8",
          "description": [
            "Set to 1 to indicate final record in response to the historical price data request.",
            "",
            "The default is 0 meaning there are more records to follow."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_Logoff": {
      "name": "s_Logoff",
      "description": [
        "A s_Logoff is a message which can be sent either by the Client or the Server to the other side. It indicates that the Client or the Server is logging off and going to be closing the connection.",
        "",
        "When one side receives this message, it should expect the connection will be closed. It should not be expected that any messages will follow the s_Logoff message, and it should close the network connection and consider it finished. The side receiving this message can send a s_Logoff message to the other side before closing the connection."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor.",
            "",
            "To determine the field number for JSON, refer to this message type constant in the DTCProtocol.h file."
          ]
        },
        {
          "name": "Reason",
          "type": "char",
          "description": [
            "Reason is a character string indicating the reason for the log off from either the Client or the Server."
          ]
        },
        {
          "name": "DoNotReconnect",
          "type": "unsigned int8",
          "description": [
            "When DoNotReconnect is set to a 1, this indicates to the other side that a reconnect to the opposite side should not occur automatically."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": true
    },
    "s_LogonRequest": {
      "name": "s_LogonRequest",
      "description": [
        "The s_LogonRequest message is sent from the Client to the Server requesting to logon to the Server.",
        "",
        "This is the very first message the Client sends to the Server before being allowed to send any other message other than the s_EncodingRequest."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor.",
            "",
            "To determine the field number for JSON, refer to this message type constant in the DTCProtocol.h file."
          ]
        },
        {
          "name": "ProtocolVersion",
          "type": "int32",
          "description": [
            "The protocol version supported by the Client. Automatically set by constructor."
          ]
        },
        {
          "name": "Username",
          "type": "char",
          "description": [
            "Optional username for the server to authenticate the Client."
          ]
        },
        {
          "name": "Password",
          "type": "char",
          "description": [
            "Optional password for the server to authenticate the Client."
          ]
        },
        {
          "name": "GeneralTextData",
          "type": "char",
          "description": [
            "Optional general-purpose text string. For example, this could be used to pass a license key that the Server may require."
          ]
        },
        {
          "name": "Integer_1",
          "type": "int32",
          "description": [
            "Optional. General-purpose integer."
          ]
        },
        {
          "name": "Integer_2",
          "type": "int32",
          "description": [
            "Optional. General-purpose integer."
          ]
        },
        {
          "name": "HeartbeatIntervalInSeconds",
          "type": "int32",
          "description": [
            "The interval in seconds that each side, the Client and the Server, needs to use to send s_Heartbeat messages to the other side.",
            "",
            "This should be a value from anywhere from 5 to 60 seconds.",
            "",
            "This field is required."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is an optional field and this should only be set to a Trade Account identifier if that is required to logon by the Server. this would only be implemented in rare cases. Usually this would be the case if the logon is bound to a particular Trade Account and not changeable after the log in.",
            "",
            "The server is still required to implement the s_TradeAccountsRequest and s_TradeAccountResponsemessages."
          ]
        },
        {
          "name": "HardwareIdentifier",
          "type": "char",
          "description": [
            "Optional: This is the computer hardware identifier. The intention of this is that this will be implemented by the Client program developer on a case-by-case basis for specific Data/Trading service providers. It will be a reasonable implementation to uniquely identify a system and will not be publicly disclosed. It will never contain personally identifiable information."
          ]
        },
        {
          "name": "ClientName",
          "type": "char",
          "description": [
            "The Client name. This is a free-form text string."
          ]
        },
        {
          "name": "MarketDataTransmissionInterval",
          "type": "int32",
          "description": [
            "This is an optional field to be used by the Server which specifies in milliseconds, the delay with transmitting market data to the Client.",
            "",
            "For reasons of efficiency, the server may buffer data over this timeframe, and send data after this time frame expires."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_LogonResponse": {
      "name": "s_LogonResponse",
      "description": [
        "This is a response message indicating either success or an error logging on to the Server."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor.",
            "",
            "To determine the field number for JSON, refer to this message type constant in the DTCProtocol.h file."
          ]
        },
        {
          "name": "ProtocolVersion",
          "type": "int32",
          "description": [
            "This is automatically set by the constructor."
          ]
        },
        {
          "name": "Result",
          "type": "LogonStatusEnum",
          "description": [
            "This can be set to one of the following constants:",
            "",
            "LOGON_SUCCESS",
            "LOGON_ERROR",
            "LOGON_ERROR_NO_RECONNECT",
            "LOGON_RECONNECT_NEW_ADDRESS",
            "LOGON_ERROR_NO_RECONNECT means that there has been an error logging on and the Client should not try to reconnect.",
            "",
            "The Server can set this field to LOGON_RECONNECT_NEW_ADDRESS to instruct the Client to reconnect to the Server at a different address. The new address is specified through the ReconnectAddress field. This supports dynamic connections to a server farm."
          ]
        },
        {
          "name": "ResultText",
          "type": "char",
          "description": [
            "Optional freeform text to provide information related to a successful or unsuccessful logon. The Client will display this text to the user."
          ]
        },
        {
          "name": "ReconnectAddress",
          "type": "char",
          "description": [
            "Server address/IP number and optional port number to reconnect to. Format: [Server Address:Port Number]. Only used if Result is set to LOGON_RECONNECT_NEW_ADDRESS."
          ]
        },
        {
          "name": "Integer_1",
          "type": "int32",
          "description": [
            "Optional. General-purpose integer for the Server to communicate to the Client an integer value on logon."
          ]
        },
        {
          "name": "ServerName",
          "type": "char",
          "description": [
            "Optional free-form text for the Server to fill out.",
            "",
            "It is recommended that the Server fill this in with descriptive text identifying itself to the Client.",
            "",
            "The length of this text string is 60 characters when fixed length strings are used."
          ]
        },
        {
          "name": "MarketDepthUpdatesBestBidAndAsk",
          "type": "unsigned int8",
          "description": [
            "Set this to 1 to indicate that the Server will only be sending market depth updates and not best bid and ask updates. The Client will use depth at level 1 to update the best bid and ask prices.",
            "",
            "Some Clients will maintain separate best bid and ask prices from market depth data."
          ]
        },
        {
          "name": "TradingIsSupported",
          "type": "unsigned int8",
          "description": [
            "Set this to 1 to indicate the Server supports trading. Otherwise, the Client will not send through any trading messages."
          ]
        },
        {
          "name": "OCOOrdersSupported",
          "type": "unsigned int8",
          "description": [
            "Set this to 1 to indicate the Server supports OCO orders."
          ]
        },
        {
          "name": "OrderCancelReplaceSupported",
          "type": "unsigned int8",
          "description": [
            "Set this to 0 if Server does not support the s_CancelReplaceOrder message."
          ]
        },
        {
          "name": "SymbolExchangeDelimiter",
          "type": "char",
          "description": [
            "Some Clients will usually consider the Symbol and Exchange fields as a single text string. If the Server will be using the Exchange field in DTC messages that have a Symbol and Exchange fields, it must specify the SymbolExchangeDelimiter field to provide a standard delimiter for the Client to use to combine the Symbol and the Exchange into a single text string.",
            "",
            "It is recommended to use a \"-\" or \".\". Examples of how the Client will then combine the Symbol and exchange.",
            "",
            "Symbol-Exchange",
            "Symbol.Exchange",
            "If this field is unset, then this is an indication to the Client that the Exchange field in DTC Protocol messages are not used.",
            "",
            "Even if the symbols supported by a Server have an Exchange text string, does not mean the Server has to use the Exchange field in DTC messages. The Server can combine the Symbol and the Exchange in Security Definition responses into the Symbol field only.",
            "",
            "When a Client sees that the SymbolExchangeDelimiter field is set, then it can use this delimiter to combine the Symbol and Exchange into a single text string. When the Client is setting the Symbol and Exchange in DTC messages, it needs to separate out the Symbol and Exchange from the larger text string and set those fields separately."
          ]
        },
        {
          "name": "SecurityDefinitionsSupported",
          "type": "unsigned int8",
          "description": [
            "Set to 1 if the Server supports Security Definition messages."
          ]
        },
        {
          "name": "HistoricalPriceDataSupported",
          "type": "unsigned int8",
          "description": [
            "Set this to 1 if the Server supports the s_HistoricalPriceDataRequest message."
          ]
        },
        {
          "name": "ResubscribeWhenMarketDataFeedAvailable",
          "type": "unsigned int8",
          "description": [
            "Set this to 1, so that when the Client receives a s_MarketDataFeedStatus indicating the market data feed is restored, it will resubscribe to market data and market depth for all of the symbols it was previously tracking."
          ]
        },
        {
          "name": "MarketDepthIsSupported",
          "type": "unsigned int8",
          "description": [
            "Set this to 1, if the Server supports the s_MarketDepthRequest message.",
            "",
            "The default is 0."
          ]
        },
        {
          "name": "OneHistoricalPriceDataRequestPerConnection",
          "type": "unsigned int8",
          "description": [
            "The server can optionally set the OneHistoricalPriceDataRequestPerConnection field to 1 in the s_LogonResponse message to indicate that it only will accept one historical price data request per network connection.",
            "",
            "After the first request is served or rejected, the network connection will be gracefully closed at the appropriate time by the Server. This method simplifies the serving of historical price data on the Server side and the implementation on the Client side when data compression is used."
          ]
        },
        {
          "name": "BracketOrdersSupported",
          "type": "unsigned int8",
          "description": [
            "Set this to 1 to indicate the Server supports bracket orders."
          ]
        },
        {
          "name": "UseIntegerPriceOrderMessages",
          "type": "unsigned int8",
          "description": [
            "With the integer trading messages discontinued as of August 2020, this field is no longer relevant."
          ]
        },
        {
          "name": "UsesMultiplePositionsPerSymbolAndTradeAccount",
          "type": "unsigned int8",
          "description": [
            "If the Server can report more than one Trade Position for a specific Symbol and Trade Account, then it needs to set UsesMultiplePositionsPerSymbolAndTradeAccount to 1.",
            "",
            "When the server has set to 1, it must always set PositionIdentifier in the s_PositionUpdate message to the identifier of the Trade Position.",
            "",
            "When the Client checks that this is set to 1, then it knows that it can expect there potentially can be more than one Trade Position for a specific Symbol and Trade Account being reported by the s_PositionUpdate messages. The Client can then handle this appropriately."
          ]
        },
        {
          "name": "MarketDataSupported",
          "type": "unsigned int8",
          "description": [
            "Set this to 1, if the Server supports the s_MarketDataRequest message.",
            "",
            "The default is 1."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataFeed": {
      "name": "s_MarketDataFeed",
      "description": [
        "The s_MarketDataFeed_SYMBOL_STATUS message is an optional message sent by the Server to indicate status of the market data feed for a particular symbol."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Status",
          "type": "MarketDataFeedStatusEnum",
          "description": [
            "This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market data feed is presently not available for the symbol. Or it can be set to s_MarketDataFeed_AVAILABLE, to indicate the market data feed has been restored for the symbol.",
            "",
            "Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE, will the market data feed for the symbol be considered lost."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the status in this message is for."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataFeedStatus": {
      "name": "s_MarketDataFeedStatus",
      "description": [
        "The s_MarketDataFeed_STATUS message is an optional message sent by the Server to indicate the overall status of the market data feed. This status applies to all symbols that have been subscribed to for market data."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Status",
          "type": "MarketDataFeedStatusEnum",
          "description": [
            "This can be set to s_MarketDataFeed_UNAVAILABLE, to indicate the market data feed is presently not available. Or it can be set to s_MarketDataFeed_AVAILABLE, to indicate the market data feed has been restored.",
            "",
            "Upon a connection to the server, s_MarketDataFeed_AVAILABLE is assumed to be the status. It is not until there has been expressly given s_MarketDataFeed_UNAVAILABLE, will the data feed be considered lost."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataReject": {
      "name": "s_MarketDataReject",
      "description": [
        "The s_MarketDataReject message is sent by the Server to the Client to reject a s_MarketDataRequest message for any reason."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "Free-form text explaining the reason for the reject."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataRequest": {
      "name": "s_MarketDataRequest",
      "description": [
        "The s_MarketDataRequest message will subscribe to market data for a particular Symbol or request a market data snapshot.",
        "",
        "The Server can also send market depth data in response to this message and not require a s_MarketDepthRequest."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestAction",
          "type": "RequestActionEnum",
          "description": [
            "This needs to be set to SUBSCRIBE to subscribe to market data for the Symbol from the Server. The Server will respond with an initial s_MarketDataSnapshot message and then provide MARKET_DATA_UPDATE_* updates as necessary.",
            "",
            "To unsubscribe, use UNSUBSCRIBE.",
            "",
            "To request only a s_MarketDataSnapshot message, set this to SNAPSHOT."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the identifier which will be used in all of the market data response messages. This identifier is used so that the Symbol and Exchange do not have to be passed back in response messages from the Server. This makes the market data feed bandwidth efficient.",
            "",
            "If the Server receives a s_MarketDataRequest for a Symbol and Exchange to subscribe to data for, that is currently subscribed to and this SymbolID is different, then the Server needs to reject it."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The Symbol that market data is requested for. Not set when unsubscribing."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "Optional Exchange. Not set when unsubscribing."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_MarketDataSnapshot": {
      "name": "s_MarketDataSnapshot",
      "description": [
        "The Server sends the s_MarketDataSnapshot message to the Client immediately after a successful s_MarketDataRequest message has been received from the Client and it has indicated to subscribe to the symbol or requested the snapshot of data.",
        "",
        "Any changes to the data fields within the s_MarketDataSnapshot message during the trading session will be sent by the Server to the Client through the corresponding MARKET_DATA_UPDATE_* messages.",
        "",
        "It is recommended that the s_MarketDataSnapshot be sent by the Server at the start of a new trading session.",
        "",
        "This message can be sent more often, however it is not intended to be sent frequently.",
        "",
        "This message type does not signify a trade has occurred. It should never be interpreted by the Client in that way.",
        "",
        "There is no need to send this when there is a new High or Low during the trading session. The Server should use the s_MarketDataUpdateSessionHigh or s_MarketDataUpdateSessionLow messages instead."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "SessionSettlementPrice",
          "type": "double",
          "description": [
            "The previous Settlement price when this message is sent before the market closes for the trading session. After the market has closed, this is the most recent Settlement price.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "SessionOpenPrice",
          "type": "double",
          "description": [
            "The Opening price for the trading session.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "SessionHighPrice",
          "type": "double",
          "description": [
            "The the High price for the trading session.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "SessionLowPrice",
          "type": "double",
          "description": [
            "The Low price for the trading session.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "SessionVolume",
          "type": "double",
          "description": [
            "The total Volume for the trading session.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "SessionNumTrades",
          "type": "unsigned int32",
          "description": [
            "The number of Trades for the trading session.",
            "",
            "For binary encoding, if this field is not set it needs to be set to UINT_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "OpenInterest",
          "type": "unsigned int32",
          "description": [
            "Contains the Open Interest for futures and options.",
            "",
            "For binary encoding, if this field is not set it needs to be set to UINT_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "BidPrice",
          "type": "double",
          "description": [
            "The latest best Bid price.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "AskPrice",
          "type": "double",
          "description": [
            "The latest best Ask price.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "AskQuantity",
          "type": "double",
          "description": [
            "The quantity of the orders at the Ask price.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "BidQuantity",
          "type": "double",
          "description": [
            "The quantity of the orders at the Bid price.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "LastTradePrice",
          "type": "double",
          "description": [
            "The most recent last trade price.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "LastTradeVolume",
          "type": "double",
          "description": [
            "The quantity/volume of the most recent last trade.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "LastTradeDateTime",
          "type": "t_DateTimeWithMilliseconds",
          "description": [
            "The Date-Time of the last trade."
          ]
        },
        {
          "name": "BidAskDateTime",
          "type": "t_DateTimeWithMilliseconds",
          "description": [
            "The Date-Time of the last Bid and Ask quote data update."
          ]
        },
        {
          "name": "SessionSettlementDateTime",
          "type": "t_DateTime4Byte",
          "description": [
            "The trading date the Settlement price is for. The time component is not normally considered relevant for this field.",
            "",
            "This field will be 0 if this field is not available from the data feed."
          ]
        },
        {
          "name": "TradingSessionDate",
          "type": "t_DateTime4Byte",
          "description": [
            "This is the Date of the trading session that the data contained in this snapshot message is for.",
            "",
            "The time component is not normally considered relevant for this field."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateBidAsk": {
      "name": "s_MarketDataUpdateBidAsk",
      "description": [
        "The Server sends this market data feed message to the Client when the best bid or ask price or size changes."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "BidPrice",
          "type": "double",
          "description": [
            "The current Bid price. Leave unset if there is no price available."
          ]
        },
        {
          "name": "BidQuantity",
          "type": "float",
          "description": [
            "The current number of contracts/shares at the bid price."
          ]
        },
        {
          "name": "AskPrice",
          "type": "double",
          "description": [
            "The current ask or offer price. Leave unset if there is no price available."
          ]
        },
        {
          "name": "AskQuantity",
          "type": "float",
          "description": [
            "The current number of contracts/shares at the ask price."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTime4Byte",
          "description": [
            "The Date-Time of the Bid and Ask update."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateBidAskFloatWithMicroseconds": {
      "name": "s_MarketDataUpdateBidAskFloatWithMicroseconds",
      "description": [
        "This message is optional.",
        "",
        "Sent by the Server to the Client when there is an update to the Bid Ask prices and/or quantities. This message is identical to the s_MarketDataUpdateBidAsk message except it does not have a timestamp. It needs to be sent when there is no change with the timestamp for the Bid Ask update as compared to the prior update.",
        "",
        "When the Server sends this message to the Client, the Client needs to use the prior received Bid Ask update timestamp to know what the timestamp is for this message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "BidPrice",
          "type": "float",
          "description": [
            "The current Bid price. Leave unset if there is no price available."
          ]
        },
        {
          "name": "BidQuantity",
          "type": "float",
          "description": [
            "The current number of contracts/shares at the bid price."
          ]
        },
        {
          "name": "AskPrice",
          "type": "float",
          "description": [
            "The current ask or offer price. Leave unset if there is no price available."
          ]
        },
        {
          "name": "AskQuantity",
          "type": "float",
          "description": [
            "The current number of contracts/shares at the ask price."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTimeWithMicrosecondsInt",
          "description": [
            "The timestamp of the trade in UNIX microseconds time format."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateBidAskNoTimeStamp": {
      "name": "s_MarketDataUpdateBidAskNoTimeStamp",
      "description": [
        "This message is optional.",
        "",
        "Sent by the Server to the Client when there is an update to the Bid Ask prices and/or quantities. This message is identical to the s_MarketDataUpdateBidAsk message except it does not have a timestamp. It needs to be sent when there is no change with the timestamp for the Bid Ask update as compared to the prior update.",
        "",
        "When the Server sends this message to the Client, the Client needs to use the prior received Bid Ask update timestamp to know what the timestamp is for this message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "BidPrice",
          "type": "float",
          "description": [
            "The current Bid price. Leave unset if there is no price available."
          ]
        },
        {
          "name": "BidQuantity",
          "type": "unsigned int32",
          "description": [
            "The current number of contracts/shares at the Bid price."
          ]
        },
        {
          "name": "AskPrice",
          "type": "float",
          "description": [
            "The current Ask or offer price. Leave unset if there is no price available."
          ]
        },
        {
          "name": "AskQuantity",
          "type": "unsigned int32",
          "description": [
            "The current number of contracts/shares at the Ask price."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateLastTradeSnapshot": {
      "name": "s_MarketDataUpdateLastTradeSnapshot",
      "description": [
        "Sent by the Server to the Client to update the last trade price, volume and date-time fields under conditions when there is not a trade.",
        "",
        "This message type does not signify a trade has occurred. It should never be interpreted by the Client in that way."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "LastTradePrice",
          "type": "double",
          "description": [
            "The most recent last trade price."
          ]
        },
        {
          "name": "LastTradeVolume",
          "type": "double",
          "description": [
            "The quantity/volume of the most recent last trade."
          ]
        },
        {
          "name": "LastTradeDateTime",
          "type": "t_DateTimeWithMilliseconds",
          "description": [
            "The Date-Time of the last trade."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateOpenInterest": {
      "name": "s_MarketDataUpdateOpenInterest",
      "description": [
        "The s_MarketDataUpdateOpenInterest message is sent by the Server to the Client to update the OpenInterest field previously sent through the s_MarketDataSnapshot message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "OpenInterest",
          "type": "unsigned int32",
          "description": [
            "The open interest for the symbol."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateSessionHigh": {
      "name": "s_MarketDataUpdateSessionHigh",
      "description": [
        "Sent by the Server to the Client to update the session High as the High price changes throughout the session."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "The session High price."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateSessionLow": {
      "name": "s_MarketDataUpdateSessionLow",
      "description": [
        "Sent by the Server to the Client to update the session Low as the Low price changes throughout the session."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "The session Low price."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateSessionNumTrades": {
      "name": "s_MarketDataUpdateSessionNumTrades",
      "description": [
        "Sent by the Server to the Client to update the trading session number of trades."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "NumTrades",
          "type": "int32",
          "description": [
            "The number of trades which have occurred during the current trading session."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateSessionOpen": {
      "name": "s_MarketDataUpdateSessionOpen",
      "description": [
        "Sent by the Server to the Client to update the session Open."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "The session Open price."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateSessionSettlement": {
      "name": "s_MarketDataUpdateSessionSettlement",
      "description": [
        "Sent by the Server to the Client to update the session settlement price when the session settlement price changes."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "The settlement price."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTime4Byte",
          "description": [
            "That trading date the settlement price is for. The time component is not normally considered relevant in this case."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateSessionVolume": {
      "name": "s_MarketDataUpdateSessionVolume",
      "description": [
        "Sent by the Server to the Client when the session trade Volume needs to be updated.",
        "",
        "The recommended rule for the Server to notify the Client of a change with the session trade volume to maintain bandwidth efficiency, is as follows: When a trade occurs for a symbol subscribed to, the Server will send a s_MarketDataUpdateTrade message to the Client. The Client should then increment its session trade volume value for the symbol by the value in the Volume field in this message.",
        "",
        "The Server will assume the Client is doing this. Therefore, when a trade occurs and the session trade volume does not equal the prior session trade volume plus the Volume for the most recent trade sent to the Client, then the Server must send out a s_MarketDataUpdateSessionVolume message to the client since the client calculation of the session trade volume is no longer correct.",
        "",
        "It is assumed that the reason for this inconsistency is due to trades included within the session trade volume which have not been sent out as normal trades.",
        "",
        "The Server should also send this message out at the frequency that the Server determines, such as every minute if there also has been a trade at that time."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Volume",
          "type": "double",
          "description": [
            "The total Volume for the session."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateTrade": {
      "name": "s_MarketDataUpdateTrade",
      "description": [
        "The Server sends this market data feed message to the Client when a trade occurs."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "AtBidOrAsk",
          "type": "AtBidOrAskEnum",
          "description": [
            "Indicator whether the trade occurred at the bid or ask."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "The price of the trade."
          ]
        },
        {
          "name": "Volume",
          "type": "double",
          "description": [
            "The volume of the trade."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTimeWithMilliseconds",
          "description": [
            "The Date-Time of the trade."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateTradeCompact": {
      "name": "s_MarketDataUpdateTradeCompact",
      "description": [
        "Sent by the Server to the Client when a trade occurs. This message is a more compact s_MarketDataUpdateTrade. For the price it uses a 4 byte float."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Price",
          "type": "float",
          "description": [
            "The price of the trade."
          ]
        },
        {
          "name": "Volume",
          "type": "float",
          "description": [
            "The volume of the trade."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTime4Byte",
          "description": [
            "The timestamp of the trade in UNIX time format. This does not contain the milliseconds for compactness."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "AtBidOrAsk",
          "type": "AtBidOrAskEnum",
          "description": [
            "Indicator whether the trade occurred at the Bid or Ask price."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateTradeNoTimestamp": {
      "name": "s_MarketDataUpdateTradeNoTimestamp",
      "description": [
        "This message is optional.",
        "",
        "Sent by the Server to the Client when a trade occurs. This message is identical to the s_MarketDataUpdateTrade_WITH_UNBUNDLED_INDICATOR_2 message except it does not have a timestamp. It needs to be sent when there is no change with the timestamp for the trade as compared to the prior trade.",
        "",
        "When the Server sends this message to the Client, the Client needs to use the prior received trade timestamp to know what the timestamp is for this message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Price",
          "type": "float",
          "description": [
            "The price of the trade."
          ]
        },
        {
          "name": "Volume",
          "type": "unsigned int32",
          "description": [
            "The volume of the trade."
          ]
        },
        {
          "name": "AtBidOrAsk",
          "type": "AtBidOrAskEnum8",
          "description": [
            "Indicator whether the trade occurred at the Bid or Ask price."
          ]
        },
        {
          "name": "UnbundledTradeIndicator",
          "type": "UnbundledTradeIndicatorEnum",
          "description": [
            "This is an optional field.",
            "",
            "For symbols on exchanges which support reporting individual trades which are part of a larger summary trade, this message field is used. It indicates whether the trade is part of a larger summary trrade and reported as an unbundled individual trade.",
            "",
            "The possible values are listed below.",
            "",
            "UNBUNDLED_TRADE_NONE = 0",
            "FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1",
            "LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2"
          ]
        },
        {
          "name": "TradeCondition",
          "type": "TradeConditionEnum",
          "description": [
            "This is an optional field. It usually applies to stock symbols.",
            "",
            "This field indicates a special condition which applies to the trade. The possible values are listed below.",
            "",
            "TRADE_CONDITION_NONE = 0",
            "TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1",
            "TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2"
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateTradeWithUnbundledIndicator2": {
      "name": "s_MarketDataUpdateTradeWithUnbundledIndicator2",
      "description": [
        "Sent by the Server to the Client when a trade occurs. This message has additional fields as compared to the s_MarketDataUpdateTrade message and also supports microsecond time stamping."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Price",
          "type": "float",
          "description": [
            "The price of the trade."
          ]
        },
        {
          "name": "Volume",
          "type": "unsigned int32",
          "description": [
            "The volume of the trade."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTimeWithMicrosecondsInt",
          "description": [
            "The timestamp of the trade in UNIX microseconds time format."
          ]
        },
        {
          "name": "AtBidOrAsk",
          "type": "AtBidOrAskEnum8",
          "description": [
            "Indicator whether the trade occurred at the Bid or Ask price."
          ]
        },
        {
          "name": "UnbundledTradeIndicator",
          "type": "UnbundledTradeIndicatorEnum",
          "description": [
            "This is an optional field.",
            "",
            "For symbols on exchanges which support reporting individual trades which are part of a larger summary trade, this message field is used. It indicates whether the trade is part of a larger summary trrade and reported as an unbundled individual trade.",
            "",
            "The possible values are listed below.",
            "",
            "UNBUNDLED_TRADE_NONE = 0",
            "FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE = 1",
            "LAST_SUB_TRADE_OF_UNBUNDLED_TRADE = 2"
          ]
        },
        {
          "name": "TradeCondition",
          "type": "TradeConditionEnum",
          "description": [
            "This is an optional field. It usually applies to stock symbols.",
            "",
            "This field indicates a special condition which applies to the trade. The possible values are listed below.",
            "",
            "TRADE_CONDITION_NONE = 0",
            "TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE = 1",
            "TRADE_CONDITION_ODD_LOT_EQUITY_TRADE = 2"
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDataUpdateTradingSessionDate": {
      "name": "s_MarketDataUpdateTradingSessionDate",
      "description": [
        "Sent by the Server to the Client to update the trading session Date."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Date",
          "type": "t_DateTime4Byte",
          "description": [
            "The date of the current trading session. The time component is not normally considered relevant in this case."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDepthReject": {
      "name": "s_MarketDepthReject",
      "description": [
        "The s_MarketDepthReject message is sent by the Server to the Client to reject a s_MarketDepthRequest message for any reason."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDepthRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "Free-form text explaining the reason for the reject."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDepthRequest": {
      "name": "s_MarketDepthRequest",
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestAction",
          "type": "RequestActionEnum",
          "description": [
            "This needs to be set to SUBSCRIBE to subscribe to market data for the Symbol from the Server. The server will respond with an initial MARKET_DEPTH_SNAPSHOT_LEVEL message and then provide MARKET_DEPTH_UPDATE_LEVEL updates as necessary.",
            "",
            "To unsubscribe, use UNSUBSCRIBE."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the identifier which will be used in all of the market depth data response messages.",
            "",
            "This SymbolID can be the same as the one used in the MARKET_DATA_REQUEST message for the same Symbol and Exchange.",
            "",
            "This identifier is used so that the Symbol does not have to be passed back in response messages from the Server. If the Server receives a MARKET_DEPTH_REQUEST for a Symbol and Exchange to subscribe to market depth data for, that is currently subscribed to and this SymbolID is different, then the Server should reject it."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol for the market depth request. Not set when unsubscribing."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol. Not set when unsubscribing."
          ]
        },
        {
          "name": "NumLevels",
          "type": "int32",
          "description": [
            "Number of depth levels requested. Not set when unsubscribing."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_MarketDepthSnapshotLevel": {
      "name": "s_MarketDepthSnapshotLevel",
      "description": [
        "This is a message sent by Server to provide the initial market depth data entries to the Client after the Client subscribes to market data or separately subscribes to market depth data. The Client will need to separately subscribe to market depth data if the Server requires it.",
        "",
        "Each message provides a single entry of depth data. Therefore, the Server will send multiple s_MarketDepthSnapshotLevel messages in a series in order for the Client to build up its initial market depth book.",
        "",
        "The first message will be identified by the IsFirstMessageInBatch field being set to 1. The last message will be identified by the IsLastMessageInBatch field being set to 1.",
        "",
        "In the case where the market depth book is empty, the Server still needs to send through one single message with the SymbolID set, IsFirstMessageInBatch equal to 1 and IsLastMessageInBatch equal to 1. All other members will be at the default values. The Client will understand this as an empty book."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest/s_MarketDepthRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Side",
          "type": "AtBidOrAskEnum",
          "description": [
            "Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK = 2, if this is an ask side market depth entry."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "This is the price of the market depth entry."
          ]
        },
        {
          "name": "Quantity",
          "type": "double",
          "description": [
            "This is the quantity of orders at the Price."
          ]
        },
        {
          "name": "Level",
          "type": "unsigned int16",
          "description": [
            "This indicates the level of the price within the market depth book. The minimum value is 1. There is no maximum value. A value of 1 is considered the best bid or ask data."
          ]
        },
        {
          "name": "IsFirstMessageInBatch",
          "type": "unsigned int8",
          "description": [
            "Set to 1 if this is the first message in the batch of messages."
          ]
        },
        {
          "name": "IsLastMessageInBatch",
          "type": "unsigned int8",
          "description": [
            "Set to 1 if this is the last message in a batch of messages. If there is only a single message to be sent, in case the market depth book is empty, then IsFirstMessageInBatch will equal 1 and IsLastMessageInBatch will equal 1."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDepthSnapshotLevelFloat": {
      "name": "s_MarketDepthSnapshotLevelFloat",
      "description": [
        "This is a message sent by Server to provide the initial market depth data entries to the Client after the Client subscribes to market data or separately subscribes to market depth data. The Client will need to separately subscribe to market depth data if the Server requires it.",
        "",
        "Each message provides a single entry of depth data. Therefore, the Server will send multiple s_MarketDepthSnapshotLevelFloat messages in a series in order for the Client to build up its initial market depth book.",
        "",
        "The first message will be identified by the IsFirstMessageInBatch field being set to 1. The last message will be identified by the IsLastMessageInBatch field being set to 1.",
        "",
        "In the case where the market depth book is empty, the Server still needs to send through one single message with the SymbolID set, IsFirstMessageInBatch equal to 1 and IsLastMessageInBatch equal to 1. All other members will be at the default values. The Client will understand this as an empty book."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest/s_MarketDepthRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Side",
          "type": "AtBidOrAskEnum8",
          "description": [
            "Set to AT_BID = 1 if this is a bid side market depth entry. Set to AT_ASK = 2, if this is an ask side market depth entry."
          ]
        },
        {
          "name": "Price",
          "type": "float",
          "description": [
            "This is the price of the market depth entry."
          ]
        },
        {
          "name": "Quantity",
          "type": "float",
          "description": [
            "This is the quantity of orders at the Price."
          ]
        },
        {
          "name": "FinalUpdateInBatch",
          "type": "FinalUpdateInBatchEnum",
          "description": [
            "An indicator whether this is the final message or not in a batch of updates."
          ]
        },
        {
          "name": "NumOrders",
          "type": "uint32_t",
          "description": [
            "The number of orders at the Price."
          ]
        },
        {
          "name": "Level",
          "type": "unsigned int16",
          "description": [
            "This indicates the level of the price within the market depth book. The minimum value is 1. There is no maximum value. A value of 1 is considered the best bid or ask data."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDepthUpdateLevel": {
      "name": "s_MarketDepthUpdateLevel",
      "description": [
        "Sent by the Server to the Client to Update/Insert or Delete a particular market depth price level in the market depth book maintained by the Client.",
        "",
        "Each s_MarketDepthUpdateLevel message updates one level of market depth on one side. An insert/update/delete model is used for market depth.",
        "",
        "The Client will need to determine the based upon the price, what particular market depth level is being updated, inserted or deleted.",
        "",
        "It is for this reason, that an insert/update is considered as one update type since it is possible to determine whether it is an insert or update based upon the existence of the price level in the existing market depth book on the Client side.",
        "",
        "What this means is that when the UpdateType field is MARKET_DEPTH_INSERT_UPDATE_LEVEL, it is considered an insert if the price level is not found on the particular side of the market depth being updated. It is considered an update, if the price level is found on the particular side of market depth being updated.",
        "",
        "This message uses a double datatype for the Price field. There is no level index. It is the responsibility of the Client to determine where in its market depth array it is maintaining where the insert/update/delete operation needs to occur.",
        "",
        "Since floating-point comparisons are not always precise, there should be a comparison made only to the number of decimal places the symbol specifies in its security definition. This can be determined through the s_SecurityDefinitionResponse::PriceDisplayFormat field."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDepthRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Side",
          "type": "AtBidOrAskEnum",
          "description": [
            "Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK)."
          ]
        },
        {
          "name": "Price",
          "type": "double",
          "description": [
            "The price level to insert, update or delete."
          ]
        },
        {
          "name": "Quantity",
          "type": "double",
          "description": [
            "The number of shares/contracts at the Price level. This will be 0 in the case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL."
          ]
        },
        {
          "name": "UpdateType",
          "type": "MarketDepthUpdateTypeEnum",
          "description": [
            "Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation or a MARKET_DEPTH_DELETE_LEVEL operation.",
            "",
            "MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth book on the specified side, the particular Price and Volume specified. It is an insert operation of the price level does not exist. It is an update operation if the price level already exists. In the case of insert, the other levels in the market depth book need to be shifted to make room for the new level.",
            "",
            "MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified side, the specified Price level. The other levels need to be shifted to fill in the missing level. In this particular case the Quantity is ignored and will be 0."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTimeWithMilliseconds",
          "description": [
            "The Date-Time of the market depth update."
          ]
        },
        {
          "name": "NumOrders",
          "type": "uint32_t",
          "description": [
            "The number of orders at the Price."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDepthUpdateLevelFloatWithMilliseconds": {
      "name": "s_MarketDepthUpdateLevelFloatWithMilliseconds",
      "description": [
        "Sent by the Server to the Client to Update/Insert or Delete a particular market depth price level in the market depth book maintained by the Client.",
        "",
        "This message is a more compact version of the s_MarketDepthUpdateLevel message. For the Price and Quantity fields, it uses a 4 byte float for compactness. It also supports millisecond precision for the timestamp."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDepthRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "DateTime",
          "type": "t_DateTimeWithMillisecondsInt",
          "description": [
            "The Date-Time of the market depth update with millisecond precision.",
            "",
            "This is an integer representing the number of milliseconds since the UNIX Epoch."
          ]
        },
        {
          "name": "Side",
          "type": "AtBidOrAskEnum",
          "description": [
            "Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK)."
          ]
        },
        {
          "name": "Price",
          "type": "float",
          "description": [
            "The price level to insert, update or delete."
          ]
        },
        {
          "name": "Quantity",
          "type": "float",
          "description": [
            "The number of shares/contracts at the Price level. This will be 0 in the case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL."
          ]
        },
        {
          "name": "UpdateType",
          "type": "MarketDepthUpdateTypeEnum",
          "description": [
            "Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation or a MARKET_DEPTH_DELETE_LEVEL operation.",
            "",
            "MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth book on the specified side, the particular Price and Volume specified. It is an insert operation of the price level does not exist. It is an update operation if the price level already exists. In the case of insert, the other levels in the market depth book need to be shifted to make room for the new level.",
            "",
            "MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified side, the specified Price level. The other levels need to be shifted to fill in the missing level. In this particular case the Quantity is ignored and will be 0."
          ]
        },
        {
          "name": "NumOrders",
          "type": "uint32_t",
          "description": [
            "The number of orders at the Price."
          ]
        },
        {
          "name": "FinalUpdateInBatch",
          "type": "FinalUpdateInBatchEnum",
          "description": [
            "An indicator whether this is the final message or not in a batch of updates."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_MarketDepthUpdateLevelNoTimestamp": {
      "name": "s_MarketDepthUpdateLevelNoTimestamp",
      "description": [
        "Sent by the Server to the Client to Update/Insert or Delete a particular market depth price level in the market depth book maintained by the Client.",
        "",
        "This message is identical to the s_MarketDepthUpdateLevel message except it has no timestamp field. It needs to be sent when there is no change with the timestamp for the market depth update as compared to the prior update.",
        "",
        "When the Server sends this message to the Client, the Client needs to use the prior received market depth update timestamp to know what the timestamp is for this message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDepthRequest message which corresponds to the Symbol that the data in this message is for."
          ]
        },
        {
          "name": "Side",
          "type": "uint8_t",
          "description": [
            "Specifies whether the side being updated is the Bid (AT_BID) or Ask (AT_ASK)."
          ]
        },
        {
          "name": "Price",
          "type": "float",
          "description": [
            "The price level to insert, update or delete."
          ]
        },
        {
          "name": "Quantity",
          "type": "float",
          "description": [
            "The number of shares/contracts at the Price level. This will be 0 in the case when UpdateType is set to MARKET_DEPTH_DELETE_LEVEL."
          ]
        },
        {
          "name": "FinalUpdateInBatch",
          "type": "FinalUpdateInBatchEnum",
          "description": [
            "An indicator whether this is the beginning or final update in a batch of updates."
          ]
        },
        {
          "name": "NumOrders",
          "type": "unsigned int16",
          "description": [
            "The number of orders at the Price."
          ]
        },
        {
          "name": "UpdateType",
          "type": "MarketDepthUpdateTypeEnum",
          "description": [
            "Specifies whether this is a MARKET_DEPTH_INSERT_UPDATE_LEVEL operation or a MARKET_DEPTH_DELETE_LEVEL operation.",
            "",
            "MARKET_DEPTH_INSERT_UPDATE_LEVEL: Insert or update in the market depth book on the specified side, the particular Price and Volume specified. It is an insert operation of the price level does not exist. It is an update operation if the price level already exists. In the case of insert, the other levels in the market depth book need to be shifted to make room for the new level.",
            "",
            "MARKET_DEPTH_DELETE_LEVEL: Remove from the market depth book on the specified side, the specified Price level. The other levels need to be shifted to fill in the missing level. In this particular case the Quantity is ignored and will be 0."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_OpenOrdersReject": {
      "name": "s_OpenOrdersReject",
      "description": [
        "If the Server is unable to serve the request for an s_OpenOrdersRequest message received, for a reason other than there not being any open orders, then send this message to the Client."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "This is set to the RequestID field sent in the s_OpenOrdersRequest message from the Client."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "Free-form text indicating the reason for rejection."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_OpenOrdersRequest": {
      "name": "s_OpenOrdersRequest",
      "description": [
        "This is a message from the Client to the Server requesting the currently open orders.",
        "",
        "The Server will send open/working orders in response to this request through s_OrderUpdate messages.",
        "",
        "The Server will not return canceled or filled orders.",
        "",
        "When the Server responds to this request, it needs to respond with a separate s_OrderUpdate for each order.",
        "",
        "When the Server responds to this request, OrderUpdateReason in the s_OrderUpdate message must be set to s_OpenOrdersRequest_RESPONSE indicating the orders are being restated.",
        "",
        "If there are no Open orders, the Server will send back 1 s_OrderUpdate message with only the TotalNumberMessages, MessageNumber, RequestID, OrderUpdateReason, NoOrders = 1 fields set in the s_OrderUpdate message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "A unique request identifier for this request."
          ]
        },
        {
          "name": "RequestAllOrders",
          "type": "int32",
          "description": [
            "0 = request a specific order. 1 = for all orders (default)."
          ]
        },
        {
          "name": "ServerOrderID",
          "type": "char",
          "description": [
            "Leave this field empty if Client wants all orders. Otherwise, specify the specific ServerServerID that want an s_OrderUpdate message for."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "Leave this field empty if Client wants open orders for all Trade Accounts. Otherwise, specify the specific TradeAccount that want s_OrderUpdate messages for."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_OrderUpdate": {
      "name": "s_OrderUpdate",
      "description": [
        "The s_OrderUpdate is a unified message from the Server to the Client which communicates the complete details of an order, the Order Status, and the reason for sending the message (OrderUpdateReason).",
        "",
        "DTC uses this single unified message to provide an update for an order. The OrderUpdateReason field provides a clear indication for each reason this message is being sent."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "Set to 0 unless this is in response to an s_OpenOrdersRequest, in which case this must be set to the RequestID given in the s_OpenOrdersRequest.",
            "",
            "If this s_OrderUpdate is unsolicited, for example a real-time fill or other unsolicited order event, the Server must leave this at 0."
          ]
        },
        {
          "name": "TotalNumMessages",
          "type": "int32",
          "description": [
            "This indicates the total number of s_OrderUpdate messages when a batch of reports is being sent in response to an s_OpenOrdersRequest. If there is only one order being sent, this will be 1. The Server must use a value of 1 for an unsolicited report. A Client should not rely on this field for an unsolicited report."
          ]
        },
        {
          "name": "MessageNumber",
          "type": "int32",
          "description": [
            "This indicates the 1-based index of the s_OrderUpdate message when a batch of reports is being sent in response to an s_OpenOrdersRequest. If there is only one order being sent, this will be 1. Use a value of 1 for an unsolicited report. A Client should not rely on this field for an unsolicited report."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol for the order."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol."
          ]
        },
        {
          "name": "PreviousServerOrderID",
          "type": "char",
          "description": [
            "Used upon a Cancel and Replace operation (ORDER_CANCEL_REPLACE_COMPLETE) where a new Server Order identifier is given.",
            "",
            "In this case this field needs to be set to the previous Server Order identifier.",
            "",
            "This should be left at the default setting of empty in the case where the Server does not change the Server Order identifier upon a Cancel and Replace operation."
          ]
        },
        {
          "name": "ServerOrderID",
          "type": "char",
          "description": [
            "The ServerOrderID is set by the server and uniquely identifies the order. When a new order is submitted by the Client and the Server responds with an s_OrderUpdate, this field needs to be set to the order identifier which is good for the life of the order.",
            "",
            "This ServerOrderID can optionally change on a Cancel and Replace operation. In this case, the PreviousServerOrderID field will contain the previous ServerOrderID upon a ORDER_CANCEL_REPLACE_COMPLETE OrderUpdateReason.",
            "",
            "ServerOrderID must always be set except it is not required in the cases when the OrderUpdateReason is one of the following: NEW_ORDER_REJECTED, ORDER_CANCEL_REJECTED, ORDER_CANCEL_REPLACE_REJECTED. If it is not set, then the ClientOrderID must be set."
          ]
        },
        {
          "name": "ClientOrderID",
          "type": "char",
          "description": [
            "The ClientOrderID is the order identifier provided by the Client. When the Client submits a new order, cancels and replaces an existing order, or cancels an order, then the Client needs to specify this identifier.",
            "",
            "The Client must maintain the same order identifier throughout the life of the order.",
            "",
            "The Server should persist the ClientOrderID across sessions. A session is defined as the period of time from the start of the network connection between the Client and Server to the end of that connection.",
            "",
            "The Client should only rely upon the ClientOrderID being set when the OrderUpdateReason is one of the following: NEW_ORDER_ACCEPTED, NEW_ORDER_REJECTED, ORDER_CANCELED, ORDER_CANCEL_REPLACE_COMPLETE, ORDER_CANCEL_REJECTED, ORDER_CANCEL_REPLACE_REJECTED.",
            "",
            "After a new order has been accepted, the Client will rely upon the given ServerOrderID from the server to identify the order and should no longer rely upon the given ClientOrderID. However, the Client needs to maintain a copy of the ClientOrderID for any subsequent order modifications and cancellations because this is a required field for those."
          ]
        },
        {
          "name": "ExchangeOrderID",
          "type": "char",
          "description": [
            "The order identifier from the exchange that handles the order. This is optional."
          ]
        },
        {
          "name": "OrderStatus",
          "type": "OrderStatusEnum",
          "description": [
            "This is required. Needs to be set to one of the following values by the Server to indicate the current status of the order, unless NoneOrder = 1:",
            "",
            "ORDER_STATUS_UNSPECIFIED (0): The status of the order is unset. Use this when NoneOrder = 1, or when the Server does not know the true status of an order when the Order Update Report message is sent.",
            "ORDER_STATUS_ORDER_SENT (1): When a Client sends an order to the Server, then the Client internally will set the status to ORDER_STATUS_ORDER_SENT. The Server will not set this Status.",
            "ORDER_STATUS_PENDING_OPEN (2): This means the Server has accepted the order but it is not yet considered in a fully working state for any reason.",
            "ORDER_STATUS_PENDING_CHILD (3): This status applies to a Limit or Stop order attached to a parent order. It will have this status if the parent order has not yet filled.",
            "ORDER_STATUS_OPEN (4): Order is open and working.",
            "ORDER_STATUS_PENDING_CANCEL_REPLACE (5): Order is pending a Cancel and Replace operation. The Server should send a s_OrderUpdate message with the OrderUpdateReason set to GENERAL_s_OrderUpdate and the OrderStatus set to this status to indicate the pending Cancel and Replace operation.",
            "ORDER_STATUS_PENDING_CANCEL (6): Order is pending a Cancel operation. The Server should send a s_OrderUpdate message with the OrderUpdateReason set to GENERAL_s_OrderUpdate and the OrderStatus set to this status to indicate the pending Cancel operation.",
            "ORDER_STATUS_FILLED (7): Order is filled and no longer working.",
            "ORDER_STATUS_CANCELED (8): Order is canceled. If the user tries to cancel an order that has already been canceled, then continue to return this Order Status for it.",
            "ORDER_STATUS_REJECTED (9): Order has been rejected after the initial order submission. It is not working.",
            "ORDER_STATUS_PARTIALLY_FILLED (10): Order is partially filled and still working."
          ]
        },
        {
          "name": "OrderUpdateReason",
          "type": "OrderUpdateReasonEnum",
          "description": [
            "This is required. This field needs to be set to one of the following values by the Server to indicate the reason the s_OrderUpdate is being sent.",
            "",
            "s_OpenOrdersRequest_RESPONSE (1): When the s_OrderUpdate is specifically sent in response to an s_OpenOrdersRequest request, this is the OrderUpdateReason.",
            "NEW_ORDER_ACCEPTED (2): This OrderUpdate indicates a new order has been accepted.",
            "GENERAL_s_OrderUpdate (3): A general order update. For example, when an order is in the process of being canceled, the Server may send an s_OrderUpdate message with the OrderStatus set to ORDER_STATUS_PENDING_CANCEL. In this particular case the OrderUpdateReason needs to be set to GENERAL_s_OrderUpdate (3).",
            "ORDER_FILLED (4): Upon a complete fill of the order, this is the OrderUpdateReason. This OrderUpdateReason must only be used when an s_OrderUpdate is sent at the moment in time of a fill. A previously filled order that is being restated in response to an s_OpenOrdersRequest must not use this OrderUpdateReason.",
            "ORDER_FILLED_PARTIALLY (5): Upon a partial fill of the order, this is the OrderUpdateReason. This OrderUpdateReason must only be used when an s_OrderUpdate is sent at the moment in time of a fill. A previously filled order that is being restated in response to an s_OpenOrdersRequest must not use this OrderUpdateReason.",
            "ORDER_CANCELED (6): This OrderUpdateReason indicates the order is now successfully canceled.",
            "ORDER_CANCEL_REPLACE_COMPLETE (7): This OrderUpdateReason indicates the order is now successfully canceled and replaced (modified).",
            "NEW_ORDER_REJECTED (8): After an order has been submitted by the Client, it has been rejected for any reason and was never working, the Server will send through an s_OrderUpdate with this OrderUpdateReason. In this case the Server needs to set the OrderStatus in the s_OrderUpdate to ORDER_STATUS_REJECTED.",
            "",
            "The following fields need to be set for a NEW_ORDER_REJECTED OrderUpdateReason: OrderUpdateReason, OrderStatus, MessageNumber, TotalNumMessages, ClientOrderID, Symbol, Exchange, TradeAccount.",
            "ORDER_CANCEL_REJECTED (9): A request by the Client to cancel the order with the s_CancelOrder message has been rejected.",
            "",
            "The current status of the order must be set in the OrderStatus member of the s_OrderUpdate message.",
            "",
            "In the case where the given ServerOrderID in a s_CancelOrder message from the Client is not known, then respond with an s_OrderUpdate message and set the OrderUpdateReason to ORDER_CANCEL_REJECTED and set the OrderStatus to ORDER_STATUS_REJECTED.",
            "",
            "In the case where the ServerOrderID is not known, then in the s_OrderUpdate message, it should not be set. However, in this case it is necessary to set the ClientOrderID in the s_OrderUpdate message to the given ClientOrderID in the s_CancelOrder message. The ClientOrderID must always be set in this case in an s_OrderUpdate.",
            "",
            "In the case where the order has already been canceled for the given ServerOrderID in a s_CancelOrder message, then respond with an s_OrderUpdate message and set the OrderUpdateReason to ORDER_CANCEL_REJECTED and set the OrderStatus to ORDER_STATUS_CANCELED.",
            "",
            "If for some reason the Server is uncertain as to the status of the order that was attempted to be canceled, then set the OrderStatus to ORDER_STATUS_UNSPECIFIED.",
            "ORDER_CANCEL_REPLACE_REJECTED (10): A request by the Client to cancel and replace the order with the s_CancelReplaceOrder message has been rejected.",
            "",
            "The current status of the order must be set in the OrderStatus member of the s_OrderUpdate message.",
            "",
            "In the case where the given ServerOrderID in a s_CancelReplaceOrder message from the Client is not known, then respond with an s_OrderUpdate message and set the OrderUpdateReason to ORDER_CANCEL_REPLACE_REJECTED and set the OrderStatus to ORDER_STATUS_REJECTED.",
            "",
            "In the case where the ServerOrderID is not known, then in the s_OrderUpdate message, it should not be set. However, in this case it is necessary to set the ClientOrderID in the s_OrderUpdate message to the given ClientOrderID in the s_CancelReplaceOrder message. The ClientOrderID must always be set in this case in an s_OrderUpdate.",
            "",
            "If for some reason the Server is uncertain as to the status of the order that was attempted to be canceled and replaced, then set the OrderStatus to ORDER_STATUS_UNSPECIFIED."
          ]
        },
        {
          "name": "OrderType",
          "type": "OrderTypeEnum",
          "description": [
            "The order type. Can be set to one of the following.",
            "",
            "ORDER_TYPE_MARKET",
            "ORDER_TYPE_LIMIT",
            "ORDER_TYPE_STOP",
            "ORDER_TYPE_STOP_LIMIT",
            "ORDER_TYPE_MARKET_IF_TOUCHED"
          ]
        },
        {
          "name": "BuySell",
          "type": "BuySellEnum",
          "description": [
            "Indicates whether the order is a Buy or Sell order. Can be set to one of the following constants: DTC::BUY (1) or DTC::SELL (2)."
          ]
        },
        {
          "name": "Price1",
          "type": "double",
          "description": [
            "For orders that require a price, this is the order price.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "Price2",
          "type": "double",
          "description": [
            "For Stop-Limit orders this is the Limit price. Otherwise, this is unset.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "TimeInForce",
          "type": "TimeInForceEnum",
          "description": [
            "The Time in Force of the order. Can be any of the following:",
            "",
            "TIF_DAY",
            "TIF_GOOD_TILL_CANCELED",
            "TIF_GOOD_TILL_DATE_TIME",
            "TIF_IMMEDIATE_OR_CANCEL",
            "TIF_ALL_OR_NONE",
            "TIF_FILL_OR_KILL"
          ]
        },
        {
          "name": "GoodTillDateTime",
          "type": "t_DateTime",
          "description": [
            "The expiration Date and Time of the order in the case when TimeInForce is TIF_GOOD_TILL_DATE_TIME."
          ]
        },
        {
          "name": "OrderQuantity",
          "type": "double",
          "description": [
            "The quantity of the order.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "FilledQuantity",
          "type": "double",
          "description": [
            "The number of shares or contracts that have filled in the order.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "RemainingQuantity",
          "type": "double",
          "description": [
            "The number of shares or contracts that still remain to be filled.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "AverageFillPrice",
          "type": "double",
          "description": [
            "The average price of all of the fills for the order.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "LastFillPrice",
          "type": "double",
          "description": [
            "The price of the most recent fill.",
            "",
            "Only necessary to set if OrderUpdateReason is ORDER_FILLED or ORDER_FILLED_PARTIALLY.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "LastFillDateTime",
          "type": "t_DateTime",
          "description": [
            "The date and Time of the most recent fill.",
            "",
            "Only necessary to set if OrderUpdateReason is ORDER_FILLED or ORDER_FILLED_PARTIALLY."
          ]
        },
        {
          "name": "LastFillQuantity",
          "type": "double",
          "description": [
            "The number of contracts/shares that has filled for the specific order fill that is currently reported through the s_OrderUpdate message.",
            "",
            "Only necessary to set if OrderUpdateReason is ORDER_FILLED or ORDER_FILLED_PARTIALLY.",
            "",
            "For binary encoding, if this field is not set it needs to be set to DBL_MAX. Refer to Unset Message Fields."
          ]
        },
        {
          "name": "LastFillExecutionID",
          "type": "char",
          "description": [
            "The unique identifier for the most recent fill.",
            "",
            "Only necessary to set if OrderUpdateReason is ORDER_FILLED or ORDER_FILLED_PARTIALLY."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "The trade account the order belongs to."
          ]
        },
        {
          "name": "InfoText",
          "type": "char",
          "description": [
            "Free-form text with information to communicate about the order. When an order is rejected, this should be set by the Server to indicate the reason for the rejection."
          ]
        },
        {
          "name": "NoOrders",
          "type": "unsigned int8",
          "description": [
            "Set by the Server to 1 to indicate there are no orders when s_OpenOrdersRequest message has been received and is being responded to. Otherwise, leave at the default of 0."
          ]
        },
        {
          "name": "ParentServerOrderID",
          "type": "char",
          "description": [
            "This is the ServerOrderID of the parent order when the order that this Order Update Report is for, is a child order in a bracket order. Otherwise, this is an empty text string."
          ]
        },
        {
          "name": "OCOLinkedOrderServerOrderID",
          "type": "char",
          "description": [
            "In the case of an OCO order set submitted with s_SubmitNewOCOOrder, whether it has a Parent order or not, this is the ServerOrderID of the other order in the OCO pair. These two orders are considered \"linked\" together. Otherwise, this is an empty text string."
          ]
        },
        {
          "name": "OpenOrClose",
          "type": "OpenCloseTradeEnum",
          "description": [
            "For the description for this field, refer to OpenCloseTradeEnum."
          ]
        },
        {
          "name": "PreviousClientOrderID",
          "type": "char",
          "description": [
            "The PreviousClientOrderID is the previous ClientOrderID provided by the Client for the order, if the Client changed it during order cancel and replace request or an order cancel request.",
            "",
            "A Server only is obligated to provide this field immediately after the ClientOrderID has been changed. Subsequent s_OrderUpdate messages do not need to set this field."
          ]
        },
        {
          "name": "FreeFormText",
          "type": "char",
          "description": [
            "This is the optional free-form text that was originally set with a new order using the new order messages."
          ]
        },
        {
          "name": "OrderReceivedDateTime",
          "type": "t_DateTime",
          "description": [
            "This is the Date-Time when the original order was received by the Server. Order modifications normally will not cause this Date-Time to be updated."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_PositionUpdate": {
      "name": "s_PositionUpdate",
      "description": [
        "This is a message from the Server to the Client to report a Trade Position for a symbol in any Trade Account for the logged in Username.",
        "",
        "The Position Update message can either be solicited, in response to s_CurrentPositionsRequest. Or unsolicited as a Trade Position for a symbol changes during the connection to the Server. Each Trade Position is contained within a single message.",
        "",
        "When the server is responding with one or more s_PositionUpdate messages in response to a s_CurrentPositionsRequest message, it must not send any unsolicited s_PositionUpdate messages interleaved with the solicited s_PositionUpdate messages in response to the s_CurrentPositionsRequest message."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The Server sets this to 0, the default, if this is a real-time Trade Position update.",
            "",
            "Otherwise, when the Server is sending Trade Positions in response to a s_CurrentPositionsRequest message, it must set this to the RequestID given in the s_CurrentPositionsRequest message"
          ]
        },
        {
          "name": "TotalNumberMessages",
          "type": "int32",
          "description": [
            "This indicates the total number of Position Update messages when a batch of messages is being sent. If there is only one Position Update message being sent, this will be 1. Use a value of 1 for an unsolicited message.",
            "",
            "A Client should not rely on this field for an unsolicited message. This is required to be set."
          ]
        },
        {
          "name": "MessageNumber",
          "type": "int32",
          "description": [
            "This indicates the 1-based index of the Position Update message when a batch of messages is being sent. If there is only one Position Update message being sent, this will be 1. Use a value of 1 for an unsolicited message.",
            "",
            "A Client should not rely on this field for an unsolicited message. This is required to be set."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol for the Position."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol."
          ]
        },
        {
          "name": "Quantity",
          "type": "double",
          "description": [
            "The quantity of the current Position for the symbol. A positive number is for a long Position and a negative number is for a short Position."
          ]
        },
        {
          "name": "AveragePrice",
          "type": "double",
          "description": [
            "The average position price."
          ]
        },
        {
          "name": "PositionIdentifier",
          "type": "char",
          "description": [
            "When the Server sets s_LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount to 1, then it must set PositionIdentifier to a unique identifier to identify the Trade Position for the particular Symbol and Trade Account for which it is for.",
            "",
            "Otherwise, this field is optional and it is recommended for a Server not to use it if it does not provide multiple positions for a Symbol and Trade Account.",
            "",
            "This field identifies an individual Trade Position in the case of where there are multiple Positions for a particular Symbol and Trade Account.",
            "",
            "A Client must implement support for PositionIdentifier when s_LogonResponse::UsesMultiplePositionsPerSymbolAndTradeAccount is set to 1."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "The trade account the Trade Position is in for the Symbol."
          ]
        },
        {
          "name": "NoPositions",
          "type": "unsigned int8",
          "description": [
            "Set to an integer value of 1 to indicate there are no Trade Positions in response to a s_CurrentPositionsRequest message.",
            "",
            "Otherwise, the Server must leave this at the default of 0. The Server is always expected to respond with a single s_PositionUpdate message when there are no Trade Positions for any Symbol when current Trade Positions have been requested by the Client with s_CurrentPositionsRequest.",
            "",
            "When the Server is sending a s_PositionUpdate message to the Client and it is indicating that the Quantity field is 0, then the NoPositions field must be left at the default of 0. It is not used to indicate a Quantity of 0 for a particular Symbol and TradeAccount.",
            "",
            "This is always set to the default of 0 for an unsolicited Trade Position Update."
          ]
        },
        {
          "name": "Unsolicited",
          "type": "unsigned int8",
          "description": [
            "Set to 1 to indicate this is an unsolicited Position Update message. In other words, it is a real-time Trade Position Update message which is not an initial response to a s_CurrentPositionsRequest message."
          ]
        },
        {
          "name": "MarginRequirement",
          "type": "double",
          "description": [
            "MarginRequirement is the required margin as a currency value for the current trade Position Quantity and any working orders for the Trade Account.",
            "",
            "This is an optional field for the Server to provide."
          ]
        },
        {
          "name": "EntryDateTime",
          "type": "t_DateTime4Byte",
          "description": [
            "EntryDateTime is the Date-Time of the initial entry of the Trade Position. It is in the UTC time zone.",
            "",
            "This is an optional field for the Server to provide."
          ]
        },
        {
          "name": "OpenProfitLoss",
          "type": "double",
          "description": [
            "OpenProfitLoss is the current open Trade Position profit or loss as a currency value.",
            "",
            "This is an optional field for the Server to provide."
          ]
        },
        {
          "name": "HighPriceDuringPosition",
          "type": "double",
          "description": [
            "HighPriceDuringPosition is the highest price the symbol traded at during the life of the Trade Position. This value can be reset by the Server when there is a change in Trade Position Quantity.",
            "",
            "This is an optional field for the Server to provide."
          ]
        },
        {
          "name": "LowPriceDuringPosition",
          "type": "double",
          "description": [
            "LowPriceDuringPosition is the lowest price the symbol traded at during the life of the Trade Position. This value can be reset by the Server when there is a change in Trade Position Quantity.",
            "",
            "This is an optional field for the Server to provide."
          ]
        },
        {
          "name": "QuantityLimit",
          "type": "double",
          "description": [
            "This is the limit or maximum Trade Position Quantity possible for a Trade Position for the Trade Account and Symbol. This applies equally to a long or short position.",
            "",
            "This is only an informational value provided from the risk management system.",
            "",
            "This is an optional field for the Server to provide."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_SecurityDefinitionForSymbolRequest": {
      "name": "s_SecurityDefinitionForSymbolRequest",
      "description": [
        "This is a message from the Client to the Server for requesting Security Definition data for a specific symbol.",
        "",
        "The Server will return a single s_SecurityDefinitionResponse message in response to this request.",
        "",
        "The Client must always send a s_SecurityDefinitionForSymbolRequest message to the Server in order to obtain the IntegerToFloatPriceDivisor value in case the Server uses the integer market data messages.",
        "",
        "If the Server is rejecting this request, then it needs to send a s_SecurityDefinitionReject message to the Client."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique identifier for this request. This same identifier will be returned in the s_SecurityDefinitionResponse message."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol to return a security definition for."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the Symbol."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SecurityDefinitionReject": {
      "name": "s_SecurityDefinitionReject",
      "description": [
        "This is a message from the Server to the Client indicating the Server is rejecting one of the following messages: s_SymbolsForExchangeRequest, s_UnderlyingSymbolsForExchangeRequest, s_SymbolsForUnderlyingRequest, s_SecurityDefinitionForSymbolRequest, s_SymbolSearchRequest.",
        "",
        "If there are no symbols to send in response to one of these messages above, then the Server should not send a s_SecurityDefinitionReject message and instead send a s_SecurityDefinitionResponse with only the RequestID and IsFinalMessage fields set. This will be a clear indication to the Client that the request returned no Symbols."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "This is the same RequestID that this message is in response to and was given in the original request message."
          ]
        },
        {
          "name": "RejectText",
          "type": "char",
          "description": [
            "Text reason for rejection."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_SecurityDefinitionResponse": {
      "name": "s_SecurityDefinitionResponse",
      "description": [
        "This is a response from the Server in response to a s_SymbolsForExchangeRequest, UNDERLYING_s_SymbolsForExchangeRequest, s_SymbolsForUnderlyingRequest, s_SecurityDefinitionForSymbolRequest, s_SymbolSearchRequest message.",
        "",
        "If there are no symbols to return in response to a request, the Server needs to send through one of these messages with the RequestID set to the same RequestID value that the request message set it to, and IsFinalMessage = 1. Leave all other member fields in the default state and the Client will recognize there are no symbols.",
        "",
        "The Client must always send a s_SecurityDefinitionForSymbolRequest message to the Server to obtain the IntegerToFloatPriceDivisor and FloatToIntPriceMultiplier values in the Security Definition Response message when the Server uses the integer market data and order messages."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "This is the same RequestID that this message is in response to and was given in the original Security Definition request message."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "This is the Symbol the Security Definition is for.",
            "",
            "When the Server responds with a single s_SecurityDefinitionResponse message and there are no security definitions to return for the original request, this will be empty.",
            "",
            "This field should be empty when this Security Definition message is in response to s_UnderlyingSymbolsForExchangeRequest."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "This is the Exchange for the Symbol. This field is optional."
          ]
        },
        {
          "name": "SecurityType",
          "type": "SecurityTypeEnum",
          "description": [
            "The Security Type for the symbol."
          ]
        },
        {
          "name": "Description",
          "type": "char",
          "description": [
            "The text description for the Symbol."
          ]
        },
        {
          "name": "MinPriceIncrement",
          "type": "float",
          "description": [
            "The minimum amount that prices can change by for the Symbol and minimum amount that prices are quoted in."
          ]
        },
        {
          "name": "PriceDisplayFormat",
          "type": "PriceDisplayFormatEnum",
          "description": [
            "This field specifies the price formatting for display purposes."
          ]
        },
        {
          "name": "CurrencyValuePerIncrement",
          "type": "float",
          "description": [
            "This field is the currency value per MinPriceIncrement in the Symbols currency."
          ]
        },
        {
          "name": "IsFinalMessage",
          "type": "unsigned int8",
          "description": [
            "Set to a integer value of 1 to indicate this is the final message in batch of Security Definition Response messages."
          ]
        },
        {
          "name": "FloatToIntPriceMultiplier",
          "type": "float",
          "description": [
            "With the integer order entry messages discontinued as of August 2020, this field is no longer relevant."
          ]
        },
        {
          "name": "IntegerToFloatPriceDivisor",
          "type": "float",
          "description": [
            "With the integer market data messages discontinued as of August 2020, this field is no longer relevant."
          ]
        },
        {
          "name": "UnderlyingSymbol",
          "type": "char",
          "description": [
            "This is the underlying symbol for the Symbol field if the Symbol has an underlying symbol.",
            "",
            "The Server must set this when the s_SecurityDefinitionResponse message in response to s_UnderlyingSymbolsForExchangeRequest, s_SymbolsForUnderlyingRequest.",
            "",
            "This is typically used with futures. A futures symbol for a specific contract year and month will have an underlying symbol equivalent to the Symbol without the year and month characters."
          ]
        },
        {
          "name": "UpdatesBidAskOnly",
          "type": "unsigned int8",
          "description": [
            "This is set to 1 when the Symbol does not provide s_MarketDataUpdateTrade messages and only provides s_MarketDataUpdateBidAsk messages when there is market activity for the Symbol.",
            "",
            "Otherwise, when this is set to 0, s_MarketDataUpdateTrade messages will be received after subscribing to market data, when there is trading activity."
          ]
        },
        {
          "name": "StrikePrice",
          "type": "float",
          "description": [
            "The strike price when the Security Type is an option type."
          ]
        },
        {
          "name": "PutOrCall",
          "type": "PutCallEnum",
          "description": [
            "When the Security Type is an option, this indicates if it is a put or call."
          ]
        },
        {
          "name": "ShortInterest",
          "type": "unsigned int32",
          "description": [
            "The short interest when the Security Type is a stock."
          ]
        },
        {
          "name": "SecurityExpirationDate",
          "type": "t_DateTime4Byte",
          "description": [
            "The expiration date for the Symbol for symbols which have an expiration date."
          ]
        },
        {
          "name": "BuyRolloverInterest",
          "type": "float",
          "description": [
            "The daily interest amount which is deducted for a Buy position. This only applies for Forex trading. It is in the quote currency of the symbol."
          ]
        },
        {
          "name": "SellRolloverInterest",
          "type": "float",
          "description": [
            "The daily interest amount which is deducted for a Sell position. This only applies for Forex trading. It is in the quote currency of the symbol."
          ]
        },
        {
          "name": "EarningsPerShare",
          "type": "float",
          "description": [
            "The earnings per share as a currency value when the Security Type is a stock."
          ]
        },
        {
          "name": "SharesOutstanding",
          "type": "unsigned int32",
          "description": [
            "This is the number of shares outstanding for stocks."
          ]
        },
        {
          "name": "IntToFloatQuantityDivisor",
          "type": "float",
          "description": [
            "With the integer order entry and market data messages discontinued as of August 2020, this field is no longer relevant."
          ]
        },
        {
          "name": "HasMarketDepthData",
          "type": "unsigned int8",
          "description": [
            "When HasMarketDepthData is set to 1, it indicates the Symbol has market depth data available for it. When this is set to 0, market depth data is not supported for the Symbol."
          ]
        },
        {
          "name": "DisplayPriceMultiplier",
          "type": "float",
          "description": [
            "This is an optional field for the Server to set.",
            "",
            "The default for this is 1.0.",
            "",
            "This sets the multiplier to use in the case where the Client should multiply the values in market data messages by some number other than 1.0 before displaying them to the user.",
            "",
            "It is recommended that a Server does not use this and instead transmit to the Client values as the actual floating-point values.",
            "",
            "This should not be confused with the integer market data messages and the IntToFloatPriceDivisor field used with those messages. DisplayPriceMultiplier is for when the Server transmits market data values using floating-point types and where those values may have a fractional component, but where it is necessary to still multiply the original value by this multiplier to get the final value to display to the user.",
            "",
            "When this is set to a value other than 1.0, then the MinPriceIncrement and the PriceDisplayFormat fields are relative to the market data values after the DisplayPriceMultiplier is applied."
          ]
        },
        {
          "name": "ExchangeSymbol",
          "type": "char",
          "description": [
            "This is an optional field. This is the exchange symbol which corresponds with the Symbol field.",
            "",
            "This field should be empty when this Security Definition message is in response to UNDERLYING_s_SymbolsForExchangeRequest."
          ]
        },
        {
          "name": "RolloverDate",
          "type": "t_DateTime4Byte",
          "description": [
            "This field applies to the Futures Security Type.",
            "",
            "This is the rollover date for the symbol according to the typical time where trading transitions from one contract month to the next."
          ]
        },
        {
          "name": "InitialMarginRequirement",
          "type": "float",
          "description": [
            "This field applies to the Futures Security Type.",
            "",
            "This is the initial margin requirement as specified by the exchange, if available."
          ]
        },
        {
          "name": "MaintenanceMarginRequirement",
          "type": "float",
          "description": [
            "This field applies to the Futures Security Type.",
            "",
            "This is the maintenance margin requirement as specified by the exchange, if available."
          ]
        },
        {
          "name": "Currency",
          "type": "char",
          "description": [
            "This is the currency that the Symbol trades in or is priced in."
          ]
        },
        {
          "name": "ContractSize",
          "type": "float",
          "description": [
            "In the case of when a Symbol is a contract type, this variable indicates the size of the contract.",
            "",
            "This is going to be an exchange specific specification."
          ]
        },
        {
          "name": "OpenInterest",
          "type": "unsigned int32",
          "description": [
            "In the case of when a Symbol is a contract type, this field is the number of outstanding contracts."
          ]
        },
        {
          "name": "IsDelayed",
          "type": "unsigned int8",
          "description": [
            "This field will be 1 if the market data for the Symbol is intentionally delayed by a certain amount of time. Otherwise, this will be 0."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_SubmitFlattenPositionOrder": {
      "name": "s_SubmitFlattenPositionOrder",
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol of the Trade Position to flatten."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the Symbol."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "The trade account as a text string of the Trade Position to flatten."
          ]
        },
        {
          "name": "ClientOrderID",
          "type": "char",
          "description": [
            "The Client supplied order identifier for the order which will be created to flatten the Trade Position.",
            "",
            "The Server will remember this for the life of the order."
          ]
        },
        {
          "name": "FreeFormText",
          "type": "char",
          "description": [
            "Optional: This is an optional text string which can be set by the Client to associate text with the order which will be created to flatten the Trade Position.",
            "",
            "The Server is not under any obligation to use this text and it may place a limitation on the length of this text."
          ]
        },
        {
          "name": "IsAutomatedOrder",
          "type": "unsigned int8",
          "description": [
            "Set to 1 for an order submitted by an automated trading system."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SubmitNewOCOOrder": {
      "name": "s_SubmitNewOCOOrder",
      "description": [
        "This is a message from the Client to the Server for submitting an order cancels order (OCO) pair into the market. What this means is when one of the orders is filled or canceled, the other order will be canceled. If one order partially fills, the other order will be reduced in quantity by the fill amount of the order that partially filled.",
        "",
        "A service provider must implement OCO orders on the server so that they can independently be modified (Cancel/Replace) and canceled independently using each order's distinct ServerOrderID. Although, if one of the orders is canceled by the Client, the other order will be canceled as well unless they have a parent order, as specified through the ParentTriggerClientOrderID field, in which case the other order should remain open.",
        "",
        "If the OCO order pair is rejected, this must be communicated through two separate s_OrderUpdate messages, 1 for each order, with the OrderUpdateReason set to NEW_ORDER_REJECTED."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol for the order."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol."
          ]
        },
        {
          "name": "ClientOrderID_1",
          "type": "char",
          "description": [
            "The Client supplied order identifier for the first order. The Server will remember this for the life of the order."
          ]
        },
        {
          "name": "OrderType_1",
          "type": "OrderTypeEnum",
          "description": [
            "The order type for the first order. For list of order types, refer to OrderTypeEnum."
          ]
        },
        {
          "name": "BuySell_1",
          "type": "BuySellEnum",
          "description": [
            "The side for the first order. Either Buy or Sell."
          ]
        },
        {
          "name": "Price1_1",
          "type": "double",
          "description": [
            "This is the price of the first order. This is the limit price for a Limit order, the stop price for a Stop order, or the trigger price for a Market if Touched order."
          ]
        },
        {
          "name": "Price2_1",
          "type": "double",
          "description": [
            "This is the second price for the first order. For a Stop-Limit order, this is the limit price. Price2_1 only applies to Stop-Limit orders."
          ]
        },
        {
          "name": "Quantity_1",
          "type": "double",
          "description": [
            "The quantity for the first order."
          ]
        },
        {
          "name": "ClientOrderID_2",
          "type": "char",
          "description": [
            "The Client supplied order identifier for the second order. The Server will remember this for the life of the order."
          ]
        },
        {
          "name": "OrderType_2",
          "type": "OrderTypeEnum",
          "description": [
            "The order type for the second order. For list of order types, refer to OrderTypeEnum."
          ]
        },
        {
          "name": "BuySell_2",
          "type": "BuySellEnum",
          "description": [
            "The side for the second order. Either Buy or Sell."
          ]
        },
        {
          "name": "Price1_2",
          "type": "double",
          "description": [
            "This is the price of the second order. This is the limit price for a Limit order, the stop price for a Stop order, or the trigger price for a Market if Touched order."
          ]
        },
        {
          "name": "Price2_2",
          "type": "double",
          "description": [
            "This is the second price for the second order. For a Stop-Limit order, this is the limit price. Price2_2 only applies to Stop-Limit orders."
          ]
        },
        {
          "name": "Quantity_2",
          "type": "double",
          "description": [
            "The quantity for the second order."
          ]
        },
        {
          "name": "TimeInForce",
          "type": "TimeInForceEnum",
          "description": [
            "The Time in Force for the order or orders (in the case of an OCO order).",
            "",
            "For more information, refer to TimeInForceEnum."
          ]
        },
        {
          "name": "GoodTillDateTime",
          "type": "t_DateTime",
          "description": [
            "In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies the expiration Date-Time of the order. This applies to both of the orders in the OCO pair."
          ]
        },
        {
          "name": "IsAutomatedOrder",
          "type": "unsigned int8",
          "description": [
            "Set to 1 for an order submitted by an automated trading system."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is the trade account as a text string that the orders belong to."
          ]
        },
        {
          "name": "ParentTriggerClientOrderID",
          "type": "char",
          "description": [
            "Optional: This field supports the submission of an OCO order pair which has a parent. This is known as a Bracket order.",
            "",
            "For complete documentation for bracket orders, refer to Bracket Order Procedures."
          ]
        },
        {
          "name": "FreeFormText",
          "type": "char",
          "description": [
            "Optional: This is an optional text string which can be set by the Client to associate text with each of the OCO orders. The Server is not under any obligation to use this text and it may place a limitation on the length of this text."
          ]
        },
        {
          "name": "OpenOrClose",
          "type": "OpenCloseTradeEnum",
          "description": [
            "For the description for this field, refer to OpenCloseTradeEnum."
          ]
        },
        {
          "name": "PartialFillHandling",
          "type": "PartialFillHandlingEnum",
          "description": [
            "Specifies how partial fills should be handled when when one of the orders in the OCO order set partially fills.",
            "",
            "For the possible values, refer to PartialFillHandlingEnum."
          ]
        },
        {
          "name": "UseOffsets",
          "type": "unsigned int8",
          "description": [
            "This field is only relevant to a Bracket order which is the case when the ParentTriggerClientOrderID field is set.",
            "",
            "UseOffsets can be set to 1 and indicates that the OffsetFromParent1 and OffsetFromParent2 fields specify the two OCO order prices as a price offset from the parent order Price1 field, rather than an absolute price. In this case Price1_1 and Price1_2 are not used.",
            "",
            "When UseOffsets is set to 0, the default, then the OCO order prices are specified with Price1_1 and Price1_2.",
            "",
            "When UseOffsets is set to 1 and the OffsetFromParent1 and OffsetFromParent2 fields are set, it is necessary that the parent order Price1 field be set even in the case of a Market order type. In the case of a Market order type use the current order price. This is so that the server has a reference price for the offsets in case it needs to translate them to actual prices.",
            "",
            "When the parent order fills, it is expected the Server will maintain the specified offsets to the parent order fill price for the Target and Stop orders.",
            "",
            "A Server is not required to support this field."
          ]
        },
        {
          "name": "OffsetFromParent1",
          "type": "double",
          "description": [
            "When UseOffsets is set to 1, then this field specifies the Price1_1 price as an offset from the parent order. In this case Price1_1 will not be set in the message. Instead the Server calculates that price from this offset and parent order price.",
            "",
            "This needs to always be set to a positive price value which is an offset from the parent order price. The Server will make the correct calculation based upon the Side and Order Type.",
            "",
            "A Server is not required to support this field."
          ]
        },
        {
          "name": "OffsetFromParent2",
          "type": "double",
          "description": [
            "When UseOffsets is set to 1, then this field specifies the Price1_2 price as an offset from the parent order. In this case Price1_2 will not be set in the message. Instead the Server calculates that price from this offset and parent order price.",
            "",
            "This needs to always be set to a positive price value which is an offset from the parent order price. The Server will make the correct calculation based upon the Side and Order Type.",
            "",
            "A Server is not required to support this field."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SubmitNewOCOOrderInt": {
      "name": "s_SubmitNewOCOOrderInt",
      "description": [
        "The s_SubmitNewOCOOrder_INT message is identical to s_SubmitNewOCOOrder except that the order prices are as integers.",
        "",
        "The Client will only send this message to the Server if UseIntegerPriceOrderMessages is set in the s_LogonResponse message.",
        "",
        "When setting the Price1 and Price2 fields, multiply the order price by the FloatToIntPriceMultiplier value provided in the s_SecurityDefinitionResponse message for the Symbol being traded.",
        "",
        "This message also contains the Divisor field. This is the FloatToIntPriceMultiplier value provided in the s_SecurityDefinitionResponse message for the symbol being traded. The Server needs to divide the Price1 and Price2 fields by this Divisor to get the prices as float values."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol for the order."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol."
          ]
        },
        {
          "name": "ClientOrderID_1",
          "type": "char",
          "description": [
            "The Client supplied order identifier for the first order. The Server will remember this for the life of the order."
          ]
        },
        {
          "name": "OrderType_1",
          "type": "OrderTypeEnum",
          "description": [
            "The order type for the first order. For list of order types, refer to OrderTypeEnum."
          ]
        },
        {
          "name": "BuySell_1",
          "type": "BuySellEnum",
          "description": [
            "The side for the first order. Either Buy or Sell."
          ]
        },
        {
          "name": "Price1_1",
          "type": "int64",
          "description": [
            "This is the price of the first order. This is the limit price for a Limit order, the stop price for a Stop order, or the trigger price for a Market if Touched order."
          ]
        },
        {
          "name": "Price2_1",
          "type": "int64",
          "description": [
            "This is the second price for the first order. For a Stop-Limit order, this is the limit price. This only applies to Stop-Limit orders."
          ]
        },
        {
          "name": "Quantity_1",
          "type": "int64",
          "description": [
            "The quantity of the first order. The exact meaning of this will be specified by the Server implementation."
          ]
        },
        {
          "name": "ClientOrderID_2",
          "type": "char",
          "description": [
            "The Client supplied order identifier for the second order. The Server will remember this for the life of the order."
          ]
        },
        {
          "name": "OrderType_2",
          "type": "OrderTypeEnum",
          "description": [
            "The order type of the second order. For list of order types, refer to OrderTypeEnum."
          ]
        },
        {
          "name": "BuySell_2",
          "type": "BuySellEnum",
          "description": [
            "The side of the second order. Either Buy or Sell."
          ]
        },
        {
          "name": "Price1_2",
          "type": "int64",
          "description": [
            "This is the price of the second order. This is the limit price for a Limit order, the stop price for a Stop order, or the trigger price for a Market if Touched order."
          ]
        },
        {
          "name": "Price2_2",
          "type": "int64",
          "description": [
            "This is the second price for the second order. For a Stop-Limit order, this is the limit price. This only applies to Stop-Limit orders."
          ]
        },
        {
          "name": "Quantity_2",
          "type": "int64",
          "description": [
            "The quantity of the second order. The exact meaning of this will be specified by the Server implementation."
          ]
        },
        {
          "name": "TimeInForce",
          "type": "TimeInForceEnum",
          "description": [
            "The Time in Force for the order or orders (in the case of an OCO order).",
            "",
            "For more information, refer to TimeInForceEnum."
          ]
        },
        {
          "name": "GoodTillDateTime",
          "type": "t_DateTime",
          "description": [
            "In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies the expiration Date-Time of the order. This applies to both of the orders in the OCO pair."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is the trade account as a text string that the orders belong to."
          ]
        },
        {
          "name": "IsAutomatedOrder",
          "type": "unsigned int8",
          "description": [
            "Set to 1 for an order submitted by an automated trading system."
          ]
        },
        {
          "name": "ParentTriggerClientOrderID",
          "type": "char",
          "description": [
            "Optional: This field supports the submission of an OCO order pair which has a parent. This is known as a Bracket order.",
            "",
            "For complete documentation for bracket orders, refer to Bracket Order Procedures."
          ]
        },
        {
          "name": "FreeFormText",
          "type": "char",
          "description": [
            "Optional: This is an optional text string which can be set by the Client to associate text with each of the OCO orders. The Server is not under any obligation to use this text and it may place a limitation on the length of this text."
          ]
        },
        {
          "name": "Divisor",
          "type": "float",
          "description": [
            "This is the FloatToIntPriceMultiplier value provided in the s_SecurityDefinitionResponse message for the Symbol being traded. The Server needs to divide the Price1_* and Price2_* fields by this Divisor to get the prices as float values."
          ]
        },
        {
          "name": "OpenOrClose",
          "type": "OpenCloseTradeEnum",
          "description": [
            "For the description for this field, refer to OpenCloseTradeEnum."
          ]
        },
        {
          "name": "PartialFillHandling",
          "type": "PartialFillHandlingEnum",
          "description": [
            "Specifies how partial fills should be handled when when one of the orders in the OCO order set partially fills.",
            "",
            "For the possible values, refer to PartialFillHandlingEnum."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SubmitNewSingleOrder": {
      "name": "s_SubmitNewSingleOrder",
      "description": [
        "This message is used to submit a new single order into the market from the Client to the Server."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol for the order."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol."
          ]
        },
        {
          "name": "ClientOrderID",
          "type": "char",
          "description": [
            "This is the Client supplied order identifier. The Server will maintain this order identifier throughout the life of the order and always provide it back through the ClientOrderID field in the s_OrderUpdate messages for the order.",
            "",
            "This identifier cannot be an identifier used for a currently open order and it cannot be an identifier previously used in the current trading session. The trading session typically will be a 24-hour period defined by the Server. The Server shall reject an order with a client order identifier that is for a currently open order or which has already been used during the current trading session."
          ]
        },
        {
          "name": "OrderType",
          "type": "OrderTypeEnum",
          "description": [
            "The order type. For list of order types, refer to OrderTypeEnum."
          ]
        },
        {
          "name": "BuySell",
          "type": "BuySellEnum",
          "description": [
            "The side of the order. Either Buy or Sell."
          ]
        },
        {
          "name": "Price1",
          "type": "double",
          "description": [
            "This is the price of the order. This is the limit price for a Limit order, the stop price for a Stop order, or the trigger price for a Market if Touched order."
          ]
        },
        {
          "name": "Price2",
          "type": "double",
          "description": [
            "For a Stop-Limit order, this is the limit price. This only applies to Stop-Limit orders."
          ]
        },
        {
          "name": "TimeInForce",
          "type": "TimeInForceEnum",
          "description": [
            "The Time in Force for the order or orders (in the case of an OCO order).",
            "",
            "For more information, refer to TimeInForceEnum."
          ]
        },
        {
          "name": "GoodTillDateTime",
          "type": "t_DateTime",
          "description": [
            "In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies the expiration Date-Time of the order."
          ]
        },
        {
          "name": "Quantity",
          "type": "double",
          "description": [
            "The quantity of the order. The exact meaning of this will be specified by the Server implementation."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is the trade account as a text string that the order belongs to."
          ]
        },
        {
          "name": "IsAutomatedOrder",
          "type": "unsigned int8",
          "description": [
            "This is set 1 to signify the order has been submitted by an automated trading process."
          ]
        },
        {
          "name": "IsParentOrder",
          "type": "unsigned int8",
          "description": [
            "The Client will set this to 1 when the order is part of a bracket order. This indicates that this is the parent order. A bracket order will consist of a s_SubmitNewSingleOrder message followed by a s_SubmitNewOCOOrder message. The Server will use IsParentOrder as a flag to know that this message is a parent order. The Server will hold onto this order until it receives the subsequent s_SubmitNewOCOOrder message and then process all of the orders as one complete set."
          ]
        },
        {
          "name": "FreeFormText",
          "type": "char",
          "description": [
            "Optional: This is an optional text string which can be set by the Client to associate text with the order. The Server is not under any obligation to use this text and it may place a limitation on the length of this text."
          ]
        },
        {
          "name": "OpenOrClose",
          "type": "OpenCloseTradeEnum",
          "description": [
            "For the description for this field, refer to OpenCloseTradeEnum."
          ]
        },
        {
          "name": "MaxShowQuantity",
          "type": "double",
          "description": [
            "This field is provided to the exchange and represents the maximum quantity to show in the limit order book for the order."
          ]
        },
        {
          "name": "Price1AsString",
          "type": "char",
          "description": [
            "This is an optional field which may be used by the Server.",
            "",
            "This field is the order price 1 as a string."
          ]
        },
        {
          "name": "Price2AsString",
          "type": "char",
          "description": [
            "This is an optional field which may be used by the Server.",
            "",
            "This field is the order price 2 as a string."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SubmitNewSingleOrderInt": {
      "name": "s_SubmitNewSingleOrderInt",
      "description": [
        "The s_SubmitNewSingleOrder_INT message is identical to s_SubmitNewSingleOrder except that the order prices are as integers.",
        "",
        "The Client will only send this message to the Server if UseIntegerPriceOrderMessages is set in the s_LogonResponse message.",
        "",
        "When setting the Price1 and Price2 fields, multiply the order price by the FloatToIntPriceMultiplier value provided in the s_SecurityDefinitionResponse message for the Symbol being traded.",
        "",
        "This message also contains the Divisor field. This is the FloatToIntPriceMultiplier value provided in the s_SecurityDefinitionResponse message for the symbol being traded. The Server needs to divide the Price1 and Price2 fields by this Divisor to get the prices as float values."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "Symbol",
          "type": "char",
          "description": [
            "The symbol for the order."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The optional exchange for the symbol."
          ]
        },
        {
          "name": "ClientOrderID",
          "type": "char",
          "description": [
            "This is the Client supplied order identifier. The Server will maintain this order identifier throughout the life of the order and always provide it back through the ClientOrderID field in the s_OrderUpdate messages for the order.",
            "",
            "This identifier cannot be an identifier used for a currently open order and it cannot be an identifier previously used in the current trading session. The trading session typically will be a 24-hour period defined by the Server. The Server shall reject an order with a client order identifier that is for a currently open order or which has already been used during the current trading session."
          ]
        },
        {
          "name": "OrderType",
          "type": "OrderTypeEnum",
          "description": [
            "The order type. For list of order types, refer to OrderTypeEnum."
          ]
        },
        {
          "name": "BuySell",
          "type": "BuySellEnum",
          "description": [
            "The side of the order. Either Buy or Sell."
          ]
        },
        {
          "name": "Price1",
          "type": "int64",
          "description": [
            "This is the price of the order. This is the limit price for a Limit order, the stop price for a Stop order, or the trigger price for a Market if Touched order."
          ]
        },
        {
          "name": "Price2",
          "type": "int64",
          "description": [
            "For a Stop-Limit order, this is the limit price. This only applies to Stop-Limit orders."
          ]
        },
        {
          "name": "TimeInForce",
          "type": "TimeInForceEnum",
          "description": [
            "The Time in Force for the order or orders (in the case of an OCO order).",
            "",
            "For more information, refer to TimeInForceEnum."
          ]
        },
        {
          "name": "GoodTillDateTime",
          "type": "t_DateTime",
          "description": [
            "In the case of when the TimeInForce is TIF_GOOD_TILL_DATE_TIME, this specifies the expiration Date-Time of the order."
          ]
        },
        {
          "name": "Divisor",
          "type": "float",
          "description": [
            "This is the FloatToIntPriceMultiplier value provided in the s_SecurityDefinitionResponse message for the symbol being traded. The Server needs to divide the Price1 and Price2 fields by this Divisor to get the prices as float values."
          ]
        },
        {
          "name": "Quantity",
          "type": "int64",
          "description": [
            "The quantity of the order. The exact meaning of this will be specified by the Server implementation."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "This is the trade account as a text string that the order belongs to."
          ]
        },
        {
          "name": "IsAutomatedOrder",
          "type": "unsigned int8",
          "description": [
            "This is set 1 to signify the order has been submitted by an automated trading process."
          ]
        },
        {
          "name": "IsParentOrder",
          "type": "unsigned int8",
          "description": [
            "The Client will set this to 1 when the order is part of a bracket order. This indicates that this is the parent order. A bracket order will consist of a s_SubmitNewSingleOrder message followed by a s_SubmitNewOCOOrder message. The Server will use IsParentOrder as a flag to know that this message is a parent order. The Server will hold onto this order until it receives the subsequent s_SubmitNewOCOOrder message and then process all of the orders as one complete set."
          ]
        },
        {
          "name": "FreeFormText",
          "type": "char",
          "description": [
            "Optional: This is an optional text string which can be set by the Client to associate text with the order. The Server is not under any obligation to use this text and it may place a limitation on the length of this text."
          ]
        },
        {
          "name": "OpenOrClose",
          "type": "OpenCloseTradeEnum",
          "description": [
            "For the description for this field, refer to OpenCloseTradeEnum."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SymbolSearchRequest": {
      "name": "s_SymbolSearchRequest",
      "description": [
        "The s_SymbolSearchRequest message is sent by the Client to the Server to return Security Definitions matching the specified SecurityType and Exchange and where the Symbol or Description contains the specified SearchText.",
        "",
        "The SearchText can search either the Symbol or the Description field in the s_SecurityDefinitionResponse message.",
        "",
        "In either case there does not need to be an exact match. The SearchText only needs to be contained within the Symbol or the Description depending upon which field is being searched.",
        "",
        "The Server returns s_SecurityDefinitionResponse messages for all Symbols which match.",
        "",
        "If there are no matches, the Server needs to send a s_SecurityDefinitionResponse message to the Client with with all fields at their default values except for the RequestID and IsFinalMessage fields set. This will be a clear indication to the Client that the request returned no matches.",
        "",
        "If the Server is rejecting this request, then it needs to send a s_SecurityDefinitionReject message to the Client."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique identifier for this request. This same identifier will be returned in the s_SecurityDefinitionResponse message."
          ]
        },
        {
          "name": "SearchText",
          "type": "char",
          "description": [
            "The search text to search the Symbol or the Description for.",
            "",
            "If the SearchText field is an empty text string, then the server should reject the request with a s_SecurityDefinitionReject message."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The Exchange of the Symbol to search for."
          ]
        },
        {
          "name": "SecurityType",
          "type": "SecurityTypeEnum",
          "description": [
            "The Security Type of the Symbol to search for."
          ]
        },
        {
          "name": "SearchType",
          "type": "SearchTypeEnum",
          "description": [
            "This field is the search type. Can be one of two possible values. Can specify to search the Symbol or the Description."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SymbolsForExchangeRequest": {
      "name": "s_SymbolsForExchangeRequest",
      "description": [
        "This is a message from the Client to the Server to request all of the Symbols for a particular Exchange.",
        "",
        "The server will return a s_SecurityDefinitionResponse message to the Client for each Symbol returned.",
        "",
        "If the Server is rejecting this request, then it needs to send a s_SecurityDefinitionReject message to the Client."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique identifier for this request. This same identifier will be returned in the s_SecurityDefinitionResponse message."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The Exchange to return the available symbols listed on that Exchange."
          ]
        },
        {
          "name": "SecurityType",
          "type": "SecurityTypeEnum",
          "description": [
            "The optional Security Type."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_SymbolsForUnderlyingRequest": {
      "name": "s_SymbolsForUnderlyingRequest",
      "description": [
        "This is a message from the Client to the Server for requesting all of the symbols for a particular underlying symbol.",
        "",
        "For example, all of the futures contracts for a particular underlying futures symbol or all of the option symbols for a specific futures or stock symbol.",
        "",
        "The server will return a s_SecurityDefinitionResponse message to the Client for each Symbol returned.",
        "",
        "If the Server is rejecting this request, then it needs to send a s_SecurityDefinitionReject message to the Client."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique identifier for this request. This same identifier will be returned in the s_SecurityDefinitionResponse message."
          ]
        },
        {
          "name": "UnderlyingSymbol",
          "type": "char",
          "description": [
            "The underlying symbol."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "The exchange of the symbols to search for."
          ]
        },
        {
          "name": "SecurityType",
          "type": "SecurityTypeEnum",
          "description": [
            "The security type of the symbols to search for."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_TradeAccountResponse": {
      "name": "s_TradeAccountResponse",
      "description": [
        "This is a message from the Server to the Client in response to a s_TradeAccountsRequest message, providing a single trade account. There is one message for each trade account."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "TotalNumberMessages",
          "type": "int32",
          "description": [
            "This indicates the total number of Account list messages when a batch of messages is being sent. If there is only one message being sent, this will be 1."
          ]
        },
        {
          "name": "MessageNumber",
          "type": "int32",
          "description": [
            "This indicates the 1-based index of the Account list message when a batch of messages is being sent. If there is only one message being sent, this will be 1."
          ]
        },
        {
          "name": "TradeAccount",
          "type": "char",
          "description": [
            "The trade account identifier.",
            "",
            "In the case when there are no Trade Accounts available for the logged in Username, the Server will send a single s_TradeAccountResponse message to the Client and leave this field empty."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The RequestID sent in the corresponding request by the Client.",
            ""
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_TradeAccountsRequest": {
      "name": "s_TradeAccountsRequest",
      "description": [
        "This is a message from the Client to the Server to request all of the account identifiers for the logged in Username.",
        "",
        "If there are no accounts available, then the Server needs to respond with at least one s_TradeAccountResponse message containing an empty Trade Account."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "A unique request identifier for this request."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_TradingSymbolStatus": {
      "name": "s_TradingSymbolStatus",
      "description": [
        "Sent by the Server to the Client to indicate the status of the symbol in regards to whether trading is open or closed or some other intermediate state."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "SymbolID",
          "type": "unsigned int32",
          "description": [
            "This is the same SymbolID sent by the Client in the s_MarketDataRequest message which corresponds to the Symbol that the status in this message is for."
          ]
        },
        {
          "name": "Status",
          "type": "TradingStatusEnum",
          "description": [
            "The current trading status for the symbol. Can be one of the following.",
            "",
            "TRADING_STATUS_UNKNOWN = 0",
            "TRADING_STATUS_PRE_OPEN = 1",
            "TRADING_STATUS_OPEN = 2",
            "TRADING_STATUS_CLOSE = 3",
            "TRADING_STATUS_TRADING_HALT = 4"
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    },
    "s_UnderlyingSymbolsForExchangeRequest": {
      "name": "s_UnderlyingSymbolsForExchangeRequest",
      "description": [
        "This is a message from the Client to the Server to request all of the underlying symbols on a particular Exchange. For example, all of the underlying futures symbols on a particular Exchange.",
        "",
        "The server will return a s_SecurityDefinitionResponse message to the Client for each Symbol returned.",
        "",
        "If the Server is rejecting this request, then it needs to send a s_SecurityDefinitionReject message to the Client."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "RequestID",
          "type": "int32",
          "description": [
            "The unique identifier for this request. This same identifier will be returned in the s_SecurityDefinitionResponse message."
          ]
        },
        {
          "name": "Exchange",
          "type": "char",
          "description": [
            "."
          ]
        },
        {
          "name": "SecurityType",
          "type": "SecurityTypeEnum",
          "description": [
            "."
          ]
        }
      ],
      "serverToClient": false,
      "clientToServer": true
    },
    "s_UserMessage": {
      "name": "s_UserMessage",
      "description": [
        "This message from the Server to the Client is for providing a message to the user.",
        "",
        "This message can be sent even before a s_LogonResponse."
      ],
      "fields": [
        {
          "name": "Size",
          "type": "unsigned int16",
          "description": [
            "The standard message size field. Automatically set by constructor."
          ]
        },
        {
          "name": "Type",
          "type": "unsigned int16",
          "description": [
            "The standard message type field. Automatically set by constructor."
          ]
        },
        {
          "name": "UserMessage",
          "type": "char",
          "description": [
            "General message to present to user in the Client."
          ]
        },
        {
          "name": "IsPopupMessage",
          "type": "unsigned int8",
          "description": [
            "The default for this is 1 which signifies that the Server would like the Client to present the message to the user in a way which will get their attention. Otherwise, set this to 0 to give the message lower priority (just add to a log)."
          ]
        }
      ],
      "serverToClient": true,
      "clientToServer": false
    }
  },
  "types": {
    "AtBidOrAskEnum": {
      "name": "AtBidOrAskEnum",
      "short": "At Bid Or Ask Enumeration",
      "options": [
        {
          "name": "BID_ASK_UNSET",
          "value": "0"
        },
        {
          "name": "AT_BID",
          "value": "1"
        },
        {
          "name": "AT_ASK",
          "value": "2"
        }
      ]
    },
    "BuySellEnum": {
      "name": "BuySellEnum",
      "short": "Buy Sell Enumeration",
      "description": [
        "This indicates buy or sell. It can be one of the following values."
      ],
      "options": [
        {
          "name": "BUY_SELL_UNSET",
          "value": "0"
        },
        {
          "name": "BUY",
          "value": "1"
        },
        {
          "name": "SELL",
          "value": "2"
        }
      ]
    },
    "EncodingEnum": {
      "name": "EncodingEnum",
      "short": "Encoding Enumeration",
      "description": [
        "This enumeration indicates the encoding method. It can be one of the following values."
      ],
      "options": [
        {
          "name": "BINARY_ENCODING",
          "value": "0"
        },
        {
          "name": "BINARY_WITH_VARIABLE_LENGTH_STRINGS",
          "value": "1"
        },
        {
          "name": "JSON_ENCODING",
          "value": "2"
        },
        {
          "name": "JSON_COMPACT_ENCODING",
          "value": "3"
        },
        {
          "name": "PROTOCOL_BUFFERS",
          "value": "4"
        }
      ]
    },
    "FinalUpdateInBatchEnum": {
      "name": "FinalUpdateInBatchEnum",
      "short": "Final Update In Batch Enumeration",
      "description": [
        "This enumeration is for market depth updates."
      ],
      "options": [
        {
          "name": "FINAL_UPDATE_UNSET",
          "value": "0",
          "description": [
            "Indicates the value is unset."
          ]
        },
        {
          "name": "FINAL_UPDATE_TRUE",
          "value": "1",
          "description": [
            "Indicates the market depth update message is the final message in the batch."
          ]
        },
        {
          "name": "FINAL_UPDATE_FALSE",
          "value": "2",
          "description": [
            "Indicates the market depth update message is not the final update in the batch."
          ]
        },
        {
          "name": "FINAL_UPDATE_BEGIN_BATCH",
          "value": "3",
          "description": [
            "Indicates the market depth update message is the first update in the batch."
          ]
        }
      ]
    },
    "HistoricalDataIntervalEnum": {
      "name": "HistoricalDataIntervalEnum",
      "short": "Historical Data Interval Enumeration",
      "description": [
        "This indicates the time interval for historical price data records. It can be one of the following values."
      ],
      "options": [
        {
          "name": "INTERVAL_TICK",
          "value": "0"
        },
        {
          "name": "INTERVAL_1_SECOND",
          "value": "1"
        },
        {
          "name": "INTERVAL_2_SECONDS",
          "value": "2"
        },
        {
          "name": "INTERVAL_4_SECONDS",
          "value": "4"
        },
        {
          "name": "INTERVAL_5_SECONDS",
          "value": "5"
        },
        {
          "name": "INTERVAL_10_SECONDS",
          "value": "10"
        },
        {
          "name": "INTERVAL_30_SECONDS",
          "value": "30"
        },
        {
          "name": "INTERVAL_1_MINUTE",
          "value": "60"
        },
        {
          "name": "INTERVAL_1_DAY",
          "value": "86400"
        },
        {
          "name": "INTERVAL_1_WEEK",
          "value": "604800"
        }
      ]
    },
    "HistoricalPriceDataRejectReasonCodeEnum": {
      "name": "HistoricalPriceDataRejectReasonCodeEnum",
      "short": "Historical Price Data Reject Reason Code Enumeration",
      "description": [
        "The following enumerations are for the Historical Price Data Reject message."
      ],
      "options": [
        {
          "name": "HPDR_UNSET",
          "value": "0",
          "description": [
            "The historical price data reject code is unset."
          ]
        },
        {
          "name": "HPDR_UNABLE_TO_SERVE_DATA_RETRY_IN_SPECIFIED_SECONDS",
          "value": "1",
          "description": [
            "The server is unable to serve the historical data request and the request should be retried in the specified number of seconds. A properly implemented high-performance server should never utilize this reject code."
          ]
        },
        {
          "name": "HPDR_UNABLE_TO_SERVE_DATA_DO_NOT_RETRY",
          "value": "2",
          "description": [
            "The server is unable to serve the historical data request and there should be no retry."
          ]
        },
        {
          "name": "HPDR_DATA_REQUEST_OUTSIDE_BOUNDS_OF_AVAILABLE_DATA",
          "value": "3",
          "description": [
            "The Date-Time range of historical data requested is outside the bounds of the available data."
          ]
        },
        {
          "name": "HPDR_GENERAL_REJECT_ERROR",
          "value": "4",
          "description": [
            "There is another undocumented reason the server cannot accept the historical data request and it has been rejected."
          ]
        }
      ]
    },
    "LogonStatusEnum": {
      "name": "LogonStatusEnum",
      "short": "Logon Status Enumeration",
      "options": [
        {
          "name": "LOGON_SUCCESS",
          "value": "1"
        },
        {
          "name": "LOGON_ERROR",
          "value": "2"
        },
        {
          "name": "LOGON_ERROR_NO_RECONNECT",
          "value": "3"
        },
        {
          "name": "LOGON_RECONNECT_NEW_ADDRESS",
          "value": "4"
        }
      ]
    },
    "MarketDataFeedStatusEnum": {
      "name": "MarketDataFeedStatusEnum",
      "short": "Market Data Feed Status Enumeration",
      "description": [
        "This indicates if the market data feed is available it in its entirety or for an individual symbol. It can be one of the following values."
      ],
      "options": [
        {
          "name": "MARKET_DATA_FEED_STATUS_UNSET",
          "value": "0"
        },
        {
          "name": "MARKET_DATA_FEED_UNAVAILABLE",
          "value": "1"
        },
        {
          "name": "MARKET_DATA_FEED_AVAILABLE",
          "value": "2"
        }
      ]
    },
    "MarketDepthUpdateTypeEnum": {
      "name": "MarketDepthUpdateTypeEnum",
      "short": "Market Depth Update Type Enumeration",
      "description": [
        "This indicates the particular market depth update type. It can be one of the following values."
      ],
      "options": [
        {
          "name": "DEPTH_UNSET",
          "value": "0"
        },
        {
          "name": "MARKET_DEPTH_INSERT_UPDATE_LEVEL",
          "value": "1"
        },
        {
          "name": "MARKET_DEPTH_DELETE_LEVEL",
          "value": "2"
        }
      ]
    },
    "OpenCloseTradeEnum": {
      "name": "OpenCloseTradeEnum",
      "short": "Open Close Trade Enumeration",
      "description": [
        "For orders this field specifies whether the order opens a new Position or increases an existing Position, or closes an existing Position or decreases an existing Position.",
        "",
        "For order fills this field specifies whether the fill opened a new Position or increased an existing Position, or closed an existing Position or decreased an existing Position.",
        "",
        "The use of this field for new orders depends upon the particular market/security as specified by the Symbol and Exchange fields and whether the Server requires it. Clients should always try to set this field for new orders, however the Server may not use it. This field is not used for futures.",
        "",
        "It can be one of the following values."
      ],
      "options": [
        {
          "name": "TRADE_UNSET",
          "value": "0"
        },
        {
          "name": "TRADE_OPEN",
          "value": "1"
        },
        {
          "name": "TRADE_CLOSE",
          "value": "2"
        }
      ]
    },
    "OrderStatusEnum": {
      "name": "OrderStatusEnum",
      "short": "Order Status Enumeration",
      "description": [
        "This enumeration indicates the Order Status. It can be one of the following values."
      ],
      "options": [
        {
          "name": "ORDER_STATUS_UNSPECIFIED",
          "value": "0"
        },
        {
          "name": "ORDER_STATUS_ORDER_SENT",
          "value": "1"
        },
        {
          "name": "ORDER_STATUS_PENDING_OPEN",
          "value": "2"
        },
        {
          "name": "ORDER_STATUS_PENDING_CHILD",
          "value": "3"
        },
        {
          "name": "ORDER_STATUS_OPEN",
          "value": "4"
        },
        {
          "name": "ORDER_STATUS_PENDING_CANCEL_REPLACE",
          "value": "5"
        },
        {
          "name": "ORDER_STATUS_PENDING_CANCEL",
          "value": "6"
        },
        {
          "name": "ORDER_STATUS_FILLED",
          "value": "7"
        },
        {
          "name": "ORDER_STATUS_CANCELED",
          "value": "8"
        },
        {
          "name": "ORDER_STATUS_REJECTED",
          "value": "9"
        },
        {
          "name": "ORDER_STATUS_PARTIALLY_FILLED",
          "value": "10"
        }
      ]
    },
    "OrderTypeEnum": {
      "name": "OrderTypeEnum",
      "short": "Order Type Enumeration",
      "description": [
        "This indicates the order type. It can be one of the following values."
      ],
      "options": [
        {
          "name": "ORDER_TYPE_UNSET",
          "value": "0"
        },
        {
          "name": "ORDER_TYPE_MARKET",
          "value": "1"
        },
        {
          "name": "ORDER_TYPE_LIMIT",
          "value": "2"
        },
        {
          "name": "ORDER_TYPE_STOP",
          "value": "3"
        },
        {
          "name": "ORDER_TYPE_STOP_LIMIT",
          "value": "4"
        },
        {
          "name": "ORDER_TYPE_MARKET_IF_TOUCHED",
          "value": "5"
        }
      ]
    },
    "OrderUpdateReasonEnum": {
      "name": "OrderUpdateReasonEnum",
      "short": "Order Update Reason Enumeration",
      "description": [
        "This indicates the reason for sending an Order Update message. It can be one of the following values."
      ],
      "options": [
        {
          "name": "ORDER_UPDATE_REASON_UNSET",
          "value": "0"
        },
        {
          "name": "OPEN_ORDERS_REQUEST_RESPONSE",
          "value": "1"
        },
        {
          "name": "NEW_ORDER_ACCEPTED",
          "value": "2"
        },
        {
          "name": "GENERAL_ORDER_UPDATE",
          "value": "3"
        },
        {
          "name": "ORDER_FILLED",
          "value": "4"
        },
        {
          "name": "ORDER_FILLED_PARTIALLY",
          "value": "5"
        },
        {
          "name": "ORDER_CANCELED",
          "value": "6"
        },
        {
          "name": "ORDER_CANCEL_REPLACE_COMPLETE",
          "value": "7"
        },
        {
          "name": "NEW_ORDER_REJECTED",
          "value": "8"
        },
        {
          "name": "ORDER_CANCEL_REJECTED",
          "value": "9"
        },
        {
          "name": "ORDER_CANCEL_REPLACE_REJECTED",
          "value": "10"
        }
      ]
    },
    "PartialFillHandlingEnum": {
      "name": "PartialFillHandlingEnum",
      "short": "Partial Fill Handling Enumeration",
      "description": [
        "This enumeration is for the OCO order messages."
      ],
      "options": [
        {
          "name": "PARTIAL_FILL_UNSET",
          "value": "0",
          "description": [
            "Indicates no special partial fill handling."
          ]
        },
        {
          "name": "PARTIAL_FILL_HANDLING_REDUCE_QUANTITY",
          "value": "1",
          "description": [
            "This specifies that when there is a partial fill of one of the orders in the OCO order set, that the quantity of the other order needs to be reduced by the quantity of the order fill."
          ]
        },
        {
          "name": "PARTIAL_FILL_HANDLING_IMMEDIATE_CANCEL",
          "value": "2",
          "description": [
            "This specifies that when there is a partial fill of one of the orders of the OCO order set, that the other order needs to be immediately canceled."
          ]
        }
      ]
    },
    "PriceDisplayFormatEnum": {
      "name": "PriceDisplayFormatEnum",
      "short": "Price Display Format Enumeration",
      "description": [
        "This indicates the price display format for market data prices. It can be one of the following values."
      ],
      "options": [
        {
          "name": "PRICE_DISPLAY_FORMAT_UNSET",
          "value": "-1"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_0",
          "value": "0"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_1",
          "value": "1"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_2",
          "value": "2"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_3",
          "value": "3"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_4",
          "value": "4"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_5",
          "value": "5"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_6",
          "value": "6"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_7",
          "value": "7"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_8",
          "value": "8"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DECIMAL_9",
          "value": "9"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_256",
          "value": "356"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_128",
          "value": "228"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_64",
          "value": "164"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_32_QUARTERS",
          "value": "136"
        },
        {
          "name": "RICE_DISPLAY_FORMAT_DENOMINATOR_32_HALVES",
          "value": "134"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_32",
          "value": "132"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_16",
          "value": "116"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_8",
          "value": "108"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_4",
          "value": "104"
        },
        {
          "name": "PRICE_DISPLAY_FORMAT_DENOMINATOR_2",
          "value": "102"
        }
      ]
    },
    "PutCallEnum": {
      "name": "PutCallEnum",
      "short": "Put Call Enumeration",
      "description": [
        "This indicates if the option is a put or call. It can be one of the following values."
      ],
      "options": [
        {
          "name": "PC_UNSET",
          "value": "0"
        },
        {
          "name": "PC_CALL",
          "value": "1"
        },
        {
          "name": "PC_PUT",
          "value": "2"
        }
      ]
    },
    "RequestActionEnum": {
      "name": "RequestActionEnum",
      "short": "Request Action Enumeration",
      "description": [
        "This indicates the particular request action for market data and market depth requests. It can be one of the following values."
      ],
      "options": [
        {
          "name": "SUBSCRIBE",
          "value": "1"
        },
        {
          "name": "UNSUBSCRIBE",
          "value": "2"
        },
        {
          "name": "SNAPSHOT",
          "value": "3"
        }
      ]
    },
    "SearchTypeEnum": {
      "name": "SearchTypeEnum",
      "short": "Search Type Enumeration",
      "description": [
        "This indicates the Search Type. It can be one of the following values."
      ],
      "options": [
        {
          "name": "SEARCH_TYPE_UNSET",
          "value": "0"
        },
        {
          "name": "SEARCH_TYPE_BY_SYMBOL",
          "value": "1"
        },
        {
          "name": "SEARCH_TYPE_BY_DESCRIPTION",
          "value": "2"
        }
      ]
    },
    "SecurityTypeEnum": {
      "name": "SecurityTypeEnum",
      "short": "Security Type Enumeration",
      "description": [
        "This indicates the Security Type. It can be one of the following values."
      ],
      "options": [
        {
          "name": "SECURITY_TYPE_UNSET",
          "value": "0"
        },
        {
          "name": "SECURITY_TYPE_FUTURES",
          "value": "1"
        },
        {
          "name": "SECURITY_TYPE_STOCK",
          "value": "2"
        },
        {
          "name": "SECURITY_TYPE_FOREX",
          "value": "3",
          "description": [
            "(Also applies to Bitcoins)"
          ]
        },
        {
          "name": "SECURITY_TYPE_INDEX",
          "value": "4"
        },
        {
          "name": "SECURITY_TYPE_FUTURES_STRATEGY",
          "value": "5"
        },
        {
          "name": "SECURITY_TYPE_FUTURES_OPTION",
          "value": "7"
        },
        {
          "name": "SECURITY_TYPE_STOCK_OPTION",
          "value": "6"
        },
        {
          "name": "SECURITY_TYPE_INDEX_OPTION",
          "value": "8"
        },
        {
          "name": "SECURITY_TYPE_BOND",
          "value": "9"
        },
        {
          "name": "SECURITY_TYPE_MUTUAL_FUND",
          "value": "10"
        }
      ]
    },
    "TimeInForceEnum": {
      "name": "TimeInForceEnum",
      "short": "Time In Force Enumeration",
      "description": [
        "This enumeration indicates the Time in Force for orders. It can be one of the following values."
      ],
      "options": [
        {
          "name": "TIF_UNSET",
          "value": "0"
        },
        {
          "name": "TIF_DAY",
          "value": "1"
        },
        {
          "name": "TIF_GOOD_TILL_CANCELED",
          "value": "2"
        },
        {
          "name": "TIF_GOOD_TILL_DATE_TIME",
          "value": "3"
        },
        {
          "name": "TIF_IMMEDIATE_OR_CANCEL",
          "value": "4"
        },
        {
          "name": "TIF_ALL_OR_NONE",
          "value": "5"
        },
        {
          "name": "TIF_FILL_OR_KILL",
          "value": "6"
        }
      ]
    },
    "char": {
      "name": "char",
      "short": "Character",
      "description": [
        "This is a character string. The final byte is always a null terminator for binary encoding with and without a variable length strings."
      ]
    },
    "double": {
      "name": "double",
      "short": "64-bit Floating Point Value",
      "description": [
        "This is a 64-bit floating-point value."
      ]
    },
    "float": {
      "name": "float",
      "short": "32 bit Floating Point Value",
      "description": [
        "This is a 32-bit floating-point value."
      ]
    },
    "int32": {
      "name": "int32",
      "short": "32-bit Integer",
      "description": [
        "The int32 type is a 32-bit integer."
      ]
    },
    "t_DateTime": {
      "name": "t_DateTime",
      "short": "Date Time",
      "description": [
        "This is a 64-bit integer UNIX time value.",
        "",
        "This is the number of seconds since the UNIX epoch (January 1, 1970, 00:00:00 UTC).",
        "",
        "With the DTC Protocol, the time zone is always UTC for Date-Time values.",
        "",
        "In the case of Google Protocol Buffer encoding the equivalent data type used is sfixed64."
      ]
    },
    "t_DateTime4Byte": {
      "name": "t_DateTime4Byte",
      "short": "4 Byte UNIX Date-Time",
      "description": [
        "This is a 32 bit integer UNIX time value.",
        "",
        "This is the number of seconds since the UNIX epoch (January 1, 1970, 00:00:00 UTC).",
        "",
        "With the DTC Protocol, the time zone is always UTC for Date-Time values.",
        "",
        "In the case of Google Protocol Buffer encoding, the equivalent data type used is sfixed32."
      ]
    },
    "t_DateTimeWithMicrosecondsInt": {
      "name": "t_DateTimeWithMicrosecondsInt",
      "short": "Date Time With Microseconds",
      "description": [
        "This is a 64-bit integer UNIX time value.",
        "",
        "The integer portion is the number of microseconds since the UNIX epoch (January 1, 1970, 00:00:00 UTC).",
        "",
        "With the DTC Protocol, the time zone is always UTC for Date-Time values."
      ]
    },
    "t_DateTimeWithMilliseconds": {
      "name": "t_DateTimeWithMilliseconds",
      "short": "Date Time With Milliseconds",
      "description": [
        "This is a 64-bit floating-point UNIX time value.",
        "",
        "The integer portion is the number of seconds since the UNIX epoch (January 1, 1970, 00:00:00 UTC).",
        "",
        "With the DTC Protocol, the time zone is always UTC for Date-Time values.",
        "",
        "The portion of this value to the right of the decimal point is the optional number of milliseconds. Where one millisecond equals .001.",
        "",
        "In the case of Google Protocol Buffer encoding, the equivalent data type used is double."
      ]
    },
    "unsigned int16": {
      "name": "unsigned int16",
      "short": "Unsigned 16-bit Integer",
      "description": [
        "This is a 16-bit unsigned integer value."
      ]
    },
    "unsigned int32": {
      "name": "unsigned int32",
      "short": "Unsigned 32-bit Integer",
      "description": [
        "This is a 32 bit unsigned integer value."
      ]
    },
    "unsigned int8": {
      "name": "unsigned int8",
      "short": "Byte",
      "description": [
        "This is a single byte. Usually it represents a TRUE or FALSE state. Where a numeric value of 1 is TRUE and 0 is FALSE. 1 and 0 are not character values. They are integer values."
      ]
    }
  }
}